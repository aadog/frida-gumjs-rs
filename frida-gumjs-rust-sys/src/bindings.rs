/* automatically generated by rust-bindgen 0.69.4 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const G_ANALYZER_ANALYZING: u32 = 0;
pub const FALSE: u32 = 0;
pub const G_HAVE_GNUC_VISIBILITY: u32 = 1;
pub const __BIONIC__: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __bos_level: u32 = 0;
pub const __ANDROID_API_FUTURE__: u32 = 10000;
pub const __ANDROID_API__: u32 = 10000;
pub const __ANDROID_API_G__: u32 = 9;
pub const __ANDROID_API_I__: u32 = 14;
pub const __ANDROID_API_J__: u32 = 16;
pub const __ANDROID_API_J_MR1__: u32 = 17;
pub const __ANDROID_API_J_MR2__: u32 = 18;
pub const __ANDROID_API_K__: u32 = 19;
pub const __ANDROID_API_L__: u32 = 21;
pub const __ANDROID_API_L_MR1__: u32 = 22;
pub const __ANDROID_API_M__: u32 = 23;
pub const __ANDROID_API_N__: u32 = 24;
pub const __ANDROID_API_N_MR1__: u32 = 25;
pub const __ANDROID_API_O__: u32 = 26;
pub const __ANDROID_API_O_MR1__: u32 = 27;
pub const __ANDROID_API_P__: u32 = 28;
pub const __ANDROID_API_Q__: u32 = 29;
pub const __ANDROID_API_R__: u32 = 30;
pub const __ANDROID_API_S__: u32 = 31;
pub const __ANDROID_NDK__: u32 = 1;
pub const __NDK_MAJOR__: u32 = 23;
pub const __NDK_MINOR__: u32 = 0;
pub const __NDK_BETA__: u32 = 4;
pub const __NDK_BUILD__: u32 = 7344513;
pub const __NDK_CANARY__: u32 = 0;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const PASS_MAX: u32 = 128;
pub const NL_ARGMAX: u32 = 9;
pub const NL_LANGMAX: u32 = 14;
pub const NL_MSGMAX: u32 = 32767;
pub const NL_NMAX: u32 = 1;
pub const NL_SETMAX: u32 = 255;
pub const NL_TEXTMAX: u32 = 255;
pub const TMP_MAX: u32 = 308915776;
pub const CHAR_BIT: u32 = 8;
pub const LONG_BIT: u32 = 64;
pub const WORD_BIT: u32 = 32;
pub const SCHAR_MAX: u32 = 127;
pub const SCHAR_MIN: i32 = -128;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MIN: u32 = 0;
pub const CHAR_MAX: u32 = 255;
pub const USHRT_MAX: u32 = 65535;
pub const SHRT_MAX: u32 = 32767;
pub const SHRT_MIN: i32 = -32768;
pub const UINT_MAX: u32 = 4294967295;
pub const INT_MAX: u32 = 2147483647;
pub const INT_MIN: i32 = -2147483648;
pub const ULONG_MAX: i32 = -1;
pub const LONG_MAX: u64 = 9223372036854775807;
pub const LONG_MIN: i64 = -9223372036854775808;
pub const ULLONG_MAX: i32 = -1;
pub const LLONG_MAX: u64 = 9223372036854775807;
pub const LLONG_MIN: i64 = -9223372036854775808;
pub const LONG_LONG_MIN: i64 = -9223372036854775808;
pub const LONG_LONG_MAX: u64 = 9223372036854775807;
pub const ULONG_LONG_MAX: i32 = -1;
pub const UID_MAX: u32 = 4294967295;
pub const GID_MAX: u32 = 4294967295;
pub const SIZE_T_MAX: i32 = -1;
pub const SSIZE_MAX: u64 = 9223372036854775807;
pub const MB_LEN_MAX: u32 = 4;
pub const NZERO: u32 = 20;
pub const IOV_MAX: u32 = 1024;
pub const SEM_VALUE_MAX: u32 = 1073741823;
pub const _POSIX_VERSION: u32 = 200809;
pub const _POSIX2_VERSION: u32 = 200809;
pub const _XOPEN_VERSION: u32 = 700;
pub const __BIONIC_POSIX_FEATURE_MISSING: i32 = -1;
pub const _POSIX_ASYNCHRONOUS_IO: i32 = -1;
pub const _POSIX_CHOWN_RESTRICTED: u32 = 1;
pub const _POSIX_CPUTIME: u32 = 200809;
pub const _POSIX_FSYNC: u32 = 200809;
pub const _POSIX_IPV6: u32 = 200809;
pub const _POSIX_MAPPED_FILES: u32 = 200809;
pub const _POSIX_MEMLOCK_RANGE: u32 = 200809;
pub const _POSIX_MEMORY_PROTECTION: u32 = 200809;
pub const _POSIX_MESSAGE_PASSING: i32 = -1;
pub const _POSIX_MONOTONIC_CLOCK: u32 = 200809;
pub const _POSIX_NO_TRUNC: u32 = 1;
pub const _POSIX_PRIORITIZED_IO: i32 = -1;
pub const _POSIX_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_RAW_SOCKETS: u32 = 200809;
pub const _POSIX_READER_WRITER_LOCKS: u32 = 200809;
pub const _POSIX_REGEXP: u32 = 1;
pub const _POSIX_SAVED_IDS: u32 = 1;
pub const _POSIX_SEMAPHORES: u32 = 200809;
pub const _POSIX_SHARED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX_SHELL: u32 = 1;
pub const _POSIX_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_SYNCHRONIZED_IO: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200809;
pub const _POSIX_THREAD_CPUTIME: u32 = 200809;
pub const _POSIX_THREAD_PRIO_INHERIT: i32 = -1;
pub const _POSIX_THREAD_PRIO_PROTECT: i32 = -1;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_INHERIT: i32 = -1;
pub const _POSIX_THREAD_ROBUST_PRIO_PROTECT: i32 = -1;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200809;
pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_THREADS: u32 = 200809;
pub const _POSIX_TIMERS: u32 = 200809;
pub const _POSIX_TRACE: i32 = -1;
pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
pub const _POSIX_TRACE_INHERIT: i32 = -1;
pub const _POSIX_TRACE_LOG: i32 = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX_VDISABLE: u8 = 0u8;
pub const _POSIX2_C_BIND: u32 = 200809;
pub const _POSIX2_C_DEV: i32 = -1;
pub const _POSIX2_CHAR_TERM: u32 = 200809;
pub const _POSIX2_FORT_DEV: i32 = -1;
pub const _POSIX2_FORT_RUN: i32 = -1;
pub const _POSIX2_LOCALEDEF: i32 = -1;
pub const _POSIX2_SW_DEV: i32 = -1;
pub const _POSIX2_UPE: i32 = -1;
pub const _POSIX_V7_ILP32_OFF32: i32 = -1;
pub const _POSIX_V7_ILP32_OFFBIG: i32 = -1;
pub const _POSIX_V7_LP64_OFF64: u32 = 1;
pub const _POSIX_V7_LPBIG_OFFBIG: u32 = 1;
pub const _XOPEN_CRYPT: i32 = -1;
pub const _XOPEN_ENH_I18N: u32 = 1;
pub const _XOPEN_LEGACY: i32 = -1;
pub const _XOPEN_REALTIME: u32 = 1;
pub const _XOPEN_REALTIME_THREADS: u32 = 1;
pub const _XOPEN_SHM: u32 = 1;
pub const _XOPEN_STREAMS: i32 = -1;
pub const _XOPEN_UNIX: u32 = 1;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_SS_REPL_MAX: u32 = 4;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_TRACE_EVENT_NAME_MAX: u32 = 30;
pub const _POSIX_TRACE_NAME_MAX: u32 = 8;
pub const _POSIX_TRACE_SYS_MAX: u32 = 8;
pub const _POSIX_TRACE_USER_EVENT_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _XOPEN_IOV_MAX: u32 = 16;
pub const _XOPEN_NAME_MAX: u32 = 255;
pub const _XOPEN_PATH_MAX: u32 = 1024;
pub const HOST_NAME_MAX: u32 = 255;
pub const LOGIN_NAME_MAX: u32 = 256;
pub const TTY_NAME_MAX: u32 = 32;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_KEYS_MAX: u32 = 128;
pub const GLIB_STATIC_COMPILATION: u32 = 1;
pub const GOBJECT_STATIC_COMPILATION: u32 = 1;
pub const GIO_STATIC_COMPILATION: u32 = 1;
pub const GMODULE_STATIC_COMPILATION: u32 = 1;
pub const G_INTL_STATIC_COMPILATION: u32 = 1;
pub const GLIB_DYNAMIC_UNLOADING: u32 = 1;
pub const G_MINSHORT: i32 = -32768;
pub const G_MAXSHORT: u32 = 32767;
pub const G_MAXUSHORT: u32 = 65535;
pub const G_MININT: i32 = -2147483648;
pub const G_MAXINT: u32 = 2147483647;
pub const G_MAXUINT: u32 = 4294967295;
pub const G_MINLONG: i64 = -9223372036854775808;
pub const G_MAXLONG: u64 = 9223372036854775807;
pub const G_MAXULONG: i32 = -1;
pub const G_GINT16_MODIFIER: &[u8; 2] = b"h\0";
pub const G_GINT16_FORMAT: &[u8; 3] = b"hi\0";
pub const G_GUINT16_FORMAT: &[u8; 3] = b"hu\0";
pub const G_GINT32_MODIFIER: &[u8; 1] = b"\0";
pub const G_GINT32_FORMAT: &[u8; 2] = b"i\0";
pub const G_GUINT32_FORMAT: &[u8; 2] = b"u\0";
pub const G_HAVE_GINT64: u32 = 1;
pub const G_GINT64_MODIFIER: &[u8; 2] = b"l\0";
pub const G_GINT64_FORMAT: &[u8; 3] = b"li\0";
pub const G_GUINT64_FORMAT: &[u8; 3] = b"lu\0";
pub const GLIB_SIZEOF_VOID_P: u32 = 8;
pub const GLIB_SIZEOF_LONG: u32 = 8;
pub const GLIB_SIZEOF_SIZE_T: u32 = 8;
pub const GLIB_SIZEOF_SSIZE_T: u32 = 8;
pub const G_GSIZE_MODIFIER: &[u8; 2] = b"l\0";
pub const G_GSSIZE_MODIFIER: &[u8; 2] = b"l\0";
pub const G_GSIZE_FORMAT: &[u8; 3] = b"lu\0";
pub const G_GSSIZE_FORMAT: &[u8; 3] = b"li\0";
pub const G_MAXSIZE: i32 = -1;
pub const G_MINSSIZE: i64 = -9223372036854775808;
pub const G_MAXSSIZE: u64 = 9223372036854775807;
pub const G_GOFFSET_MODIFIER: &[u8; 2] = b"l\0";
pub const G_GOFFSET_FORMAT: &[u8; 3] = b"li\0";
pub const G_POLLFD_FORMAT: &[u8; 3] = b"%d\0";
pub const G_GINTPTR_MODIFIER: &[u8; 2] = b"l\0";
pub const G_GINTPTR_FORMAT: &[u8; 3] = b"li\0";
pub const G_GUINTPTR_FORMAT: &[u8; 3] = b"lu\0";
pub const GLIB_MAJOR_VERSION: u32 = 2;
pub const GLIB_MINOR_VERSION: u32 = 75;
pub const GLIB_MICRO_VERSION: u32 = 0;
pub const G_HAVE_ISO_VARARGS: u32 = 1;
pub const G_HAVE_GROWING_STACK: u32 = 0;
pub const G_HAVE_GNUC_VARARGS: u32 = 1;
pub const G_MODULE_SUFFIX: &[u8; 3] = b"so\0";
pub const G_PID_FORMAT: &[u8; 2] = b"i\0";
pub const GLIB_SYSDEF_AF_UNIX: u32 = 1;
pub const GLIB_SYSDEF_AF_INET: u32 = 2;
pub const GLIB_SYSDEF_AF_INET6: u32 = 10;
pub const GLIB_SYSDEF_MSG_OOB: u32 = 1;
pub const GLIB_SYSDEF_MSG_PEEK: u32 = 2;
pub const GLIB_SYSDEF_MSG_DONTROUTE: u32 = 4;
pub const G_DIR_SEPARATOR: u8 = 47u8;
pub const G_DIR_SEPARATOR_S: &[u8; 2] = b"/\0";
pub const G_SEARCHPATH_SEPARATOR: u8 = 58u8;
pub const G_SEARCHPATH_SEPARATOR_S: &[u8; 2] = b":\0";
pub const WCHAR_MIN: u8 = 0u8;
pub const INT8_MIN: i32 = -128;
pub const INT8_MAX: u32 = 127;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST8_MAX: u32 = 127;
pub const UINT8_MAX: u32 = 255;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_FAST8_MAX: u32 = 255;
pub const INT16_MIN: i32 = -32768;
pub const INT16_MAX: u32 = 32767;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const UINT16_MAX: u32 = 65535;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const INT32_MIN: i32 = -2147483648;
pub const INT32_MAX: u32 = 2147483647;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 4294967295;
pub const WINT_MIN: u32 = 0;
pub const __BITS_PER_LONG: u32 = 64;
pub const __FD_SETSIZE: u32 = 1024;
pub const ITIMER_REAL: u32 = 0;
pub const ITIMER_VIRTUAL: u32 = 1;
pub const ITIMER_PROF: u32 = 2;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_SGI_CYCLE: u32 = 10;
pub const CLOCK_TAI: u32 = 11;
pub const MAX_CLOCKS: u32 = 16;
pub const CLOCKS_MASK: u32 = 1;
pub const CLOCKS_MONO: u32 = 1;
pub const TIMER_ABSTIME: u32 = 1;
pub const FPSIMD_MAGIC: u32 = 1179680769;
pub const ESR_MAGIC: u32 = 1163088385;
pub const EXTRA_MAGIC: u32 = 1163416577;
pub const SVE_MAGIC: u32 = 1398162689;
pub const __SVE_VQ_BYTES: u32 = 16;
pub const __SVE_VQ_MIN: u32 = 1;
pub const __SVE_VQ_MAX: u32 = 512;
pub const __SVE_VL_MIN: u32 = 16;
pub const __SVE_VL_MAX: u32 = 8192;
pub const __SVE_NUM_ZREGS: u32 = 32;
pub const __SVE_NUM_PREGS: u32 = 16;
pub const __SVE_ZREGS_OFFSET: u32 = 0;
pub const SVE_VQ_BYTES: u32 = 16;
pub const SVE_VQ_MIN: u32 = 1;
pub const SVE_VQ_MAX: u32 = 512;
pub const SVE_VL_MIN: u32 = 16;
pub const SVE_VL_MAX: u32 = 8192;
pub const SVE_NUM_ZREGS: u32 = 32;
pub const SVE_NUM_PREGS: u32 = 16;
pub const SA_RESTORER: u32 = 67108864;
pub const MINSIGSTKSZ: u32 = 5120;
pub const SIGSTKSZ: u32 = 16384;
pub const _KERNEL__NSIG: u32 = 64;
pub const _NSIG_BPW: u32 = 64;
pub const _NSIG_WORDS: u32 = 1;
pub const SIGHUP: u32 = 1;
pub const SIGINT: u32 = 2;
pub const SIGQUIT: u32 = 3;
pub const SIGILL: u32 = 4;
pub const SIGTRAP: u32 = 5;
pub const SIGABRT: u32 = 6;
pub const SIGIOT: u32 = 6;
pub const SIGBUS: u32 = 7;
pub const SIGFPE: u32 = 8;
pub const SIGKILL: u32 = 9;
pub const SIGUSR1: u32 = 10;
pub const SIGSEGV: u32 = 11;
pub const SIGUSR2: u32 = 12;
pub const SIGPIPE: u32 = 13;
pub const SIGALRM: u32 = 14;
pub const SIGTERM: u32 = 15;
pub const SIGSTKFLT: u32 = 16;
pub const SIGCHLD: u32 = 17;
pub const SIGCONT: u32 = 18;
pub const SIGSTOP: u32 = 19;
pub const SIGTSTP: u32 = 20;
pub const SIGTTIN: u32 = 21;
pub const SIGTTOU: u32 = 22;
pub const SIGURG: u32 = 23;
pub const SIGXCPU: u32 = 24;
pub const SIGXFSZ: u32 = 25;
pub const SIGVTALRM: u32 = 26;
pub const SIGPROF: u32 = 27;
pub const SIGWINCH: u32 = 28;
pub const SIGIO: u32 = 29;
pub const SIGPOLL: u32 = 29;
pub const SIGPWR: u32 = 30;
pub const SIGSYS: u32 = 31;
pub const SIGUNUSED: u32 = 31;
pub const __SIGRTMIN: u32 = 32;
pub const __SIGRTMAX: u32 = 64;
pub const SA_NOCLDSTOP: u32 = 1;
pub const SA_NOCLDWAIT: u32 = 2;
pub const SA_SIGINFO: u32 = 4;
pub const SA_UNSUPPORTED: u32 = 1024;
pub const SA_EXPOSE_TAGBITS: u32 = 2048;
pub const SA_ONSTACK: u32 = 134217728;
pub const SA_RESTART: u32 = 268435456;
pub const SA_NODEFER: u32 = 1073741824;
pub const SA_RESETHAND: u32 = 2147483648;
pub const SA_NOMASK: u32 = 1073741824;
pub const SA_ONESHOT: u32 = 2147483648;
pub const SIG_BLOCK: u32 = 0;
pub const SIG_UNBLOCK: u32 = 1;
pub const SIG_SETMASK: u32 = 2;
pub const SI_MAX_SIZE: u32 = 128;
pub const SI_USER: u32 = 0;
pub const SI_KERNEL: u32 = 128;
pub const SI_QUEUE: i32 = -1;
pub const SI_TIMER: i32 = -2;
pub const SI_MESGQ: i32 = -3;
pub const SI_ASYNCIO: i32 = -4;
pub const SI_SIGIO: i32 = -5;
pub const SI_TKILL: i32 = -6;
pub const SI_DETHREAD: i32 = -7;
pub const SI_ASYNCNL: i32 = -60;
pub const ILL_ILLOPC: u32 = 1;
pub const ILL_ILLOPN: u32 = 2;
pub const ILL_ILLADR: u32 = 3;
pub const ILL_ILLTRP: u32 = 4;
pub const ILL_PRVOPC: u32 = 5;
pub const ILL_PRVREG: u32 = 6;
pub const ILL_COPROC: u32 = 7;
pub const ILL_BADSTK: u32 = 8;
pub const ILL_BADIADDR: u32 = 9;
pub const __ILL_BREAK: u32 = 10;
pub const __ILL_BNDMOD: u32 = 11;
pub const NSIGILL: u32 = 11;
pub const FPE_INTDIV: u32 = 1;
pub const FPE_INTOVF: u32 = 2;
pub const FPE_FLTDIV: u32 = 3;
pub const FPE_FLTOVF: u32 = 4;
pub const FPE_FLTUND: u32 = 5;
pub const FPE_FLTRES: u32 = 6;
pub const FPE_FLTINV: u32 = 7;
pub const FPE_FLTSUB: u32 = 8;
pub const __FPE_DECOVF: u32 = 9;
pub const __FPE_DECDIV: u32 = 10;
pub const __FPE_DECERR: u32 = 11;
pub const __FPE_INVASC: u32 = 12;
pub const __FPE_INVDEC: u32 = 13;
pub const FPE_FLTUNK: u32 = 14;
pub const FPE_CONDTRAP: u32 = 15;
pub const NSIGFPE: u32 = 15;
pub const SEGV_MAPERR: u32 = 1;
pub const SEGV_ACCERR: u32 = 2;
pub const SEGV_BNDERR: u32 = 3;
pub const SEGV_PKUERR: u32 = 4;
pub const SEGV_ACCADI: u32 = 5;
pub const SEGV_ADIDERR: u32 = 6;
pub const SEGV_ADIPERR: u32 = 7;
pub const SEGV_MTEAERR: u32 = 8;
pub const SEGV_MTESERR: u32 = 9;
pub const NSIGSEGV: u32 = 9;
pub const BUS_ADRALN: u32 = 1;
pub const BUS_ADRERR: u32 = 2;
pub const BUS_OBJERR: u32 = 3;
pub const BUS_MCEERR_AR: u32 = 4;
pub const BUS_MCEERR_AO: u32 = 5;
pub const NSIGBUS: u32 = 5;
pub const TRAP_BRKPT: u32 = 1;
pub const TRAP_TRACE: u32 = 2;
pub const TRAP_BRANCH: u32 = 3;
pub const TRAP_HWBKPT: u32 = 4;
pub const TRAP_UNK: u32 = 5;
pub const NSIGTRAP: u32 = 5;
pub const CLD_EXITED: u32 = 1;
pub const CLD_KILLED: u32 = 2;
pub const CLD_DUMPED: u32 = 3;
pub const CLD_TRAPPED: u32 = 4;
pub const CLD_STOPPED: u32 = 5;
pub const CLD_CONTINUED: u32 = 6;
pub const NSIGCHLD: u32 = 6;
pub const POLL_IN: u32 = 1;
pub const POLL_OUT: u32 = 2;
pub const POLL_MSG: u32 = 3;
pub const POLL_ERR: u32 = 4;
pub const POLL_PRI: u32 = 5;
pub const POLL_HUP: u32 = 6;
pub const NSIGPOLL: u32 = 6;
pub const SYS_SECCOMP: u32 = 1;
pub const SYS_USER_DISPATCH: u32 = 2;
pub const NSIGSYS: u32 = 2;
pub const EMT_TAGOVF: u32 = 1;
pub const NSIGEMT: u32 = 1;
pub const SIGEV_SIGNAL: u32 = 0;
pub const SIGEV_NONE: u32 = 1;
pub const SIGEV_THREAD: u32 = 2;
pub const SIGEV_THREAD_ID: u32 = 4;
pub const SIGEV_MAX_SIZE: u32 = 64;
pub const SS_ONSTACK: u32 = 1;
pub const SS_DISABLE: u32 = 2;
pub const SS_AUTODISARM: u32 = 2147483648;
pub const SS_FLAG_BITS: u32 = 2147483648;
pub const _NSIG: u32 = 65;
pub const NSIG: u32 = 65;
pub const PAGE_SIZE: u32 = 4096;
pub const PAGE_MASK: i32 = -4096;
pub const NGREG: u32 = 34;
pub const FD_SETSIZE: u32 = 1024;
pub const CLOCKS_PER_SEC: u32 = 1000000;
pub const TIME_UTC: u32 = 1;
pub const G_E: f64 = 2.718281828459045;
pub const G_LN2: f64 = 0.6931471805599453;
pub const G_LN10: f64 = 2.302585092994046;
pub const G_PI: f64 = 3.141592653589793;
pub const G_PI_2: f64 = 1.5707963267948966;
pub const G_PI_4: f64 = 0.7853981633974483;
pub const G_SQRT2: f64 = 1.4142135623730951;
pub const G_LITTLE_ENDIAN: u32 = 1234;
pub const G_BIG_ENDIAN: u32 = 4321;
pub const G_PDP_ENDIAN: u32 = 3412;
pub const G_IEEE754_FLOAT_BIAS: u32 = 127;
pub const G_IEEE754_DOUBLE_BIAS: u32 = 1023;
pub const G_LOG_2_BASE_10: f64 = 0.3010299956639812;
pub const __GNUC_VA_LIST: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const P_ALL: u32 = 0;
pub const P_PID: u32 = 1;
pub const P_PGID: u32 = 2;
pub const P_PIDFD: u32 = 3;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 1024;
pub const EOF: i32 = -1;
pub const FOPEN_MAX: u32 = 20;
pub const FILENAME_MAX: u32 = 4096;
pub const L_tmpnam: u32 = 4096;
pub const P_tmpdir: &[u8; 6] = b"/tmp/\0";
pub const L_ctermid: u32 = 1024;
pub const STRUCT_MALLINFO_DECLARED: u32 = 1;
pub const M_DECAY_TIME: i32 = -100;
pub const M_PURGE: i32 = -101;
pub const M_THREAD_DISABLE_MEM_INIT: i32 = -103;
pub const M_CACHE_COUNT_MAX: i32 = -200;
pub const M_CACHE_SIZE_MAX: i32 = -201;
pub const M_TSDS_COUNT_MAX: i32 = -202;
pub const M_BIONIC_ZERO_INIT: i32 = -203;
pub const M_BIONIC_SET_HEAP_TAGGING_LEVEL: i32 = -204;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const RAND_MAX: u32 = 2147483647;
pub const G_DATALIST_FLAGS_MASK: u32 = 3;
pub const G_DATE_BAD_JULIAN: u32 = 0;
pub const G_DATE_BAD_DAY: u32 = 0;
pub const G_DATE_BAD_YEAR: u32 = 0;
pub const DT_UNKNOWN: u32 = 0;
pub const DT_FIFO: u32 = 1;
pub const DT_CHR: u32 = 2;
pub const DT_DIR: u32 = 4;
pub const DT_BLK: u32 = 6;
pub const DT_REG: u32 = 8;
pub const DT_LNK: u32 = 10;
pub const DT_SOCK: u32 = 12;
pub const DT_WHT: u32 = 14;
pub const G_MEM_ALIGN: u32 = 8;
pub const G_HOOK_FLAG_USER_SHIFT: u32 = 4;
pub const G_PRIORITY_HIGH: i32 = -100;
pub const G_PRIORITY_DEFAULT: u32 = 0;
pub const G_PRIORITY_HIGH_IDLE: u32 = 100;
pub const G_PRIORITY_DEFAULT_IDLE: u32 = 200;
pub const G_PRIORITY_LOW: u32 = 300;
pub const G_SOURCE_REMOVE: u32 = 0;
pub const G_UNICHAR_MAX_DECOMPOSITION_LENGTH: u32 = 18;
pub const G_KQUEUE_WAKEUP_HANDLE: i32 = -42;
pub const G_KEY_FILE_DESKTOP_GROUP: &[u8; 14] = b"Desktop Entry\0";
pub const G_KEY_FILE_DESKTOP_KEY_TYPE: &[u8; 5] = b"Type\0";
pub const G_KEY_FILE_DESKTOP_KEY_VERSION: &[u8; 8] = b"Version\0";
pub const G_KEY_FILE_DESKTOP_KEY_NAME: &[u8; 5] = b"Name\0";
pub const G_KEY_FILE_DESKTOP_KEY_GENERIC_NAME: &[u8; 12] = b"GenericName\0";
pub const G_KEY_FILE_DESKTOP_KEY_NO_DISPLAY: &[u8; 10] = b"NoDisplay\0";
pub const G_KEY_FILE_DESKTOP_KEY_COMMENT: &[u8; 8] = b"Comment\0";
pub const G_KEY_FILE_DESKTOP_KEY_ICON: &[u8; 5] = b"Icon\0";
pub const G_KEY_FILE_DESKTOP_KEY_HIDDEN: &[u8; 7] = b"Hidden\0";
pub const G_KEY_FILE_DESKTOP_KEY_ONLY_SHOW_IN: &[u8; 11] = b"OnlyShowIn\0";
pub const G_KEY_FILE_DESKTOP_KEY_NOT_SHOW_IN: &[u8; 10] = b"NotShowIn\0";
pub const G_KEY_FILE_DESKTOP_KEY_TRY_EXEC: &[u8; 8] = b"TryExec\0";
pub const G_KEY_FILE_DESKTOP_KEY_EXEC: &[u8; 5] = b"Exec\0";
pub const G_KEY_FILE_DESKTOP_KEY_PATH: &[u8; 5] = b"Path\0";
pub const G_KEY_FILE_DESKTOP_KEY_TERMINAL: &[u8; 9] = b"Terminal\0";
pub const G_KEY_FILE_DESKTOP_KEY_MIME_TYPE: &[u8; 9] = b"MimeType\0";
pub const G_KEY_FILE_DESKTOP_KEY_CATEGORIES: &[u8; 11] = b"Categories\0";
pub const G_KEY_FILE_DESKTOP_KEY_STARTUP_NOTIFY: &[u8; 14] = b"StartupNotify\0";
pub const G_KEY_FILE_DESKTOP_KEY_STARTUP_WM_CLASS: &[u8; 15] = b"StartupWMClass\0";
pub const G_KEY_FILE_DESKTOP_KEY_URL: &[u8; 4] = b"URL\0";
pub const G_KEY_FILE_DESKTOP_KEY_DBUS_ACTIVATABLE: &[u8; 16] = b"DBusActivatable\0";
pub const G_KEY_FILE_DESKTOP_KEY_ACTIONS: &[u8; 8] = b"Actions\0";
pub const G_KEY_FILE_DESKTOP_TYPE_APPLICATION: &[u8; 12] = b"Application\0";
pub const G_KEY_FILE_DESKTOP_TYPE_LINK: &[u8; 5] = b"Link\0";
pub const G_KEY_FILE_DESKTOP_TYPE_DIRECTORY: &[u8; 10] = b"Directory\0";
pub const G_LOG_LEVEL_USER_SHIFT: u32 = 8;
pub const G_OPTION_REMAINING: &[u8; 1] = b"\0";
pub const G_CSET_A_2_Z: &[u8; 27] = b"ABCDEFGHIJKLMNOPQRSTUVWXYZ\0";
pub const G_CSET_a_2_z: &[u8; 27] = b"abcdefghijklmnopqrstuvwxyz\0";
pub const G_CSET_DIGITS: &[u8; 11] = b"0123456789\0";
pub const G_CSET_LATINC : & [u8 ; 31] = b"\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD8\xD9\xDA\xDB\xDC\xDD\xDE\0" ;
pub const G_CSET_LATINS : & [u8 ; 33] = b"\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF\0" ;
pub const G_STR_DELIMITERS: &[u8; 8] = b"_-|> <.\0";
pub const G_ASCII_DTOSTR_BUF_SIZE: u32 = 39;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EDEADLK: u32 = 35;
pub const ENAMETOOLONG: u32 = 36;
pub const ENOLCK: u32 = 37;
pub const ENOSYS: u32 = 38;
pub const ENOTEMPTY: u32 = 39;
pub const ELOOP: u32 = 40;
pub const EWOULDBLOCK: u32 = 11;
pub const ENOMSG: u32 = 42;
pub const EIDRM: u32 = 43;
pub const ECHRNG: u32 = 44;
pub const EL2NSYNC: u32 = 45;
pub const EL3HLT: u32 = 46;
pub const EL3RST: u32 = 47;
pub const ELNRNG: u32 = 48;
pub const EUNATCH: u32 = 49;
pub const ENOCSI: u32 = 50;
pub const EL2HLT: u32 = 51;
pub const EBADE: u32 = 52;
pub const EBADR: u32 = 53;
pub const EXFULL: u32 = 54;
pub const ENOANO: u32 = 55;
pub const EBADRQC: u32 = 56;
pub const EBADSLT: u32 = 57;
pub const EDEADLOCK: u32 = 35;
pub const EBFONT: u32 = 59;
pub const ENOSTR: u32 = 60;
pub const ENODATA: u32 = 61;
pub const ETIME: u32 = 62;
pub const ENOSR: u32 = 63;
pub const ENONET: u32 = 64;
pub const ENOPKG: u32 = 65;
pub const EREMOTE: u32 = 66;
pub const ENOLINK: u32 = 67;
pub const EADV: u32 = 68;
pub const ESRMNT: u32 = 69;
pub const ECOMM: u32 = 70;
pub const EPROTO: u32 = 71;
pub const EMULTIHOP: u32 = 72;
pub const EDOTDOT: u32 = 73;
pub const EBADMSG: u32 = 74;
pub const EOVERFLOW: u32 = 75;
pub const ENOTUNIQ: u32 = 76;
pub const EBADFD: u32 = 77;
pub const EREMCHG: u32 = 78;
pub const ELIBACC: u32 = 79;
pub const ELIBBAD: u32 = 80;
pub const ELIBSCN: u32 = 81;
pub const ELIBMAX: u32 = 82;
pub const ELIBEXEC: u32 = 83;
pub const EILSEQ: u32 = 84;
pub const ERESTART: u32 = 85;
pub const ESTRPIPE: u32 = 86;
pub const EUSERS: u32 = 87;
pub const ENOTSOCK: u32 = 88;
pub const EDESTADDRREQ: u32 = 89;
pub const EMSGSIZE: u32 = 90;
pub const EPROTOTYPE: u32 = 91;
pub const ENOPROTOOPT: u32 = 92;
pub const EPROTONOSUPPORT: u32 = 93;
pub const ESOCKTNOSUPPORT: u32 = 94;
pub const EOPNOTSUPP: u32 = 95;
pub const EPFNOSUPPORT: u32 = 96;
pub const EAFNOSUPPORT: u32 = 97;
pub const EADDRINUSE: u32 = 98;
pub const EADDRNOTAVAIL: u32 = 99;
pub const ENETDOWN: u32 = 100;
pub const ENETUNREACH: u32 = 101;
pub const ENETRESET: u32 = 102;
pub const ECONNABORTED: u32 = 103;
pub const ECONNRESET: u32 = 104;
pub const ENOBUFS: u32 = 105;
pub const EISCONN: u32 = 106;
pub const ENOTCONN: u32 = 107;
pub const ESHUTDOWN: u32 = 108;
pub const ETOOMANYREFS: u32 = 109;
pub const ETIMEDOUT: u32 = 110;
pub const ECONNREFUSED: u32 = 111;
pub const EHOSTDOWN: u32 = 112;
pub const EHOSTUNREACH: u32 = 113;
pub const EALREADY: u32 = 114;
pub const EINPROGRESS: u32 = 115;
pub const ESTALE: u32 = 116;
pub const EUCLEAN: u32 = 117;
pub const ENOTNAM: u32 = 118;
pub const ENAVAIL: u32 = 119;
pub const EISNAM: u32 = 120;
pub const EREMOTEIO: u32 = 121;
pub const EDQUOT: u32 = 122;
pub const ENOMEDIUM: u32 = 123;
pub const EMEDIUMTYPE: u32 = 124;
pub const ECANCELED: u32 = 125;
pub const ENOKEY: u32 = 126;
pub const EKEYEXPIRED: u32 = 127;
pub const EKEYREVOKED: u32 = 128;
pub const EKEYREJECTED: u32 = 129;
pub const EOWNERDEAD: u32 = 130;
pub const ENOTRECOVERABLE: u32 = 131;
pub const ERFKILL: u32 = 132;
pub const EHWPOISON: u32 = 133;
pub const ENOTSUP: u32 = 95;
pub const G_TEST_OPTION_ISOLATE_DIRS: &[u8; 13] = b"isolate_dirs\0";
pub const G_USEC_PER_SEC: u32 = 1000000;
pub const G_URI_RESERVED_CHARS_GENERIC_DELIMITERS: &[u8; 8] = b":/?#[]@\0";
pub const G_URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS: &[u8; 12] = b"!$&'()*+,;=\0";
pub const G_URI_RESERVED_CHARS_ALLOWED_IN_PATH_ELEMENT: &[u8; 14] = b"!$&'()*+,;=:@\0";
pub const G_URI_RESERVED_CHARS_ALLOWED_IN_PATH: &[u8; 15] = b"!$&'()*+,;=:@/\0";
pub const G_URI_RESERVED_CHARS_ALLOWED_IN_USERINFO: &[u8; 13] = b"!$&'()*+,;=:\0";
pub const G_ALLOC_ONLY: u32 = 1;
pub const G_ALLOC_AND_FREE: u32 = 2;
pub const G_ALLOCATOR_LIST: u32 = 1;
pub const G_ALLOCATOR_SLIST: u32 = 2;
pub const G_ALLOCATOR_NODE: u32 = 3;
pub const CSIGNAL: u32 = 255;
pub const CLONE_VM: u32 = 256;
pub const CLONE_FS: u32 = 512;
pub const CLONE_FILES: u32 = 1024;
pub const CLONE_SIGHAND: u32 = 2048;
pub const CLONE_PIDFD: u32 = 4096;
pub const CLONE_PTRACE: u32 = 8192;
pub const CLONE_VFORK: u32 = 16384;
pub const CLONE_PARENT: u32 = 32768;
pub const CLONE_THREAD: u32 = 65536;
pub const CLONE_NEWNS: u32 = 131072;
pub const CLONE_SYSVSEM: u32 = 262144;
pub const CLONE_SETTLS: u32 = 524288;
pub const CLONE_PARENT_SETTID: u32 = 1048576;
pub const CLONE_CHILD_CLEARTID: u32 = 2097152;
pub const CLONE_DETACHED: u32 = 4194304;
pub const CLONE_UNTRACED: u32 = 8388608;
pub const CLONE_CHILD_SETTID: u32 = 16777216;
pub const CLONE_NEWCGROUP: u32 = 33554432;
pub const CLONE_NEWUTS: u32 = 67108864;
pub const CLONE_NEWIPC: u32 = 134217728;
pub const CLONE_NEWUSER: u32 = 268435456;
pub const CLONE_NEWPID: u32 = 536870912;
pub const CLONE_NEWNET: u32 = 1073741824;
pub const CLONE_IO: u32 = 2147483648;
pub const CLONE_CLEAR_SIGHAND: u64 = 4294967296;
pub const CLONE_INTO_CGROUP: u64 = 8589934592;
pub const CLONE_NEWTIME: u32 = 128;
pub const CLONE_ARGS_SIZE_VER0: u32 = 64;
pub const CLONE_ARGS_SIZE_VER1: u32 = 80;
pub const CLONE_ARGS_SIZE_VER2: u32 = 88;
pub const SCHED_NORMAL: u32 = 0;
pub const SCHED_FIFO: u32 = 1;
pub const SCHED_RR: u32 = 2;
pub const SCHED_BATCH: u32 = 3;
pub const SCHED_IDLE: u32 = 5;
pub const SCHED_DEADLINE: u32 = 6;
pub const SCHED_RESET_ON_FORK: u32 = 1073741824;
pub const SCHED_FLAG_RESET_ON_FORK: u32 = 1;
pub const SCHED_FLAG_RECLAIM: u32 = 2;
pub const SCHED_FLAG_DL_OVERRUN: u32 = 4;
pub const SCHED_FLAG_KEEP_POLICY: u32 = 8;
pub const SCHED_FLAG_KEEP_PARAMS: u32 = 16;
pub const SCHED_FLAG_UTIL_CLAMP_MIN: u32 = 32;
pub const SCHED_FLAG_UTIL_CLAMP_MAX: u32 = 64;
pub const SCHED_FLAG_KEEP_ALL: u32 = 24;
pub const SCHED_FLAG_UTIL_CLAMP: u32 = 96;
pub const SCHED_FLAG_ALL: u32 = 127;
pub const SCHED_OTHER: u32 = 0;
pub const PTHREAD_ONCE_INIT: u32 = 0;
pub const PTHREAD_BARRIER_SERIAL_THREAD: i32 = -1;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const PTHREAD_CREATE_DETACHED: u32 = 1;
pub const PTHREAD_CREATE_JOINABLE: u32 = 0;
pub const PTHREAD_EXPLICIT_SCHED: u32 = 0;
pub const PTHREAD_INHERIT_SCHED: u32 = 1;
pub const PTHREAD_PRIO_NONE: u32 = 0;
pub const PTHREAD_PRIO_INHERIT: u32 = 1;
pub const PTHREAD_PROCESS_PRIVATE: u32 = 0;
pub const PTHREAD_PROCESS_SHARED: u32 = 1;
pub const PTHREAD_SCOPE_SYSTEM: u32 = 0;
pub const PTHREAD_SCOPE_PROCESS: u32 = 1;
pub const G_TYPE_FUNDAMENTAL_SHIFT: u32 = 2;
pub const G_TYPE_RESERVED_GLIB_FIRST: u32 = 22;
pub const G_TYPE_RESERVED_GLIB_LAST: u32 = 31;
pub const G_TYPE_RESERVED_BSE_FIRST: u32 = 32;
pub const G_TYPE_RESERVED_BSE_LAST: u32 = 48;
pub const G_TYPE_RESERVED_USER_FIRST: u32 = 49;
pub const G_VALUE_NOCOPY_CONTENTS: u32 = 134217728;
pub const G_PARAM_MASK: u32 = 255;
pub const G_PARAM_USER_SHIFT: u32 = 8;
pub const G_SIGNAL_FLAGS_MASK: u32 = 511;
pub const G_SIGNAL_MATCH_MASK: u32 = 63;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const _SC_ARG_MAX: u32 = 0;
pub const _SC_BC_BASE_MAX: u32 = 1;
pub const _SC_BC_DIM_MAX: u32 = 2;
pub const _SC_BC_SCALE_MAX: u32 = 3;
pub const _SC_BC_STRING_MAX: u32 = 4;
pub const _SC_CHILD_MAX: u32 = 5;
pub const _SC_CLK_TCK: u32 = 6;
pub const _SC_COLL_WEIGHTS_MAX: u32 = 7;
pub const _SC_EXPR_NEST_MAX: u32 = 8;
pub const _SC_LINE_MAX: u32 = 9;
pub const _SC_NGROUPS_MAX: u32 = 10;
pub const _SC_OPEN_MAX: u32 = 11;
pub const _SC_PASS_MAX: u32 = 12;
pub const _SC_2_C_BIND: u32 = 13;
pub const _SC_2_C_DEV: u32 = 14;
pub const _SC_2_C_VERSION: u32 = 15;
pub const _SC_2_CHAR_TERM: u32 = 16;
pub const _SC_2_FORT_DEV: u32 = 17;
pub const _SC_2_FORT_RUN: u32 = 18;
pub const _SC_2_LOCALEDEF: u32 = 19;
pub const _SC_2_SW_DEV: u32 = 20;
pub const _SC_2_UPE: u32 = 21;
pub const _SC_2_VERSION: u32 = 22;
pub const _SC_JOB_CONTROL: u32 = 23;
pub const _SC_SAVED_IDS: u32 = 24;
pub const _SC_VERSION: u32 = 25;
pub const _SC_RE_DUP_MAX: u32 = 26;
pub const _SC_STREAM_MAX: u32 = 27;
pub const _SC_TZNAME_MAX: u32 = 28;
pub const _SC_XOPEN_CRYPT: u32 = 29;
pub const _SC_XOPEN_ENH_I18N: u32 = 30;
pub const _SC_XOPEN_SHM: u32 = 31;
pub const _SC_XOPEN_VERSION: u32 = 32;
pub const _SC_XOPEN_XCU_VERSION: u32 = 33;
pub const _SC_XOPEN_REALTIME: u32 = 34;
pub const _SC_XOPEN_REALTIME_THREADS: u32 = 35;
pub const _SC_XOPEN_LEGACY: u32 = 36;
pub const _SC_ATEXIT_MAX: u32 = 37;
pub const _SC_IOV_MAX: u32 = 38;
pub const _SC_UIO_MAXIOV: u32 = 38;
pub const _SC_PAGESIZE: u32 = 39;
pub const _SC_PAGE_SIZE: u32 = 40;
pub const _SC_XOPEN_UNIX: u32 = 41;
pub const _SC_XBS5_ILP32_OFF32: u32 = 42;
pub const _SC_XBS5_ILP32_OFFBIG: u32 = 43;
pub const _SC_XBS5_LP64_OFF64: u32 = 44;
pub const _SC_XBS5_LPBIG_OFFBIG: u32 = 45;
pub const _SC_AIO_LISTIO_MAX: u32 = 46;
pub const _SC_AIO_MAX: u32 = 47;
pub const _SC_AIO_PRIO_DELTA_MAX: u32 = 48;
pub const _SC_DELAYTIMER_MAX: u32 = 49;
pub const _SC_MQ_OPEN_MAX: u32 = 50;
pub const _SC_MQ_PRIO_MAX: u32 = 51;
pub const _SC_RTSIG_MAX: u32 = 52;
pub const _SC_SEM_NSEMS_MAX: u32 = 53;
pub const _SC_SEM_VALUE_MAX: u32 = 54;
pub const _SC_SIGQUEUE_MAX: u32 = 55;
pub const _SC_TIMER_MAX: u32 = 56;
pub const _SC_ASYNCHRONOUS_IO: u32 = 57;
pub const _SC_FSYNC: u32 = 58;
pub const _SC_MAPPED_FILES: u32 = 59;
pub const _SC_MEMLOCK: u32 = 60;
pub const _SC_MEMLOCK_RANGE: u32 = 61;
pub const _SC_MEMORY_PROTECTION: u32 = 62;
pub const _SC_MESSAGE_PASSING: u32 = 63;
pub const _SC_PRIORITIZED_IO: u32 = 64;
pub const _SC_PRIORITY_SCHEDULING: u32 = 65;
pub const _SC_REALTIME_SIGNALS: u32 = 66;
pub const _SC_SEMAPHORES: u32 = 67;
pub const _SC_SHARED_MEMORY_OBJECTS: u32 = 68;
pub const _SC_SYNCHRONIZED_IO: u32 = 69;
pub const _SC_TIMERS: u32 = 70;
pub const _SC_GETGR_R_SIZE_MAX: u32 = 71;
pub const _SC_GETPW_R_SIZE_MAX: u32 = 72;
pub const _SC_LOGIN_NAME_MAX: u32 = 73;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: u32 = 74;
pub const _SC_THREAD_KEYS_MAX: u32 = 75;
pub const _SC_THREAD_STACK_MIN: u32 = 76;
pub const _SC_THREAD_THREADS_MAX: u32 = 77;
pub const _SC_TTY_NAME_MAX: u32 = 78;
pub const _SC_THREADS: u32 = 79;
pub const _SC_THREAD_ATTR_STACKADDR: u32 = 80;
pub const _SC_THREAD_ATTR_STACKSIZE: u32 = 81;
pub const _SC_THREAD_PRIORITY_SCHEDULING: u32 = 82;
pub const _SC_THREAD_PRIO_INHERIT: u32 = 83;
pub const _SC_THREAD_PRIO_PROTECT: u32 = 84;
pub const _SC_THREAD_SAFE_FUNCTIONS: u32 = 85;
pub const _SC_NPROCESSORS_CONF: u32 = 96;
pub const _SC_NPROCESSORS_ONLN: u32 = 97;
pub const _SC_PHYS_PAGES: u32 = 98;
pub const _SC_AVPHYS_PAGES: u32 = 99;
pub const _SC_MONOTONIC_CLOCK: u32 = 100;
pub const _SC_2_PBS: u32 = 101;
pub const _SC_2_PBS_ACCOUNTING: u32 = 102;
pub const _SC_2_PBS_CHECKPOINT: u32 = 103;
pub const _SC_2_PBS_LOCATE: u32 = 104;
pub const _SC_2_PBS_MESSAGE: u32 = 105;
pub const _SC_2_PBS_TRACK: u32 = 106;
pub const _SC_ADVISORY_INFO: u32 = 107;
pub const _SC_BARRIERS: u32 = 108;
pub const _SC_CLOCK_SELECTION: u32 = 109;
pub const _SC_CPUTIME: u32 = 110;
pub const _SC_HOST_NAME_MAX: u32 = 111;
pub const _SC_IPV6: u32 = 112;
pub const _SC_RAW_SOCKETS: u32 = 113;
pub const _SC_READER_WRITER_LOCKS: u32 = 114;
pub const _SC_REGEXP: u32 = 115;
pub const _SC_SHELL: u32 = 116;
pub const _SC_SPAWN: u32 = 117;
pub const _SC_SPIN_LOCKS: u32 = 118;
pub const _SC_SPORADIC_SERVER: u32 = 119;
pub const _SC_SS_REPL_MAX: u32 = 120;
pub const _SC_SYMLOOP_MAX: u32 = 121;
pub const _SC_THREAD_CPUTIME: u32 = 122;
pub const _SC_THREAD_PROCESS_SHARED: u32 = 123;
pub const _SC_THREAD_ROBUST_PRIO_INHERIT: u32 = 124;
pub const _SC_THREAD_ROBUST_PRIO_PROTECT: u32 = 125;
pub const _SC_THREAD_SPORADIC_SERVER: u32 = 126;
pub const _SC_TIMEOUTS: u32 = 127;
pub const _SC_TRACE: u32 = 128;
pub const _SC_TRACE_EVENT_FILTER: u32 = 129;
pub const _SC_TRACE_EVENT_NAME_MAX: u32 = 130;
pub const _SC_TRACE_INHERIT: u32 = 131;
pub const _SC_TRACE_LOG: u32 = 132;
pub const _SC_TRACE_NAME_MAX: u32 = 133;
pub const _SC_TRACE_SYS_MAX: u32 = 134;
pub const _SC_TRACE_USER_EVENT_MAX: u32 = 135;
pub const _SC_TYPED_MEMORY_OBJECTS: u32 = 136;
pub const _SC_V7_ILP32_OFF32: u32 = 137;
pub const _SC_V7_ILP32_OFFBIG: u32 = 138;
pub const _SC_V7_LP64_OFF64: u32 = 139;
pub const _SC_V7_LPBIG_OFFBIG: u32 = 140;
pub const _SC_XOPEN_STREAMS: u32 = 141;
pub const _SC_XOPEN_UUCP: u32 = 142;
pub const _SC_LEVEL1_ICACHE_SIZE: u32 = 143;
pub const _SC_LEVEL1_ICACHE_ASSOC: u32 = 144;
pub const _SC_LEVEL1_ICACHE_LINESIZE: u32 = 145;
pub const _SC_LEVEL1_DCACHE_SIZE: u32 = 146;
pub const _SC_LEVEL1_DCACHE_ASSOC: u32 = 147;
pub const _SC_LEVEL1_DCACHE_LINESIZE: u32 = 148;
pub const _SC_LEVEL2_CACHE_SIZE: u32 = 149;
pub const _SC_LEVEL2_CACHE_ASSOC: u32 = 150;
pub const _SC_LEVEL2_CACHE_LINESIZE: u32 = 151;
pub const _SC_LEVEL3_CACHE_SIZE: u32 = 152;
pub const _SC_LEVEL3_CACHE_ASSOC: u32 = 153;
pub const _SC_LEVEL3_CACHE_LINESIZE: u32 = 154;
pub const _SC_LEVEL4_CACHE_SIZE: u32 = 155;
pub const _SC_LEVEL4_CACHE_ASSOC: u32 = 156;
pub const _SC_LEVEL4_CACHE_LINESIZE: u32 = 157;
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const F_OK: u32 = 0;
pub const X_OK: u32 = 1;
pub const W_OK: u32 = 2;
pub const R_OK: u32 = 4;
pub const _PC_FILESIZEBITS: u32 = 0;
pub const _PC_LINK_MAX: u32 = 1;
pub const _PC_MAX_CANON: u32 = 2;
pub const _PC_MAX_INPUT: u32 = 3;
pub const _PC_NAME_MAX: u32 = 4;
pub const _PC_PATH_MAX: u32 = 5;
pub const _PC_PIPE_BUF: u32 = 6;
pub const _PC_2_SYMLINKS: u32 = 7;
pub const _PC_ALLOC_SIZE_MIN: u32 = 8;
pub const _PC_REC_INCR_XFER_SIZE: u32 = 9;
pub const _PC_REC_MAX_XFER_SIZE: u32 = 10;
pub const _PC_REC_MIN_XFER_SIZE: u32 = 11;
pub const _PC_REC_XFER_ALIGN: u32 = 12;
pub const _PC_SYMLINK_MAX: u32 = 13;
pub const _PC_CHOWN_RESTRICTED: u32 = 14;
pub const _PC_NO_TRUNC: u32 = 15;
pub const _PC_VDISABLE: u32 = 16;
pub const _PC_ASYNC_IO: u32 = 17;
pub const _PC_PRIO_IO: u32 = 18;
pub const _PC_SYNC_IO: u32 = 19;
pub const G_DEBUG_CONTROLLER_EXTENSION_POINT_NAME: &[u8; 21] = b"gio-debug-controller\0";
pub const G_DRIVE_IDENTIFIER_KIND_UNIX_DEVICE: &[u8; 12] = b"unix-device\0";
pub const G_FILE_ATTRIBUTE_STANDARD_TYPE: &[u8; 15] = b"standard::type\0";
pub const G_FILE_ATTRIBUTE_STANDARD_IS_HIDDEN: &[u8; 20] = b"standard::is-hidden\0";
pub const G_FILE_ATTRIBUTE_STANDARD_IS_BACKUP: &[u8; 20] = b"standard::is-backup\0";
pub const G_FILE_ATTRIBUTE_STANDARD_IS_SYMLINK: &[u8; 21] = b"standard::is-symlink\0";
pub const G_FILE_ATTRIBUTE_STANDARD_IS_VIRTUAL: &[u8; 21] = b"standard::is-virtual\0";
pub const G_FILE_ATTRIBUTE_STANDARD_IS_VOLATILE: &[u8; 22] = b"standard::is-volatile\0";
pub const G_FILE_ATTRIBUTE_STANDARD_NAME: &[u8; 15] = b"standard::name\0";
pub const G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME: &[u8; 23] = b"standard::display-name\0";
pub const G_FILE_ATTRIBUTE_STANDARD_EDIT_NAME: &[u8; 20] = b"standard::edit-name\0";
pub const G_FILE_ATTRIBUTE_STANDARD_COPY_NAME: &[u8; 20] = b"standard::copy-name\0";
pub const G_FILE_ATTRIBUTE_STANDARD_DESCRIPTION: &[u8; 22] = b"standard::description\0";
pub const G_FILE_ATTRIBUTE_STANDARD_ICON: &[u8; 15] = b"standard::icon\0";
pub const G_FILE_ATTRIBUTE_STANDARD_SYMBOLIC_ICON: &[u8; 24] = b"standard::symbolic-icon\0";
pub const G_FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE: &[u8; 23] = b"standard::content-type\0";
pub const G_FILE_ATTRIBUTE_STANDARD_FAST_CONTENT_TYPE: &[u8; 28] = b"standard::fast-content-type\0";
pub const G_FILE_ATTRIBUTE_STANDARD_SIZE: &[u8; 15] = b"standard::size\0";
pub const G_FILE_ATTRIBUTE_STANDARD_ALLOCATED_SIZE: &[u8; 25] = b"standard::allocated-size\0";
pub const G_FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET: &[u8; 25] = b"standard::symlink-target\0";
pub const G_FILE_ATTRIBUTE_STANDARD_TARGET_URI: &[u8; 21] = b"standard::target-uri\0";
pub const G_FILE_ATTRIBUTE_STANDARD_SORT_ORDER: &[u8; 21] = b"standard::sort-order\0";
pub const G_FILE_ATTRIBUTE_ETAG_VALUE: &[u8; 12] = b"etag::value\0";
pub const G_FILE_ATTRIBUTE_ID_FILE: &[u8; 9] = b"id::file\0";
pub const G_FILE_ATTRIBUTE_ID_FILESYSTEM: &[u8; 15] = b"id::filesystem\0";
pub const G_FILE_ATTRIBUTE_ACCESS_CAN_READ: &[u8; 17] = b"access::can-read\0";
pub const G_FILE_ATTRIBUTE_ACCESS_CAN_WRITE: &[u8; 18] = b"access::can-write\0";
pub const G_FILE_ATTRIBUTE_ACCESS_CAN_EXECUTE: &[u8; 20] = b"access::can-execute\0";
pub const G_FILE_ATTRIBUTE_ACCESS_CAN_DELETE: &[u8; 19] = b"access::can-delete\0";
pub const G_FILE_ATTRIBUTE_ACCESS_CAN_TRASH: &[u8; 18] = b"access::can-trash\0";
pub const G_FILE_ATTRIBUTE_ACCESS_CAN_RENAME: &[u8; 19] = b"access::can-rename\0";
pub const G_FILE_ATTRIBUTE_MOUNTABLE_CAN_MOUNT: &[u8; 21] = b"mountable::can-mount\0";
pub const G_FILE_ATTRIBUTE_MOUNTABLE_CAN_UNMOUNT: &[u8; 23] = b"mountable::can-unmount\0";
pub const G_FILE_ATTRIBUTE_MOUNTABLE_CAN_EJECT: &[u8; 21] = b"mountable::can-eject\0";
pub const G_FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE: &[u8; 23] = b"mountable::unix-device\0";
pub const G_FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE_FILE: &[u8; 28] = b"mountable::unix-device-file\0";
pub const G_FILE_ATTRIBUTE_MOUNTABLE_HAL_UDI: &[u8; 19] = b"mountable::hal-udi\0";
pub const G_FILE_ATTRIBUTE_MOUNTABLE_CAN_START: &[u8; 21] = b"mountable::can-start\0";
pub const G_FILE_ATTRIBUTE_MOUNTABLE_CAN_START_DEGRADED: &[u8; 30] =
    b"mountable::can-start-degraded\0";
pub const G_FILE_ATTRIBUTE_MOUNTABLE_CAN_STOP: &[u8; 20] = b"mountable::can-stop\0";
pub const G_FILE_ATTRIBUTE_MOUNTABLE_START_STOP_TYPE: &[u8; 27] = b"mountable::start-stop-type\0";
pub const G_FILE_ATTRIBUTE_MOUNTABLE_CAN_POLL: &[u8; 20] = b"mountable::can-poll\0";
pub const G_FILE_ATTRIBUTE_MOUNTABLE_IS_MEDIA_CHECK_AUTOMATIC: &[u8; 36] =
    b"mountable::is-media-check-automatic\0";
pub const G_FILE_ATTRIBUTE_TIME_MODIFIED: &[u8; 15] = b"time::modified\0";
pub const G_FILE_ATTRIBUTE_TIME_MODIFIED_USEC: &[u8; 20] = b"time::modified-usec\0";
pub const G_FILE_ATTRIBUTE_TIME_MODIFIED_NSEC: &[u8; 20] = b"time::modified-nsec\0";
pub const G_FILE_ATTRIBUTE_TIME_ACCESS: &[u8; 13] = b"time::access\0";
pub const G_FILE_ATTRIBUTE_TIME_ACCESS_USEC: &[u8; 18] = b"time::access-usec\0";
pub const G_FILE_ATTRIBUTE_TIME_ACCESS_NSEC: &[u8; 18] = b"time::access-nsec\0";
pub const G_FILE_ATTRIBUTE_TIME_CHANGED: &[u8; 14] = b"time::changed\0";
pub const G_FILE_ATTRIBUTE_TIME_CHANGED_USEC: &[u8; 19] = b"time::changed-usec\0";
pub const G_FILE_ATTRIBUTE_TIME_CHANGED_NSEC: &[u8; 19] = b"time::changed-nsec\0";
pub const G_FILE_ATTRIBUTE_TIME_CREATED: &[u8; 14] = b"time::created\0";
pub const G_FILE_ATTRIBUTE_TIME_CREATED_USEC: &[u8; 19] = b"time::created-usec\0";
pub const G_FILE_ATTRIBUTE_TIME_CREATED_NSEC: &[u8; 19] = b"time::created-nsec\0";
pub const G_FILE_ATTRIBUTE_UNIX_DEVICE: &[u8; 13] = b"unix::device\0";
pub const G_FILE_ATTRIBUTE_UNIX_INODE: &[u8; 12] = b"unix::inode\0";
pub const G_FILE_ATTRIBUTE_UNIX_MODE: &[u8; 11] = b"unix::mode\0";
pub const G_FILE_ATTRIBUTE_UNIX_NLINK: &[u8; 12] = b"unix::nlink\0";
pub const G_FILE_ATTRIBUTE_UNIX_UID: &[u8; 10] = b"unix::uid\0";
pub const G_FILE_ATTRIBUTE_UNIX_GID: &[u8; 10] = b"unix::gid\0";
pub const G_FILE_ATTRIBUTE_UNIX_RDEV: &[u8; 11] = b"unix::rdev\0";
pub const G_FILE_ATTRIBUTE_UNIX_BLOCK_SIZE: &[u8; 17] = b"unix::block-size\0";
pub const G_FILE_ATTRIBUTE_UNIX_BLOCKS: &[u8; 13] = b"unix::blocks\0";
pub const G_FILE_ATTRIBUTE_UNIX_IS_MOUNTPOINT: &[u8; 20] = b"unix::is-mountpoint\0";
pub const G_FILE_ATTRIBUTE_DOS_IS_ARCHIVE: &[u8; 16] = b"dos::is-archive\0";
pub const G_FILE_ATTRIBUTE_DOS_IS_SYSTEM: &[u8; 15] = b"dos::is-system\0";
pub const G_FILE_ATTRIBUTE_DOS_IS_MOUNTPOINT: &[u8; 19] = b"dos::is-mountpoint\0";
pub const G_FILE_ATTRIBUTE_DOS_REPARSE_POINT_TAG: &[u8; 23] = b"dos::reparse-point-tag\0";
pub const G_FILE_ATTRIBUTE_OWNER_USER: &[u8; 12] = b"owner::user\0";
pub const G_FILE_ATTRIBUTE_OWNER_USER_REAL: &[u8; 17] = b"owner::user-real\0";
pub const G_FILE_ATTRIBUTE_OWNER_GROUP: &[u8; 13] = b"owner::group\0";
pub const G_FILE_ATTRIBUTE_THUMBNAIL_PATH: &[u8; 16] = b"thumbnail::path\0";
pub const G_FILE_ATTRIBUTE_THUMBNAILING_FAILED: &[u8; 18] = b"thumbnail::failed\0";
pub const G_FILE_ATTRIBUTE_THUMBNAIL_IS_VALID: &[u8; 20] = b"thumbnail::is-valid\0";
pub const G_FILE_ATTRIBUTE_PREVIEW_ICON: &[u8; 14] = b"preview::icon\0";
pub const G_FILE_ATTRIBUTE_FILESYSTEM_SIZE: &[u8; 17] = b"filesystem::size\0";
pub const G_FILE_ATTRIBUTE_FILESYSTEM_FREE: &[u8; 17] = b"filesystem::free\0";
pub const G_FILE_ATTRIBUTE_FILESYSTEM_USED: &[u8; 17] = b"filesystem::used\0";
pub const G_FILE_ATTRIBUTE_FILESYSTEM_TYPE: &[u8; 17] = b"filesystem::type\0";
pub const G_FILE_ATTRIBUTE_FILESYSTEM_READONLY: &[u8; 21] = b"filesystem::readonly\0";
pub const G_FILE_ATTRIBUTE_FILESYSTEM_USE_PREVIEW: &[u8; 24] = b"filesystem::use-preview\0";
pub const G_FILE_ATTRIBUTE_FILESYSTEM_REMOTE: &[u8; 19] = b"filesystem::remote\0";
pub const G_FILE_ATTRIBUTE_GVFS_BACKEND: &[u8; 14] = b"gvfs::backend\0";
pub const G_FILE_ATTRIBUTE_SELINUX_CONTEXT: &[u8; 17] = b"selinux::context\0";
pub const G_FILE_ATTRIBUTE_TRASH_ITEM_COUNT: &[u8; 18] = b"trash::item-count\0";
pub const G_FILE_ATTRIBUTE_TRASH_ORIG_PATH: &[u8; 17] = b"trash::orig-path\0";
pub const G_FILE_ATTRIBUTE_TRASH_DELETION_DATE: &[u8; 21] = b"trash::deletion-date\0";
pub const G_FILE_ATTRIBUTE_RECENT_MODIFIED: &[u8; 17] = b"recent::modified\0";
pub const G_MEMORY_MONITOR_EXTENSION_POINT_NAME: &[u8; 19] = b"gio-memory-monitor\0";
pub const G_MENU_ATTRIBUTE_ACTION: &[u8; 7] = b"action\0";
pub const G_MENU_ATTRIBUTE_ACTION_NAMESPACE: &[u8; 17] = b"action-namespace\0";
pub const G_MENU_ATTRIBUTE_TARGET: &[u8; 7] = b"target\0";
pub const G_MENU_ATTRIBUTE_LABEL: &[u8; 6] = b"label\0";
pub const G_MENU_ATTRIBUTE_ICON: &[u8; 5] = b"icon\0";
pub const G_MENU_LINK_SUBMENU: &[u8; 8] = b"submenu\0";
pub const G_MENU_LINK_SECTION: &[u8; 8] = b"section\0";
pub const G_VOLUME_MONITOR_EXTENSION_POINT_NAME: &[u8; 19] = b"gio-volume-monitor\0";
pub const G_NATIVE_VOLUME_MONITOR_EXTENSION_POINT_NAME: &[u8; 26] = b"gio-native-volume-monitor\0";
pub const G_NETWORK_MONITOR_EXTENSION_POINT_NAME: &[u8; 20] = b"gio-network-monitor\0";
pub const G_POWER_PROFILE_MONITOR_EXTENSION_POINT_NAME: &[u8; 26] = b"gio-power-profile-monitor\0";
pub const G_PROXY_EXTENSION_POINT_NAME: &[u8; 10] = b"gio-proxy\0";
pub const G_PROXY_RESOLVER_EXTENSION_POINT_NAME: &[u8; 19] = b"gio-proxy-resolver\0";
pub const G_TLS_BACKEND_EXTENSION_POINT_NAME: &[u8; 16] = b"gio-tls-backend\0";
pub const G_TLS_DATABASE_PURPOSE_AUTHENTICATE_SERVER: &[u8; 18] = b"1.3.6.1.5.5.7.3.1\0";
pub const G_TLS_DATABASE_PURPOSE_AUTHENTICATE_CLIENT: &[u8; 18] = b"1.3.6.1.5.5.7.3.2\0";
pub const G_VFS_EXTENSION_POINT_NAME: &[u8; 8] = b"gio-vfs\0";
pub const G_VOLUME_IDENTIFIER_KIND_UNIX_DEVICE: &[u8; 12] = b"unix-device\0";
pub const G_VOLUME_IDENTIFIER_KIND_LABEL: &[u8; 6] = b"label\0";
pub const G_VOLUME_IDENTIFIER_KIND_UUID: &[u8; 5] = b"uuid\0";
pub const G_VOLUME_IDENTIFIER_KIND_NFS_MOUNT: &[u8; 10] = b"nfs-mount\0";
pub const G_VOLUME_IDENTIFIER_KIND_CLASS: &[u8; 6] = b"class\0";
pub const GUM_NATIVE_ABI_IS_WINDOWS: u32 = 0;
pub const GUM_NATIVE_ABI_IS_UNIX: u32 = 1;
pub const GUM_MAX_PATH: u32 = 260;
pub const GUM_MAX_TYPE_NAME: u32 = 16;
pub const GUM_MAX_SYMBOL_NAME: u32 = 2048;
pub const GUM_MAX_THREADS: u32 = 768;
pub const GUM_MAX_CALL_DEPTH: u32 = 32;
pub const GUM_MAX_BACKTRACE_DEPTH: u32 = 16;
pub const GUM_MAX_WORST_CASE_INFO_SIZE: u32 = 128;
pub const GUM_MAX_LISTENERS_PER_FUNCTION: u32 = 2;
pub const GUM_MAX_LISTENER_DATA: u32 = 1024;
pub const GUM_MAX_THREAD_RANGES: u32 = 2;
pub const GUM_RED_ZONE_SIZE: u32 = 128;
pub const GUM_INT2_MASK: u32 = 3;
pub const GUM_INT3_MASK: u32 = 7;
pub const GUM_INT4_MASK: u32 = 15;
pub const GUM_INT5_MASK: u32 = 31;
pub const GUM_INT6_MASK: u32 = 63;
pub const GUM_INT8_MASK: u32 = 255;
pub const GUM_INT10_MASK: u32 = 1023;
pub const GUM_INT11_MASK: u32 = 2047;
pub const GUM_INT12_MASK: u32 = 4095;
pub const GUM_INT14_MASK: u32 = 16383;
pub const GUM_INT16_MASK: u32 = 65535;
pub const GUM_INT18_MASK: u32 = 262143;
pub const GUM_INT19_MASK: u32 = 524287;
pub const GUM_INT24_MASK: u32 = 16777215;
pub const GUM_INT26_MASK: u32 = 67108863;
pub const GUM_INT28_MASK: u32 = 268435455;
pub const GUM_INT32_MASK: u32 = 4294967295;
pub const GUM_API_SIZE_NONE: i32 = -1;
pub const GUM_DARWIN_PORT_NULL: u32 = 0;
pub const GUM_DARWIN_EXPORT_KIND_MASK: u32 = 3;
pub const _JBLEN: u32 = 32;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const __PRI_64_prefix: &[u8; 2] = b"l\0";
pub const __PRI_PTR_prefix: &[u8; 2] = b"l\0";
pub const __PRI_FAST_prefix: &[u8; 2] = b"l\0";
pub const PRId8: &[u8; 2] = b"d\0";
pub const PRId16: &[u8; 2] = b"d\0";
pub const PRId32: &[u8; 2] = b"d\0";
pub const PRId64: &[u8; 3] = b"ld\0";
pub const PRIdLEAST8: &[u8; 2] = b"d\0";
pub const PRIdLEAST16: &[u8; 2] = b"d\0";
pub const PRIdLEAST32: &[u8; 2] = b"d\0";
pub const PRIdLEAST64: &[u8; 3] = b"ld\0";
pub const PRIdFAST8: &[u8; 2] = b"d\0";
pub const PRIdFAST16: &[u8; 3] = b"ld\0";
pub const PRIdFAST32: &[u8; 3] = b"ld\0";
pub const PRIdFAST64: &[u8; 3] = b"ld\0";
pub const PRIdMAX: &[u8; 3] = b"jd\0";
pub const PRIdPTR: &[u8; 3] = b"ld\0";
pub const PRIi8: &[u8; 2] = b"i\0";
pub const PRIi16: &[u8; 2] = b"i\0";
pub const PRIi32: &[u8; 2] = b"i\0";
pub const PRIi64: &[u8; 3] = b"li\0";
pub const PRIiLEAST8: &[u8; 2] = b"i\0";
pub const PRIiLEAST16: &[u8; 2] = b"i\0";
pub const PRIiLEAST32: &[u8; 2] = b"i\0";
pub const PRIiLEAST64: &[u8; 3] = b"li\0";
pub const PRIiFAST8: &[u8; 2] = b"i\0";
pub const PRIiFAST16: &[u8; 3] = b"li\0";
pub const PRIiFAST32: &[u8; 3] = b"li\0";
pub const PRIiFAST64: &[u8; 3] = b"li\0";
pub const PRIiMAX: &[u8; 3] = b"ji\0";
pub const PRIiPTR: &[u8; 3] = b"li\0";
pub const PRIo8: &[u8; 2] = b"o\0";
pub const PRIo16: &[u8; 2] = b"o\0";
pub const PRIo32: &[u8; 2] = b"o\0";
pub const PRIo64: &[u8; 3] = b"lo\0";
pub const PRIoLEAST8: &[u8; 2] = b"o\0";
pub const PRIoLEAST16: &[u8; 2] = b"o\0";
pub const PRIoLEAST32: &[u8; 2] = b"o\0";
pub const PRIoLEAST64: &[u8; 3] = b"lo\0";
pub const PRIoFAST8: &[u8; 2] = b"o\0";
pub const PRIoFAST16: &[u8; 3] = b"lo\0";
pub const PRIoFAST32: &[u8; 3] = b"lo\0";
pub const PRIoFAST64: &[u8; 3] = b"lo\0";
pub const PRIoMAX: &[u8; 3] = b"jo\0";
pub const PRIoPTR: &[u8; 3] = b"lo\0";
pub const PRIu8: &[u8; 2] = b"u\0";
pub const PRIu16: &[u8; 2] = b"u\0";
pub const PRIu32: &[u8; 2] = b"u\0";
pub const PRIu64: &[u8; 3] = b"lu\0";
pub const PRIuLEAST8: &[u8; 2] = b"u\0";
pub const PRIuLEAST16: &[u8; 2] = b"u\0";
pub const PRIuLEAST32: &[u8; 2] = b"u\0";
pub const PRIuLEAST64: &[u8; 3] = b"lu\0";
pub const PRIuFAST8: &[u8; 2] = b"u\0";
pub const PRIuFAST16: &[u8; 3] = b"lu\0";
pub const PRIuFAST32: &[u8; 3] = b"lu\0";
pub const PRIuFAST64: &[u8; 3] = b"lu\0";
pub const PRIuMAX: &[u8; 3] = b"ju\0";
pub const PRIuPTR: &[u8; 3] = b"lu\0";
pub const PRIx8: &[u8; 2] = b"x\0";
pub const PRIx16: &[u8; 2] = b"x\0";
pub const PRIx32: &[u8; 2] = b"x\0";
pub const PRIx64: &[u8; 3] = b"lx\0";
pub const PRIxLEAST8: &[u8; 2] = b"x\0";
pub const PRIxLEAST16: &[u8; 2] = b"x\0";
pub const PRIxLEAST32: &[u8; 2] = b"x\0";
pub const PRIxLEAST64: &[u8; 3] = b"lx\0";
pub const PRIxFAST8: &[u8; 2] = b"x\0";
pub const PRIxFAST16: &[u8; 3] = b"lx\0";
pub const PRIxFAST32: &[u8; 3] = b"lx\0";
pub const PRIxFAST64: &[u8; 3] = b"lx\0";
pub const PRIxMAX: &[u8; 3] = b"jx\0";
pub const PRIxPTR: &[u8; 3] = b"lx\0";
pub const PRIX8: &[u8; 2] = b"X\0";
pub const PRIX16: &[u8; 2] = b"X\0";
pub const PRIX32: &[u8; 2] = b"X\0";
pub const PRIX64: &[u8; 3] = b"lX\0";
pub const PRIXLEAST8: &[u8; 2] = b"X\0";
pub const PRIXLEAST16: &[u8; 2] = b"X\0";
pub const PRIXLEAST32: &[u8; 2] = b"X\0";
pub const PRIXLEAST64: &[u8; 3] = b"lX\0";
pub const PRIXFAST8: &[u8; 2] = b"X\0";
pub const PRIXFAST16: &[u8; 3] = b"lX\0";
pub const PRIXFAST32: &[u8; 3] = b"lX\0";
pub const PRIXFAST64: &[u8; 3] = b"lX\0";
pub const PRIXMAX: &[u8; 3] = b"jX\0";
pub const PRIXPTR: &[u8; 3] = b"lX\0";
pub const SCNd8: &[u8; 4] = b"hhd\0";
pub const SCNd16: &[u8; 3] = b"hd\0";
pub const SCNd32: &[u8; 2] = b"d\0";
pub const SCNd64: &[u8; 3] = b"ld\0";
pub const SCNdLEAST8: &[u8; 4] = b"hhd\0";
pub const SCNdLEAST16: &[u8; 3] = b"hd\0";
pub const SCNdLEAST32: &[u8; 2] = b"d\0";
pub const SCNdLEAST64: &[u8; 3] = b"ld\0";
pub const SCNdFAST8: &[u8; 4] = b"hhd\0";
pub const SCNdFAST16: &[u8; 3] = b"ld\0";
pub const SCNdFAST32: &[u8; 3] = b"ld\0";
pub const SCNdFAST64: &[u8; 3] = b"ld\0";
pub const SCNdMAX: &[u8; 3] = b"jd\0";
pub const SCNdPTR: &[u8; 3] = b"ld\0";
pub const SCNi8: &[u8; 4] = b"hhi\0";
pub const SCNi16: &[u8; 3] = b"hi\0";
pub const SCNi32: &[u8; 2] = b"i\0";
pub const SCNi64: &[u8; 3] = b"li\0";
pub const SCNiLEAST8: &[u8; 4] = b"hhi\0";
pub const SCNiLEAST16: &[u8; 3] = b"hi\0";
pub const SCNiLEAST32: &[u8; 2] = b"i\0";
pub const SCNiLEAST64: &[u8; 3] = b"li\0";
pub const SCNiFAST8: &[u8; 4] = b"hhi\0";
pub const SCNiFAST16: &[u8; 3] = b"li\0";
pub const SCNiFAST32: &[u8; 3] = b"li\0";
pub const SCNiFAST64: &[u8; 3] = b"li\0";
pub const SCNiMAX: &[u8; 3] = b"ji\0";
pub const SCNiPTR: &[u8; 3] = b"li\0";
pub const SCNo8: &[u8; 4] = b"hho\0";
pub const SCNo16: &[u8; 3] = b"ho\0";
pub const SCNo32: &[u8; 2] = b"o\0";
pub const SCNo64: &[u8; 3] = b"lo\0";
pub const SCNoLEAST8: &[u8; 4] = b"hho\0";
pub const SCNoLEAST16: &[u8; 3] = b"ho\0";
pub const SCNoLEAST32: &[u8; 2] = b"o\0";
pub const SCNoLEAST64: &[u8; 3] = b"lo\0";
pub const SCNoFAST8: &[u8; 4] = b"hho\0";
pub const SCNoFAST16: &[u8; 3] = b"lo\0";
pub const SCNoFAST32: &[u8; 3] = b"lo\0";
pub const SCNoFAST64: &[u8; 3] = b"lo\0";
pub const SCNoMAX: &[u8; 3] = b"jo\0";
pub const SCNoPTR: &[u8; 3] = b"lo\0";
pub const SCNu8: &[u8; 4] = b"hhu\0";
pub const SCNu16: &[u8; 3] = b"hu\0";
pub const SCNu32: &[u8; 2] = b"u\0";
pub const SCNu64: &[u8; 3] = b"lu\0";
pub const SCNuLEAST8: &[u8; 4] = b"hhu\0";
pub const SCNuLEAST16: &[u8; 3] = b"hu\0";
pub const SCNuLEAST32: &[u8; 2] = b"u\0";
pub const SCNuLEAST64: &[u8; 3] = b"lu\0";
pub const SCNuFAST8: &[u8; 4] = b"hhu\0";
pub const SCNuFAST16: &[u8; 3] = b"lu\0";
pub const SCNuFAST32: &[u8; 3] = b"lu\0";
pub const SCNuFAST64: &[u8; 3] = b"lu\0";
pub const SCNuMAX: &[u8; 3] = b"ju\0";
pub const SCNuPTR: &[u8; 3] = b"lu\0";
pub const SCNx8: &[u8; 4] = b"hhx\0";
pub const SCNx16: &[u8; 3] = b"hx\0";
pub const SCNx32: &[u8; 2] = b"x\0";
pub const SCNx64: &[u8; 3] = b"lx\0";
pub const SCNxLEAST8: &[u8; 4] = b"hhx\0";
pub const SCNxLEAST16: &[u8; 3] = b"hx\0";
pub const SCNxLEAST32: &[u8; 2] = b"x\0";
pub const SCNxLEAST64: &[u8; 3] = b"lx\0";
pub const SCNxFAST8: &[u8; 4] = b"hhx\0";
pub const SCNxFAST16: &[u8; 3] = b"lx\0";
pub const SCNxFAST32: &[u8; 3] = b"lx\0";
pub const SCNxFAST64: &[u8; 3] = b"lx\0";
pub const SCNxMAX: &[u8; 3] = b"jx\0";
pub const SCNxPTR: &[u8; 3] = b"lx\0";
pub const CS_API_MAJOR: u32 = 5;
pub const CS_API_MINOR: u32 = 0;
pub const CS_NEXT_VERSION: u32 = 5;
pub const CS_VERSION_MAJOR: u32 = 5;
pub const CS_VERSION_MINOR: u32 = 0;
pub const CS_VERSION_EXTRA: u32 = 1;
pub const CS_MNEMONIC_SIZE: u32 = 32;
pub const M68K_OPERAND_COUNT: u32 = 4;
pub const X86_EFLAGS_MODIFY_AF: u32 = 1;
pub const X86_EFLAGS_MODIFY_CF: u32 = 2;
pub const X86_EFLAGS_MODIFY_SF: u32 = 4;
pub const X86_EFLAGS_MODIFY_ZF: u32 = 8;
pub const X86_EFLAGS_MODIFY_PF: u32 = 16;
pub const X86_EFLAGS_MODIFY_OF: u32 = 32;
pub const X86_EFLAGS_MODIFY_TF: u32 = 64;
pub const X86_EFLAGS_MODIFY_IF: u32 = 128;
pub const X86_EFLAGS_MODIFY_DF: u32 = 256;
pub const X86_EFLAGS_MODIFY_NT: u32 = 512;
pub const X86_EFLAGS_MODIFY_RF: u32 = 1024;
pub const X86_EFLAGS_PRIOR_OF: u32 = 2048;
pub const X86_EFLAGS_PRIOR_SF: u32 = 4096;
pub const X86_EFLAGS_PRIOR_ZF: u32 = 8192;
pub const X86_EFLAGS_PRIOR_AF: u32 = 16384;
pub const X86_EFLAGS_PRIOR_PF: u32 = 32768;
pub const X86_EFLAGS_PRIOR_CF: u32 = 65536;
pub const X86_EFLAGS_PRIOR_TF: u32 = 131072;
pub const X86_EFLAGS_PRIOR_IF: u32 = 262144;
pub const X86_EFLAGS_PRIOR_DF: u32 = 524288;
pub const X86_EFLAGS_PRIOR_NT: u32 = 1048576;
pub const X86_EFLAGS_RESET_OF: u32 = 2097152;
pub const X86_EFLAGS_RESET_CF: u32 = 4194304;
pub const X86_EFLAGS_RESET_DF: u32 = 8388608;
pub const X86_EFLAGS_RESET_IF: u32 = 16777216;
pub const X86_EFLAGS_RESET_SF: u32 = 33554432;
pub const X86_EFLAGS_RESET_AF: u32 = 67108864;
pub const X86_EFLAGS_RESET_TF: u32 = 134217728;
pub const X86_EFLAGS_RESET_NT: u32 = 268435456;
pub const X86_EFLAGS_RESET_PF: u32 = 536870912;
pub const X86_EFLAGS_SET_CF: u32 = 1073741824;
pub const X86_EFLAGS_SET_DF: u32 = 2147483648;
pub const X86_EFLAGS_SET_IF: u64 = 4294967296;
pub const X86_EFLAGS_TEST_OF: u64 = 8589934592;
pub const X86_EFLAGS_TEST_SF: u64 = 17179869184;
pub const X86_EFLAGS_TEST_ZF: u64 = 34359738368;
pub const X86_EFLAGS_TEST_PF: u64 = 68719476736;
pub const X86_EFLAGS_TEST_CF: u64 = 137438953472;
pub const X86_EFLAGS_TEST_NT: u64 = 274877906944;
pub const X86_EFLAGS_TEST_DF: u64 = 549755813888;
pub const X86_EFLAGS_UNDEFINED_OF: u64 = 1099511627776;
pub const X86_EFLAGS_UNDEFINED_SF: u64 = 2199023255552;
pub const X86_EFLAGS_UNDEFINED_ZF: u64 = 4398046511104;
pub const X86_EFLAGS_UNDEFINED_PF: u64 = 8796093022208;
pub const X86_EFLAGS_UNDEFINED_AF: u64 = 17592186044416;
pub const X86_EFLAGS_UNDEFINED_CF: u64 = 35184372088832;
pub const X86_EFLAGS_RESET_RF: u64 = 70368744177664;
pub const X86_EFLAGS_TEST_RF: u64 = 140737488355328;
pub const X86_EFLAGS_TEST_IF: u64 = 281474976710656;
pub const X86_EFLAGS_TEST_TF: u64 = 562949953421312;
pub const X86_EFLAGS_TEST_AF: u64 = 1125899906842624;
pub const X86_EFLAGS_RESET_ZF: u64 = 2251799813685248;
pub const X86_EFLAGS_SET_OF: u64 = 4503599627370496;
pub const X86_EFLAGS_SET_SF: u64 = 9007199254740992;
pub const X86_EFLAGS_SET_ZF: u64 = 18014398509481984;
pub const X86_EFLAGS_SET_AF: u64 = 36028797018963968;
pub const X86_EFLAGS_SET_PF: u64 = 72057594037927936;
pub const X86_EFLAGS_RESET_0F: u64 = 144115188075855872;
pub const X86_EFLAGS_RESET_AC: u64 = 288230376151711744;
pub const X86_FPU_FLAGS_MODIFY_C0: u32 = 1;
pub const X86_FPU_FLAGS_MODIFY_C1: u32 = 2;
pub const X86_FPU_FLAGS_MODIFY_C2: u32 = 4;
pub const X86_FPU_FLAGS_MODIFY_C3: u32 = 8;
pub const X86_FPU_FLAGS_RESET_C0: u32 = 16;
pub const X86_FPU_FLAGS_RESET_C1: u32 = 32;
pub const X86_FPU_FLAGS_RESET_C2: u32 = 64;
pub const X86_FPU_FLAGS_RESET_C3: u32 = 128;
pub const X86_FPU_FLAGS_SET_C0: u32 = 256;
pub const X86_FPU_FLAGS_SET_C1: u32 = 512;
pub const X86_FPU_FLAGS_SET_C2: u32 = 1024;
pub const X86_FPU_FLAGS_SET_C3: u32 = 2048;
pub const X86_FPU_FLAGS_UNDEFINED_C0: u32 = 4096;
pub const X86_FPU_FLAGS_UNDEFINED_C1: u32 = 8192;
pub const X86_FPU_FLAGS_UNDEFINED_C2: u32 = 16384;
pub const X86_FPU_FLAGS_UNDEFINED_C3: u32 = 32768;
pub const X86_FPU_FLAGS_TEST_C0: u32 = 65536;
pub const X86_FPU_FLAGS_TEST_C1: u32 = 131072;
pub const X86_FPU_FLAGS_TEST_C2: u32 = 262144;
pub const X86_FPU_FLAGS_TEST_C3: u32 = 524288;
pub const M680X_OPERAND_COUNT: u32 = 9;
pub const M680X_OFFSET_NONE: u32 = 0;
pub const M680X_OFFSET_BITS_5: u32 = 5;
pub const M680X_OFFSET_BITS_8: u32 = 8;
pub const M680X_OFFSET_BITS_9: u32 = 9;
pub const M680X_OFFSET_BITS_16: u32 = 16;
pub const M680X_IDX_INDIRECT: u32 = 1;
pub const M680X_IDX_NO_COMMA: u32 = 2;
pub const M680X_IDX_POST_INC_DEC: u32 = 4;
pub const M680X_FIRST_OP_IN_MNEM: u32 = 1;
pub const M680X_SECOND_OP_IN_MNEM: u32 = 2;
pub const TRICORE_OP_COUNT: u32 = 8;
pub const MAX_IMPL_W_REGS: u32 = 20;
pub const MAX_IMPL_R_REGS: u32 = 20;
pub const MAX_NUM_GROUPS: u32 = 8;
pub const GUM_ARM_B_MAX_DISTANCE: u32 = 33554428;
pub const GUM_THUMB_B_MAX_DISTANCE: u32 = 16777214;
pub const GUM_ARM64_ADRP_MAX_DISTANCE: u32 = 4294963200;
pub const GUM_ARM64_B_MAX_DISTANCE: u32 = 134217724;
pub const GUM_MIPS_J_MAX_DISTANCE: u32 = 268435456;
pub const JSON_MAJOR_VERSION: u32 = 1;
pub const JSON_MINOR_VERSION: u32 = 7;
pub const JSON_MICRO_VERSION: u32 = 1;
pub const JSON_VERSION_S: &[u8; 6] = b"1.7.1\0";
pub const GUM_MAX_ASSET_SIZE: u32 = 104857600;
pub type wchar_t = ::core::ffi::c_uint;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::core::ffi::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
extern "C" {
    pub fn android_get_application_target_sdk_version() -> ::core::ffi::c_int;
}
extern "C" {
    pub fn android_get_device_api_level() -> ::core::ffi::c_int;
}
pub type gint8 = ::core::ffi::c_schar;
pub type guint8 = ::core::ffi::c_uchar;
pub type gint16 = ::core::ffi::c_short;
pub type guint16 = ::core::ffi::c_ushort;
pub type gint32 = ::core::ffi::c_int;
pub type guint32 = ::core::ffi::c_uint;
pub type gint64 = ::core::ffi::c_long;
pub type guint64 = ::core::ffi::c_ulong;
pub type gssize = ::core::ffi::c_long;
pub type gsize = ::core::ffi::c_ulong;
pub type goffset = gint64;
pub type gintptr = ::core::ffi::c_long;
pub type guintptr = ::core::ffi::c_ulong;
pub type GPid = ::core::ffi::c_int;
pub type __int8_t = ::core::ffi::c_schar;
pub type __uint8_t = ::core::ffi::c_uchar;
pub type __int16_t = ::core::ffi::c_short;
pub type __uint16_t = ::core::ffi::c_ushort;
pub type __int32_t = ::core::ffi::c_int;
pub type __uint32_t = ::core::ffi::c_uint;
pub type __int64_t = ::core::ffi::c_long;
pub type __uint64_t = ::core::ffi::c_ulong;
pub type __intptr_t = ::core::ffi::c_long;
pub type __uintptr_t = ::core::ffi::c_ulong;
pub type int_least8_t = i8;
pub type uint_least8_t = u8;
pub type int_least16_t = i16;
pub type uint_least16_t = u16;
pub type int_least32_t = i32;
pub type uint_least32_t = u32;
pub type int_least64_t = i64;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type uint_fast8_t = u8;
pub type int_fast64_t = i64;
pub type uint_fast64_t = u64;
pub type int_fast16_t = i64;
pub type uint_fast16_t = u64;
pub type int_fast32_t = i64;
pub type uint_fast32_t = u64;
pub type uintmax_t = u64;
pub type intmax_t = i64;
pub type __s8 = ::core::ffi::c_schar;
pub type __u8 = ::core::ffi::c_uchar;
pub type __s16 = ::core::ffi::c_short;
pub type __u16 = ::core::ffi::c_ushort;
pub type __s32 = ::core::ffi::c_int;
pub type __u32 = ::core::ffi::c_uint;
pub type __s64 = ::core::ffi::c_longlong;
pub type __u64 = ::core::ffi::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::core::ffi::c_ulong; 16usize],
}
pub type __kernel_sighandler_t =
    ::core::option::Option<unsafe extern "C" fn(arg1: ::core::ffi::c_int)>;
pub type __kernel_key_t = ::core::ffi::c_int;
pub type __kernel_mqd_t = ::core::ffi::c_int;
pub type __kernel_old_uid_t = ::core::ffi::c_ushort;
pub type __kernel_old_gid_t = ::core::ffi::c_ushort;
pub type __kernel_long_t = ::core::ffi::c_long;
pub type __kernel_ulong_t = ::core::ffi::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::core::ffi::c_uint;
pub type __kernel_pid_t = ::core::ffi::c_int;
pub type __kernel_ipc_pid_t = ::core::ffi::c_int;
pub type __kernel_uid_t = ::core::ffi::c_uint;
pub type __kernel_gid_t = ::core::ffi::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::core::ffi::c_int;
pub type __kernel_uid32_t = ::core::ffi::c_uint;
pub type __kernel_gid32_t = ::core::ffi::c_uint;
pub type __kernel_old_dev_t = ::core::ffi::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::core::ffi::c_int; 2usize],
}
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::core::ffi::c_longlong;
pub type __kernel_old_time_t = __kernel_long_t;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = ::core::ffi::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::core::ffi::c_int;
pub type __kernel_clockid_t = ::core::ffi::c_int;
pub type __kernel_caddr_t = *mut ::core::ffi::c_char;
pub type __kernel_uid16_t = ::core::ffi::c_ushort;
pub type __kernel_gid16_t = ::core::ffi::c_ushort;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
pub type __poll_t = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_attr_t {
    pub flags: u32,
    pub stack_base: *mut ::core::ffi::c_void,
    pub stack_size: usize,
    pub guard_size: usize,
    pub sched_policy: i32,
    pub sched_priority: i32,
    pub __reserved: [::core::ffi::c_char; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_barrier_t {
    pub __private: [i64; 4usize],
}
pub type pthread_barrierattr_t = ::core::ffi::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_cond_t {
    pub __private: [i32; 12usize],
}
pub type pthread_condattr_t = ::core::ffi::c_long;
pub type pthread_key_t = ::core::ffi::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_mutex_t {
    pub __private: [i32; 10usize],
}
pub type pthread_mutexattr_t = ::core::ffi::c_long;
pub type pthread_once_t = ::core::ffi::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_rwlock_t {
    pub __private: [i32; 14usize],
}
pub type pthread_rwlockattr_t = ::core::ffi::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_spinlock_t {
    pub __private: i64,
}
pub type pthread_t = ::core::ffi::c_long;
pub type __gid_t = __kernel_gid32_t;
pub type gid_t = __gid_t;
pub type __uid_t = __kernel_uid32_t;
pub type uid_t = __uid_t;
pub type __pid_t = __kernel_pid_t;
pub type pid_t = __pid_t;
pub type __id_t = u32;
pub type id_t = __id_t;
pub type blkcnt_t = ::core::ffi::c_ulong;
pub type blksize_t = ::core::ffi::c_ulong;
pub type caddr_t = __kernel_caddr_t;
pub type clock_t = __kernel_clock_t;
pub type __clockid_t = __kernel_clockid_t;
pub type clockid_t = __clockid_t;
pub type daddr_t = __kernel_daddr_t;
pub type fsblkcnt_t = ::core::ffi::c_ulong;
pub type fsfilcnt_t = ::core::ffi::c_ulong;
pub type __mode_t = __kernel_mode_t;
pub type mode_t = __mode_t;
pub type __key_t = __kernel_key_t;
pub type key_t = __key_t;
pub type __ino_t = __kernel_ino_t;
pub type ino_t = __ino_t;
pub type ino64_t = u64;
pub type __nlink_t = u32;
pub type nlink_t = __nlink_t;
pub type __timer_t = *mut ::core::ffi::c_void;
pub type timer_t = __timer_t;
pub type __suseconds_t = __kernel_suseconds_t;
pub type suseconds_t = __suseconds_t;
pub type __useconds_t = u32;
pub type useconds_t = __useconds_t;
pub type dev_t = u64;
pub type __time_t = __kernel_time_t;
pub type time_t = __time_t;
pub type off_t = i64;
pub type loff_t = off_t;
pub type off64_t = loff_t;
pub type __socklen_t = u32;
pub type socklen_t = __socklen_t;
pub type __va_list = [u64; 4usize];
pub type uint_t = ::core::ffi::c_uint;
pub type uint = ::core::ffi::c_uint;
pub type u_char = ::core::ffi::c_uchar;
pub type u_short = ::core::ffi::c_ushort;
pub type u_int = ::core::ffi::c_uint;
pub type u_long = ::core::ffi::c_ulong;
pub type u_int32_t = u32;
pub type u_int16_t = u16;
pub type u_int8_t = u8;
pub type u_int64_t = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_timespec {
    pub tv_sec: __kernel_time64_t,
    pub tv_nsec: ::core::ffi::c_longlong,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_itimerspec {
    pub it_interval: __kernel_timespec,
    pub it_value: __kernel_timespec,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_old_timespec {
    pub tv_sec: __kernel_old_time_t,
    pub tv_nsec: ::core::ffi::c_long,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_sock_timeval {
    pub tv_sec: __s64,
    pub tv_usec: __s64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __kernel_old_time_t,
    pub tv_nsec: ::core::ffi::c_long,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __kernel_old_time_t,
    pub tv_usec: __kernel_suseconds_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerval {
    pub it_interval: timeval,
    pub it_value: timeval,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timezone {
    pub tz_minuteswest: ::core::ffi::c_int,
    pub tz_dsttime: ::core::ffi::c_int,
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct sigcontext {
    pub fault_address: __u64,
    pub regs: [__u64; 31usize],
    pub sp: __u64,
    pub pc: __u64,
    pub pstate: __u64,
    pub __bindgen_padding_0: [u8; 8usize],
    pub __reserved: [__u8; 4096usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _aarch64_ctx {
    pub magic: __u32,
    pub size: __u32,
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct fpsimd_context {
    pub head: _aarch64_ctx,
    pub fpsr: __u32,
    pub fpcr: __u32,
    pub vregs: [__uint128_t; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct esr_context {
    pub head: _aarch64_ctx,
    pub esr: __u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct extra_context {
    pub head: _aarch64_ctx,
    pub datap: __u64,
    pub size: __u32,
    pub __reserved: [__u32; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sve_context {
    pub head: _aarch64_ctx,
    pub vl: __u16,
    pub __reserved: [__u16; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigset_t {
    pub sig: [::core::ffi::c_ulong; 1usize],
}
pub type old_sigset_t = ::core::ffi::c_ulong;
pub type __signalfn_t = ::core::option::Option<unsafe extern "C" fn(arg1: ::core::ffi::c_int)>;
pub type __sighandler_t = __signalfn_t;
pub type __restorefn_t = ::core::option::Option<unsafe extern "C" fn()>;
pub type __sigrestore_t = __restorefn_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_sigaction {
    pub sa_handler: __sighandler_t,
    pub sa_flags: ::core::ffi::c_ulong,
    pub sa_restorer: __sigrestore_t,
    pub sa_mask: sigset_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigaltstack {
    pub ss_sp: *mut ::core::ffi::c_void,
    pub ss_flags: ::core::ffi::c_int,
    pub ss_size: usize,
}
pub type stack_t = sigaltstack;
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
    pub sival_int: ::core::ffi::c_int,
    pub sival_ptr: *mut ::core::ffi::c_void,
}
pub type sigval_t = sigval;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __sifields {
    pub _kill: __sifields__bindgen_ty_1,
    pub _timer: __sifields__bindgen_ty_2,
    pub _rt: __sifields__bindgen_ty_3,
    pub _sigchld: __sifields__bindgen_ty_4,
    pub _sigfault: __sifields__bindgen_ty_5,
    pub _sigpoll: __sifields__bindgen_ty_6,
    pub _sigsys: __sifields__bindgen_ty_7,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sifields__bindgen_ty_1 {
    pub _pid: __kernel_pid_t,
    pub _uid: __kernel_uid32_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sifields__bindgen_ty_2 {
    pub _tid: __kernel_timer_t,
    pub _overrun: ::core::ffi::c_int,
    pub _sigval: sigval_t,
    pub _sys_private: ::core::ffi::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sifields__bindgen_ty_3 {
    pub _pid: __kernel_pid_t,
    pub _uid: __kernel_uid32_t,
    pub _sigval: sigval_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sifields__bindgen_ty_4 {
    pub _pid: __kernel_pid_t,
    pub _uid: __kernel_uid32_t,
    pub _status: ::core::ffi::c_int,
    pub _utime: __kernel_clock_t,
    pub _stime: __kernel_clock_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sifields__bindgen_ty_5 {
    pub _addr: *mut ::core::ffi::c_void,
    pub __bindgen_anon_1: __sifields__bindgen_ty_5__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __sifields__bindgen_ty_5__bindgen_ty_1 {
    pub _addr_lsb: ::core::ffi::c_short,
    pub _addr_bnd: __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
    pub _addr_pkey: __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 {
    pub _dummy_bnd: [::core::ffi::c_char; 8usize],
    pub _lower: *mut ::core::ffi::c_void,
    pub _upper: *mut ::core::ffi::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2 {
    pub _dummy_pkey: [::core::ffi::c_char; 8usize],
    pub _pkey: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sifields__bindgen_ty_6 {
    pub _band: ::core::ffi::c_long,
    pub _fd: ::core::ffi::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sifields__bindgen_ty_7 {
    pub _call_addr: *mut ::core::ffi::c_void,
    pub _syscall: ::core::ffi::c_int,
    pub _arch: ::core::ffi::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo {
    pub __bindgen_anon_1: siginfo__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union siginfo__bindgen_ty_1 {
    pub __bindgen_anon_1: siginfo__bindgen_ty_1__bindgen_ty_1,
    pub _si_pad: [::core::ffi::c_int; 32usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo__bindgen_ty_1__bindgen_ty_1 {
    pub si_signo: ::core::ffi::c_int,
    pub si_errno: ::core::ffi::c_int,
    pub si_code: ::core::ffi::c_int,
    pub _sifields: __sifields,
}
pub type siginfo_t = siginfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent {
    pub sigev_value: sigval_t,
    pub sigev_signo: ::core::ffi::c_int,
    pub sigev_notify: ::core::ffi::c_int,
    pub _sigev_un: sigevent__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigevent__bindgen_ty_1 {
    pub _pad: [::core::ffi::c_int; 12usize],
    pub _tid: ::core::ffi::c_int,
    pub _sigev_thread: sigevent__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent__bindgen_ty_1__bindgen_ty_1 {
    pub _function: ::core::option::Option<unsafe extern "C" fn(arg1: sigval_t)>,
    pub _attribute: *mut ::core::ffi::c_void,
}
pub type sigevent_t = sigevent;
pub type sig_atomic_t = ::core::ffi::c_int;
pub type sig_t = __sighandler_t;
pub type sighandler_t = __sighandler_t;
pub type sigset64_t = sigset_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigaction {
    pub sa_flags: ::core::ffi::c_int,
    pub __bindgen_anon_1: sigaction__bindgen_ty_1,
    pub sa_mask: sigset_t,
    pub sa_restorer: ::core::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigaction__bindgen_ty_1 {
    pub sa_handler: sighandler_t,
    pub sa_sigaction: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: ::core::ffi::c_int,
            arg2: *mut siginfo,
            arg3: *mut ::core::ffi::c_void,
        ),
    >,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigaction64 {
    pub sa_flags: ::core::ffi::c_int,
    pub __bindgen_anon_1: sigaction64__bindgen_ty_1,
    pub sa_mask: sigset_t,
    pub sa_restorer: ::core::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigaction64__bindgen_ty_1 {
    pub sa_handler: sighandler_t,
    pub sa_sigaction: ::core::option::Option<
        unsafe extern "C" fn(
            arg1: ::core::ffi::c_int,
            arg2: *mut siginfo,
            arg3: *mut ::core::ffi::c_void,
        ),
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct user_regs_struct {
    pub regs: [u64; 31usize],
    pub sp: u64,
    pub pc: u64,
    pub pstate: u64,
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct user_fpsimd_struct {
    pub vregs: [__uint128_t; 32usize],
    pub fpsr: u32,
    pub fpcr: u32,
}
pub type greg_t = ::core::ffi::c_ulong;
pub type gregset_t = [greg_t; 34usize];
pub type fpregset_t = user_fpsimd_struct;
pub type mcontext_t = sigcontext;
#[repr(C)]
#[repr(align(16))]
#[derive(Copy, Clone)]
pub struct ucontext {
    pub uc_flags: ::core::ffi::c_ulong,
    pub uc_link: *mut ucontext,
    pub uc_stack: stack_t,
    pub __bindgen_anon_1: ucontext__bindgen_ty_1,
    pub __padding: [::core::ffi::c_char; 120usize],
    pub __bindgen_padding_0: u64,
    pub uc_mcontext: mcontext_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ucontext__bindgen_ty_1 {
    pub uc_sigmask: sigset_t,
    pub uc_sigmask64: sigset64_t,
}
pub type ucontext_t = ucontext;
extern "C" {
    pub fn __libc_current_sigrtmin() -> ::core::ffi::c_int;
}
extern "C" {
    pub fn __libc_current_sigrtmax() -> ::core::ffi::c_int;
}
extern "C" {
    pub static sys_siglist: [*const ::core::ffi::c_char; 65usize];
}
extern "C" {
    pub static sys_signame: [*const ::core::ffi::c_char; 65usize];
}
extern "C" {
    pub fn sigaction(
        __signal: ::core::ffi::c_int,
        __new_action: *const sigaction,
        __old_action: *mut sigaction,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sigaction64(
        __signal: ::core::ffi::c_int,
        __new_action: *const sigaction64,
        __old_action: *mut sigaction64,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn siginterrupt(
        __signal: ::core::ffi::c_int,
        __flag: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn signal(__signal: ::core::ffi::c_int, __handler: sighandler_t) -> sighandler_t;
}
extern "C" {
    pub fn sigaddset(__set: *mut sigset_t, __signal: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sigaddset64(__set: *mut sigset64_t, __signal: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sigdelset(__set: *mut sigset_t, __signal: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sigdelset64(__set: *mut sigset64_t, __signal: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sigemptyset(__set: *mut sigset_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sigemptyset64(__set: *mut sigset64_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sigfillset(__set: *mut sigset_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sigfillset64(__set: *mut sigset64_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sigismember(__set: *const sigset_t, __signal: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sigismember64(
        __set: *const sigset64_t,
        __signal: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sigpending(__set: *mut sigset_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sigpending64(__set: *mut sigset64_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sigprocmask(
        __how: ::core::ffi::c_int,
        __new_set: *const sigset_t,
        __old_set: *mut sigset_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sigprocmask64(
        __how: ::core::ffi::c_int,
        __new_set: *const sigset64_t,
        __old_set: *mut sigset64_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sigsuspend(__mask: *const sigset_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sigsuspend64(__mask: *const sigset64_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sigwait(__set: *const sigset_t, __signal: *mut ::core::ffi::c_int)
        -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sigwait64(
        __set: *const sigset64_t,
        __signal: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sighold(__signal: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sigignore(__signal: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sigpause(__signal: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sigrelse(__signal: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sigset(__signal: ::core::ffi::c_int, __handler: sighandler_t) -> sighandler_t;
}
extern "C" {
    pub fn raise(__signal: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn kill(__pid: pid_t, __signal: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn killpg(__pgrp: ::core::ffi::c_int, __signal: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn tgkill(
        __tgid: ::core::ffi::c_int,
        __tid: ::core::ffi::c_int,
        __signal: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sigaltstack(
        __new_signal_stack: *const stack_t,
        __old_signal_stack: *mut stack_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn psiginfo(__info: *const siginfo_t, __msg: *const ::core::ffi::c_char);
}
extern "C" {
    pub fn psignal(__signal: ::core::ffi::c_int, __msg: *const ::core::ffi::c_char);
}
extern "C" {
    pub fn pthread_kill(__pthread: pthread_t, __signal: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_sigmask(
        __how: ::core::ffi::c_int,
        __new_set: *const sigset_t,
        __old_set: *mut sigset_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_sigmask64(
        __how: ::core::ffi::c_int,
        __new_set: *const sigset64_t,
        __old_set: *mut sigset64_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sigqueue(
        __pid: pid_t,
        __signal: ::core::ffi::c_int,
        __value: sigval,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sigtimedwait(
        __set: *const sigset_t,
        __info: *mut siginfo_t,
        __timeout: *const timespec,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sigtimedwait64(
        __set: *const sigset64_t,
        __info: *mut siginfo_t,
        __timeout: *const timespec,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sigwaitinfo(__set: *const sigset_t, __info: *mut siginfo_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sigwaitinfo64(__set: *const sigset64_t, __info: *mut siginfo_t) -> ::core::ffi::c_int;
}
pub type fd_mask = ::core::ffi::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub fds_bits: [fd_mask; 16usize],
}
extern "C" {
    pub fn __FD_CLR_chk(arg1: ::core::ffi::c_int, arg2: *mut fd_set, arg3: usize);
}
extern "C" {
    pub fn __FD_SET_chk(arg1: ::core::ffi::c_int, arg2: *mut fd_set, arg3: usize);
}
extern "C" {
    pub fn __FD_ISSET_chk(
        arg1: ::core::ffi::c_int,
        arg2: *const fd_set,
        arg3: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn select(
        __fd_count: ::core::ffi::c_int,
        __read_fds: *mut fd_set,
        __write_fds: *mut fd_set,
        __exception_fds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pselect(
        __fd_count: ::core::ffi::c_int,
        __read_fds: *mut fd_set,
        __write_fds: *mut fd_set,
        __exception_fds: *mut fd_set,
        __timeout: *const timespec,
        __mask: *const sigset_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pselect64(
        __fd_count: ::core::ffi::c_int,
        __read_fds: *mut fd_set,
        __write_fds: *mut fd_set,
        __exception_fds: *mut fd_set,
        __timeout: *const timespec,
        __mask: *const sigset64_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn gettimeofday(__tv: *mut timeval, __tz: *mut timezone) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn settimeofday(__tv: *const timeval, __tz: *const timezone) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn getitimer(
        __which: ::core::ffi::c_int,
        __current_value: *mut itimerval,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn setitimer(
        __which: ::core::ffi::c_int,
        __new_value: *const itimerval,
        __old_value: *mut itimerval,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn utimes(
        __path: *const ::core::ffi::c_char,
        __times: *const timeval,
    ) -> ::core::ffi::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_t {
    _unused: [u8; 0],
}
pub type locale_t = *mut __locale_t;
extern "C" {
    pub static mut tzname: [*mut ::core::ffi::c_char; 0usize];
}
extern "C" {
    pub static mut daylight: ::core::ffi::c_int;
}
extern "C" {
    pub static mut timezone: ::core::ffi::c_long;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::core::ffi::c_int,
    pub tm_min: ::core::ffi::c_int,
    pub tm_hour: ::core::ffi::c_int,
    pub tm_mday: ::core::ffi::c_int,
    pub tm_mon: ::core::ffi::c_int,
    pub tm_year: ::core::ffi::c_int,
    pub tm_wday: ::core::ffi::c_int,
    pub tm_yday: ::core::ffi::c_int,
    pub tm_isdst: ::core::ffi::c_int,
    pub tm_gmtoff: ::core::ffi::c_long,
    pub tm_zone: *const ::core::ffi::c_char,
}
extern "C" {
    pub fn time(__t: *mut time_t) -> time_t;
}
extern "C" {
    pub fn nanosleep(__request: *const timespec, __remainder: *mut timespec) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn asctime(__tm: *const tm) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn asctime_r(__tm: *const tm, __buf: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn difftime(__lhs: time_t, __rhs: time_t) -> f64;
}
extern "C" {
    pub fn mktime(__tm: *mut tm) -> time_t;
}
extern "C" {
    pub fn localtime(__t: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(__t: *const time_t, __tm: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn gmtime(__t: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn gmtime_r(__t: *const time_t, __tm: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn strptime(
        __s: *const ::core::ffi::c_char,
        __fmt: *const ::core::ffi::c_char,
        __tm: *mut tm,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strptime_l(
        __s: *const ::core::ffi::c_char,
        __fmt: *const ::core::ffi::c_char,
        __tm: *mut tm,
        __l: locale_t,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strftime(
        __buf: *mut ::core::ffi::c_char,
        __n: usize,
        __fmt: *const ::core::ffi::c_char,
        __tm: *const tm,
    ) -> usize;
}
extern "C" {
    pub fn strftime_l(
        __buf: *mut ::core::ffi::c_char,
        __n: usize,
        __fmt: *const ::core::ffi::c_char,
        __tm: *const tm,
        __l: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn ctime(__t: *const time_t) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn ctime_r(__t: *const time_t, __buf: *mut ::core::ffi::c_char)
        -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock: *mut clockid_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn clock_getres(__clock: clockid_t, __resolution: *mut timespec) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock: clockid_t, __ts: *mut timespec) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn clock_nanosleep(
        __clock: clockid_t,
        __flags: ::core::ffi::c_int,
        __request: *const timespec,
        __remainder: *mut timespec,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn clock_settime(__clock: clockid_t, __ts: *const timespec) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn timer_create(
        __clock: clockid_t,
        __event: *mut sigevent,
        __timer_ptr: *mut timer_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn timer_delete(__timer: timer_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn timer_settime(
        __timer: timer_t,
        __flags: ::core::ffi::c_int,
        __new_value: *const itimerspec,
        __old_value: *mut itimerspec,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn timer_gettime(__timer: timer_t, __ts: *mut itimerspec) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn timer_getoverrun(__timer: timer_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn timelocal(__tm: *mut tm) -> time_t;
}
extern "C" {
    pub fn timegm(__tm: *mut tm) -> time_t;
}
extern "C" {
    pub fn timespec_get(__ts: *mut timespec, __base: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
pub type gchar = ::core::ffi::c_char;
pub type gshort = ::core::ffi::c_short;
pub type glong = ::core::ffi::c_long;
pub type gint = ::core::ffi::c_int;
pub type gboolean = gint;
pub type guchar = ::core::ffi::c_uchar;
pub type gushort = ::core::ffi::c_ushort;
pub type gulong = ::core::ffi::c_ulong;
pub type guint = ::core::ffi::c_uint;
pub type gfloat = f32;
pub type gdouble = f64;
pub type gpointer = *mut ::core::ffi::c_void;
pub type gconstpointer = *const ::core::ffi::c_void;
pub type GCompareFunc =
    ::core::option::Option<unsafe extern "C" fn(a: gconstpointer, b: gconstpointer) -> gint>;
pub type GCompareDataFunc = ::core::option::Option<
    unsafe extern "C" fn(a: gconstpointer, b: gconstpointer, user_data: gpointer) -> gint,
>;
pub type GEqualFunc =
    ::core::option::Option<unsafe extern "C" fn(a: gconstpointer, b: gconstpointer) -> gboolean>;
pub type GEqualFuncFull = ::core::option::Option<
    unsafe extern "C" fn(a: gconstpointer, b: gconstpointer, user_data: gpointer) -> gboolean,
>;
pub type GDestroyNotify = ::core::option::Option<unsafe extern "C" fn(data: gpointer)>;
pub type GFunc = ::core::option::Option<unsafe extern "C" fn(data: gpointer, user_data: gpointer)>;
pub type GHashFunc = ::core::option::Option<unsafe extern "C" fn(key: gconstpointer) -> guint>;
pub type GHFunc = ::core::option::Option<
    unsafe extern "C" fn(key: gpointer, value: gpointer, user_data: gpointer),
>;
pub type GCopyFunc = ::core::option::Option<
    unsafe extern "C" fn(src: gconstpointer, user_data: gpointer) -> gpointer,
>;
pub type GFreeFunc = ::core::option::Option<unsafe extern "C" fn(data: gpointer)>;
pub type GTranslateFunc = ::core::option::Option<
    unsafe extern "C" fn(str_: *const gchar, user_data: gpointer) -> *const gchar,
>;
pub type GDoubleIEEE754 = _GDoubleIEEE754;
pub type GFloatIEEE754 = _GFloatIEEE754;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _GFloatIEEE754 {
    pub v_float: gfloat,
    pub mpn: _GFloatIEEE754__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GFloatIEEE754__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl _GFloatIEEE754__bindgen_ty_1 {
    #[inline]
    pub fn mantissa(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 23u8) as u32) }
    }
    #[inline]
    pub fn set_mantissa(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 23u8, val as u64)
        }
    }
    #[inline]
    pub fn biased_exponent(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(23usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_biased_exponent(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(23usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn sign(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sign(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        mantissa: guint,
        biased_exponent: guint,
        sign: guint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 23u8, {
            let mantissa: u32 = unsafe { ::core::mem::transmute(mantissa) };
            mantissa as u64
        });
        __bindgen_bitfield_unit.set(23usize, 8u8, {
            let biased_exponent: u32 = unsafe { ::core::mem::transmute(biased_exponent) };
            biased_exponent as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let sign: u32 = unsafe { ::core::mem::transmute(sign) };
            sign as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _GDoubleIEEE754 {
    pub v_double: gdouble,
    pub mpn: _GDoubleIEEE754__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDoubleIEEE754__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
impl _GDoubleIEEE754__bindgen_ty_1 {
    #[inline]
    pub fn mantissa_low(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 32u8) as u32) }
    }
    #[inline]
    pub fn set_mantissa_low(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 32u8, val as u64)
        }
    }
    #[inline]
    pub fn mantissa_high(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(32usize, 20u8) as u32) }
    }
    #[inline]
    pub fn set_mantissa_high(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(32usize, 20u8, val as u64)
        }
    }
    #[inline]
    pub fn biased_exponent(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(52usize, 11u8) as u32) }
    }
    #[inline]
    pub fn set_biased_exponent(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(52usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub fn sign(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(63usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_sign(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(63usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        mantissa_low: guint,
        mantissa_high: guint,
        biased_exponent: guint,
        sign: guint,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 32u8, {
            let mantissa_low: u32 = unsafe { ::core::mem::transmute(mantissa_low) };
            mantissa_low as u64
        });
        __bindgen_bitfield_unit.set(32usize, 20u8, {
            let mantissa_high: u32 = unsafe { ::core::mem::transmute(mantissa_high) };
            mantissa_high as u64
        });
        __bindgen_bitfield_unit.set(52usize, 11u8, {
            let biased_exponent: u32 = unsafe { ::core::mem::transmute(biased_exponent) };
            biased_exponent as u64
        });
        __bindgen_bitfield_unit.set(63usize, 1u8, {
            let sign: u32 = unsafe { ::core::mem::transmute(sign) };
            sign as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type GTimeVal = _GTimeVal;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTimeVal {
    pub tv_sec: glong,
    pub tv_usec: glong,
}
pub type grefcount = gint;
pub type gatomicrefcount = gint;
extern "C" {
    pub fn strcasecmp(
        __s1: *const ::core::ffi::c_char,
        __s2: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ::core::ffi::c_char,
        __s2: *const ::core::ffi::c_char,
        __l: locale_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn strncasecmp(
        __s1: *const ::core::ffi::c_char,
        __s2: *const ::core::ffi::c_char,
        __n: ::core::ffi::c_ulong,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ::core::ffi::c_char,
        __s2: *const ::core::ffi::c_char,
        __n: usize,
        __l: locale_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn memccpy(
        __dst: *mut ::core::ffi::c_void,
        __src: *const ::core::ffi::c_void,
        __stop_char: ::core::ffi::c_int,
        __n: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn memchr(
        __s: *const ::core::ffi::c_void,
        __ch: ::core::ffi::c_int,
        __n: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn memrchr(
        __s: *const ::core::ffi::c_void,
        __ch: ::core::ffi::c_int,
        __n: usize,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn memcmp(
        __lhs: *const ::core::ffi::c_void,
        __rhs: *const ::core::ffi::c_void,
        __n: ::core::ffi::c_ulong,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn memcpy(
        arg1: *mut ::core::ffi::c_void,
        arg2: *const ::core::ffi::c_void,
        arg3: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn memmove(
        __dst: *mut ::core::ffi::c_void,
        __src: *const ::core::ffi::c_void,
        __n: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn memset(
        __dst: *mut ::core::ffi::c_void,
        __ch: ::core::ffi::c_int,
        __n: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn memmem(
        __haystack: *const ::core::ffi::c_void,
        __haystack_size: usize,
        __needle: *const ::core::ffi::c_void,
        __needle_size: usize,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn strchr(
        __s: *const ::core::ffi::c_char,
        __ch: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn __strchr_chk(
        __s: *const ::core::ffi::c_char,
        __ch: ::core::ffi::c_int,
        __n: usize,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::core::ffi::c_char,
        __ch: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn __strrchr_chk(
        __s: *const ::core::ffi::c_char,
        __ch: ::core::ffi::c_int,
        __n: usize,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::core::ffi::c_char) -> ::core::ffi::c_ulong;
}
extern "C" {
    pub fn __strlen_chk(__s: *const ::core::ffi::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn strcmp(
        __lhs: *const ::core::ffi::c_char,
        __rhs: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn stpcpy(
        __dst: *mut ::core::ffi::c_char,
        __src: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strcpy(
        __dst: *mut ::core::ffi::c_char,
        __src: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strcat(
        __dst: *mut ::core::ffi::c_char,
        __src: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strdup(__s: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strstr(
        __haystack: *const ::core::ffi::c_char,
        __needle: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strcasestr(
        __haystack: *const ::core::ffi::c_char,
        __needle: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strtok(
        __s: *mut ::core::ffi::c_char,
        __delimiter: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strtok_r(
        __s: *mut ::core::ffi::c_char,
        __delimiter: *const ::core::ffi::c_char,
        __pos_ptr: *mut *mut ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strerror(__errno_value: ::core::ffi::c_int) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strerror_l(__errno_value: ::core::ffi::c_int, __l: locale_t)
        -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strerror_r(
        __errno_value: ::core::ffi::c_int,
        __buf: *mut ::core::ffi::c_char,
        __n: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn strnlen(__s: *const ::core::ffi::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn strncat(
        __dst: *mut ::core::ffi::c_char,
        __src: *const ::core::ffi::c_char,
        __n: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strndup(
        __s: *const ::core::ffi::c_char,
        __n: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strncmp(
        __lhs: *const ::core::ffi::c_char,
        __rhs: *const ::core::ffi::c_char,
        __n: ::core::ffi::c_ulong,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn stpncpy(
        __dst: *mut ::core::ffi::c_char,
        __src: *const ::core::ffi::c_char,
        __n: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strncpy(
        __dst: *mut ::core::ffi::c_char,
        __src: *const ::core::ffi::c_char,
        __n: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strlcat(
        __dst: *mut ::core::ffi::c_char,
        __src: *const ::core::ffi::c_char,
        __n: ::core::ffi::c_ulong,
    ) -> ::core::ffi::c_ulong;
}
extern "C" {
    pub fn strlcpy(
        __dst: *mut ::core::ffi::c_char,
        __src: *const ::core::ffi::c_char,
        __n: ::core::ffi::c_ulong,
    ) -> ::core::ffi::c_ulong;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::core::ffi::c_char,
        __reject: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_ulong;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::core::ffi::c_char,
        __accept: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strsep(
        __s_ptr: *mut *mut ::core::ffi::c_char,
        __delimiter: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strspn(
        __s: *const ::core::ffi::c_char,
        __accept: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_ulong;
}
extern "C" {
    pub fn strsignal(__signal: ::core::ffi::c_int) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strcoll(
        __lhs: *const ::core::ffi::c_char,
        __rhs: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn strxfrm(
        __dst: *mut ::core::ffi::c_char,
        __src: *const ::core::ffi::c_char,
        __n: ::core::ffi::c_ulong,
    ) -> ::core::ffi::c_ulong;
}
extern "C" {
    pub fn strcoll_l(
        __lhs: *const ::core::ffi::c_char,
        __rhs: *const ::core::ffi::c_char,
        __l: locale_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        __dst: *mut ::core::ffi::c_char,
        __src: *const ::core::ffi::c_char,
        __n: usize,
        __l: locale_t,
    ) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GBytes {
    _unused: [u8; 0],
}
pub type GBytes = _GBytes;
pub type GArray = _GArray;
pub type GByteArray = _GByteArray;
pub type GPtrArray = _GPtrArray;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GArray {
    pub data: *mut gchar,
    pub len: guint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GByteArray {
    pub data: *mut guint8,
    pub len: guint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GPtrArray {
    pub pdata: *mut gpointer,
    pub len: guint,
}
extern "C" {
    pub fn _frida_g_array_new(
        zero_terminated: gboolean,
        clear_: gboolean,
        element_size: guint,
    ) -> *mut GArray;
}
extern "C" {
    pub fn _frida_g_array_steal(array: *mut GArray, len: *mut gsize) -> gpointer;
}
extern "C" {
    pub fn _frida_g_array_sized_new(
        zero_terminated: gboolean,
        clear_: gboolean,
        element_size: guint,
        reserved_size: guint,
    ) -> *mut GArray;
}
extern "C" {
    pub fn _frida_g_array_copy(array: *mut GArray) -> *mut GArray;
}
extern "C" {
    pub fn _frida_g_array_free(array: *mut GArray, free_segment: gboolean) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_array_ref(array: *mut GArray) -> *mut GArray;
}
extern "C" {
    pub fn _frida_g_array_unref(array: *mut GArray);
}
extern "C" {
    pub fn _frida_g_array_get_element_size(array: *mut GArray) -> guint;
}
extern "C" {
    pub fn _frida_g_array_append_vals(
        array: *mut GArray,
        data: gconstpointer,
        len: guint,
    ) -> *mut GArray;
}
extern "C" {
    pub fn _frida_g_array_prepend_vals(
        array: *mut GArray,
        data: gconstpointer,
        len: guint,
    ) -> *mut GArray;
}
extern "C" {
    pub fn _frida_g_array_insert_vals(
        array: *mut GArray,
        index_: guint,
        data: gconstpointer,
        len: guint,
    ) -> *mut GArray;
}
extern "C" {
    pub fn _frida_g_array_set_size(array: *mut GArray, length: guint) -> *mut GArray;
}
extern "C" {
    pub fn _frida_g_array_remove_index(array: *mut GArray, index_: guint) -> *mut GArray;
}
extern "C" {
    pub fn _frida_g_array_remove_index_fast(array: *mut GArray, index_: guint) -> *mut GArray;
}
extern "C" {
    pub fn _frida_g_array_remove_range(
        array: *mut GArray,
        index_: guint,
        length: guint,
    ) -> *mut GArray;
}
extern "C" {
    pub fn _frida_g_array_sort(array: *mut GArray, compare_func: GCompareFunc);
}
extern "C" {
    pub fn _frida_g_array_sort_with_data(
        array: *mut GArray,
        compare_func: GCompareDataFunc,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_array_binary_search(
        array: *mut GArray,
        target: gconstpointer,
        compare_func: GCompareFunc,
        out_match_index: *mut guint,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_array_set_clear_func(array: *mut GArray, clear_func: GDestroyNotify);
}
extern "C" {
    pub fn _frida_g_ptr_array_new() -> *mut GPtrArray;
}
extern "C" {
    pub fn _frida_g_ptr_array_new_with_free_func(
        element_free_func: GDestroyNotify,
    ) -> *mut GPtrArray;
}
extern "C" {
    pub fn _frida_g_ptr_array_steal(array: *mut GPtrArray, len: *mut gsize) -> *mut gpointer;
}
extern "C" {
    pub fn _frida_g_ptr_array_copy(
        array: *mut GPtrArray,
        func: GCopyFunc,
        user_data: gpointer,
    ) -> *mut GPtrArray;
}
extern "C" {
    pub fn _frida_g_ptr_array_sized_new(reserved_size: guint) -> *mut GPtrArray;
}
extern "C" {
    pub fn _frida_g_ptr_array_new_full(
        reserved_size: guint,
        element_free_func: GDestroyNotify,
    ) -> *mut GPtrArray;
}
extern "C" {
    pub fn _frida_g_ptr_array_new_null_terminated(
        reserved_size: guint,
        element_free_func: GDestroyNotify,
        null_terminated: gboolean,
    ) -> *mut GPtrArray;
}
extern "C" {
    pub fn _frida_g_ptr_array_free(array: *mut GPtrArray, free_seg: gboolean) -> *mut gpointer;
}
extern "C" {
    pub fn _frida_g_ptr_array_ref(array: *mut GPtrArray) -> *mut GPtrArray;
}
extern "C" {
    pub fn _frida_g_ptr_array_unref(array: *mut GPtrArray);
}
extern "C" {
    pub fn _frida_g_ptr_array_set_free_func(
        array: *mut GPtrArray,
        element_free_func: GDestroyNotify,
    );
}
extern "C" {
    pub fn _frida_g_ptr_array_set_size(array: *mut GPtrArray, length: gint);
}
extern "C" {
    pub fn _frida_g_ptr_array_remove_index(array: *mut GPtrArray, index_: guint) -> gpointer;
}
extern "C" {
    pub fn _frida_g_ptr_array_remove_index_fast(array: *mut GPtrArray, index_: guint) -> gpointer;
}
extern "C" {
    pub fn _frida_g_ptr_array_steal_index(array: *mut GPtrArray, index_: guint) -> gpointer;
}
extern "C" {
    pub fn _frida_g_ptr_array_steal_index_fast(array: *mut GPtrArray, index_: guint) -> gpointer;
}
extern "C" {
    pub fn _frida_g_ptr_array_remove(array: *mut GPtrArray, data: gpointer) -> gboolean;
}
extern "C" {
    pub fn _frida_g_ptr_array_remove_fast(array: *mut GPtrArray, data: gpointer) -> gboolean;
}
extern "C" {
    pub fn _frida_g_ptr_array_remove_range(
        array: *mut GPtrArray,
        index_: guint,
        length: guint,
    ) -> *mut GPtrArray;
}
extern "C" {
    pub fn _frida_g_ptr_array_add(array: *mut GPtrArray, data: gpointer);
}
extern "C" {
    pub fn _frida_g_ptr_array_extend(
        array_to_extend: *mut GPtrArray,
        array: *mut GPtrArray,
        func: GCopyFunc,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_ptr_array_extend_and_steal(
        array_to_extend: *mut GPtrArray,
        array: *mut GPtrArray,
    );
}
extern "C" {
    pub fn _frida_g_ptr_array_insert(array: *mut GPtrArray, index_: gint, data: gpointer);
}
extern "C" {
    pub fn _frida_g_ptr_array_sort(array: *mut GPtrArray, compare_func: GCompareFunc);
}
extern "C" {
    pub fn _frida_g_ptr_array_sort_with_data(
        array: *mut GPtrArray,
        compare_func: GCompareDataFunc,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_ptr_array_foreach(array: *mut GPtrArray, func: GFunc, user_data: gpointer);
}
extern "C" {
    pub fn _frida_g_ptr_array_find(
        haystack: *mut GPtrArray,
        needle: gconstpointer,
        index_: *mut guint,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_ptr_array_find_with_equal_func(
        haystack: *mut GPtrArray,
        needle: gconstpointer,
        equal_func: GEqualFunc,
        index_: *mut guint,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_ptr_array_is_null_terminated(array: *mut GPtrArray) -> gboolean;
}
extern "C" {
    pub fn _frida_g_byte_array_new() -> *mut GByteArray;
}
extern "C" {
    pub fn _frida_g_byte_array_new_take(data: *mut guint8, len: gsize) -> *mut GByteArray;
}
extern "C" {
    pub fn _frida_g_byte_array_steal(array: *mut GByteArray, len: *mut gsize) -> *mut guint8;
}
extern "C" {
    pub fn _frida_g_byte_array_sized_new(reserved_size: guint) -> *mut GByteArray;
}
extern "C" {
    pub fn _frida_g_byte_array_free(array: *mut GByteArray, free_segment: gboolean) -> *mut guint8;
}
extern "C" {
    pub fn _frida_g_byte_array_free_to_bytes(array: *mut GByteArray) -> *mut GBytes;
}
extern "C" {
    pub fn _frida_g_byte_array_ref(array: *mut GByteArray) -> *mut GByteArray;
}
extern "C" {
    pub fn _frida_g_byte_array_unref(array: *mut GByteArray);
}
extern "C" {
    pub fn _frida_g_byte_array_append(
        array: *mut GByteArray,
        data: *const guint8,
        len: guint,
    ) -> *mut GByteArray;
}
extern "C" {
    pub fn _frida_g_byte_array_prepend(
        array: *mut GByteArray,
        data: *const guint8,
        len: guint,
    ) -> *mut GByteArray;
}
extern "C" {
    pub fn _frida_g_byte_array_set_size(array: *mut GByteArray, length: guint) -> *mut GByteArray;
}
extern "C" {
    pub fn _frida_g_byte_array_remove_index(
        array: *mut GByteArray,
        index_: guint,
    ) -> *mut GByteArray;
}
extern "C" {
    pub fn _frida_g_byte_array_remove_index_fast(
        array: *mut GByteArray,
        index_: guint,
    ) -> *mut GByteArray;
}
extern "C" {
    pub fn _frida_g_byte_array_remove_range(
        array: *mut GByteArray,
        index_: guint,
        length: guint,
    ) -> *mut GByteArray;
}
extern "C" {
    pub fn _frida_g_byte_array_sort(array: *mut GByteArray, compare_func: GCompareFunc);
}
extern "C" {
    pub fn _frida_g_byte_array_sort_with_data(
        array: *mut GByteArray,
        compare_func: GCompareDataFunc,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_atomic_int_get(atomic: *const gint) -> gint;
}
extern "C" {
    pub fn _frida_g_atomic_int_set(atomic: *mut gint, newval: gint);
}
extern "C" {
    pub fn _frida_g_atomic_int_inc(atomic: *mut gint);
}
extern "C" {
    pub fn _frida_g_atomic_int_dec_and_test(atomic: *mut gint) -> gboolean;
}
extern "C" {
    pub fn _frida_g_atomic_int_compare_and_exchange(
        atomic: *mut gint,
        oldval: gint,
        newval: gint,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_atomic_int_compare_and_exchange_full(
        atomic: *mut gint,
        oldval: gint,
        newval: gint,
        preval: *mut gint,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_atomic_int_exchange(atomic: *mut gint, newval: gint) -> gint;
}
extern "C" {
    pub fn _frida_g_atomic_int_add(atomic: *mut gint, val: gint) -> gint;
}
extern "C" {
    pub fn _frida_g_atomic_int_and(atomic: *mut guint, val: guint) -> guint;
}
extern "C" {
    pub fn _frida_g_atomic_int_or(atomic: *mut guint, val: guint) -> guint;
}
extern "C" {
    pub fn _frida_g_atomic_int_xor(atomic: *mut guint, val: guint) -> guint;
}
extern "C" {
    pub fn _frida_g_atomic_pointer_get(atomic: *const ::core::ffi::c_void) -> gpointer;
}
extern "C" {
    pub fn _frida_g_atomic_pointer_set(atomic: *mut ::core::ffi::c_void, newval: gpointer);
}
extern "C" {
    pub fn _frida_g_atomic_pointer_compare_and_exchange(
        atomic: *mut ::core::ffi::c_void,
        oldval: gpointer,
        newval: gpointer,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_atomic_pointer_compare_and_exchange_full(
        atomic: *mut ::core::ffi::c_void,
        oldval: gpointer,
        newval: gpointer,
        preval: *mut ::core::ffi::c_void,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_atomic_pointer_exchange(
        atomic: *mut ::core::ffi::c_void,
        newval: gpointer,
    ) -> gpointer;
}
extern "C" {
    pub fn _frida_g_atomic_pointer_add(atomic: *mut ::core::ffi::c_void, val: gssize) -> gssize;
}
extern "C" {
    pub fn _frida_g_atomic_pointer_and(atomic: *mut ::core::ffi::c_void, val: gsize) -> gsize;
}
extern "C" {
    pub fn _frida_g_atomic_pointer_or(atomic: *mut ::core::ffi::c_void, val: gsize) -> gsize;
}
extern "C" {
    pub fn _frida_g_atomic_pointer_xor(atomic: *mut ::core::ffi::c_void, val: gsize) -> gsize;
}
extern "C" {
    pub fn _frida_g_atomic_int_exchange_and_add(atomic: *mut gint, val: gint) -> gint;
}
pub type va_list = [u64; 4usize];
pub type __gnuc_va_list = [u64; 4usize];
pub type GQuark = guint32;
extern "C" {
    pub fn _frida_g_quark_try_string(string: *const gchar) -> GQuark;
}
extern "C" {
    pub fn _frida_g_quark_from_static_string(string: *const gchar) -> GQuark;
}
extern "C" {
    pub fn _frida_g_quark_from_string(string: *const gchar) -> GQuark;
}
extern "C" {
    pub fn _frida_g_quark_to_string(quark: GQuark) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_intern_string(string: *const gchar) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_intern_static_string(string: *const gchar) -> *const gchar;
}
pub type GError = _GError;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GError {
    pub domain: GQuark,
    pub code: gint,
    pub message: *mut gchar,
}
pub type GErrorInitFunc = ::core::option::Option<unsafe extern "C" fn(error: *mut GError)>;
pub type GErrorCopyFunc =
    ::core::option::Option<unsafe extern "C" fn(src_error: *const GError, dest_error: *mut GError)>;
pub type GErrorClearFunc = ::core::option::Option<unsafe extern "C" fn(error: *mut GError)>;
extern "C" {
    pub fn _frida_g_error_domain_register_static(
        error_type_name: *const ::core::ffi::c_char,
        error_type_private_size: gsize,
        error_type_init: GErrorInitFunc,
        error_type_copy: GErrorCopyFunc,
        error_type_clear: GErrorClearFunc,
    ) -> GQuark;
}
extern "C" {
    pub fn _frida_g_error_domain_register(
        error_type_name: *const ::core::ffi::c_char,
        error_type_private_size: gsize,
        error_type_init: GErrorInitFunc,
        error_type_copy: GErrorCopyFunc,
        error_type_clear: GErrorClearFunc,
    ) -> GQuark;
}
extern "C" {
    pub fn _frida_g_error_new(domain: GQuark, code: gint, format: *const gchar, ...)
        -> *mut GError;
}
extern "C" {
    pub fn _frida_g_error_new_literal(
        domain: GQuark,
        code: gint,
        message: *const gchar,
    ) -> *mut GError;
}
extern "C" {
    pub fn _frida_g_error_new_valist(
        domain: GQuark,
        code: gint,
        format: *const gchar,
        args: va_list,
    ) -> *mut GError;
}
extern "C" {
    pub fn _frida_g_error_free(error: *mut GError);
}
extern "C" {
    pub fn _frida_g_error_copy(error: *const GError) -> *mut GError;
}
extern "C" {
    pub fn _frida_g_error_matches(error: *const GError, domain: GQuark, code: gint) -> gboolean;
}
extern "C" {
    pub fn _frida_g_set_error(
        err: *mut *mut GError,
        domain: GQuark,
        code: gint,
        format: *const gchar,
        ...
    );
}
extern "C" {
    pub fn _frida_g_set_error_literal(
        err: *mut *mut GError,
        domain: GQuark,
        code: gint,
        message: *const gchar,
    );
}
extern "C" {
    pub fn _frida_g_propagate_error(dest: *mut *mut GError, src: *mut GError);
}
extern "C" {
    pub fn _frida_g_clear_error(err: *mut *mut GError);
}
extern "C" {
    pub fn _frida_g_prefix_error(err: *mut *mut GError, format: *const gchar, ...);
}
extern "C" {
    pub fn _frida_g_prefix_error_literal(err: *mut *mut GError, prefix: *const gchar);
}
extern "C" {
    pub fn _frida_g_propagate_prefixed_error(
        dest: *mut *mut GError,
        src: *mut GError,
        format: *const gchar,
        ...
    );
}
extern "C" {
    pub fn _frida_g_get_user_name() -> *const gchar;
}
extern "C" {
    pub fn _frida_g_get_real_name() -> *const gchar;
}
extern "C" {
    pub fn _frida_g_get_home_dir() -> *const gchar;
}
extern "C" {
    pub fn _frida_g_get_tmp_dir() -> *const gchar;
}
extern "C" {
    pub fn _frida_g_get_host_name() -> *const gchar;
}
extern "C" {
    pub fn _frida_g_get_prgname() -> *const gchar;
}
extern "C" {
    pub fn _frida_g_set_prgname(prgname: *const gchar);
}
extern "C" {
    pub fn _frida_g_get_application_name() -> *const gchar;
}
extern "C" {
    pub fn _frida_g_set_application_name(application_name: *const gchar);
}
extern "C" {
    pub fn _frida_g_get_os_info(key_name: *const gchar) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_reload_user_special_dirs_cache();
}
extern "C" {
    pub fn _frida_g_get_user_data_dir() -> *const gchar;
}
extern "C" {
    pub fn _frida_g_get_user_config_dir() -> *const gchar;
}
extern "C" {
    pub fn _frida_g_get_user_cache_dir() -> *const gchar;
}
extern "C" {
    pub fn _frida_g_get_user_state_dir() -> *const gchar;
}
extern "C" {
    pub fn _frida_g_get_system_data_dirs() -> *const *const gchar;
}
extern "C" {
    pub fn _frida_g_get_system_config_dirs() -> *const *const gchar;
}
extern "C" {
    pub fn _frida_g_get_user_runtime_dir() -> *const gchar;
}
pub const GUserDirectory_G_USER_DIRECTORY_DESKTOP: GUserDirectory = 0;
pub const GUserDirectory_G_USER_DIRECTORY_DOCUMENTS: GUserDirectory = 1;
pub const GUserDirectory_G_USER_DIRECTORY_DOWNLOAD: GUserDirectory = 2;
pub const GUserDirectory_G_USER_DIRECTORY_MUSIC: GUserDirectory = 3;
pub const GUserDirectory_G_USER_DIRECTORY_PICTURES: GUserDirectory = 4;
pub const GUserDirectory_G_USER_DIRECTORY_PUBLIC_SHARE: GUserDirectory = 5;
pub const GUserDirectory_G_USER_DIRECTORY_TEMPLATES: GUserDirectory = 6;
pub const GUserDirectory_G_USER_DIRECTORY_VIDEOS: GUserDirectory = 7;
pub const GUserDirectory_G_USER_N_DIRECTORIES: GUserDirectory = 8;
pub type GUserDirectory = ::core::ffi::c_uint;
extern "C" {
    pub fn _frida_g_get_user_special_dir(directory: GUserDirectory) -> *const gchar;
}
pub type GDebugKey = _GDebugKey;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDebugKey {
    pub key: *const gchar,
    pub value: guint,
}
extern "C" {
    pub fn _frida_g_parse_debug_string(
        string: *const gchar,
        keys: *const GDebugKey,
        nkeys: guint,
    ) -> guint;
}
extern "C" {
    pub fn _frida_g_snprintf(string: *mut gchar, n: gulong, format: *const gchar, ...) -> gint;
}
extern "C" {
    pub fn _frida_g_vsnprintf(
        string: *mut gchar,
        n: gulong,
        format: *const gchar,
        args: va_list,
    ) -> gint;
}
extern "C" {
    pub fn _frida_g_nullify_pointer(nullify_location: *mut gpointer);
}
pub const GFormatSizeFlags_G_FORMAT_SIZE_DEFAULT: GFormatSizeFlags = 0;
pub const GFormatSizeFlags_G_FORMAT_SIZE_LONG_FORMAT: GFormatSizeFlags = 1;
pub const GFormatSizeFlags_G_FORMAT_SIZE_IEC_UNITS: GFormatSizeFlags = 2;
pub const GFormatSizeFlags_G_FORMAT_SIZE_BITS: GFormatSizeFlags = 4;
pub const GFormatSizeFlags_G_FORMAT_SIZE_ONLY_VALUE: GFormatSizeFlags = 8;
pub const GFormatSizeFlags_G_FORMAT_SIZE_ONLY_UNIT: GFormatSizeFlags = 16;
pub type GFormatSizeFlags = ::core::ffi::c_uint;
extern "C" {
    pub fn _frida_g_format_size_full(size: guint64, flags: GFormatSizeFlags) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_format_size(size: guint64) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_format_size_for_display(size: goffset) -> *mut gchar;
}
pub type GVoidFunc = ::core::option::Option<unsafe extern "C" fn()>;
extern "C" {
    pub fn _frida_g_atexit(func: GVoidFunc);
}
extern "C" {
    pub fn _frida_g_find_program_in_path(program: *const gchar) -> *mut gchar;
}
extern "C" {
    pub fn g_bit_nth_lsf(mask: gulong, nth_bit: gint) -> gint;
}
extern "C" {
    pub fn g_bit_nth_msf(mask: gulong, nth_bit: gint) -> gint;
}
extern "C" {
    pub fn g_bit_storage(number: gulong) -> guint;
}
pub type fpos_t = off_t;
pub type fpos64_t = off64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILE {
    _unused: [u8; 0],
}
pub type FILE = __sFILE;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn clearerr(__fp: *mut FILE);
}
extern "C" {
    pub fn fclose(__fp: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn feof(__fp: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn ferror(__fp: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fflush(__fp: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fgetc(__fp: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fgets(
        __buf: *mut ::core::ffi::c_char,
        __size: ::core::ffi::c_int,
        __fp: *mut FILE,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn fprintf(__fp: *mut FILE, __fmt: *const ::core::ffi::c_char, ...) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fputc(__ch: ::core::ffi::c_int, __fp: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fputs(__s: *const ::core::ffi::c_char, __fp: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fread(
        __buf: *mut ::core::ffi::c_void,
        __size: ::core::ffi::c_ulong,
        __count: ::core::ffi::c_ulong,
        __fp: *mut FILE,
    ) -> ::core::ffi::c_ulong;
}
extern "C" {
    pub fn fscanf(__fp: *mut FILE, __fmt: *const ::core::ffi::c_char, ...) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fwrite(
        __buf: *const ::core::ffi::c_void,
        __size: ::core::ffi::c_ulong,
        __count: ::core::ffi::c_ulong,
        __fp: *mut FILE,
    ) -> ::core::ffi::c_ulong;
}
extern "C" {
    pub fn getc(__fp: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn getchar() -> ::core::ffi::c_int;
}
extern "C" {
    pub fn getdelim(
        __line_ptr: *mut *mut ::core::ffi::c_char,
        __line_length_ptr: *mut usize,
        __delimiter: ::core::ffi::c_int,
        __fp: *mut FILE,
    ) -> isize;
}
extern "C" {
    pub fn getline(
        __line_ptr: *mut *mut ::core::ffi::c_char,
        __line_length_ptr: *mut usize,
        __fp: *mut FILE,
    ) -> isize;
}
extern "C" {
    pub fn perror(__msg: *const ::core::ffi::c_char);
}
extern "C" {
    pub fn printf(__fmt: *const ::core::ffi::c_char, ...) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn putc(__ch: ::core::ffi::c_int, __fp: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn putchar(__ch: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn remove(__path: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn rewind(__fp: *mut FILE);
}
extern "C" {
    pub fn scanf(__fmt: *const ::core::ffi::c_char, ...) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn setbuf(__fp: *mut FILE, __buf: *mut ::core::ffi::c_char);
}
extern "C" {
    pub fn setvbuf(
        __fp: *mut FILE,
        __buf: *mut ::core::ffi::c_char,
        __mode: ::core::ffi::c_int,
        __size: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::core::ffi::c_char,
        __fmt: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn ungetc(__ch: ::core::ffi::c_int, __fp: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn vfprintf(
        __fp: *mut FILE,
        __fmt: *const ::core::ffi::c_char,
        __args: [u64; 4usize],
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn vprintf(__fp: *const ::core::ffi::c_char, __args: [u64; 4usize]) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::core::ffi::c_int,
        __fmt: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::core::ffi::c_int,
        __fmt: *const ::core::ffi::c_char,
        __args: va_list,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::core::ffi::c_char,
        __fmt: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::core::ffi::c_char,
        __fmt: *const ::core::ffi::c_char,
        __args: [u64; 4usize],
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::core::ffi::c_char,
        __prefix: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn rename(
        __old_path: *const ::core::ffi::c_char,
        __new_path: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn renameat(
        __old_dir_fd: ::core::ffi::c_int,
        __old_path: *const ::core::ffi::c_char,
        __new_dir_fd: ::core::ffi::c_int,
        __new_path: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fseek(
        __fp: *mut FILE,
        __offset: ::core::ffi::c_long,
        __whence: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn ftell(__fp: *mut FILE) -> ::core::ffi::c_long;
}
extern "C" {
    pub fn fgetpos(__fp: *mut FILE, __pos: *mut fpos_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fsetpos(__fp: *mut FILE, __pos: *const fpos_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fseeko(
        __fp: *mut FILE,
        __offset: off_t,
        __whence: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn ftello(__fp: *mut FILE) -> off_t;
}
extern "C" {
    pub fn fgetpos64(__fp: *mut FILE, __pos: *mut fpos64_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fsetpos64(__fp: *mut FILE, __pos: *const fpos64_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fseeko64(
        __fp: *mut FILE,
        __offset: off64_t,
        __whence: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn ftello64(__fp: *mut FILE) -> off64_t;
}
extern "C" {
    pub fn fopen(
        __path: *const ::core::ffi::c_char,
        __mode: *const ::core::ffi::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fopen64(
        __path: *const ::core::ffi::c_char,
        __mode: *const ::core::ffi::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __path: *const ::core::ffi::c_char,
        __mode: *const ::core::ffi::c_char,
        __fp: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen64(
        __path: *const ::core::ffi::c_char,
        __mode: *const ::core::ffi::c_char,
        __fp: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpfile64() -> *mut FILE;
}
extern "C" {
    pub fn snprintf(
        __buf: *mut ::core::ffi::c_char,
        __size: ::core::ffi::c_ulong,
        __fmt: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn vfscanf(
        __fp: *mut FILE,
        __fmt: *const ::core::ffi::c_char,
        __args: [u64; 4usize],
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn vscanf(__fmt: *const ::core::ffi::c_char, __args: [u64; 4usize]) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __buf: *mut ::core::ffi::c_char,
        __size: ::core::ffi::c_ulong,
        __fmt: *const ::core::ffi::c_char,
        __args: [u64; 4usize],
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::core::ffi::c_char,
        __fmt: *const ::core::ffi::c_char,
        __args: [u64; 4usize],
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn ctermid(__buf: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn fdopen(__fd: ::core::ffi::c_int, __mode: *const ::core::ffi::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fileno(__fp: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pclose(__fp: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::core::ffi::c_char,
        __mode: *const ::core::ffi::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn flockfile(__fp: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__fp: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn funlockfile(__fp: *mut FILE);
}
extern "C" {
    pub fn getc_unlocked(__fp: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::core::ffi::c_int;
}
extern "C" {
    pub fn putc_unlocked(__ch: ::core::ffi::c_int, __fp: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__ch: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fmemopen(
        __buf: *mut ::core::ffi::c_void,
        __size: usize,
        __mode: *const ::core::ffi::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __ptr: *mut *mut ::core::ffi::c_char,
        __size_ptr: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub fn asprintf(
        __s_ptr: *mut *mut ::core::ffi::c_char,
        __fmt: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fgetln(__fp: *mut FILE, __length_ptr: *mut usize) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn fpurge(__fp: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn setbuffer(__fp: *mut FILE, __buf: *mut ::core::ffi::c_char, __size: ::core::ffi::c_int);
}
extern "C" {
    pub fn setlinebuf(__fp: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn vasprintf(
        __s_ptr: *mut *mut ::core::ffi::c_char,
        __fmt: *const ::core::ffi::c_char,
        __args: va_list,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__fp: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__fp: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__fp: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__fp: *mut FILE) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn malloc(__byte_count: ::core::ffi::c_ulong) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn calloc(
        __item_count: ::core::ffi::c_ulong,
        __item_size: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::core::ffi::c_void,
        __byte_count: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn reallocarray(
        __ptr: *mut ::core::ffi::c_void,
        __item_count: usize,
        __item_size: usize,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::core::ffi::c_void);
}
extern "C" {
    pub fn memalign(
        __alignment: ::core::ffi::c_ulong,
        __byte_count: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn malloc_usable_size(__ptr: *const ::core::ffi::c_void) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mallinfo {
    pub arena: usize,
    pub ordblks: usize,
    pub smblks: usize,
    pub hblks: usize,
    pub hblkhd: usize,
    pub usmblks: usize,
    pub fsmblks: usize,
    pub uordblks: usize,
    pub fordblks: usize,
    pub keepcost: usize,
}
extern "C" {
    pub fn mallinfo() -> mallinfo;
}
extern "C" {
    pub fn malloc_info(__must_be_zero: ::core::ffi::c_int, __fp: *mut FILE) -> ::core::ffi::c_int;
}
pub const HeapTaggingLevel_M_HEAP_TAGGING_LEVEL_NONE: HeapTaggingLevel = 0;
pub const HeapTaggingLevel_M_HEAP_TAGGING_LEVEL_TBI: HeapTaggingLevel = 1;
pub const HeapTaggingLevel_M_HEAP_TAGGING_LEVEL_ASYNC: HeapTaggingLevel = 2;
pub const HeapTaggingLevel_M_HEAP_TAGGING_LEVEL_SYNC: HeapTaggingLevel = 3;
pub type HeapTaggingLevel = ::core::ffi::c_uint;
extern "C" {
    pub fn mallopt(__option: ::core::ffi::c_int, __value: ::core::ffi::c_int)
        -> ::core::ffi::c_int;
}
extern "C" {
    pub static mut __malloc_hook: ::core::option::Option<
        unsafe extern "C" fn(
            __byte_count: usize,
            __caller: *const ::core::ffi::c_void,
        ) -> *mut ::core::ffi::c_void,
    >;
}
extern "C" {
    pub static mut __realloc_hook: ::core::option::Option<
        unsafe extern "C" fn(
            __ptr: *mut ::core::ffi::c_void,
            __byte_count: usize,
            __caller: *const ::core::ffi::c_void,
        ) -> *mut ::core::ffi::c_void,
    >;
}
extern "C" {
    pub static mut __free_hook: ::core::option::Option<
        unsafe extern "C" fn(__ptr: *mut ::core::ffi::c_void, __caller: *const ::core::ffi::c_void),
    >;
}
extern "C" {
    pub static mut __memalign_hook: ::core::option::Option<
        unsafe extern "C" fn(
            __alignment: usize,
            __byte_count: usize,
            __caller: *const ::core::ffi::c_void,
        ) -> *mut ::core::ffi::c_void,
    >;
}
extern "C" {
    pub fn abort() -> !;
}
extern "C" {
    pub fn exit(__status: ::core::ffi::c_int) -> !;
}
extern "C" {
    pub fn _Exit(__status: ::core::ffi::c_int) -> !;
}
extern "C" {
    pub fn atexit(__fn: ::core::option::Option<unsafe extern "C" fn()>) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __fn: ::core::option::Option<unsafe extern "C" fn()>,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn quick_exit(__status: ::core::ffi::c_int) -> !;
}
extern "C" {
    pub fn getenv(__name: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn putenv(__assignment: *mut ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::core::ffi::c_char,
        __value: *const ::core::ffi::c_char,
        __overwrite: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn clearenv() -> ::core::ffi::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn mktemp(__template: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn mkostemp64(
        __template: *mut ::core::ffi::c_char,
        __flags: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn mkostemp(
        __template: *mut ::core::ffi::c_char,
        __flags: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn mkostemps64(
        __template: *mut ::core::ffi::c_char,
        __suffix_length: ::core::ffi::c_int,
        __flags: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn mkostemps(
        __template: *mut ::core::ffi::c_char,
        __suffix_length: ::core::ffi::c_int,
        __flags: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn mkstemp64(__template: *mut ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn mkstemps64(
        __template: *mut ::core::ffi::c_char,
        __flags: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::core::ffi::c_char,
        __flags: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn strtol(
        __s: *const ::core::ffi::c_char,
        __end_ptr: *mut *mut ::core::ffi::c_char,
        __base: ::core::ffi::c_int,
    ) -> ::core::ffi::c_long;
}
extern "C" {
    pub fn strtoll(
        __s: *const ::core::ffi::c_char,
        __end_ptr: *mut *mut ::core::ffi::c_char,
        __base: ::core::ffi::c_int,
    ) -> ::core::ffi::c_longlong;
}
extern "C" {
    pub fn strtoul(
        __s: *const ::core::ffi::c_char,
        __end_ptr: *mut *mut ::core::ffi::c_char,
        __base: ::core::ffi::c_int,
    ) -> ::core::ffi::c_ulong;
}
extern "C" {
    pub fn strtoull(
        __s: *const ::core::ffi::c_char,
        __end_ptr: *mut *mut ::core::ffi::c_char,
        __base: ::core::ffi::c_int,
    ) -> ::core::ffi::c_ulonglong;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::core::ffi::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn aligned_alloc(
        __alignment: ::core::ffi::c_ulong,
        __size: ::core::ffi::c_ulong,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn strtod(__s: *const ::core::ffi::c_char, __end_ptr: *mut *mut ::core::ffi::c_char)
        -> f64;
}
extern "C" {
    pub fn strtold(
        __s: *const ::core::ffi::c_char,
        __end_ptr: *mut *mut ::core::ffi::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtoul_l(
        __s: *const ::core::ffi::c_char,
        __end_ptr: *mut *mut ::core::ffi::c_char,
        __base: ::core::ffi::c_int,
        __l: locale_t,
    ) -> ::core::ffi::c_ulong;
}
extern "C" {
    pub fn atoi(__s: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn atol(__s: *const ::core::ffi::c_char) -> ::core::ffi::c_long;
}
extern "C" {
    pub fn atoll(__s: *const ::core::ffi::c_char) -> ::core::ffi::c_longlong;
}
extern "C" {
    pub fn realpath(
        __path: *const ::core::ffi::c_char,
        __resolved: *mut ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn system(__command: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn bsearch(
        __key: *const ::core::ffi::c_void,
        __base: *const ::core::ffi::c_void,
        __nmemb: usize,
        __size: usize,
        __comparator: ::core::option::Option<
            unsafe extern "C" fn(
                __lhs: *const ::core::ffi::c_void,
                __rhs: *const ::core::ffi::c_void,
            ) -> ::core::ffi::c_int,
        >,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::core::ffi::c_void,
        __nmemb: usize,
        __size: usize,
        __comparator: ::core::option::Option<
            unsafe extern "C" fn(
                __lhs: *const ::core::ffi::c_void,
                __rhs: *const ::core::ffi::c_void,
            ) -> ::core::ffi::c_int,
        >,
    );
}
extern "C" {
    pub fn arc4random() -> u32;
}
extern "C" {
    pub fn arc4random_uniform(__upper_bound: u32) -> u32;
}
extern "C" {
    pub fn arc4random_buf(__buf: *mut ::core::ffi::c_void, __n: usize);
}
extern "C" {
    pub fn rand_r(__seed_ptr: *mut ::core::ffi::c_uint) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::core::ffi::c_ushort) -> f64;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::core::ffi::c_ushort) -> ::core::ffi::c_long;
}
extern "C" {
    pub fn lcong48(__param: *mut ::core::ffi::c_ushort);
}
extern "C" {
    pub fn lrand48() -> ::core::ffi::c_long;
}
extern "C" {
    pub fn mrand48() -> ::core::ffi::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::core::ffi::c_ushort) -> ::core::ffi::c_long;
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::core::ffi::c_ushort) -> *mut ::core::ffi::c_ushort;
}
extern "C" {
    pub fn srand48(__seed: ::core::ffi::c_long);
}
extern "C" {
    pub fn initstate(
        __seed: ::core::ffi::c_uint,
        __state: *mut ::core::ffi::c_char,
        __n: usize,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn setstate(__state: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn getpt() -> ::core::ffi::c_int;
}
extern "C" {
    pub fn posix_openpt(__flags: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn ptsname(__fd: ::core::ffi::c_int) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn ptsname_r(
        __fd: ::core::ffi::c_int,
        __buf: *mut ::core::ffi::c_char,
        __n: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn unlockpt(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn getsubopt(
        __option: *mut *mut ::core::ffi::c_char,
        __tokens: *const *mut ::core::ffi::c_char,
        __value_ptr: *mut *mut ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::core::ffi::c_int,
    pub rem: ::core::ffi::c_int,
}
extern "C" {
    pub fn div(__numerator: ::core::ffi::c_int, __denominator: ::core::ffi::c_int) -> div_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::core::ffi::c_long,
    pub rem: ::core::ffi::c_long,
}
extern "C" {
    pub fn ldiv(__numerator: ::core::ffi::c_long, __denominator: ::core::ffi::c_long) -> ldiv_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::core::ffi::c_longlong,
    pub rem: ::core::ffi::c_longlong,
}
extern "C" {
    pub fn lldiv(
        __numerator: ::core::ffi::c_longlong,
        __denominator: ::core::ffi::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn getloadavg(__averages: *mut f64, __n: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn getprogname() -> *const ::core::ffi::c_char;
}
extern "C" {
    pub fn setprogname(__name: *const ::core::ffi::c_char);
}
extern "C" {
    pub fn mblen(__s: *const ::core::ffi::c_char, __n: usize) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn mbstowcs(__dst: *mut wchar_t, __src: *const ::core::ffi::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn mbtowc(
        __wc_ptr: *mut wchar_t,
        __s: *const ::core::ffi::c_char,
        __n: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn wctomb(__dst: *mut ::core::ffi::c_char, __wc: wchar_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn wcstombs(__dst: *mut ::core::ffi::c_char, __src: *const wchar_t, __n: usize) -> usize;
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
extern "C" {
    pub fn abs(__x: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn labs(__x: ::core::ffi::c_long) -> ::core::ffi::c_long;
}
extern "C" {
    pub fn llabs(__x: ::core::ffi::c_longlong) -> ::core::ffi::c_longlong;
}
extern "C" {
    pub fn strtof(__s: *const ::core::ffi::c_char, __end_ptr: *mut *mut ::core::ffi::c_char)
        -> f32;
}
extern "C" {
    pub fn atof(__s: *const ::core::ffi::c_char) -> f64;
}
extern "C" {
    pub fn rand() -> ::core::ffi::c_int;
}
extern "C" {
    pub fn srand(__seed: ::core::ffi::c_uint);
}
extern "C" {
    pub fn random() -> ::core::ffi::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::core::ffi::c_uint);
}
extern "C" {
    pub fn grantpt(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn strtoll_l(
        __s: *const ::core::ffi::c_char,
        __end_ptr: *mut *mut ::core::ffi::c_char,
        __base: ::core::ffi::c_int,
        __l: locale_t,
    ) -> ::core::ffi::c_longlong;
}
extern "C" {
    pub fn strtoull_l(
        __s: *const ::core::ffi::c_char,
        __end_ptr: *mut *mut ::core::ffi::c_char,
        __base: ::core::ffi::c_int,
        __l: locale_t,
    ) -> ::core::ffi::c_ulonglong;
}
extern "C" {
    pub fn strtold_l(
        __s: *const ::core::ffi::c_char,
        __end_ptr: *mut *mut ::core::ffi::c_char,
        __l: locale_t,
    ) -> u128;
}
extern "C" {
    pub fn strtod_l(
        __s: *const ::core::ffi::c_char,
        __end_ptr: *mut *mut ::core::ffi::c_char,
        __l: locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtof_l(
        __s: *const ::core::ffi::c_char,
        __end_ptr: *mut *mut ::core::ffi::c_char,
        __l: locale_t,
    ) -> f32;
}
extern "C" {
    pub fn strtol_l(
        __s: *const ::core::ffi::c_char,
        __end_ptr: *mut *mut ::core::ffi::c_char,
        arg1: ::core::ffi::c_int,
        __l: locale_t,
    ) -> ::core::ffi::c_long;
}
extern "C" {
    pub fn _frida_g_thread_error_quark() -> GQuark;
}
pub const GThreadError_G_THREAD_ERROR_AGAIN: GThreadError = 0;
pub type GThreadError = ::core::ffi::c_uint;
pub type GThreadFunc =
    ::core::option::Option<unsafe extern "C" fn(user_data: gpointer) -> gpointer>;
pub type GThreadGarbageHandler = ::core::option::Option<unsafe extern "C" fn(data: gpointer)>;
pub type GThreadCallbacks = _GThreadCallbacks;
pub type GThread = _GThread;
pub type GMutex = _GMutex;
pub type GRecMutex = _GRecMutex;
pub type GRWLock = _GRWLock;
pub type GCond = _GCond;
pub type GPrivate = _GPrivate;
pub type GOnce = _GOnce;
pub const GPrivateFlags_G_PRIVATE_DESTROY_LATE: GPrivateFlags = 1;
pub const GPrivateFlags_G_PRIVATE_DESTROY_LAST: GPrivateFlags = 2;
pub type GPrivateFlags = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GThreadCallbacks {
    pub on_thread_init: ::core::option::Option<unsafe extern "C" fn()>,
    pub on_thread_realize: ::core::option::Option<unsafe extern "C" fn()>,
    pub on_thread_dispose: ::core::option::Option<unsafe extern "C" fn()>,
    pub on_thread_finalize: ::core::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _GMutex {
    pub p: gpointer,
    pub i: [guint; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GRWLock {
    pub p: gpointer,
    pub i: [guint; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GCond {
    pub p: gpointer,
    pub i: [guint; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GRecMutex {
    pub p: gpointer,
    pub i: [guint; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GPrivate {
    pub p: gpointer,
    pub notify: GDestroyNotify,
    pub flags: GPrivateFlags,
    pub future: [gpointer; 1usize],
}
pub const GOnceStatus_G_ONCE_STATUS_NOTCALLED: GOnceStatus = 0;
pub const GOnceStatus_G_ONCE_STATUS_PROGRESS: GOnceStatus = 1;
pub const GOnceStatus_G_ONCE_STATUS_READY: GOnceStatus = 2;
pub type GOnceStatus = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GOnce {
    pub status: GOnceStatus,
    pub retval: gpointer,
}
extern "C" {
    pub static mut _frida_glib_thread_callbacks: *mut GThreadCallbacks;
}
extern "C" {
    pub fn _frida_g_thread_set_callbacks(callbacks: *mut GThreadCallbacks);
}
extern "C" {
    pub fn _frida_g_thread_set_garbage_handler(handler: GThreadGarbageHandler, user_data: gpointer);
}
extern "C" {
    pub fn _frida_g_thread_garbage_collect() -> gboolean;
}
extern "C" {
    pub fn _frida_g_thread_ref(thread: *mut GThread) -> *mut GThread;
}
extern "C" {
    pub fn _frida_g_thread_unref(thread: *mut GThread);
}
extern "C" {
    pub fn _frida_g_thread_new(
        name: *const gchar,
        func: GThreadFunc,
        data: gpointer,
    ) -> *mut GThread;
}
extern "C" {
    pub fn _frida_g_thread_try_new(
        name: *const gchar,
        func: GThreadFunc,
        data: gpointer,
        error: *mut *mut GError,
    ) -> *mut GThread;
}
extern "C" {
    pub fn _frida_g_thread_self() -> *mut GThread;
}
extern "C" {
    pub fn _frida_g_thread_exit(retval: gpointer);
}
extern "C" {
    pub fn _frida_g_thread_join(thread: *mut GThread) -> gpointer;
}
extern "C" {
    pub fn _frida_g_thread_yield();
}
extern "C" {
    pub fn _frida_g_mutex_init(mutex: *mut GMutex);
}
extern "C" {
    pub fn _frida_g_mutex_clear(mutex: *mut GMutex);
}
extern "C" {
    pub fn _frida_g_mutex_lock(mutex: *mut GMutex);
}
extern "C" {
    pub fn _frida_g_mutex_trylock(mutex: *mut GMutex) -> gboolean;
}
extern "C" {
    pub fn _frida_g_mutex_unlock(mutex: *mut GMutex);
}
extern "C" {
    pub fn _frida_g_rw_lock_init(rw_lock: *mut GRWLock);
}
extern "C" {
    pub fn _frida_g_rw_lock_clear(rw_lock: *mut GRWLock);
}
extern "C" {
    pub fn _frida_g_rw_lock_writer_lock(rw_lock: *mut GRWLock);
}
extern "C" {
    pub fn _frida_g_rw_lock_writer_trylock(rw_lock: *mut GRWLock) -> gboolean;
}
extern "C" {
    pub fn _frida_g_rw_lock_writer_unlock(rw_lock: *mut GRWLock);
}
extern "C" {
    pub fn _frida_g_rw_lock_reader_lock(rw_lock: *mut GRWLock);
}
extern "C" {
    pub fn _frida_g_rw_lock_reader_trylock(rw_lock: *mut GRWLock) -> gboolean;
}
extern "C" {
    pub fn _frida_g_rw_lock_reader_unlock(rw_lock: *mut GRWLock);
}
extern "C" {
    pub fn _frida_g_rec_mutex_init(rec_mutex: *mut GRecMutex);
}
extern "C" {
    pub fn _frida_g_rec_mutex_clear(rec_mutex: *mut GRecMutex);
}
extern "C" {
    pub fn _frida_g_rec_mutex_lock(rec_mutex: *mut GRecMutex);
}
extern "C" {
    pub fn _frida_g_rec_mutex_trylock(rec_mutex: *mut GRecMutex) -> gboolean;
}
extern "C" {
    pub fn _frida_g_rec_mutex_unlock(rec_mutex: *mut GRecMutex);
}
extern "C" {
    pub fn _frida_g_cond_init(cond: *mut GCond);
}
extern "C" {
    pub fn _frida_g_cond_clear(cond: *mut GCond);
}
extern "C" {
    pub fn _frida_g_cond_wait(cond: *mut GCond, mutex: *mut GMutex);
}
extern "C" {
    pub fn _frida_g_cond_signal(cond: *mut GCond);
}
extern "C" {
    pub fn _frida_g_cond_broadcast(cond: *mut GCond);
}
extern "C" {
    pub fn _frida_g_cond_wait_until(
        cond: *mut GCond,
        mutex: *mut GMutex,
        end_time: gint64,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_private_get(key: *mut GPrivate) -> gpointer;
}
extern "C" {
    pub fn _frida_g_private_set(key: *mut GPrivate, value: gpointer);
}
extern "C" {
    pub fn _frida_g_private_replace(key: *mut GPrivate, value: gpointer);
}
extern "C" {
    pub fn _frida_g_once_impl(once: *mut GOnce, func: GThreadFunc, arg: gpointer) -> gpointer;
}
extern "C" {
    pub fn _frida_g_once_init_enter(location: *mut ::core::ffi::c_void) -> gboolean;
}
extern "C" {
    pub fn _frida_g_once_init_leave(location: *mut ::core::ffi::c_void, result: gsize);
}
extern "C" {
    pub fn _frida_g_get_num_processors() -> guint;
}
pub type GMutexLocker = ::core::ffi::c_void;
pub type GRecMutexLocker = ::core::ffi::c_void;
pub type GRWLockWriterLocker = ::core::ffi::c_void;
pub type GRWLockReaderLocker = ::core::ffi::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GAsyncQueue {
    _unused: [u8; 0],
}
pub type GAsyncQueue = _GAsyncQueue;
extern "C" {
    pub fn _frida_g_async_queue_new() -> *mut GAsyncQueue;
}
extern "C" {
    pub fn _frida_g_async_queue_new_full(item_free_func: GDestroyNotify) -> *mut GAsyncQueue;
}
extern "C" {
    pub fn _frida_g_async_queue_lock(queue: *mut GAsyncQueue);
}
extern "C" {
    pub fn _frida_g_async_queue_unlock(queue: *mut GAsyncQueue);
}
extern "C" {
    pub fn _frida_g_async_queue_ref(queue: *mut GAsyncQueue) -> *mut GAsyncQueue;
}
extern "C" {
    pub fn _frida_g_async_queue_unref(queue: *mut GAsyncQueue);
}
extern "C" {
    pub fn _frida_g_async_queue_ref_unlocked(queue: *mut GAsyncQueue);
}
extern "C" {
    pub fn _frida_g_async_queue_unref_and_unlock(queue: *mut GAsyncQueue);
}
extern "C" {
    pub fn _frida_g_async_queue_push(queue: *mut GAsyncQueue, data: gpointer);
}
extern "C" {
    pub fn _frida_g_async_queue_push_unlocked(queue: *mut GAsyncQueue, data: gpointer);
}
extern "C" {
    pub fn _frida_g_async_queue_push_sorted(
        queue: *mut GAsyncQueue,
        data: gpointer,
        func: GCompareDataFunc,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_async_queue_push_sorted_unlocked(
        queue: *mut GAsyncQueue,
        data: gpointer,
        func: GCompareDataFunc,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_async_queue_pop(queue: *mut GAsyncQueue) -> gpointer;
}
extern "C" {
    pub fn _frida_g_async_queue_pop_unlocked(queue: *mut GAsyncQueue) -> gpointer;
}
extern "C" {
    pub fn _frida_g_async_queue_try_pop(queue: *mut GAsyncQueue) -> gpointer;
}
extern "C" {
    pub fn _frida_g_async_queue_try_pop_unlocked(queue: *mut GAsyncQueue) -> gpointer;
}
extern "C" {
    pub fn _frida_g_async_queue_timeout_pop(queue: *mut GAsyncQueue, timeout: guint64) -> gpointer;
}
extern "C" {
    pub fn _frida_g_async_queue_timeout_pop_unlocked(
        queue: *mut GAsyncQueue,
        timeout: guint64,
    ) -> gpointer;
}
extern "C" {
    pub fn _frida_g_async_queue_length(queue: *mut GAsyncQueue) -> gint;
}
extern "C" {
    pub fn _frida_g_async_queue_length_unlocked(queue: *mut GAsyncQueue) -> gint;
}
extern "C" {
    pub fn _frida_g_async_queue_sort(
        queue: *mut GAsyncQueue,
        func: GCompareDataFunc,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_async_queue_sort_unlocked(
        queue: *mut GAsyncQueue,
        func: GCompareDataFunc,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_async_queue_remove(queue: *mut GAsyncQueue, item: gpointer) -> gboolean;
}
extern "C" {
    pub fn _frida_g_async_queue_remove_unlocked(
        queue: *mut GAsyncQueue,
        item: gpointer,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_async_queue_push_front(queue: *mut GAsyncQueue, item: gpointer);
}
extern "C" {
    pub fn _frida_g_async_queue_push_front_unlocked(queue: *mut GAsyncQueue, item: gpointer);
}
extern "C" {
    pub fn _frida_g_async_queue_timed_pop(
        queue: *mut GAsyncQueue,
        end_time: *mut GTimeVal,
    ) -> gpointer;
}
extern "C" {
    pub fn _frida_g_async_queue_timed_pop_unlocked(
        queue: *mut GAsyncQueue,
        end_time: *mut GTimeVal,
    ) -> gpointer;
}
extern "C" {
    pub fn _frida_g_on_error_query(prg_name: *const gchar);
}
extern "C" {
    pub fn _frida_g_on_error_stack_trace(prg_name: *const gchar);
}
extern "C" {
    pub fn _frida_g_base64_encode_step(
        in_: *const guchar,
        len: gsize,
        break_lines: gboolean,
        out: *mut gchar,
        state: *mut gint,
        save: *mut gint,
    ) -> gsize;
}
extern "C" {
    pub fn _frida_g_base64_encode_close(
        break_lines: gboolean,
        out: *mut gchar,
        state: *mut gint,
        save: *mut gint,
    ) -> gsize;
}
extern "C" {
    pub fn _frida_g_base64_encode(data: *const guchar, len: gsize) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_base64_decode_step(
        in_: *const gchar,
        len: gsize,
        out: *mut guchar,
        state: *mut gint,
        save: *mut guint,
    ) -> gsize;
}
extern "C" {
    pub fn _frida_g_base64_decode(text: *const gchar, out_len: *mut gsize) -> *mut guchar;
}
extern "C" {
    pub fn _frida_g_base64_decode_inplace(text: *mut gchar, out_len: *mut gsize) -> *mut guchar;
}
extern "C" {
    pub fn _frida_g_bit_lock(address: *mut gint, lock_bit: gint);
}
extern "C" {
    pub fn _frida_g_bit_trylock(address: *mut gint, lock_bit: gint) -> gboolean;
}
extern "C" {
    pub fn _frida_g_bit_unlock(address: *mut gint, lock_bit: gint);
}
extern "C" {
    pub fn _frida_g_pointer_bit_lock(address: *mut ::core::ffi::c_void, lock_bit: gint);
}
extern "C" {
    pub fn _frida_g_pointer_bit_trylock(
        address: *mut ::core::ffi::c_void,
        lock_bit: gint,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_pointer_bit_unlock(address: *mut ::core::ffi::c_void, lock_bit: gint);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTimeZone {
    _unused: [u8; 0],
}
pub type GTimeZone = _GTimeZone;
pub const GTimeType_G_TIME_TYPE_STANDARD: GTimeType = 0;
pub const GTimeType_G_TIME_TYPE_DAYLIGHT: GTimeType = 1;
pub const GTimeType_G_TIME_TYPE_UNIVERSAL: GTimeType = 2;
pub type GTimeType = ::core::ffi::c_uint;
extern "C" {
    pub fn _frida_g_time_zone_new(identifier: *const gchar) -> *mut GTimeZone;
}
extern "C" {
    pub fn _frida_g_time_zone_new_identifier(identifier: *const gchar) -> *mut GTimeZone;
}
extern "C" {
    pub fn _frida_g_time_zone_new_utc() -> *mut GTimeZone;
}
extern "C" {
    pub fn _frida_g_time_zone_new_local() -> *mut GTimeZone;
}
extern "C" {
    pub fn _frida_g_time_zone_new_offset(seconds: gint32) -> *mut GTimeZone;
}
extern "C" {
    pub fn _frida_g_time_zone_ref(tz: *mut GTimeZone) -> *mut GTimeZone;
}
extern "C" {
    pub fn _frida_g_time_zone_unref(tz: *mut GTimeZone);
}
extern "C" {
    pub fn _frida_g_time_zone_find_interval(
        tz: *mut GTimeZone,
        type_: GTimeType,
        time_: gint64,
    ) -> gint;
}
extern "C" {
    pub fn _frida_g_time_zone_adjust_time(
        tz: *mut GTimeZone,
        type_: GTimeType,
        time_: *mut gint64,
    ) -> gint;
}
extern "C" {
    pub fn _frida_g_time_zone_get_abbreviation(tz: *mut GTimeZone, interval: gint) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_time_zone_get_offset(tz: *mut GTimeZone, interval: gint) -> gint32;
}
extern "C" {
    pub fn _frida_g_time_zone_is_dst(tz: *mut GTimeZone, interval: gint) -> gboolean;
}
extern "C" {
    pub fn _frida_g_time_zone_get_identifier(tz: *mut GTimeZone) -> *const gchar;
}
pub type GTimeSpan = gint64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDateTime {
    _unused: [u8; 0],
}
pub type GDateTime = _GDateTime;
extern "C" {
    pub fn _frida_g_date_time_unref(datetime: *mut GDateTime);
}
extern "C" {
    pub fn _frida_g_date_time_ref(datetime: *mut GDateTime) -> *mut GDateTime;
}
extern "C" {
    pub fn _frida_g_date_time_new_now(tz: *mut GTimeZone) -> *mut GDateTime;
}
extern "C" {
    pub fn _frida_g_date_time_new_now_local() -> *mut GDateTime;
}
extern "C" {
    pub fn _frida_g_date_time_new_now_utc() -> *mut GDateTime;
}
extern "C" {
    pub fn _frida_g_date_time_new_from_unix_local(t: gint64) -> *mut GDateTime;
}
extern "C" {
    pub fn _frida_g_date_time_new_from_unix_utc(t: gint64) -> *mut GDateTime;
}
extern "C" {
    pub fn _frida_g_date_time_new_from_timeval_local(tv: *const GTimeVal) -> *mut GDateTime;
}
extern "C" {
    pub fn _frida_g_date_time_new_from_timeval_utc(tv: *const GTimeVal) -> *mut GDateTime;
}
extern "C" {
    pub fn _frida_g_date_time_new_from_iso8601(
        text: *const gchar,
        default_tz: *mut GTimeZone,
    ) -> *mut GDateTime;
}
extern "C" {
    pub fn _frida_g_date_time_new(
        tz: *mut GTimeZone,
        year: gint,
        month: gint,
        day: gint,
        hour: gint,
        minute: gint,
        seconds: gdouble,
    ) -> *mut GDateTime;
}
extern "C" {
    pub fn _frida_g_date_time_new_local(
        year: gint,
        month: gint,
        day: gint,
        hour: gint,
        minute: gint,
        seconds: gdouble,
    ) -> *mut GDateTime;
}
extern "C" {
    pub fn _frida_g_date_time_new_utc(
        year: gint,
        month: gint,
        day: gint,
        hour: gint,
        minute: gint,
        seconds: gdouble,
    ) -> *mut GDateTime;
}
extern "C" {
    pub fn _frida_g_date_time_add(datetime: *mut GDateTime, timespan: GTimeSpan) -> *mut GDateTime;
}
extern "C" {
    pub fn _frida_g_date_time_add_years(datetime: *mut GDateTime, years: gint) -> *mut GDateTime;
}
extern "C" {
    pub fn _frida_g_date_time_add_months(datetime: *mut GDateTime, months: gint) -> *mut GDateTime;
}
extern "C" {
    pub fn _frida_g_date_time_add_weeks(datetime: *mut GDateTime, weeks: gint) -> *mut GDateTime;
}
extern "C" {
    pub fn _frida_g_date_time_add_days(datetime: *mut GDateTime, days: gint) -> *mut GDateTime;
}
extern "C" {
    pub fn _frida_g_date_time_add_hours(datetime: *mut GDateTime, hours: gint) -> *mut GDateTime;
}
extern "C" {
    pub fn _frida_g_date_time_add_minutes(
        datetime: *mut GDateTime,
        minutes: gint,
    ) -> *mut GDateTime;
}
extern "C" {
    pub fn _frida_g_date_time_add_seconds(
        datetime: *mut GDateTime,
        seconds: gdouble,
    ) -> *mut GDateTime;
}
extern "C" {
    pub fn _frida_g_date_time_add_full(
        datetime: *mut GDateTime,
        years: gint,
        months: gint,
        days: gint,
        hours: gint,
        minutes: gint,
        seconds: gdouble,
    ) -> *mut GDateTime;
}
extern "C" {
    pub fn _frida_g_date_time_compare(dt1: gconstpointer, dt2: gconstpointer) -> gint;
}
extern "C" {
    pub fn _frida_g_date_time_difference(end: *mut GDateTime, begin: *mut GDateTime) -> GTimeSpan;
}
extern "C" {
    pub fn _frida_g_date_time_hash(datetime: gconstpointer) -> guint;
}
extern "C" {
    pub fn _frida_g_date_time_equal(dt1: gconstpointer, dt2: gconstpointer) -> gboolean;
}
extern "C" {
    pub fn _frida_g_date_time_get_ymd(
        datetime: *mut GDateTime,
        year: *mut gint,
        month: *mut gint,
        day: *mut gint,
    );
}
extern "C" {
    pub fn _frida_g_date_time_get_year(datetime: *mut GDateTime) -> gint;
}
extern "C" {
    pub fn _frida_g_date_time_get_month(datetime: *mut GDateTime) -> gint;
}
extern "C" {
    pub fn _frida_g_date_time_get_day_of_month(datetime: *mut GDateTime) -> gint;
}
extern "C" {
    pub fn _frida_g_date_time_get_week_numbering_year(datetime: *mut GDateTime) -> gint;
}
extern "C" {
    pub fn _frida_g_date_time_get_week_of_year(datetime: *mut GDateTime) -> gint;
}
extern "C" {
    pub fn _frida_g_date_time_get_day_of_week(datetime: *mut GDateTime) -> gint;
}
extern "C" {
    pub fn _frida_g_date_time_get_day_of_year(datetime: *mut GDateTime) -> gint;
}
extern "C" {
    pub fn _frida_g_date_time_get_hour(datetime: *mut GDateTime) -> gint;
}
extern "C" {
    pub fn _frida_g_date_time_get_minute(datetime: *mut GDateTime) -> gint;
}
extern "C" {
    pub fn _frida_g_date_time_get_second(datetime: *mut GDateTime) -> gint;
}
extern "C" {
    pub fn _frida_g_date_time_get_microsecond(datetime: *mut GDateTime) -> gint;
}
extern "C" {
    pub fn _frida_g_date_time_get_seconds(datetime: *mut GDateTime) -> gdouble;
}
extern "C" {
    pub fn _frida_g_date_time_to_unix(datetime: *mut GDateTime) -> gint64;
}
extern "C" {
    pub fn _frida_g_date_time_to_timeval(datetime: *mut GDateTime, tv: *mut GTimeVal) -> gboolean;
}
extern "C" {
    pub fn _frida_g_date_time_get_utc_offset(datetime: *mut GDateTime) -> GTimeSpan;
}
extern "C" {
    pub fn _frida_g_date_time_get_timezone(datetime: *mut GDateTime) -> *mut GTimeZone;
}
extern "C" {
    pub fn _frida_g_date_time_get_timezone_abbreviation(datetime: *mut GDateTime) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_date_time_is_daylight_savings(datetime: *mut GDateTime) -> gboolean;
}
extern "C" {
    pub fn _frida_g_date_time_to_timezone(
        datetime: *mut GDateTime,
        tz: *mut GTimeZone,
    ) -> *mut GDateTime;
}
extern "C" {
    pub fn _frida_g_date_time_to_local(datetime: *mut GDateTime) -> *mut GDateTime;
}
extern "C" {
    pub fn _frida_g_date_time_to_utc(datetime: *mut GDateTime) -> *mut GDateTime;
}
extern "C" {
    pub fn _frida_g_date_time_format(datetime: *mut GDateTime, format: *const gchar) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_date_time_format_iso8601(datetime: *mut GDateTime) -> *mut gchar;
}
pub const GBookmarkFileError_G_BOOKMARK_FILE_ERROR_INVALID_URI: GBookmarkFileError = 0;
pub const GBookmarkFileError_G_BOOKMARK_FILE_ERROR_INVALID_VALUE: GBookmarkFileError = 1;
pub const GBookmarkFileError_G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED: GBookmarkFileError = 2;
pub const GBookmarkFileError_G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND: GBookmarkFileError = 3;
pub const GBookmarkFileError_G_BOOKMARK_FILE_ERROR_READ: GBookmarkFileError = 4;
pub const GBookmarkFileError_G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING: GBookmarkFileError = 5;
pub const GBookmarkFileError_G_BOOKMARK_FILE_ERROR_WRITE: GBookmarkFileError = 6;
pub const GBookmarkFileError_G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND: GBookmarkFileError = 7;
pub type GBookmarkFileError = ::core::ffi::c_uint;
extern "C" {
    pub fn _frida_g_bookmark_file_error_quark() -> GQuark;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GBookmarkFile {
    _unused: [u8; 0],
}
pub type GBookmarkFile = _GBookmarkFile;
extern "C" {
    pub fn _frida_g_bookmark_file_new() -> *mut GBookmarkFile;
}
extern "C" {
    pub fn _frida_g_bookmark_file_free(bookmark: *mut GBookmarkFile);
}
extern "C" {
    pub fn _frida_g_bookmark_file_copy(bookmark: *mut GBookmarkFile) -> *mut GBookmarkFile;
}
extern "C" {
    pub fn _frida_g_bookmark_file_load_from_file(
        bookmark: *mut GBookmarkFile,
        filename: *const gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_bookmark_file_load_from_data(
        bookmark: *mut GBookmarkFile,
        data: *const gchar,
        length: gsize,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_bookmark_file_load_from_data_dirs(
        bookmark: *mut GBookmarkFile,
        file: *const gchar,
        full_path: *mut *mut gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_bookmark_file_to_data(
        bookmark: *mut GBookmarkFile,
        length: *mut gsize,
        error: *mut *mut GError,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_bookmark_file_to_file(
        bookmark: *mut GBookmarkFile,
        filename: *const gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_bookmark_file_set_title(
        bookmark: *mut GBookmarkFile,
        uri: *const gchar,
        title: *const gchar,
    );
}
extern "C" {
    pub fn _frida_g_bookmark_file_get_title(
        bookmark: *mut GBookmarkFile,
        uri: *const gchar,
        error: *mut *mut GError,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_bookmark_file_set_description(
        bookmark: *mut GBookmarkFile,
        uri: *const gchar,
        description: *const gchar,
    );
}
extern "C" {
    pub fn _frida_g_bookmark_file_get_description(
        bookmark: *mut GBookmarkFile,
        uri: *const gchar,
        error: *mut *mut GError,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_bookmark_file_set_mime_type(
        bookmark: *mut GBookmarkFile,
        uri: *const gchar,
        mime_type: *const gchar,
    );
}
extern "C" {
    pub fn _frida_g_bookmark_file_get_mime_type(
        bookmark: *mut GBookmarkFile,
        uri: *const gchar,
        error: *mut *mut GError,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_bookmark_file_set_groups(
        bookmark: *mut GBookmarkFile,
        uri: *const gchar,
        groups: *mut *const gchar,
        length: gsize,
    );
}
extern "C" {
    pub fn _frida_g_bookmark_file_add_group(
        bookmark: *mut GBookmarkFile,
        uri: *const gchar,
        group: *const gchar,
    );
}
extern "C" {
    pub fn _frida_g_bookmark_file_has_group(
        bookmark: *mut GBookmarkFile,
        uri: *const gchar,
        group: *const gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_bookmark_file_get_groups(
        bookmark: *mut GBookmarkFile,
        uri: *const gchar,
        length: *mut gsize,
        error: *mut *mut GError,
    ) -> *mut *mut gchar;
}
extern "C" {
    pub fn _frida_g_bookmark_file_add_application(
        bookmark: *mut GBookmarkFile,
        uri: *const gchar,
        name: *const gchar,
        exec: *const gchar,
    );
}
extern "C" {
    pub fn _frida_g_bookmark_file_has_application(
        bookmark: *mut GBookmarkFile,
        uri: *const gchar,
        name: *const gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_bookmark_file_get_applications(
        bookmark: *mut GBookmarkFile,
        uri: *const gchar,
        length: *mut gsize,
        error: *mut *mut GError,
    ) -> *mut *mut gchar;
}
extern "C" {
    pub fn _frida_g_bookmark_file_set_app_info(
        bookmark: *mut GBookmarkFile,
        uri: *const gchar,
        name: *const gchar,
        exec: *const gchar,
        count: gint,
        stamp: time_t,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_bookmark_file_set_application_info(
        bookmark: *mut GBookmarkFile,
        uri: *const ::core::ffi::c_char,
        name: *const ::core::ffi::c_char,
        exec: *const ::core::ffi::c_char,
        count: ::core::ffi::c_int,
        stamp: *mut GDateTime,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_bookmark_file_get_app_info(
        bookmark: *mut GBookmarkFile,
        uri: *const gchar,
        name: *const gchar,
        exec: *mut *mut gchar,
        count: *mut guint,
        stamp: *mut time_t,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_bookmark_file_get_application_info(
        bookmark: *mut GBookmarkFile,
        uri: *const ::core::ffi::c_char,
        name: *const ::core::ffi::c_char,
        exec: *mut *mut ::core::ffi::c_char,
        count: *mut ::core::ffi::c_uint,
        stamp: *mut *mut GDateTime,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_bookmark_file_set_is_private(
        bookmark: *mut GBookmarkFile,
        uri: *const gchar,
        is_private: gboolean,
    );
}
extern "C" {
    pub fn _frida_g_bookmark_file_get_is_private(
        bookmark: *mut GBookmarkFile,
        uri: *const gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_bookmark_file_set_icon(
        bookmark: *mut GBookmarkFile,
        uri: *const gchar,
        href: *const gchar,
        mime_type: *const gchar,
    );
}
extern "C" {
    pub fn _frida_g_bookmark_file_get_icon(
        bookmark: *mut GBookmarkFile,
        uri: *const gchar,
        href: *mut *mut gchar,
        mime_type: *mut *mut gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_bookmark_file_set_added(
        bookmark: *mut GBookmarkFile,
        uri: *const gchar,
        added: time_t,
    );
}
extern "C" {
    pub fn _frida_g_bookmark_file_set_added_date_time(
        bookmark: *mut GBookmarkFile,
        uri: *const ::core::ffi::c_char,
        added: *mut GDateTime,
    );
}
extern "C" {
    pub fn _frida_g_bookmark_file_get_added(
        bookmark: *mut GBookmarkFile,
        uri: *const gchar,
        error: *mut *mut GError,
    ) -> time_t;
}
extern "C" {
    pub fn _frida_g_bookmark_file_get_added_date_time(
        bookmark: *mut GBookmarkFile,
        uri: *const ::core::ffi::c_char,
        error: *mut *mut GError,
    ) -> *mut GDateTime;
}
extern "C" {
    pub fn _frida_g_bookmark_file_set_modified(
        bookmark: *mut GBookmarkFile,
        uri: *const gchar,
        modified: time_t,
    );
}
extern "C" {
    pub fn _frida_g_bookmark_file_set_modified_date_time(
        bookmark: *mut GBookmarkFile,
        uri: *const ::core::ffi::c_char,
        modified: *mut GDateTime,
    );
}
extern "C" {
    pub fn _frida_g_bookmark_file_get_modified(
        bookmark: *mut GBookmarkFile,
        uri: *const gchar,
        error: *mut *mut GError,
    ) -> time_t;
}
extern "C" {
    pub fn _frida_g_bookmark_file_get_modified_date_time(
        bookmark: *mut GBookmarkFile,
        uri: *const ::core::ffi::c_char,
        error: *mut *mut GError,
    ) -> *mut GDateTime;
}
extern "C" {
    pub fn _frida_g_bookmark_file_set_visited(
        bookmark: *mut GBookmarkFile,
        uri: *const gchar,
        visited: time_t,
    );
}
extern "C" {
    pub fn _frida_g_bookmark_file_set_visited_date_time(
        bookmark: *mut GBookmarkFile,
        uri: *const ::core::ffi::c_char,
        visited: *mut GDateTime,
    );
}
extern "C" {
    pub fn _frida_g_bookmark_file_get_visited(
        bookmark: *mut GBookmarkFile,
        uri: *const gchar,
        error: *mut *mut GError,
    ) -> time_t;
}
extern "C" {
    pub fn _frida_g_bookmark_file_get_visited_date_time(
        bookmark: *mut GBookmarkFile,
        uri: *const ::core::ffi::c_char,
        error: *mut *mut GError,
    ) -> *mut GDateTime;
}
extern "C" {
    pub fn _frida_g_bookmark_file_has_item(
        bookmark: *mut GBookmarkFile,
        uri: *const gchar,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_bookmark_file_get_size(bookmark: *mut GBookmarkFile) -> gint;
}
extern "C" {
    pub fn _frida_g_bookmark_file_get_uris(
        bookmark: *mut GBookmarkFile,
        length: *mut gsize,
    ) -> *mut *mut gchar;
}
extern "C" {
    pub fn _frida_g_bookmark_file_remove_group(
        bookmark: *mut GBookmarkFile,
        uri: *const gchar,
        group: *const gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_bookmark_file_remove_application(
        bookmark: *mut GBookmarkFile,
        uri: *const gchar,
        name: *const gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_bookmark_file_remove_item(
        bookmark: *mut GBookmarkFile,
        uri: *const gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_bookmark_file_move_item(
        bookmark: *mut GBookmarkFile,
        old_uri: *const gchar,
        new_uri: *const gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_bytes_new(data: gconstpointer, size: gsize) -> *mut GBytes;
}
extern "C" {
    pub fn _frida_g_bytes_new_take(data: gpointer, size: gsize) -> *mut GBytes;
}
extern "C" {
    pub fn _frida_g_bytes_new_static(data: gconstpointer, size: gsize) -> *mut GBytes;
}
extern "C" {
    pub fn _frida_g_bytes_new_with_free_func(
        data: gconstpointer,
        size: gsize,
        free_func: GDestroyNotify,
        user_data: gpointer,
    ) -> *mut GBytes;
}
extern "C" {
    pub fn _frida_g_bytes_new_from_bytes(
        bytes: *mut GBytes,
        offset: gsize,
        length: gsize,
    ) -> *mut GBytes;
}
extern "C" {
    pub fn _frida_g_bytes_get_data(bytes: *mut GBytes, size: *mut gsize) -> gconstpointer;
}
extern "C" {
    pub fn _frida_g_bytes_get_size(bytes: *mut GBytes) -> gsize;
}
extern "C" {
    pub fn _frida_g_bytes_ref(bytes: *mut GBytes) -> *mut GBytes;
}
extern "C" {
    pub fn _frida_g_bytes_unref(bytes: *mut GBytes);
}
extern "C" {
    pub fn _frida_g_bytes_unref_to_data(bytes: *mut GBytes, size: *mut gsize) -> gpointer;
}
extern "C" {
    pub fn _frida_g_bytes_unref_to_array(bytes: *mut GBytes) -> *mut GByteArray;
}
extern "C" {
    pub fn _frida_g_bytes_hash(bytes: gconstpointer) -> guint;
}
extern "C" {
    pub fn _frida_g_bytes_equal(bytes1: gconstpointer, bytes2: gconstpointer) -> gboolean;
}
extern "C" {
    pub fn _frida_g_bytes_compare(bytes1: gconstpointer, bytes2: gconstpointer) -> gint;
}
extern "C" {
    pub fn _frida_g_bytes_get_region(
        bytes: *mut GBytes,
        element_size: gsize,
        offset: gsize,
        n_elements: gsize,
    ) -> gconstpointer;
}
extern "C" {
    pub fn _frida_g_get_charset(charset: *mut *const ::core::ffi::c_char) -> gboolean;
}
extern "C" {
    pub fn _frida_g_get_codeset() -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_get_console_charset(charset: *mut *const ::core::ffi::c_char) -> gboolean;
}
extern "C" {
    pub fn _frida_g_get_language_names() -> *const *const gchar;
}
extern "C" {
    pub fn _frida_g_get_language_names_with_category(
        category_name: *const gchar,
    ) -> *const *const gchar;
}
extern "C" {
    pub fn _frida_g_get_locale_variants(locale: *const gchar) -> *mut *mut gchar;
}
pub const GChecksumType_G_CHECKSUM_MD5: GChecksumType = 0;
pub const GChecksumType_G_CHECKSUM_SHA1: GChecksumType = 1;
pub const GChecksumType_G_CHECKSUM_SHA256: GChecksumType = 2;
pub const GChecksumType_G_CHECKSUM_SHA512: GChecksumType = 3;
pub const GChecksumType_G_CHECKSUM_SHA384: GChecksumType = 4;
pub type GChecksumType = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GChecksum {
    _unused: [u8; 0],
}
pub type GChecksum = _GChecksum;
extern "C" {
    pub fn _frida_g_checksum_type_get_length(checksum_type: GChecksumType) -> gssize;
}
extern "C" {
    pub fn _frida_g_checksum_new(checksum_type: GChecksumType) -> *mut GChecksum;
}
extern "C" {
    pub fn _frida_g_checksum_reset(checksum: *mut GChecksum);
}
extern "C" {
    pub fn _frida_g_checksum_copy(checksum: *const GChecksum) -> *mut GChecksum;
}
extern "C" {
    pub fn _frida_g_checksum_free(checksum: *mut GChecksum);
}
extern "C" {
    pub fn _frida_g_checksum_update(checksum: *mut GChecksum, data: *const guchar, length: gssize);
}
extern "C" {
    pub fn _frida_g_checksum_get_string(checksum: *mut GChecksum) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_checksum_get_digest(
        checksum: *mut GChecksum,
        buffer: *mut guint8,
        digest_len: *mut gsize,
    );
}
extern "C" {
    pub fn _frida_g_compute_checksum_for_data(
        checksum_type: GChecksumType,
        data: *const guchar,
        length: gsize,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_compute_checksum_for_string(
        checksum_type: GChecksumType,
        str_: *const gchar,
        length: gssize,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_compute_checksum_for_bytes(
        checksum_type: GChecksumType,
        data: *mut GBytes,
    ) -> *mut gchar;
}
pub const GConvertError_G_CONVERT_ERROR_NO_CONVERSION: GConvertError = 0;
pub const GConvertError_G_CONVERT_ERROR_ILLEGAL_SEQUENCE: GConvertError = 1;
pub const GConvertError_G_CONVERT_ERROR_FAILED: GConvertError = 2;
pub const GConvertError_G_CONVERT_ERROR_PARTIAL_INPUT: GConvertError = 3;
pub const GConvertError_G_CONVERT_ERROR_BAD_URI: GConvertError = 4;
pub const GConvertError_G_CONVERT_ERROR_NOT_ABSOLUTE_PATH: GConvertError = 5;
pub const GConvertError_G_CONVERT_ERROR_NO_MEMORY: GConvertError = 6;
pub const GConvertError_G_CONVERT_ERROR_EMBEDDED_NUL: GConvertError = 7;
pub type GConvertError = ::core::ffi::c_uint;
extern "C" {
    pub fn _frida_g_convert_error_quark() -> GQuark;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GIConv {
    _unused: [u8; 0],
}
pub type GIConv = *mut _GIConv;
extern "C" {
    pub fn _frida_g_iconv_open(to_codeset: *const gchar, from_codeset: *const gchar) -> GIConv;
}
extern "C" {
    pub fn _frida_g_iconv(
        converter: GIConv,
        inbuf: *mut *mut gchar,
        inbytes_left: *mut gsize,
        outbuf: *mut *mut gchar,
        outbytes_left: *mut gsize,
    ) -> gsize;
}
extern "C" {
    pub fn _frida_g_iconv_close(converter: GIConv) -> gint;
}
extern "C" {
    pub fn _frida_g_convert(
        str_: *const gchar,
        len: gssize,
        to_codeset: *const gchar,
        from_codeset: *const gchar,
        bytes_read: *mut gsize,
        bytes_written: *mut gsize,
        error: *mut *mut GError,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_convert_with_iconv(
        str_: *const gchar,
        len: gssize,
        converter: GIConv,
        bytes_read: *mut gsize,
        bytes_written: *mut gsize,
        error: *mut *mut GError,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_convert_with_fallback(
        str_: *const gchar,
        len: gssize,
        to_codeset: *const gchar,
        from_codeset: *const gchar,
        fallback: *const gchar,
        bytes_read: *mut gsize,
        bytes_written: *mut gsize,
        error: *mut *mut GError,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_locale_to_utf8(
        opsysstring: *const gchar,
        len: gssize,
        bytes_read: *mut gsize,
        bytes_written: *mut gsize,
        error: *mut *mut GError,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_locale_from_utf8(
        utf8string: *const gchar,
        len: gssize,
        bytes_read: *mut gsize,
        bytes_written: *mut gsize,
        error: *mut *mut GError,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_filename_to_utf8(
        opsysstring: *const gchar,
        len: gssize,
        bytes_read: *mut gsize,
        bytes_written: *mut gsize,
        error: *mut *mut GError,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_filename_from_utf8(
        utf8string: *const gchar,
        len: gssize,
        bytes_read: *mut gsize,
        bytes_written: *mut gsize,
        error: *mut *mut GError,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_filename_from_uri(
        uri: *const gchar,
        hostname: *mut *mut gchar,
        error: *mut *mut GError,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_filename_to_uri(
        filename: *const gchar,
        hostname: *const gchar,
        error: *mut *mut GError,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_filename_display_name(filename: *const gchar) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_get_filename_charsets(filename_charsets: *mut *mut *const gchar) -> gboolean;
}
extern "C" {
    pub fn _frida_g_filename_display_basename(filename: *const gchar) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_uri_list_extract_uris(uri_list: *const gchar) -> *mut *mut gchar;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GData {
    _unused: [u8; 0],
}
pub type GData = _GData;
pub type GDataForeachFunc = ::core::option::Option<
    unsafe extern "C" fn(key_id: GQuark, data: gpointer, user_data: gpointer),
>;
extern "C" {
    pub fn _frida_g_datalist_init(datalist: *mut *mut GData);
}
extern "C" {
    pub fn _frida_g_datalist_clear(datalist: *mut *mut GData);
}
extern "C" {
    pub fn _frida_g_datalist_id_get_data(datalist: *mut *mut GData, key_id: GQuark) -> gpointer;
}
extern "C" {
    pub fn _frida_g_datalist_id_set_data_full(
        datalist: *mut *mut GData,
        key_id: GQuark,
        data: gpointer,
        destroy_func: GDestroyNotify,
    );
}
extern "C" {
    pub fn _frida_g_datalist_id_remove_multiple(
        datalist: *mut *mut GData,
        keys: *mut GQuark,
        n_keys: gsize,
    );
}
pub type GDuplicateFunc =
    ::core::option::Option<unsafe extern "C" fn(data: gpointer, user_data: gpointer) -> gpointer>;
extern "C" {
    pub fn _frida_g_datalist_id_dup_data(
        datalist: *mut *mut GData,
        key_id: GQuark,
        dup_func: GDuplicateFunc,
        user_data: gpointer,
    ) -> gpointer;
}
extern "C" {
    pub fn _frida_g_datalist_id_replace_data(
        datalist: *mut *mut GData,
        key_id: GQuark,
        oldval: gpointer,
        newval: gpointer,
        destroy: GDestroyNotify,
        old_destroy: *mut GDestroyNotify,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_datalist_id_remove_no_notify(
        datalist: *mut *mut GData,
        key_id: GQuark,
    ) -> gpointer;
}
extern "C" {
    pub fn _frida_g_datalist_foreach(
        datalist: *mut *mut GData,
        func: GDataForeachFunc,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_datalist_set_flags(datalist: *mut *mut GData, flags: guint);
}
extern "C" {
    pub fn _frida_g_datalist_unset_flags(datalist: *mut *mut GData, flags: guint);
}
extern "C" {
    pub fn _frida_g_datalist_get_flags(datalist: *mut *mut GData) -> guint;
}
extern "C" {
    pub fn _frida_g_dataset_destroy(dataset_location: gconstpointer);
}
extern "C" {
    pub fn _frida_g_dataset_id_get_data(
        dataset_location: gconstpointer,
        key_id: GQuark,
    ) -> gpointer;
}
extern "C" {
    pub fn _frida_g_datalist_get_data(datalist: *mut *mut GData, key: *const gchar) -> gpointer;
}
extern "C" {
    pub fn _frida_g_dataset_id_set_data_full(
        dataset_location: gconstpointer,
        key_id: GQuark,
        data: gpointer,
        destroy_func: GDestroyNotify,
    );
}
extern "C" {
    pub fn _frida_g_dataset_id_remove_no_notify(
        dataset_location: gconstpointer,
        key_id: GQuark,
    ) -> gpointer;
}
extern "C" {
    pub fn _frida_g_dataset_foreach(
        dataset_location: gconstpointer,
        func: GDataForeachFunc,
        user_data: gpointer,
    );
}
pub type GTime = gint32;
pub type GDateYear = guint16;
pub type GDateDay = guint8;
pub type GDate = _GDate;
pub const GDateDMY_G_DATE_DAY: GDateDMY = 0;
pub const GDateDMY_G_DATE_MONTH: GDateDMY = 1;
pub const GDateDMY_G_DATE_YEAR: GDateDMY = 2;
pub type GDateDMY = ::core::ffi::c_uint;
pub const GDateWeekday_G_DATE_BAD_WEEKDAY: GDateWeekday = 0;
pub const GDateWeekday_G_DATE_MONDAY: GDateWeekday = 1;
pub const GDateWeekday_G_DATE_TUESDAY: GDateWeekday = 2;
pub const GDateWeekday_G_DATE_WEDNESDAY: GDateWeekday = 3;
pub const GDateWeekday_G_DATE_THURSDAY: GDateWeekday = 4;
pub const GDateWeekday_G_DATE_FRIDAY: GDateWeekday = 5;
pub const GDateWeekday_G_DATE_SATURDAY: GDateWeekday = 6;
pub const GDateWeekday_G_DATE_SUNDAY: GDateWeekday = 7;
pub type GDateWeekday = ::core::ffi::c_uint;
pub const GDateMonth_G_DATE_BAD_MONTH: GDateMonth = 0;
pub const GDateMonth_G_DATE_JANUARY: GDateMonth = 1;
pub const GDateMonth_G_DATE_FEBRUARY: GDateMonth = 2;
pub const GDateMonth_G_DATE_MARCH: GDateMonth = 3;
pub const GDateMonth_G_DATE_APRIL: GDateMonth = 4;
pub const GDateMonth_G_DATE_MAY: GDateMonth = 5;
pub const GDateMonth_G_DATE_JUNE: GDateMonth = 6;
pub const GDateMonth_G_DATE_JULY: GDateMonth = 7;
pub const GDateMonth_G_DATE_AUGUST: GDateMonth = 8;
pub const GDateMonth_G_DATE_SEPTEMBER: GDateMonth = 9;
pub const GDateMonth_G_DATE_OCTOBER: GDateMonth = 10;
pub const GDateMonth_G_DATE_NOVEMBER: GDateMonth = 11;
pub const GDateMonth_G_DATE_DECEMBER: GDateMonth = 12;
pub type GDateMonth = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDate {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
impl _GDate {
    #[inline]
    pub fn julian_days(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 32u8) as u32) }
    }
    #[inline]
    pub fn set_julian_days(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 32u8, val as u64)
        }
    }
    #[inline]
    pub fn julian(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(32usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_julian(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(32usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dmy(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(33usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_dmy(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(33usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn day(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(34usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_day(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(34usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn month(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(40usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_month(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(40usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn year(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(44usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_year(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(44usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        julian_days: guint,
        julian: guint,
        dmy: guint,
        day: guint,
        month: guint,
        year: guint,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 32u8, {
            let julian_days: u32 = unsafe { ::core::mem::transmute(julian_days) };
            julian_days as u64
        });
        __bindgen_bitfield_unit.set(32usize, 1u8, {
            let julian: u32 = unsafe { ::core::mem::transmute(julian) };
            julian as u64
        });
        __bindgen_bitfield_unit.set(33usize, 1u8, {
            let dmy: u32 = unsafe { ::core::mem::transmute(dmy) };
            dmy as u64
        });
        __bindgen_bitfield_unit.set(34usize, 6u8, {
            let day: u32 = unsafe { ::core::mem::transmute(day) };
            day as u64
        });
        __bindgen_bitfield_unit.set(40usize, 4u8, {
            let month: u32 = unsafe { ::core::mem::transmute(month) };
            month as u64
        });
        __bindgen_bitfield_unit.set(44usize, 16u8, {
            let year: u32 = unsafe { ::core::mem::transmute(year) };
            year as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn _frida_g_date_new() -> *mut GDate;
}
extern "C" {
    pub fn _frida_g_date_new_dmy(day: GDateDay, month: GDateMonth, year: GDateYear) -> *mut GDate;
}
extern "C" {
    pub fn _frida_g_date_new_julian(julian_day: guint32) -> *mut GDate;
}
extern "C" {
    pub fn _frida_g_date_free(date: *mut GDate);
}
extern "C" {
    pub fn _frida_g_date_copy(date: *const GDate) -> *mut GDate;
}
extern "C" {
    pub fn _frida_g_date_valid(date: *const GDate) -> gboolean;
}
extern "C" {
    pub fn _frida_g_date_valid_day(day: GDateDay) -> gboolean;
}
extern "C" {
    pub fn _frida_g_date_valid_month(month: GDateMonth) -> gboolean;
}
extern "C" {
    pub fn _frida_g_date_valid_year(year: GDateYear) -> gboolean;
}
extern "C" {
    pub fn _frida_g_date_valid_weekday(weekday: GDateWeekday) -> gboolean;
}
extern "C" {
    pub fn _frida_g_date_valid_julian(julian_date: guint32) -> gboolean;
}
extern "C" {
    pub fn _frida_g_date_valid_dmy(day: GDateDay, month: GDateMonth, year: GDateYear) -> gboolean;
}
extern "C" {
    pub fn _frida_g_date_get_weekday(date: *const GDate) -> GDateWeekday;
}
extern "C" {
    pub fn _frida_g_date_get_month(date: *const GDate) -> GDateMonth;
}
extern "C" {
    pub fn _frida_g_date_get_year(date: *const GDate) -> GDateYear;
}
extern "C" {
    pub fn _frida_g_date_get_day(date: *const GDate) -> GDateDay;
}
extern "C" {
    pub fn _frida_g_date_get_julian(date: *const GDate) -> guint32;
}
extern "C" {
    pub fn _frida_g_date_get_day_of_year(date: *const GDate) -> guint;
}
extern "C" {
    pub fn _frida_g_date_get_monday_week_of_year(date: *const GDate) -> guint;
}
extern "C" {
    pub fn _frida_g_date_get_sunday_week_of_year(date: *const GDate) -> guint;
}
extern "C" {
    pub fn _frida_g_date_get_iso8601_week_of_year(date: *const GDate) -> guint;
}
extern "C" {
    pub fn _frida_g_date_clear(date: *mut GDate, n_dates: guint);
}
extern "C" {
    pub fn _frida_g_date_set_parse(date: *mut GDate, str_: *const gchar);
}
extern "C" {
    pub fn _frida_g_date_set_time_t(date: *mut GDate, timet: time_t);
}
extern "C" {
    pub fn _frida_g_date_set_time_val(date: *mut GDate, timeval: *mut GTimeVal);
}
extern "C" {
    pub fn _frida_g_date_set_time(date: *mut GDate, time_: GTime);
}
extern "C" {
    pub fn _frida_g_date_set_month(date: *mut GDate, month: GDateMonth);
}
extern "C" {
    pub fn _frida_g_date_set_day(date: *mut GDate, day: GDateDay);
}
extern "C" {
    pub fn _frida_g_date_set_year(date: *mut GDate, year: GDateYear);
}
extern "C" {
    pub fn _frida_g_date_set_dmy(date: *mut GDate, day: GDateDay, month: GDateMonth, y: GDateYear);
}
extern "C" {
    pub fn _frida_g_date_set_julian(date: *mut GDate, julian_date: guint32);
}
extern "C" {
    pub fn _frida_g_date_is_first_of_month(date: *const GDate) -> gboolean;
}
extern "C" {
    pub fn _frida_g_date_is_last_of_month(date: *const GDate) -> gboolean;
}
extern "C" {
    pub fn _frida_g_date_add_days(date: *mut GDate, n_days: guint);
}
extern "C" {
    pub fn _frida_g_date_subtract_days(date: *mut GDate, n_days: guint);
}
extern "C" {
    pub fn _frida_g_date_add_months(date: *mut GDate, n_months: guint);
}
extern "C" {
    pub fn _frida_g_date_subtract_months(date: *mut GDate, n_months: guint);
}
extern "C" {
    pub fn _frida_g_date_add_years(date: *mut GDate, n_years: guint);
}
extern "C" {
    pub fn _frida_g_date_subtract_years(date: *mut GDate, n_years: guint);
}
extern "C" {
    pub fn _frida_g_date_is_leap_year(year: GDateYear) -> gboolean;
}
extern "C" {
    pub fn _frida_g_date_get_days_in_month(month: GDateMonth, year: GDateYear) -> guint8;
}
extern "C" {
    pub fn _frida_g_date_get_monday_weeks_in_year(year: GDateYear) -> guint8;
}
extern "C" {
    pub fn _frida_g_date_get_sunday_weeks_in_year(year: GDateYear) -> guint8;
}
extern "C" {
    pub fn _frida_g_date_days_between(date1: *const GDate, date2: *const GDate) -> gint;
}
extern "C" {
    pub fn _frida_g_date_compare(lhs: *const GDate, rhs: *const GDate) -> gint;
}
extern "C" {
    pub fn _frida_g_date_to_struct_tm(date: *const GDate, tm: *mut tm);
}
extern "C" {
    pub fn _frida_g_date_clamp(date: *mut GDate, min_date: *const GDate, max_date: *const GDate);
}
extern "C" {
    pub fn _frida_g_date_order(date1: *mut GDate, date2: *mut GDate);
}
extern "C" {
    pub fn _frida_g_date_strftime(
        s: *mut gchar,
        slen: gsize,
        format: *const gchar,
        date: *const GDate,
    ) -> gsize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dirent {
    pub d_ino: ino_t,
    pub d_off: off64_t,
    pub d_reclen: ::core::ffi::c_ushort,
    pub d_type: ::core::ffi::c_uchar,
    pub d_name: [::core::ffi::c_char; 256usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dirent64 {
    pub d_ino: ino_t,
    pub d_off: off64_t,
    pub d_reclen: ::core::ffi::c_ushort,
    pub d_type: ::core::ffi::c_uchar,
    pub d_name: [::core::ffi::c_char; 256usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DIR {
    _unused: [u8; 0],
}
extern "C" {
    pub fn opendir(__path: *const ::core::ffi::c_char) -> *mut DIR;
}
extern "C" {
    pub fn fdopendir(__dir_fd: ::core::ffi::c_int) -> *mut DIR;
}
extern "C" {
    pub fn readdir(__dir: *mut DIR) -> *mut dirent;
}
extern "C" {
    pub fn readdir64(__dir: *mut DIR) -> *mut dirent64;
}
extern "C" {
    pub fn readdir_r(
        __dir: *mut DIR,
        __entry: *mut dirent,
        __buffer: *mut *mut dirent,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn readdir64_r(
        __dir: *mut DIR,
        __entry: *mut dirent64,
        __buffer: *mut *mut dirent64,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn closedir(__dir: *mut DIR) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn rewinddir(__dir: *mut DIR);
}
extern "C" {
    pub fn seekdir(__dir: *mut DIR, __location: ::core::ffi::c_long);
}
extern "C" {
    pub fn telldir(__dir: *mut DIR) -> ::core::ffi::c_long;
}
extern "C" {
    pub fn dirfd(__dir: *mut DIR) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn alphasort(__lhs: *mut *const dirent, __rhs: *mut *const dirent) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn alphasort64(
        __lhs: *mut *const dirent64,
        __rhs: *mut *const dirent64,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn scandir(
        __path: *const ::core::ffi::c_char,
        __name_list: *mut *mut *mut dirent,
        __filter: ::core::option::Option<
            unsafe extern "C" fn(arg1: *const dirent) -> ::core::ffi::c_int,
        >,
        __comparator: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut *const dirent,
                arg2: *mut *const dirent,
            ) -> ::core::ffi::c_int,
        >,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn scandir64(
        __path: *const ::core::ffi::c_char,
        __name_list: *mut *mut *mut dirent64,
        __filter: ::core::option::Option<
            unsafe extern "C" fn(arg1: *const dirent64) -> ::core::ffi::c_int,
        >,
        __comparator: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut *const dirent64,
                arg2: *mut *const dirent64,
            ) -> ::core::ffi::c_int,
        >,
    ) -> ::core::ffi::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDir {
    _unused: [u8; 0],
}
pub type GDir = _GDir;
extern "C" {
    pub fn _frida_g_dir_open(
        path: *const gchar,
        flags: guint,
        error: *mut *mut GError,
    ) -> *mut GDir;
}
extern "C" {
    pub fn _frida_g_dir_read_name(dir: *mut GDir) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_dir_rewind(dir: *mut GDir);
}
extern "C" {
    pub fn _frida_g_dir_close(dir: *mut GDir);
}
extern "C" {
    pub fn _frida_g_getenv(variable: *const gchar) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_setenv(
        variable: *const gchar,
        value: *const gchar,
        overwrite: gboolean,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_unsetenv(variable: *const gchar);
}
extern "C" {
    pub fn _frida_g_listenv() -> *mut *mut gchar;
}
extern "C" {
    pub fn _frida_g_get_environ() -> *mut *mut gchar;
}
extern "C" {
    pub fn _frida_g_environ_getenv(envp: *mut *mut gchar, variable: *const gchar) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_environ_setenv(
        envp: *mut *mut gchar,
        variable: *const gchar,
        value: *const gchar,
        overwrite: gboolean,
    ) -> *mut *mut gchar;
}
extern "C" {
    pub fn _frida_g_environ_unsetenv(
        envp: *mut *mut gchar,
        variable: *const gchar,
    ) -> *mut *mut gchar;
}
pub const GFileError_G_FILE_ERROR_EXIST: GFileError = 0;
pub const GFileError_G_FILE_ERROR_ISDIR: GFileError = 1;
pub const GFileError_G_FILE_ERROR_ACCES: GFileError = 2;
pub const GFileError_G_FILE_ERROR_NAMETOOLONG: GFileError = 3;
pub const GFileError_G_FILE_ERROR_NOENT: GFileError = 4;
pub const GFileError_G_FILE_ERROR_NOTDIR: GFileError = 5;
pub const GFileError_G_FILE_ERROR_NXIO: GFileError = 6;
pub const GFileError_G_FILE_ERROR_NODEV: GFileError = 7;
pub const GFileError_G_FILE_ERROR_ROFS: GFileError = 8;
pub const GFileError_G_FILE_ERROR_TXTBSY: GFileError = 9;
pub const GFileError_G_FILE_ERROR_FAULT: GFileError = 10;
pub const GFileError_G_FILE_ERROR_LOOP: GFileError = 11;
pub const GFileError_G_FILE_ERROR_NOSPC: GFileError = 12;
pub const GFileError_G_FILE_ERROR_NOMEM: GFileError = 13;
pub const GFileError_G_FILE_ERROR_MFILE: GFileError = 14;
pub const GFileError_G_FILE_ERROR_NFILE: GFileError = 15;
pub const GFileError_G_FILE_ERROR_BADF: GFileError = 16;
pub const GFileError_G_FILE_ERROR_INVAL: GFileError = 17;
pub const GFileError_G_FILE_ERROR_PIPE: GFileError = 18;
pub const GFileError_G_FILE_ERROR_AGAIN: GFileError = 19;
pub const GFileError_G_FILE_ERROR_INTR: GFileError = 20;
pub const GFileError_G_FILE_ERROR_IO: GFileError = 21;
pub const GFileError_G_FILE_ERROR_PERM: GFileError = 22;
pub const GFileError_G_FILE_ERROR_NOSYS: GFileError = 23;
pub const GFileError_G_FILE_ERROR_FAILED: GFileError = 24;
pub type GFileError = ::core::ffi::c_uint;
pub const GFileTest_G_FILE_TEST_IS_REGULAR: GFileTest = 1;
pub const GFileTest_G_FILE_TEST_IS_SYMLINK: GFileTest = 2;
pub const GFileTest_G_FILE_TEST_IS_DIR: GFileTest = 4;
pub const GFileTest_G_FILE_TEST_IS_EXECUTABLE: GFileTest = 8;
pub const GFileTest_G_FILE_TEST_EXISTS: GFileTest = 16;
pub type GFileTest = ::core::ffi::c_uint;
pub const GFileSetContentsFlags_G_FILE_SET_CONTENTS_NONE: GFileSetContentsFlags = 0;
pub const GFileSetContentsFlags_G_FILE_SET_CONTENTS_CONSISTENT: GFileSetContentsFlags = 1;
pub const GFileSetContentsFlags_G_FILE_SET_CONTENTS_DURABLE: GFileSetContentsFlags = 2;
pub const GFileSetContentsFlags_G_FILE_SET_CONTENTS_ONLY_EXISTING: GFileSetContentsFlags = 4;
pub type GFileSetContentsFlags = ::core::ffi::c_uint;
extern "C" {
    pub fn _frida_g_file_error_quark() -> GQuark;
}
extern "C" {
    pub fn _frida_g_file_error_from_errno(err_no: gint) -> GFileError;
}
extern "C" {
    pub fn _frida_g_file_test(filename: *const gchar, test: GFileTest) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_get_contents(
        filename: *const gchar,
        contents: *mut *mut gchar,
        length: *mut gsize,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_set_contents(
        filename: *const gchar,
        contents: *const gchar,
        length: gssize,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_set_contents_full(
        filename: *const gchar,
        contents: *const gchar,
        length: gssize,
        flags: GFileSetContentsFlags,
        mode: ::core::ffi::c_int,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_read_link(filename: *const gchar, error: *mut *mut GError) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_mkdtemp(tmpl: *mut gchar) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_mkdtemp_full(tmpl: *mut gchar, mode: gint) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_mkstemp(tmpl: *mut gchar) -> gint;
}
extern "C" {
    pub fn _frida_g_mkstemp_full(tmpl: *mut gchar, flags: gint, mode: gint) -> gint;
}
extern "C" {
    pub fn _frida_g_file_open_tmp(
        tmpl: *const gchar,
        name_used: *mut *mut gchar,
        error: *mut *mut GError,
    ) -> gint;
}
extern "C" {
    pub fn _frida_g_dir_make_tmp(tmpl: *const gchar, error: *mut *mut GError) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_build_path(
        separator: *const gchar,
        first_element: *const gchar,
        ...
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_build_pathv(separator: *const gchar, args: *mut *mut gchar) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_build_filename(first_element: *const gchar, ...) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_build_filenamev(args: *mut *mut gchar) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_build_filename_valist(
        first_element: *const gchar,
        args: *mut va_list,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_mkdir_with_parents(pathname: *const gchar, mode: gint) -> gint;
}
extern "C" {
    pub fn _frida_g_path_is_absolute(file_name: *const gchar) -> gboolean;
}
extern "C" {
    pub fn _frida_g_path_skip_root(file_name: *const gchar) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_basename(file_name: *const gchar) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_get_current_dir() -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_path_get_basename(file_name: *const gchar) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_path_get_dirname(file_name: *const gchar) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_canonicalize_filename(
        filename: *const gchar,
        relative_to: *const gchar,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_strip_context(msgid: *const gchar, msgval: *const gchar) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_dgettext(domain: *const gchar, msgid: *const gchar) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_dcgettext(
        domain: *const gchar,
        msgid: *const gchar,
        category: gint,
    ) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_dngettext(
        domain: *const gchar,
        msgid: *const gchar,
        msgid_plural: *const gchar,
        n: gulong,
    ) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_dpgettext(
        domain: *const gchar,
        msgctxtid: *const gchar,
        msgidoffset: gsize,
    ) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_dpgettext2(
        domain: *const gchar,
        context: *const gchar,
        msgid: *const gchar,
    ) -> *const gchar;
}
pub type GMemVTable = _GMemVTable;
extern "C" {
    pub fn _frida_g_free(mem: gpointer);
}
extern "C" {
    pub fn _frida_g_clear_pointer(pp: *mut gpointer, destroy: GDestroyNotify);
}
extern "C" {
    pub fn _frida_g_malloc(n_bytes: gsize) -> gpointer;
}
extern "C" {
    pub fn _frida_g_malloc0(n_bytes: gsize) -> gpointer;
}
extern "C" {
    pub fn _frida_g_realloc(mem: gpointer, n_bytes: gsize) -> gpointer;
}
extern "C" {
    pub fn _frida_g_try_malloc(n_bytes: gsize) -> gpointer;
}
extern "C" {
    pub fn _frida_g_try_malloc0(n_bytes: gsize) -> gpointer;
}
extern "C" {
    pub fn _frida_g_try_realloc(mem: gpointer, n_bytes: gsize) -> gpointer;
}
extern "C" {
    pub fn _frida_g_malloc_n(n_blocks: gsize, n_block_bytes: gsize) -> gpointer;
}
extern "C" {
    pub fn _frida_g_malloc0_n(n_blocks: gsize, n_block_bytes: gsize) -> gpointer;
}
extern "C" {
    pub fn _frida_g_realloc_n(mem: gpointer, n_blocks: gsize, n_block_bytes: gsize) -> gpointer;
}
extern "C" {
    pub fn _frida_g_try_malloc_n(n_blocks: gsize, n_block_bytes: gsize) -> gpointer;
}
extern "C" {
    pub fn _frida_g_try_malloc0_n(n_blocks: gsize, n_block_bytes: gsize) -> gpointer;
}
extern "C" {
    pub fn _frida_g_try_realloc_n(mem: gpointer, n_blocks: gsize, n_block_bytes: gsize)
        -> gpointer;
}
extern "C" {
    pub fn _frida_g_aligned_alloc(
        n_blocks: gsize,
        n_block_bytes: gsize,
        alignment: gsize,
    ) -> gpointer;
}
extern "C" {
    pub fn _frida_g_aligned_alloc0(
        n_blocks: gsize,
        n_block_bytes: gsize,
        alignment: gsize,
    ) -> gpointer;
}
extern "C" {
    pub fn _frida_g_aligned_free(mem: gpointer);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GMemVTable {
    pub malloc: ::core::option::Option<unsafe extern "C" fn(n_bytes: gsize) -> gpointer>,
    pub realloc:
        ::core::option::Option<unsafe extern "C" fn(mem: gpointer, n_bytes: gsize) -> gpointer>,
    pub memalign:
        ::core::option::Option<unsafe extern "C" fn(alignment: gsize, size: gsize) -> gpointer>,
    pub free: ::core::option::Option<unsafe extern "C" fn(mem: gpointer)>,
    pub calloc: ::core::option::Option<
        unsafe extern "C" fn(n_blocks: gsize, n_block_bytes: gsize) -> gpointer,
    >,
    pub try_malloc: ::core::option::Option<unsafe extern "C" fn(n_bytes: gsize) -> gpointer>,
    pub try_realloc:
        ::core::option::Option<unsafe extern "C" fn(mem: gpointer, n_bytes: gsize) -> gpointer>,
}
extern "C" {
    pub static mut _frida_glib_mem_table: *mut GMemVTable;
}
extern "C" {
    pub fn _frida_g_mem_set_vtable(vtable: *mut GMemVTable);
}
extern "C" {
    pub fn _frida_g_mem_is_system_malloc() -> gboolean;
}
extern "C" {
    pub static mut _frida_g_mem_gc_friendly: gboolean;
}
extern "C" {
    pub static mut _frida_glib_mem_profiler_table: *mut GMemVTable;
}
extern "C" {
    pub fn _frida_g_mem_profile();
}
pub type GNode = _GNode;
pub const GTraverseFlags_G_TRAVERSE_LEAVES: GTraverseFlags = 1;
pub const GTraverseFlags_G_TRAVERSE_NON_LEAVES: GTraverseFlags = 2;
pub const GTraverseFlags_G_TRAVERSE_ALL: GTraverseFlags = 3;
pub const GTraverseFlags_G_TRAVERSE_MASK: GTraverseFlags = 3;
pub const GTraverseFlags_G_TRAVERSE_LEAFS: GTraverseFlags = 1;
pub const GTraverseFlags_G_TRAVERSE_NON_LEAFS: GTraverseFlags = 2;
pub type GTraverseFlags = ::core::ffi::c_uint;
pub const GTraverseType_G_IN_ORDER: GTraverseType = 0;
pub const GTraverseType_G_PRE_ORDER: GTraverseType = 1;
pub const GTraverseType_G_POST_ORDER: GTraverseType = 2;
pub const GTraverseType_G_LEVEL_ORDER: GTraverseType = 3;
pub type GTraverseType = ::core::ffi::c_uint;
pub type GNodeTraverseFunc =
    ::core::option::Option<unsafe extern "C" fn(node: *mut GNode, user_data: gpointer) -> gboolean>;
pub type GNodeForeachFunc =
    ::core::option::Option<unsafe extern "C" fn(node: *mut GNode, user_data: gpointer)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GNode {
    pub data: gpointer,
    pub next: *mut GNode,
    pub prev: *mut GNode,
    pub parent: *mut GNode,
    pub children: *mut GNode,
}
extern "C" {
    pub fn _frida_g_node_new(data: gpointer) -> *mut GNode;
}
extern "C" {
    pub fn _frida_g_node_destroy(root: *mut GNode);
}
extern "C" {
    pub fn _frida_g_node_unlink(node: *mut GNode);
}
extern "C" {
    pub fn _frida_g_node_copy_deep(
        node: *mut GNode,
        copy_func: GCopyFunc,
        data: gpointer,
    ) -> *mut GNode;
}
extern "C" {
    pub fn _frida_g_node_copy(node: *mut GNode) -> *mut GNode;
}
extern "C" {
    pub fn _frida_g_node_insert(parent: *mut GNode, position: gint, node: *mut GNode)
        -> *mut GNode;
}
extern "C" {
    pub fn _frida_g_node_insert_before(
        parent: *mut GNode,
        sibling: *mut GNode,
        node: *mut GNode,
    ) -> *mut GNode;
}
extern "C" {
    pub fn _frida_g_node_insert_after(
        parent: *mut GNode,
        sibling: *mut GNode,
        node: *mut GNode,
    ) -> *mut GNode;
}
extern "C" {
    pub fn _frida_g_node_prepend(parent: *mut GNode, node: *mut GNode) -> *mut GNode;
}
extern "C" {
    pub fn _frida_g_node_n_nodes(root: *mut GNode, flags: GTraverseFlags) -> guint;
}
extern "C" {
    pub fn _frida_g_node_get_root(node: *mut GNode) -> *mut GNode;
}
extern "C" {
    pub fn _frida_g_node_is_ancestor(node: *mut GNode, descendant: *mut GNode) -> gboolean;
}
extern "C" {
    pub fn _frida_g_node_depth(node: *mut GNode) -> guint;
}
extern "C" {
    pub fn _frida_g_node_find(
        root: *mut GNode,
        order: GTraverseType,
        flags: GTraverseFlags,
        data: gpointer,
    ) -> *mut GNode;
}
extern "C" {
    pub fn _frida_g_node_traverse(
        root: *mut GNode,
        order: GTraverseType,
        flags: GTraverseFlags,
        max_depth: gint,
        func: GNodeTraverseFunc,
        data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_node_max_height(root: *mut GNode) -> guint;
}
extern "C" {
    pub fn _frida_g_node_children_foreach(
        node: *mut GNode,
        flags: GTraverseFlags,
        func: GNodeForeachFunc,
        data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_node_reverse_children(node: *mut GNode);
}
extern "C" {
    pub fn _frida_g_node_n_children(node: *mut GNode) -> guint;
}
extern "C" {
    pub fn _frida_g_node_nth_child(node: *mut GNode, n: guint) -> *mut GNode;
}
extern "C" {
    pub fn _frida_g_node_last_child(node: *mut GNode) -> *mut GNode;
}
extern "C" {
    pub fn _frida_g_node_find_child(
        node: *mut GNode,
        flags: GTraverseFlags,
        data: gpointer,
    ) -> *mut GNode;
}
extern "C" {
    pub fn _frida_g_node_child_position(node: *mut GNode, child: *mut GNode) -> gint;
}
extern "C" {
    pub fn _frida_g_node_child_index(node: *mut GNode, data: gpointer) -> gint;
}
extern "C" {
    pub fn _frida_g_node_first_sibling(node: *mut GNode) -> *mut GNode;
}
extern "C" {
    pub fn _frida_g_node_last_sibling(node: *mut GNode) -> *mut GNode;
}
pub type GList = _GList;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GList {
    pub data: gpointer,
    pub next: *mut GList,
    pub prev: *mut GList,
}
extern "C" {
    pub fn _frida_g_list_alloc() -> *mut GList;
}
extern "C" {
    pub fn _frida_g_list_free(list: *mut GList);
}
extern "C" {
    pub fn _frida_g_list_free_1(list: *mut GList);
}
extern "C" {
    pub fn _frida_g_list_free_full(list: *mut GList, free_func: GDestroyNotify);
}
extern "C" {
    pub fn _frida_g_list_append(list: *mut GList, data: gpointer) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_list_prepend(list: *mut GList, data: gpointer) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_list_insert(list: *mut GList, data: gpointer, position: gint) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_list_insert_sorted(
        list: *mut GList,
        data: gpointer,
        func: GCompareFunc,
    ) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_list_insert_sorted_with_data(
        list: *mut GList,
        data: gpointer,
        func: GCompareDataFunc,
        user_data: gpointer,
    ) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_list_insert_before(
        list: *mut GList,
        sibling: *mut GList,
        data: gpointer,
    ) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_list_insert_before_link(
        list: *mut GList,
        sibling: *mut GList,
        link_: *mut GList,
    ) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_list_concat(list1: *mut GList, list2: *mut GList) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_list_remove(list: *mut GList, data: gconstpointer) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_list_remove_all(list: *mut GList, data: gconstpointer) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_list_remove_link(list: *mut GList, llink: *mut GList) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_list_delete_link(list: *mut GList, link_: *mut GList) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_list_reverse(list: *mut GList) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_list_copy(list: *mut GList) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_list_copy_deep(
        list: *mut GList,
        func: GCopyFunc,
        user_data: gpointer,
    ) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_list_nth(list: *mut GList, n: guint) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_list_nth_prev(list: *mut GList, n: guint) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_list_find(list: *mut GList, data: gconstpointer) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_list_find_custom(
        list: *mut GList,
        data: gconstpointer,
        func: GCompareFunc,
    ) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_list_position(list: *mut GList, llink: *mut GList) -> gint;
}
extern "C" {
    pub fn _frida_g_list_index(list: *mut GList, data: gconstpointer) -> gint;
}
extern "C" {
    pub fn _frida_g_list_last(list: *mut GList) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_list_first(list: *mut GList) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_list_length(list: *mut GList) -> guint;
}
extern "C" {
    pub fn _frida_g_list_foreach(list: *mut GList, func: GFunc, user_data: gpointer);
}
extern "C" {
    pub fn _frida_g_list_sort(list: *mut GList, compare_func: GCompareFunc) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_list_sort_with_data(
        list: *mut GList,
        compare_func: GCompareDataFunc,
        user_data: gpointer,
    ) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_list_nth_data(list: *mut GList, n: guint) -> gpointer;
}
extern "C" {
    pub fn _frida_g_clear_list(list_ptr: *mut *mut GList, destroy: GDestroyNotify);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GHashTable {
    _unused: [u8; 0],
}
pub type GHashTable = _GHashTable;
pub type GHRFunc = ::core::option::Option<
    unsafe extern "C" fn(key: gpointer, value: gpointer, user_data: gpointer) -> gboolean,
>;
pub type GHashTableIter = _GHashTableIter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GHashTableIter {
    pub dummy1: gpointer,
    pub dummy2: gpointer,
    pub dummy3: gpointer,
    pub dummy4: ::core::ffi::c_int,
    pub dummy5: gboolean,
    pub dummy6: gpointer,
}
extern "C" {
    pub fn _frida_g_hash_table_new(
        hash_func: GHashFunc,
        key_equal_func: GEqualFunc,
    ) -> *mut GHashTable;
}
extern "C" {
    pub fn _frida_g_hash_table_new_full(
        hash_func: GHashFunc,
        key_equal_func: GEqualFunc,
        key_destroy_func: GDestroyNotify,
        value_destroy_func: GDestroyNotify,
    ) -> *mut GHashTable;
}
extern "C" {
    pub fn _frida_g_hash_table_new_similar(other_hash_table: *mut GHashTable) -> *mut GHashTable;
}
extern "C" {
    pub fn _frida_g_hash_table_destroy(hash_table: *mut GHashTable);
}
extern "C" {
    pub fn _frida_g_hash_table_insert(
        hash_table: *mut GHashTable,
        key: gpointer,
        value: gpointer,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_hash_table_replace(
        hash_table: *mut GHashTable,
        key: gpointer,
        value: gpointer,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_hash_table_add(hash_table: *mut GHashTable, key: gpointer) -> gboolean;
}
extern "C" {
    pub fn _frida_g_hash_table_remove(hash_table: *mut GHashTable, key: gconstpointer) -> gboolean;
}
extern "C" {
    pub fn _frida_g_hash_table_remove_all(hash_table: *mut GHashTable);
}
extern "C" {
    pub fn _frida_g_hash_table_steal(hash_table: *mut GHashTable, key: gconstpointer) -> gboolean;
}
extern "C" {
    pub fn _frida_g_hash_table_steal_extended(
        hash_table: *mut GHashTable,
        lookup_key: gconstpointer,
        stolen_key: *mut gpointer,
        stolen_value: *mut gpointer,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_hash_table_steal_all(hash_table: *mut GHashTable);
}
extern "C" {
    pub fn _frida_g_hash_table_lookup(hash_table: *mut GHashTable, key: gconstpointer) -> gpointer;
}
extern "C" {
    pub fn _frida_g_hash_table_contains(
        hash_table: *mut GHashTable,
        key: gconstpointer,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_hash_table_lookup_extended(
        hash_table: *mut GHashTable,
        lookup_key: gconstpointer,
        orig_key: *mut gpointer,
        value: *mut gpointer,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_hash_table_foreach(
        hash_table: *mut GHashTable,
        func: GHFunc,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_hash_table_find(
        hash_table: *mut GHashTable,
        predicate: GHRFunc,
        user_data: gpointer,
    ) -> gpointer;
}
extern "C" {
    pub fn _frida_g_hash_table_foreach_remove(
        hash_table: *mut GHashTable,
        func: GHRFunc,
        user_data: gpointer,
    ) -> guint;
}
extern "C" {
    pub fn _frida_g_hash_table_foreach_steal(
        hash_table: *mut GHashTable,
        func: GHRFunc,
        user_data: gpointer,
    ) -> guint;
}
extern "C" {
    pub fn _frida_g_hash_table_size(hash_table: *mut GHashTable) -> guint;
}
extern "C" {
    pub fn _frida_g_hash_table_get_keys(hash_table: *mut GHashTable) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_hash_table_get_values(hash_table: *mut GHashTable) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_hash_table_get_keys_as_array(
        hash_table: *mut GHashTable,
        length: *mut guint,
    ) -> *mut gpointer;
}
extern "C" {
    pub fn _frida_g_hash_table_iter_init(iter: *mut GHashTableIter, hash_table: *mut GHashTable);
}
extern "C" {
    pub fn _frida_g_hash_table_iter_next(
        iter: *mut GHashTableIter,
        key: *mut gpointer,
        value: *mut gpointer,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_hash_table_iter_get_hash_table(iter: *mut GHashTableIter) -> *mut GHashTable;
}
extern "C" {
    pub fn _frida_g_hash_table_iter_remove(iter: *mut GHashTableIter);
}
extern "C" {
    pub fn _frida_g_hash_table_iter_replace(iter: *mut GHashTableIter, value: gpointer);
}
extern "C" {
    pub fn _frida_g_hash_table_iter_steal(iter: *mut GHashTableIter);
}
extern "C" {
    pub fn _frida_g_hash_table_ref(hash_table: *mut GHashTable) -> *mut GHashTable;
}
extern "C" {
    pub fn _frida_g_hash_table_unref(hash_table: *mut GHashTable);
}
extern "C" {
    pub fn _frida_g_str_equal(v1: gconstpointer, v2: gconstpointer) -> gboolean;
}
extern "C" {
    pub fn _frida_g_str_hash(v: gconstpointer) -> guint;
}
extern "C" {
    pub fn _frida_g_int_equal(v1: gconstpointer, v2: gconstpointer) -> gboolean;
}
extern "C" {
    pub fn _frida_g_int_hash(v: gconstpointer) -> guint;
}
extern "C" {
    pub fn _frida_g_int64_equal(v1: gconstpointer, v2: gconstpointer) -> gboolean;
}
extern "C" {
    pub fn _frida_g_int64_hash(v: gconstpointer) -> guint;
}
extern "C" {
    pub fn _frida_g_double_equal(v1: gconstpointer, v2: gconstpointer) -> gboolean;
}
extern "C" {
    pub fn _frida_g_double_hash(v: gconstpointer) -> guint;
}
extern "C" {
    pub fn _frida_g_direct_hash(v: gconstpointer) -> guint;
}
extern "C" {
    pub fn _frida_g_direct_equal(v1: gconstpointer, v2: gconstpointer) -> gboolean;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GHmac {
    _unused: [u8; 0],
}
pub type GHmac = _GHmac;
extern "C" {
    pub fn _frida_g_hmac_new(
        digest_type: GChecksumType,
        key: *const guchar,
        key_len: gsize,
    ) -> *mut GHmac;
}
extern "C" {
    pub fn _frida_g_hmac_copy(hmac: *const GHmac) -> *mut GHmac;
}
extern "C" {
    pub fn _frida_g_hmac_ref(hmac: *mut GHmac) -> *mut GHmac;
}
extern "C" {
    pub fn _frida_g_hmac_unref(hmac: *mut GHmac);
}
extern "C" {
    pub fn _frida_g_hmac_update(hmac: *mut GHmac, data: *const guchar, length: gssize);
}
extern "C" {
    pub fn _frida_g_hmac_get_string(hmac: *mut GHmac) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_hmac_get_digest(hmac: *mut GHmac, buffer: *mut guint8, digest_len: *mut gsize);
}
extern "C" {
    pub fn _frida_g_compute_hmac_for_data(
        digest_type: GChecksumType,
        key: *const guchar,
        key_len: gsize,
        data: *const guchar,
        length: gsize,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_compute_hmac_for_string(
        digest_type: GChecksumType,
        key: *const guchar,
        key_len: gsize,
        str_: *const gchar,
        length: gssize,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_compute_hmac_for_bytes(
        digest_type: GChecksumType,
        key: *mut GBytes,
        data: *mut GBytes,
    ) -> *mut gchar;
}
pub type GHook = _GHook;
pub type GHookList = _GHookList;
pub type GHookCompareFunc =
    ::core::option::Option<unsafe extern "C" fn(new_hook: *mut GHook, sibling: *mut GHook) -> gint>;
pub type GHookFindFunc =
    ::core::option::Option<unsafe extern "C" fn(hook: *mut GHook, user_data: gpointer) -> gboolean>;
pub type GHookMarshaller =
    ::core::option::Option<unsafe extern "C" fn(hook: *mut GHook, user_data: gpointer)>;
pub type GHookCheckMarshaller =
    ::core::option::Option<unsafe extern "C" fn(hook: *mut GHook, user_data: gpointer) -> gboolean>;
pub type GHookFunc = ::core::option::Option<unsafe extern "C" fn(data: gpointer)>;
pub type GHookCheckFunc = ::core::option::Option<unsafe extern "C" fn(data: gpointer) -> gboolean>;
pub type GHookFinalizeFunc =
    ::core::option::Option<unsafe extern "C" fn(hook_list: *mut GHookList, hook: *mut GHook)>;
pub const GHookFlagMask_G_HOOK_FLAG_ACTIVE: GHookFlagMask = 1;
pub const GHookFlagMask_G_HOOK_FLAG_IN_CALL: GHookFlagMask = 2;
pub const GHookFlagMask_G_HOOK_FLAG_MASK: GHookFlagMask = 15;
pub type GHookFlagMask = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GHookList {
    pub seq_id: gulong,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
    pub hooks: *mut GHook,
    pub dummy3: gpointer,
    pub finalize_hook: GHookFinalizeFunc,
    pub dummy: [gpointer; 2usize],
}
impl _GHookList {
    #[inline]
    pub fn hook_size(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_hook_size(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn is_setup(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_setup(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        hook_size: guint,
        is_setup: guint,
    ) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let hook_size: u32 = unsafe { ::core::mem::transmute(hook_size) };
            hook_size as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let is_setup: u32 = unsafe { ::core::mem::transmute(is_setup) };
            is_setup as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GHook {
    pub data: gpointer,
    pub next: *mut GHook,
    pub prev: *mut GHook,
    pub ref_count: guint,
    pub hook_id: gulong,
    pub flags: guint,
    pub func: gpointer,
    pub destroy: GDestroyNotify,
}
extern "C" {
    pub fn _frida_g_hook_list_init(hook_list: *mut GHookList, hook_size: guint);
}
extern "C" {
    pub fn _frida_g_hook_list_clear(hook_list: *mut GHookList);
}
extern "C" {
    pub fn _frida_g_hook_alloc(hook_list: *mut GHookList) -> *mut GHook;
}
extern "C" {
    pub fn _frida_g_hook_free(hook_list: *mut GHookList, hook: *mut GHook);
}
extern "C" {
    pub fn _frida_g_hook_ref(hook_list: *mut GHookList, hook: *mut GHook) -> *mut GHook;
}
extern "C" {
    pub fn _frida_g_hook_unref(hook_list: *mut GHookList, hook: *mut GHook);
}
extern "C" {
    pub fn _frida_g_hook_destroy(hook_list: *mut GHookList, hook_id: gulong) -> gboolean;
}
extern "C" {
    pub fn _frida_g_hook_destroy_link(hook_list: *mut GHookList, hook: *mut GHook);
}
extern "C" {
    pub fn _frida_g_hook_prepend(hook_list: *mut GHookList, hook: *mut GHook);
}
extern "C" {
    pub fn _frida_g_hook_insert_before(
        hook_list: *mut GHookList,
        sibling: *mut GHook,
        hook: *mut GHook,
    );
}
extern "C" {
    pub fn _frida_g_hook_insert_sorted(
        hook_list: *mut GHookList,
        hook: *mut GHook,
        func: GHookCompareFunc,
    );
}
extern "C" {
    pub fn _frida_g_hook_get(hook_list: *mut GHookList, hook_id: gulong) -> *mut GHook;
}
extern "C" {
    pub fn _frida_g_hook_find(
        hook_list: *mut GHookList,
        need_valids: gboolean,
        func: GHookFindFunc,
        data: gpointer,
    ) -> *mut GHook;
}
extern "C" {
    pub fn _frida_g_hook_find_data(
        hook_list: *mut GHookList,
        need_valids: gboolean,
        data: gpointer,
    ) -> *mut GHook;
}
extern "C" {
    pub fn _frida_g_hook_find_func(
        hook_list: *mut GHookList,
        need_valids: gboolean,
        func: gpointer,
    ) -> *mut GHook;
}
extern "C" {
    pub fn _frida_g_hook_find_func_data(
        hook_list: *mut GHookList,
        need_valids: gboolean,
        func: gpointer,
        data: gpointer,
    ) -> *mut GHook;
}
extern "C" {
    pub fn _frida_g_hook_first_valid(
        hook_list: *mut GHookList,
        may_be_in_call: gboolean,
    ) -> *mut GHook;
}
extern "C" {
    pub fn _frida_g_hook_next_valid(
        hook_list: *mut GHookList,
        hook: *mut GHook,
        may_be_in_call: gboolean,
    ) -> *mut GHook;
}
extern "C" {
    pub fn _frida_g_hook_compare_ids(new_hook: *mut GHook, sibling: *mut GHook) -> gint;
}
extern "C" {
    pub fn _frida_g_hook_list_invoke(hook_list: *mut GHookList, may_recurse: gboolean);
}
extern "C" {
    pub fn _frida_g_hook_list_invoke_check(hook_list: *mut GHookList, may_recurse: gboolean);
}
extern "C" {
    pub fn _frida_g_hook_list_marshal(
        hook_list: *mut GHookList,
        may_recurse: gboolean,
        marshaller: GHookMarshaller,
        marshal_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_hook_list_marshal_check(
        hook_list: *mut GHookList,
        may_recurse: gboolean,
        marshaller: GHookCheckMarshaller,
        marshal_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_hostname_is_non_ascii(hostname: *const gchar) -> gboolean;
}
extern "C" {
    pub fn _frida_g_hostname_is_ascii_encoded(hostname: *const gchar) -> gboolean;
}
extern "C" {
    pub fn _frida_g_hostname_is_ip_address(hostname: *const gchar) -> gboolean;
}
extern "C" {
    pub fn _frida_g_hostname_to_ascii(hostname: *const gchar) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_hostname_to_unicode(hostname: *const gchar) -> *mut gchar;
}
pub type GPollFD = _GPollFD;
pub type GPollFunc = ::core::option::Option<
    unsafe extern "C" fn(ufds: *mut GPollFD, nfsd: guint, timeout_: gint) -> gint,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GPollFD {
    pub fd: gint,
    pub events: gushort,
    pub revents: gushort,
}
extern "C" {
    pub fn _frida_g_poll(fds: *mut GPollFD, nfds: guint, timeout: gint) -> gint;
}
pub type GSList = _GSList;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSList {
    pub data: gpointer,
    pub next: *mut GSList,
}
extern "C" {
    pub fn _frida_g_slist_alloc() -> *mut GSList;
}
extern "C" {
    pub fn _frida_g_slist_free(list: *mut GSList);
}
extern "C" {
    pub fn _frida_g_slist_free_1(list: *mut GSList);
}
extern "C" {
    pub fn _frida_g_slist_free_full(list: *mut GSList, free_func: GDestroyNotify);
}
extern "C" {
    pub fn _frida_g_slist_append(list: *mut GSList, data: gpointer) -> *mut GSList;
}
extern "C" {
    pub fn _frida_g_slist_prepend(list: *mut GSList, data: gpointer) -> *mut GSList;
}
extern "C" {
    pub fn _frida_g_slist_insert(list: *mut GSList, data: gpointer, position: gint) -> *mut GSList;
}
extern "C" {
    pub fn _frida_g_slist_insert_sorted(
        list: *mut GSList,
        data: gpointer,
        func: GCompareFunc,
    ) -> *mut GSList;
}
extern "C" {
    pub fn _frida_g_slist_insert_sorted_with_data(
        list: *mut GSList,
        data: gpointer,
        func: GCompareDataFunc,
        user_data: gpointer,
    ) -> *mut GSList;
}
extern "C" {
    pub fn _frida_g_slist_insert_before(
        slist: *mut GSList,
        sibling: *mut GSList,
        data: gpointer,
    ) -> *mut GSList;
}
extern "C" {
    pub fn _frida_g_slist_concat(list1: *mut GSList, list2: *mut GSList) -> *mut GSList;
}
extern "C" {
    pub fn _frida_g_slist_remove(list: *mut GSList, data: gconstpointer) -> *mut GSList;
}
extern "C" {
    pub fn _frida_g_slist_remove_all(list: *mut GSList, data: gconstpointer) -> *mut GSList;
}
extern "C" {
    pub fn _frida_g_slist_remove_link(list: *mut GSList, link_: *mut GSList) -> *mut GSList;
}
extern "C" {
    pub fn _frida_g_slist_delete_link(list: *mut GSList, link_: *mut GSList) -> *mut GSList;
}
extern "C" {
    pub fn _frida_g_slist_reverse(list: *mut GSList) -> *mut GSList;
}
extern "C" {
    pub fn _frida_g_slist_copy(list: *mut GSList) -> *mut GSList;
}
extern "C" {
    pub fn _frida_g_slist_copy_deep(
        list: *mut GSList,
        func: GCopyFunc,
        user_data: gpointer,
    ) -> *mut GSList;
}
extern "C" {
    pub fn _frida_g_slist_nth(list: *mut GSList, n: guint) -> *mut GSList;
}
extern "C" {
    pub fn _frida_g_slist_find(list: *mut GSList, data: gconstpointer) -> *mut GSList;
}
extern "C" {
    pub fn _frida_g_slist_find_custom(
        list: *mut GSList,
        data: gconstpointer,
        func: GCompareFunc,
    ) -> *mut GSList;
}
extern "C" {
    pub fn _frida_g_slist_position(list: *mut GSList, llink: *mut GSList) -> gint;
}
extern "C" {
    pub fn _frida_g_slist_index(list: *mut GSList, data: gconstpointer) -> gint;
}
extern "C" {
    pub fn _frida_g_slist_last(list: *mut GSList) -> *mut GSList;
}
extern "C" {
    pub fn _frida_g_slist_length(list: *mut GSList) -> guint;
}
extern "C" {
    pub fn _frida_g_slist_foreach(list: *mut GSList, func: GFunc, user_data: gpointer);
}
extern "C" {
    pub fn _frida_g_slist_sort(list: *mut GSList, compare_func: GCompareFunc) -> *mut GSList;
}
extern "C" {
    pub fn _frida_g_slist_sort_with_data(
        list: *mut GSList,
        compare_func: GCompareDataFunc,
        user_data: gpointer,
    ) -> *mut GSList;
}
extern "C" {
    pub fn _frida_g_slist_nth_data(list: *mut GSList, n: guint) -> gpointer;
}
extern "C" {
    pub fn _frida_g_clear_slist(slist_ptr: *mut *mut GSList, destroy: GDestroyNotify);
}
pub const GIOCondition_G_IO_IN: GIOCondition = 1;
pub const GIOCondition_G_IO_OUT: GIOCondition = 4;
pub const GIOCondition_G_IO_PRI: GIOCondition = 2;
pub const GIOCondition_G_IO_ERR: GIOCondition = 8;
pub const GIOCondition_G_IO_HUP: GIOCondition = 16;
pub const GIOCondition_G_IO_NVAL: GIOCondition = 32;
pub type GIOCondition = ::core::ffi::c_uint;
pub const GMainContextFlags_G_MAIN_CONTEXT_FLAGS_NONE: GMainContextFlags = 0;
pub const GMainContextFlags_G_MAIN_CONTEXT_FLAGS_OWNERLESS_POLLING: GMainContextFlags = 1;
pub type GMainContextFlags = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GMainContext {
    _unused: [u8; 0],
}
pub type GMainContext = _GMainContext;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GMainLoop {
    _unused: [u8; 0],
}
pub type GMainLoop = _GMainLoop;
pub type GSource = _GSource;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSourcePrivate {
    _unused: [u8; 0],
}
pub type GSourcePrivate = _GSourcePrivate;
pub type GSourceCallbackFuncs = _GSourceCallbackFuncs;
pub type GSourceFuncs = _GSourceFuncs;
pub type GSourceFunc =
    ::core::option::Option<unsafe extern "C" fn(user_data: gpointer) -> gboolean>;
pub type GSourceOnceFunc = ::core::option::Option<unsafe extern "C" fn(user_data: gpointer)>;
pub type GChildWatchFunc =
    ::core::option::Option<unsafe extern "C" fn(pid: GPid, wait_status: gint, user_data: gpointer)>;
pub type GSourceDisposeFunc = ::core::option::Option<unsafe extern "C" fn(source: *mut GSource)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSource {
    pub callback_data: gpointer,
    pub callback_funcs: *mut GSourceCallbackFuncs,
    pub source_funcs: *const GSourceFuncs,
    pub ref_count: guint,
    pub context: *mut GMainContext,
    pub priority: gint,
    pub flags: guint,
    pub source_id: guint,
    pub poll_fds: *mut GSList,
    pub prev: *mut GSource,
    pub next: *mut GSource,
    pub name: *mut ::core::ffi::c_char,
    pub priv_: *mut GSourcePrivate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSourceCallbackFuncs {
    pub ref_: ::core::option::Option<unsafe extern "C" fn(cb_data: gpointer)>,
    pub unref: ::core::option::Option<unsafe extern "C" fn(cb_data: gpointer)>,
    pub get: ::core::option::Option<
        unsafe extern "C" fn(
            cb_data: gpointer,
            source: *mut GSource,
            func: *mut GSourceFunc,
            data: *mut gpointer,
        ),
    >,
}
pub type GSourceDummyMarshal = ::core::option::Option<unsafe extern "C" fn()>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSourceFuncs {
    pub prepare: ::core::option::Option<
        unsafe extern "C" fn(source: *mut GSource, timeout_: *mut gint) -> gboolean,
    >,
    pub check: ::core::option::Option<unsafe extern "C" fn(source: *mut GSource) -> gboolean>,
    pub dispatch: ::core::option::Option<
        unsafe extern "C" fn(
            source: *mut GSource,
            callback: GSourceFunc,
            user_data: gpointer,
        ) -> gboolean,
    >,
    pub finalize: ::core::option::Option<unsafe extern "C" fn(source: *mut GSource)>,
    pub closure_callback: GSourceFunc,
    pub closure_marshal: GSourceDummyMarshal,
}
extern "C" {
    pub fn _frida_g_main_context_new() -> *mut GMainContext;
}
extern "C" {
    pub fn _frida_g_main_context_new_with_flags(flags: GMainContextFlags) -> *mut GMainContext;
}
extern "C" {
    pub fn _frida_g_main_context_ref(context: *mut GMainContext) -> *mut GMainContext;
}
extern "C" {
    pub fn _frida_g_main_context_unref(context: *mut GMainContext);
}
extern "C" {
    pub fn _frida_g_main_context_default() -> *mut GMainContext;
}
extern "C" {
    pub fn _frida_g_main_context_iteration(
        context: *mut GMainContext,
        may_block: gboolean,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_main_context_pending(context: *mut GMainContext) -> gboolean;
}
extern "C" {
    pub fn _frida_g_main_context_find_source_by_id(
        context: *mut GMainContext,
        source_id: guint,
    ) -> *mut GSource;
}
extern "C" {
    pub fn _frida_g_main_context_find_source_by_user_data(
        context: *mut GMainContext,
        user_data: gpointer,
    ) -> *mut GSource;
}
extern "C" {
    pub fn _frida_g_main_context_find_source_by_funcs_user_data(
        context: *mut GMainContext,
        funcs: *mut GSourceFuncs,
        user_data: gpointer,
    ) -> *mut GSource;
}
extern "C" {
    pub fn _frida_g_main_context_wakeup(context: *mut GMainContext);
}
extern "C" {
    pub fn _frida_g_main_context_acquire(context: *mut GMainContext) -> gboolean;
}
extern "C" {
    pub fn _frida_g_main_context_release(context: *mut GMainContext);
}
extern "C" {
    pub fn _frida_g_main_context_is_owner(context: *mut GMainContext) -> gboolean;
}
extern "C" {
    pub fn _frida_g_main_context_wait(
        context: *mut GMainContext,
        cond: *mut GCond,
        mutex: *mut GMutex,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_main_context_prepare(
        context: *mut GMainContext,
        priority: *mut gint,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_main_context_query(
        context: *mut GMainContext,
        max_priority: gint,
        timeout_: *mut gint,
        fds: *mut GPollFD,
        n_fds: gint,
    ) -> gint;
}
extern "C" {
    pub fn _frida_g_main_context_check(
        context: *mut GMainContext,
        max_priority: gint,
        fds: *mut GPollFD,
        n_fds: gint,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_main_context_dispatch(context: *mut GMainContext);
}
extern "C" {
    pub fn _frida_g_main_context_set_poll_func(context: *mut GMainContext, func: GPollFunc);
}
extern "C" {
    pub fn _frida_g_main_context_get_poll_func(context: *mut GMainContext) -> GPollFunc;
}
extern "C" {
    pub fn _frida_g_main_context_add_poll(
        context: *mut GMainContext,
        fd: *mut GPollFD,
        priority: gint,
    );
}
extern "C" {
    pub fn _frida_g_main_context_remove_poll(context: *mut GMainContext, fd: *mut GPollFD);
}
extern "C" {
    pub fn _frida_g_main_depth() -> gint;
}
extern "C" {
    pub fn _frida_g_main_current_source() -> *mut GSource;
}
extern "C" {
    pub fn _frida_g_main_context_push_thread_default(context: *mut GMainContext);
}
extern "C" {
    pub fn _frida_g_main_context_pop_thread_default(context: *mut GMainContext);
}
extern "C" {
    pub fn _frida_g_main_context_get_thread_default() -> *mut GMainContext;
}
extern "C" {
    pub fn _frida_g_main_context_ref_thread_default() -> *mut GMainContext;
}
pub type GMainContextPusher = ::core::ffi::c_void;
extern "C" {
    pub fn _frida_g_main_loop_new(
        context: *mut GMainContext,
        is_running: gboolean,
    ) -> *mut GMainLoop;
}
extern "C" {
    pub fn _frida_g_main_loop_run(loop_: *mut GMainLoop);
}
extern "C" {
    pub fn _frida_g_main_loop_quit(loop_: *mut GMainLoop);
}
extern "C" {
    pub fn _frida_g_main_loop_ref(loop_: *mut GMainLoop) -> *mut GMainLoop;
}
extern "C" {
    pub fn _frida_g_main_loop_unref(loop_: *mut GMainLoop);
}
extern "C" {
    pub fn _frida_g_main_loop_is_running(loop_: *mut GMainLoop) -> gboolean;
}
extern "C" {
    pub fn _frida_g_main_loop_get_context(loop_: *mut GMainLoop) -> *mut GMainContext;
}
extern "C" {
    pub fn _frida_g_source_new(source_funcs: *mut GSourceFuncs, struct_size: guint)
        -> *mut GSource;
}
extern "C" {
    pub fn _frida_g_source_set_dispose_function(source: *mut GSource, dispose: GSourceDisposeFunc);
}
extern "C" {
    pub fn _frida_g_source_ref(source: *mut GSource) -> *mut GSource;
}
extern "C" {
    pub fn _frida_g_source_unref(source: *mut GSource);
}
extern "C" {
    pub fn _frida_g_source_attach(source: *mut GSource, context: *mut GMainContext) -> guint;
}
extern "C" {
    pub fn _frida_g_source_destroy(source: *mut GSource);
}
extern "C" {
    pub fn _frida_g_source_set_priority(source: *mut GSource, priority: gint);
}
extern "C" {
    pub fn _frida_g_source_get_priority(source: *mut GSource) -> gint;
}
extern "C" {
    pub fn _frida_g_source_set_can_recurse(source: *mut GSource, can_recurse: gboolean);
}
extern "C" {
    pub fn _frida_g_source_get_can_recurse(source: *mut GSource) -> gboolean;
}
extern "C" {
    pub fn _frida_g_source_get_id(source: *mut GSource) -> guint;
}
extern "C" {
    pub fn _frida_g_source_get_context(source: *mut GSource) -> *mut GMainContext;
}
extern "C" {
    pub fn _frida_g_source_set_callback(
        source: *mut GSource,
        func: GSourceFunc,
        data: gpointer,
        notify: GDestroyNotify,
    );
}
extern "C" {
    pub fn _frida_g_source_set_funcs(source: *mut GSource, funcs: *mut GSourceFuncs);
}
extern "C" {
    pub fn _frida_g_source_is_destroyed(source: *mut GSource) -> gboolean;
}
extern "C" {
    pub fn _frida_g_source_set_name(source: *mut GSource, name: *const ::core::ffi::c_char);
}
extern "C" {
    pub fn _frida_g_source_set_static_name(source: *mut GSource, name: *const ::core::ffi::c_char);
}
extern "C" {
    pub fn _frida_g_source_get_name(source: *mut GSource) -> *const ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_source_set_name_by_id(tag: guint, name: *const ::core::ffi::c_char);
}
extern "C" {
    pub fn _frida_g_source_set_ready_time(source: *mut GSource, ready_time: gint64);
}
extern "C" {
    pub fn _frida_g_source_get_ready_time(source: *mut GSource) -> gint64;
}
extern "C" {
    pub fn _frida_g_source_add_unix_fd(
        source: *mut GSource,
        fd: gint,
        events: GIOCondition,
    ) -> gpointer;
}
extern "C" {
    pub fn _frida_g_source_modify_unix_fd(
        source: *mut GSource,
        tag: gpointer,
        new_events: GIOCondition,
    );
}
extern "C" {
    pub fn _frida_g_source_remove_unix_fd(source: *mut GSource, tag: gpointer);
}
extern "C" {
    pub fn _frida_g_source_query_unix_fd(source: *mut GSource, tag: gpointer) -> GIOCondition;
}
extern "C" {
    pub fn _frida_g_source_set_callback_indirect(
        source: *mut GSource,
        callback_data: gpointer,
        callback_funcs: *mut GSourceCallbackFuncs,
    );
}
extern "C" {
    pub fn _frida_g_source_add_poll(source: *mut GSource, fd: *mut GPollFD);
}
extern "C" {
    pub fn _frida_g_source_remove_poll(source: *mut GSource, fd: *mut GPollFD);
}
extern "C" {
    pub fn _frida_g_source_add_child_source(source: *mut GSource, child_source: *mut GSource);
}
extern "C" {
    pub fn _frida_g_source_remove_child_source(source: *mut GSource, child_source: *mut GSource);
}
extern "C" {
    pub fn _frida_g_source_get_current_time(source: *mut GSource, timeval: *mut GTimeVal);
}
extern "C" {
    pub fn _frida_g_source_get_time(source: *mut GSource) -> gint64;
}
extern "C" {
    pub fn _frida_g_idle_source_new() -> *mut GSource;
}
extern "C" {
    pub fn _frida_g_child_watch_source_new(pid: GPid) -> *mut GSource;
}
extern "C" {
    pub fn _frida_g_timeout_source_new(interval: guint) -> *mut GSource;
}
extern "C" {
    pub fn _frida_g_timeout_source_new_seconds(interval: guint) -> *mut GSource;
}
extern "C" {
    pub fn _frida_g_get_current_time(result: *mut GTimeVal);
}
extern "C" {
    pub fn _frida_g_get_monotonic_time() -> gint64;
}
extern "C" {
    pub fn _frida_g_get_real_time() -> gint64;
}
extern "C" {
    pub fn _frida_g_source_remove(tag: guint) -> gboolean;
}
extern "C" {
    pub fn _frida_g_source_remove_by_user_data(user_data: gpointer) -> gboolean;
}
extern "C" {
    pub fn _frida_g_source_remove_by_funcs_user_data(
        funcs: *mut GSourceFuncs,
        user_data: gpointer,
    ) -> gboolean;
}
pub type GClearHandleFunc = ::core::option::Option<unsafe extern "C" fn(handle_id: guint)>;
extern "C" {
    pub fn _frida_g_clear_handle_id(tag_ptr: *mut guint, clear_func: GClearHandleFunc);
}
extern "C" {
    pub fn _frida_g_timeout_add_full(
        priority: gint,
        interval: guint,
        function: GSourceFunc,
        data: gpointer,
        notify: GDestroyNotify,
    ) -> guint;
}
extern "C" {
    pub fn _frida_g_timeout_add(interval: guint, function: GSourceFunc, data: gpointer) -> guint;
}
extern "C" {
    pub fn _frida_g_timeout_add_once(
        interval: guint,
        function: GSourceOnceFunc,
        data: gpointer,
    ) -> guint;
}
extern "C" {
    pub fn _frida_g_timeout_add_seconds_full(
        priority: gint,
        interval: guint,
        function: GSourceFunc,
        data: gpointer,
        notify: GDestroyNotify,
    ) -> guint;
}
extern "C" {
    pub fn _frida_g_timeout_add_seconds(
        interval: guint,
        function: GSourceFunc,
        data: gpointer,
    ) -> guint;
}
extern "C" {
    pub fn _frida_g_child_watch_add_full(
        priority: gint,
        pid: GPid,
        function: GChildWatchFunc,
        data: gpointer,
        notify: GDestroyNotify,
    ) -> guint;
}
extern "C" {
    pub fn _frida_g_child_watch_add(pid: GPid, function: GChildWatchFunc, data: gpointer) -> guint;
}
extern "C" {
    pub fn _frida_g_idle_add(function: GSourceFunc, data: gpointer) -> guint;
}
extern "C" {
    pub fn _frida_g_idle_add_full(
        priority: gint,
        function: GSourceFunc,
        data: gpointer,
        notify: GDestroyNotify,
    ) -> guint;
}
extern "C" {
    pub fn _frida_g_idle_add_once(function: GSourceOnceFunc, data: gpointer) -> guint;
}
extern "C" {
    pub fn _frida_g_idle_remove_by_data(data: gpointer) -> gboolean;
}
extern "C" {
    pub fn _frida_g_main_context_invoke_full(
        context: *mut GMainContext,
        priority: gint,
        function: GSourceFunc,
        data: gpointer,
        notify: GDestroyNotify,
    );
}
extern "C" {
    pub fn _frida_g_main_context_invoke(
        context: *mut GMainContext,
        function: GSourceFunc,
        data: gpointer,
    );
}
extern "C" {
    pub static mut _frida_g_timeout_funcs: GSourceFuncs;
}
extern "C" {
    pub static mut _frida_g_child_watch_funcs: GSourceFuncs;
}
extern "C" {
    pub static mut _frida_g_idle_funcs: GSourceFuncs;
}
extern "C" {
    pub static mut _frida_g_unix_signal_funcs: GSourceFuncs;
}
extern "C" {
    pub static mut _frida_g_unix_fd_source_funcs: GSourceFuncs;
}
pub type gunichar = guint32;
pub type gunichar2 = guint16;
pub const GUnicodeType_G_UNICODE_CONTROL: GUnicodeType = 0;
pub const GUnicodeType_G_UNICODE_FORMAT: GUnicodeType = 1;
pub const GUnicodeType_G_UNICODE_UNASSIGNED: GUnicodeType = 2;
pub const GUnicodeType_G_UNICODE_PRIVATE_USE: GUnicodeType = 3;
pub const GUnicodeType_G_UNICODE_SURROGATE: GUnicodeType = 4;
pub const GUnicodeType_G_UNICODE_LOWERCASE_LETTER: GUnicodeType = 5;
pub const GUnicodeType_G_UNICODE_MODIFIER_LETTER: GUnicodeType = 6;
pub const GUnicodeType_G_UNICODE_OTHER_LETTER: GUnicodeType = 7;
pub const GUnicodeType_G_UNICODE_TITLECASE_LETTER: GUnicodeType = 8;
pub const GUnicodeType_G_UNICODE_UPPERCASE_LETTER: GUnicodeType = 9;
pub const GUnicodeType_G_UNICODE_SPACING_MARK: GUnicodeType = 10;
pub const GUnicodeType_G_UNICODE_ENCLOSING_MARK: GUnicodeType = 11;
pub const GUnicodeType_G_UNICODE_NON_SPACING_MARK: GUnicodeType = 12;
pub const GUnicodeType_G_UNICODE_DECIMAL_NUMBER: GUnicodeType = 13;
pub const GUnicodeType_G_UNICODE_LETTER_NUMBER: GUnicodeType = 14;
pub const GUnicodeType_G_UNICODE_OTHER_NUMBER: GUnicodeType = 15;
pub const GUnicodeType_G_UNICODE_CONNECT_PUNCTUATION: GUnicodeType = 16;
pub const GUnicodeType_G_UNICODE_DASH_PUNCTUATION: GUnicodeType = 17;
pub const GUnicodeType_G_UNICODE_CLOSE_PUNCTUATION: GUnicodeType = 18;
pub const GUnicodeType_G_UNICODE_FINAL_PUNCTUATION: GUnicodeType = 19;
pub const GUnicodeType_G_UNICODE_INITIAL_PUNCTUATION: GUnicodeType = 20;
pub const GUnicodeType_G_UNICODE_OTHER_PUNCTUATION: GUnicodeType = 21;
pub const GUnicodeType_G_UNICODE_OPEN_PUNCTUATION: GUnicodeType = 22;
pub const GUnicodeType_G_UNICODE_CURRENCY_SYMBOL: GUnicodeType = 23;
pub const GUnicodeType_G_UNICODE_MODIFIER_SYMBOL: GUnicodeType = 24;
pub const GUnicodeType_G_UNICODE_MATH_SYMBOL: GUnicodeType = 25;
pub const GUnicodeType_G_UNICODE_OTHER_SYMBOL: GUnicodeType = 26;
pub const GUnicodeType_G_UNICODE_LINE_SEPARATOR: GUnicodeType = 27;
pub const GUnicodeType_G_UNICODE_PARAGRAPH_SEPARATOR: GUnicodeType = 28;
pub const GUnicodeType_G_UNICODE_SPACE_SEPARATOR: GUnicodeType = 29;
pub type GUnicodeType = ::core::ffi::c_uint;
pub const GUnicodeBreakType_G_UNICODE_BREAK_MANDATORY: GUnicodeBreakType = 0;
pub const GUnicodeBreakType_G_UNICODE_BREAK_CARRIAGE_RETURN: GUnicodeBreakType = 1;
pub const GUnicodeBreakType_G_UNICODE_BREAK_LINE_FEED: GUnicodeBreakType = 2;
pub const GUnicodeBreakType_G_UNICODE_BREAK_COMBINING_MARK: GUnicodeBreakType = 3;
pub const GUnicodeBreakType_G_UNICODE_BREAK_SURROGATE: GUnicodeBreakType = 4;
pub const GUnicodeBreakType_G_UNICODE_BREAK_ZERO_WIDTH_SPACE: GUnicodeBreakType = 5;
pub const GUnicodeBreakType_G_UNICODE_BREAK_INSEPARABLE: GUnicodeBreakType = 6;
pub const GUnicodeBreakType_G_UNICODE_BREAK_NON_BREAKING_GLUE: GUnicodeBreakType = 7;
pub const GUnicodeBreakType_G_UNICODE_BREAK_CONTINGENT: GUnicodeBreakType = 8;
pub const GUnicodeBreakType_G_UNICODE_BREAK_SPACE: GUnicodeBreakType = 9;
pub const GUnicodeBreakType_G_UNICODE_BREAK_AFTER: GUnicodeBreakType = 10;
pub const GUnicodeBreakType_G_UNICODE_BREAK_BEFORE: GUnicodeBreakType = 11;
pub const GUnicodeBreakType_G_UNICODE_BREAK_BEFORE_AND_AFTER: GUnicodeBreakType = 12;
pub const GUnicodeBreakType_G_UNICODE_BREAK_HYPHEN: GUnicodeBreakType = 13;
pub const GUnicodeBreakType_G_UNICODE_BREAK_NON_STARTER: GUnicodeBreakType = 14;
pub const GUnicodeBreakType_G_UNICODE_BREAK_OPEN_PUNCTUATION: GUnicodeBreakType = 15;
pub const GUnicodeBreakType_G_UNICODE_BREAK_CLOSE_PUNCTUATION: GUnicodeBreakType = 16;
pub const GUnicodeBreakType_G_UNICODE_BREAK_QUOTATION: GUnicodeBreakType = 17;
pub const GUnicodeBreakType_G_UNICODE_BREAK_EXCLAMATION: GUnicodeBreakType = 18;
pub const GUnicodeBreakType_G_UNICODE_BREAK_IDEOGRAPHIC: GUnicodeBreakType = 19;
pub const GUnicodeBreakType_G_UNICODE_BREAK_NUMERIC: GUnicodeBreakType = 20;
pub const GUnicodeBreakType_G_UNICODE_BREAK_INFIX_SEPARATOR: GUnicodeBreakType = 21;
pub const GUnicodeBreakType_G_UNICODE_BREAK_SYMBOL: GUnicodeBreakType = 22;
pub const GUnicodeBreakType_G_UNICODE_BREAK_ALPHABETIC: GUnicodeBreakType = 23;
pub const GUnicodeBreakType_G_UNICODE_BREAK_PREFIX: GUnicodeBreakType = 24;
pub const GUnicodeBreakType_G_UNICODE_BREAK_POSTFIX: GUnicodeBreakType = 25;
pub const GUnicodeBreakType_G_UNICODE_BREAK_COMPLEX_CONTEXT: GUnicodeBreakType = 26;
pub const GUnicodeBreakType_G_UNICODE_BREAK_AMBIGUOUS: GUnicodeBreakType = 27;
pub const GUnicodeBreakType_G_UNICODE_BREAK_UNKNOWN: GUnicodeBreakType = 28;
pub const GUnicodeBreakType_G_UNICODE_BREAK_NEXT_LINE: GUnicodeBreakType = 29;
pub const GUnicodeBreakType_G_UNICODE_BREAK_WORD_JOINER: GUnicodeBreakType = 30;
pub const GUnicodeBreakType_G_UNICODE_BREAK_HANGUL_L_JAMO: GUnicodeBreakType = 31;
pub const GUnicodeBreakType_G_UNICODE_BREAK_HANGUL_V_JAMO: GUnicodeBreakType = 32;
pub const GUnicodeBreakType_G_UNICODE_BREAK_HANGUL_T_JAMO: GUnicodeBreakType = 33;
pub const GUnicodeBreakType_G_UNICODE_BREAK_HANGUL_LV_SYLLABLE: GUnicodeBreakType = 34;
pub const GUnicodeBreakType_G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE: GUnicodeBreakType = 35;
pub const GUnicodeBreakType_G_UNICODE_BREAK_CLOSE_PARANTHESIS: GUnicodeBreakType = 36;
pub const GUnicodeBreakType_G_UNICODE_BREAK_CLOSE_PARENTHESIS: GUnicodeBreakType = 36;
pub const GUnicodeBreakType_G_UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER: GUnicodeBreakType = 37;
pub const GUnicodeBreakType_G_UNICODE_BREAK_HEBREW_LETTER: GUnicodeBreakType = 38;
pub const GUnicodeBreakType_G_UNICODE_BREAK_REGIONAL_INDICATOR: GUnicodeBreakType = 39;
pub const GUnicodeBreakType_G_UNICODE_BREAK_EMOJI_BASE: GUnicodeBreakType = 40;
pub const GUnicodeBreakType_G_UNICODE_BREAK_EMOJI_MODIFIER: GUnicodeBreakType = 41;
pub const GUnicodeBreakType_G_UNICODE_BREAK_ZERO_WIDTH_JOINER: GUnicodeBreakType = 42;
pub type GUnicodeBreakType = ::core::ffi::c_uint;
pub const GUnicodeScript_G_UNICODE_SCRIPT_INVALID_CODE: GUnicodeScript = -1;
pub const GUnicodeScript_G_UNICODE_SCRIPT_COMMON: GUnicodeScript = 0;
pub const GUnicodeScript_G_UNICODE_SCRIPT_INHERITED: GUnicodeScript = 1;
pub const GUnicodeScript_G_UNICODE_SCRIPT_ARABIC: GUnicodeScript = 2;
pub const GUnicodeScript_G_UNICODE_SCRIPT_ARMENIAN: GUnicodeScript = 3;
pub const GUnicodeScript_G_UNICODE_SCRIPT_BENGALI: GUnicodeScript = 4;
pub const GUnicodeScript_G_UNICODE_SCRIPT_BOPOMOFO: GUnicodeScript = 5;
pub const GUnicodeScript_G_UNICODE_SCRIPT_CHEROKEE: GUnicodeScript = 6;
pub const GUnicodeScript_G_UNICODE_SCRIPT_COPTIC: GUnicodeScript = 7;
pub const GUnicodeScript_G_UNICODE_SCRIPT_CYRILLIC: GUnicodeScript = 8;
pub const GUnicodeScript_G_UNICODE_SCRIPT_DESERET: GUnicodeScript = 9;
pub const GUnicodeScript_G_UNICODE_SCRIPT_DEVANAGARI: GUnicodeScript = 10;
pub const GUnicodeScript_G_UNICODE_SCRIPT_ETHIOPIC: GUnicodeScript = 11;
pub const GUnicodeScript_G_UNICODE_SCRIPT_GEORGIAN: GUnicodeScript = 12;
pub const GUnicodeScript_G_UNICODE_SCRIPT_GOTHIC: GUnicodeScript = 13;
pub const GUnicodeScript_G_UNICODE_SCRIPT_GREEK: GUnicodeScript = 14;
pub const GUnicodeScript_G_UNICODE_SCRIPT_GUJARATI: GUnicodeScript = 15;
pub const GUnicodeScript_G_UNICODE_SCRIPT_GURMUKHI: GUnicodeScript = 16;
pub const GUnicodeScript_G_UNICODE_SCRIPT_HAN: GUnicodeScript = 17;
pub const GUnicodeScript_G_UNICODE_SCRIPT_HANGUL: GUnicodeScript = 18;
pub const GUnicodeScript_G_UNICODE_SCRIPT_HEBREW: GUnicodeScript = 19;
pub const GUnicodeScript_G_UNICODE_SCRIPT_HIRAGANA: GUnicodeScript = 20;
pub const GUnicodeScript_G_UNICODE_SCRIPT_KANNADA: GUnicodeScript = 21;
pub const GUnicodeScript_G_UNICODE_SCRIPT_KATAKANA: GUnicodeScript = 22;
pub const GUnicodeScript_G_UNICODE_SCRIPT_KHMER: GUnicodeScript = 23;
pub const GUnicodeScript_G_UNICODE_SCRIPT_LAO: GUnicodeScript = 24;
pub const GUnicodeScript_G_UNICODE_SCRIPT_LATIN: GUnicodeScript = 25;
pub const GUnicodeScript_G_UNICODE_SCRIPT_MALAYALAM: GUnicodeScript = 26;
pub const GUnicodeScript_G_UNICODE_SCRIPT_MONGOLIAN: GUnicodeScript = 27;
pub const GUnicodeScript_G_UNICODE_SCRIPT_MYANMAR: GUnicodeScript = 28;
pub const GUnicodeScript_G_UNICODE_SCRIPT_OGHAM: GUnicodeScript = 29;
pub const GUnicodeScript_G_UNICODE_SCRIPT_OLD_ITALIC: GUnicodeScript = 30;
pub const GUnicodeScript_G_UNICODE_SCRIPT_ORIYA: GUnicodeScript = 31;
pub const GUnicodeScript_G_UNICODE_SCRIPT_RUNIC: GUnicodeScript = 32;
pub const GUnicodeScript_G_UNICODE_SCRIPT_SINHALA: GUnicodeScript = 33;
pub const GUnicodeScript_G_UNICODE_SCRIPT_SYRIAC: GUnicodeScript = 34;
pub const GUnicodeScript_G_UNICODE_SCRIPT_TAMIL: GUnicodeScript = 35;
pub const GUnicodeScript_G_UNICODE_SCRIPT_TELUGU: GUnicodeScript = 36;
pub const GUnicodeScript_G_UNICODE_SCRIPT_THAANA: GUnicodeScript = 37;
pub const GUnicodeScript_G_UNICODE_SCRIPT_THAI: GUnicodeScript = 38;
pub const GUnicodeScript_G_UNICODE_SCRIPT_TIBETAN: GUnicodeScript = 39;
pub const GUnicodeScript_G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL: GUnicodeScript = 40;
pub const GUnicodeScript_G_UNICODE_SCRIPT_YI: GUnicodeScript = 41;
pub const GUnicodeScript_G_UNICODE_SCRIPT_TAGALOG: GUnicodeScript = 42;
pub const GUnicodeScript_G_UNICODE_SCRIPT_HANUNOO: GUnicodeScript = 43;
pub const GUnicodeScript_G_UNICODE_SCRIPT_BUHID: GUnicodeScript = 44;
pub const GUnicodeScript_G_UNICODE_SCRIPT_TAGBANWA: GUnicodeScript = 45;
pub const GUnicodeScript_G_UNICODE_SCRIPT_BRAILLE: GUnicodeScript = 46;
pub const GUnicodeScript_G_UNICODE_SCRIPT_CYPRIOT: GUnicodeScript = 47;
pub const GUnicodeScript_G_UNICODE_SCRIPT_LIMBU: GUnicodeScript = 48;
pub const GUnicodeScript_G_UNICODE_SCRIPT_OSMANYA: GUnicodeScript = 49;
pub const GUnicodeScript_G_UNICODE_SCRIPT_SHAVIAN: GUnicodeScript = 50;
pub const GUnicodeScript_G_UNICODE_SCRIPT_LINEAR_B: GUnicodeScript = 51;
pub const GUnicodeScript_G_UNICODE_SCRIPT_TAI_LE: GUnicodeScript = 52;
pub const GUnicodeScript_G_UNICODE_SCRIPT_UGARITIC: GUnicodeScript = 53;
pub const GUnicodeScript_G_UNICODE_SCRIPT_NEW_TAI_LUE: GUnicodeScript = 54;
pub const GUnicodeScript_G_UNICODE_SCRIPT_BUGINESE: GUnicodeScript = 55;
pub const GUnicodeScript_G_UNICODE_SCRIPT_GLAGOLITIC: GUnicodeScript = 56;
pub const GUnicodeScript_G_UNICODE_SCRIPT_TIFINAGH: GUnicodeScript = 57;
pub const GUnicodeScript_G_UNICODE_SCRIPT_SYLOTI_NAGRI: GUnicodeScript = 58;
pub const GUnicodeScript_G_UNICODE_SCRIPT_OLD_PERSIAN: GUnicodeScript = 59;
pub const GUnicodeScript_G_UNICODE_SCRIPT_KHAROSHTHI: GUnicodeScript = 60;
pub const GUnicodeScript_G_UNICODE_SCRIPT_UNKNOWN: GUnicodeScript = 61;
pub const GUnicodeScript_G_UNICODE_SCRIPT_BALINESE: GUnicodeScript = 62;
pub const GUnicodeScript_G_UNICODE_SCRIPT_CUNEIFORM: GUnicodeScript = 63;
pub const GUnicodeScript_G_UNICODE_SCRIPT_PHOENICIAN: GUnicodeScript = 64;
pub const GUnicodeScript_G_UNICODE_SCRIPT_PHAGS_PA: GUnicodeScript = 65;
pub const GUnicodeScript_G_UNICODE_SCRIPT_NKO: GUnicodeScript = 66;
pub const GUnicodeScript_G_UNICODE_SCRIPT_KAYAH_LI: GUnicodeScript = 67;
pub const GUnicodeScript_G_UNICODE_SCRIPT_LEPCHA: GUnicodeScript = 68;
pub const GUnicodeScript_G_UNICODE_SCRIPT_REJANG: GUnicodeScript = 69;
pub const GUnicodeScript_G_UNICODE_SCRIPT_SUNDANESE: GUnicodeScript = 70;
pub const GUnicodeScript_G_UNICODE_SCRIPT_SAURASHTRA: GUnicodeScript = 71;
pub const GUnicodeScript_G_UNICODE_SCRIPT_CHAM: GUnicodeScript = 72;
pub const GUnicodeScript_G_UNICODE_SCRIPT_OL_CHIKI: GUnicodeScript = 73;
pub const GUnicodeScript_G_UNICODE_SCRIPT_VAI: GUnicodeScript = 74;
pub const GUnicodeScript_G_UNICODE_SCRIPT_CARIAN: GUnicodeScript = 75;
pub const GUnicodeScript_G_UNICODE_SCRIPT_LYCIAN: GUnicodeScript = 76;
pub const GUnicodeScript_G_UNICODE_SCRIPT_LYDIAN: GUnicodeScript = 77;
pub const GUnicodeScript_G_UNICODE_SCRIPT_AVESTAN: GUnicodeScript = 78;
pub const GUnicodeScript_G_UNICODE_SCRIPT_BAMUM: GUnicodeScript = 79;
pub const GUnicodeScript_G_UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS: GUnicodeScript = 80;
pub const GUnicodeScript_G_UNICODE_SCRIPT_IMPERIAL_ARAMAIC: GUnicodeScript = 81;
pub const GUnicodeScript_G_UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI: GUnicodeScript = 82;
pub const GUnicodeScript_G_UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN: GUnicodeScript = 83;
pub const GUnicodeScript_G_UNICODE_SCRIPT_JAVANESE: GUnicodeScript = 84;
pub const GUnicodeScript_G_UNICODE_SCRIPT_KAITHI: GUnicodeScript = 85;
pub const GUnicodeScript_G_UNICODE_SCRIPT_LISU: GUnicodeScript = 86;
pub const GUnicodeScript_G_UNICODE_SCRIPT_MEETEI_MAYEK: GUnicodeScript = 87;
pub const GUnicodeScript_G_UNICODE_SCRIPT_OLD_SOUTH_ARABIAN: GUnicodeScript = 88;
pub const GUnicodeScript_G_UNICODE_SCRIPT_OLD_TURKIC: GUnicodeScript = 89;
pub const GUnicodeScript_G_UNICODE_SCRIPT_SAMARITAN: GUnicodeScript = 90;
pub const GUnicodeScript_G_UNICODE_SCRIPT_TAI_THAM: GUnicodeScript = 91;
pub const GUnicodeScript_G_UNICODE_SCRIPT_TAI_VIET: GUnicodeScript = 92;
pub const GUnicodeScript_G_UNICODE_SCRIPT_BATAK: GUnicodeScript = 93;
pub const GUnicodeScript_G_UNICODE_SCRIPT_BRAHMI: GUnicodeScript = 94;
pub const GUnicodeScript_G_UNICODE_SCRIPT_MANDAIC: GUnicodeScript = 95;
pub const GUnicodeScript_G_UNICODE_SCRIPT_CHAKMA: GUnicodeScript = 96;
pub const GUnicodeScript_G_UNICODE_SCRIPT_MEROITIC_CURSIVE: GUnicodeScript = 97;
pub const GUnicodeScript_G_UNICODE_SCRIPT_MEROITIC_HIEROGLYPHS: GUnicodeScript = 98;
pub const GUnicodeScript_G_UNICODE_SCRIPT_MIAO: GUnicodeScript = 99;
pub const GUnicodeScript_G_UNICODE_SCRIPT_SHARADA: GUnicodeScript = 100;
pub const GUnicodeScript_G_UNICODE_SCRIPT_SORA_SOMPENG: GUnicodeScript = 101;
pub const GUnicodeScript_G_UNICODE_SCRIPT_TAKRI: GUnicodeScript = 102;
pub const GUnicodeScript_G_UNICODE_SCRIPT_BASSA_VAH: GUnicodeScript = 103;
pub const GUnicodeScript_G_UNICODE_SCRIPT_CAUCASIAN_ALBANIAN: GUnicodeScript = 104;
pub const GUnicodeScript_G_UNICODE_SCRIPT_DUPLOYAN: GUnicodeScript = 105;
pub const GUnicodeScript_G_UNICODE_SCRIPT_ELBASAN: GUnicodeScript = 106;
pub const GUnicodeScript_G_UNICODE_SCRIPT_GRANTHA: GUnicodeScript = 107;
pub const GUnicodeScript_G_UNICODE_SCRIPT_KHOJKI: GUnicodeScript = 108;
pub const GUnicodeScript_G_UNICODE_SCRIPT_KHUDAWADI: GUnicodeScript = 109;
pub const GUnicodeScript_G_UNICODE_SCRIPT_LINEAR_A: GUnicodeScript = 110;
pub const GUnicodeScript_G_UNICODE_SCRIPT_MAHAJANI: GUnicodeScript = 111;
pub const GUnicodeScript_G_UNICODE_SCRIPT_MANICHAEAN: GUnicodeScript = 112;
pub const GUnicodeScript_G_UNICODE_SCRIPT_MENDE_KIKAKUI: GUnicodeScript = 113;
pub const GUnicodeScript_G_UNICODE_SCRIPT_MODI: GUnicodeScript = 114;
pub const GUnicodeScript_G_UNICODE_SCRIPT_MRO: GUnicodeScript = 115;
pub const GUnicodeScript_G_UNICODE_SCRIPT_NABATAEAN: GUnicodeScript = 116;
pub const GUnicodeScript_G_UNICODE_SCRIPT_OLD_NORTH_ARABIAN: GUnicodeScript = 117;
pub const GUnicodeScript_G_UNICODE_SCRIPT_OLD_PERMIC: GUnicodeScript = 118;
pub const GUnicodeScript_G_UNICODE_SCRIPT_PAHAWH_HMONG: GUnicodeScript = 119;
pub const GUnicodeScript_G_UNICODE_SCRIPT_PALMYRENE: GUnicodeScript = 120;
pub const GUnicodeScript_G_UNICODE_SCRIPT_PAU_CIN_HAU: GUnicodeScript = 121;
pub const GUnicodeScript_G_UNICODE_SCRIPT_PSALTER_PAHLAVI: GUnicodeScript = 122;
pub const GUnicodeScript_G_UNICODE_SCRIPT_SIDDHAM: GUnicodeScript = 123;
pub const GUnicodeScript_G_UNICODE_SCRIPT_TIRHUTA: GUnicodeScript = 124;
pub const GUnicodeScript_G_UNICODE_SCRIPT_WARANG_CITI: GUnicodeScript = 125;
pub const GUnicodeScript_G_UNICODE_SCRIPT_AHOM: GUnicodeScript = 126;
pub const GUnicodeScript_G_UNICODE_SCRIPT_ANATOLIAN_HIEROGLYPHS: GUnicodeScript = 127;
pub const GUnicodeScript_G_UNICODE_SCRIPT_HATRAN: GUnicodeScript = 128;
pub const GUnicodeScript_G_UNICODE_SCRIPT_MULTANI: GUnicodeScript = 129;
pub const GUnicodeScript_G_UNICODE_SCRIPT_OLD_HUNGARIAN: GUnicodeScript = 130;
pub const GUnicodeScript_G_UNICODE_SCRIPT_SIGNWRITING: GUnicodeScript = 131;
pub const GUnicodeScript_G_UNICODE_SCRIPT_ADLAM: GUnicodeScript = 132;
pub const GUnicodeScript_G_UNICODE_SCRIPT_BHAIKSUKI: GUnicodeScript = 133;
pub const GUnicodeScript_G_UNICODE_SCRIPT_MARCHEN: GUnicodeScript = 134;
pub const GUnicodeScript_G_UNICODE_SCRIPT_NEWA: GUnicodeScript = 135;
pub const GUnicodeScript_G_UNICODE_SCRIPT_OSAGE: GUnicodeScript = 136;
pub const GUnicodeScript_G_UNICODE_SCRIPT_TANGUT: GUnicodeScript = 137;
pub const GUnicodeScript_G_UNICODE_SCRIPT_MASARAM_GONDI: GUnicodeScript = 138;
pub const GUnicodeScript_G_UNICODE_SCRIPT_NUSHU: GUnicodeScript = 139;
pub const GUnicodeScript_G_UNICODE_SCRIPT_SOYOMBO: GUnicodeScript = 140;
pub const GUnicodeScript_G_UNICODE_SCRIPT_ZANABAZAR_SQUARE: GUnicodeScript = 141;
pub const GUnicodeScript_G_UNICODE_SCRIPT_DOGRA: GUnicodeScript = 142;
pub const GUnicodeScript_G_UNICODE_SCRIPT_GUNJALA_GONDI: GUnicodeScript = 143;
pub const GUnicodeScript_G_UNICODE_SCRIPT_HANIFI_ROHINGYA: GUnicodeScript = 144;
pub const GUnicodeScript_G_UNICODE_SCRIPT_MAKASAR: GUnicodeScript = 145;
pub const GUnicodeScript_G_UNICODE_SCRIPT_MEDEFAIDRIN: GUnicodeScript = 146;
pub const GUnicodeScript_G_UNICODE_SCRIPT_OLD_SOGDIAN: GUnicodeScript = 147;
pub const GUnicodeScript_G_UNICODE_SCRIPT_SOGDIAN: GUnicodeScript = 148;
pub const GUnicodeScript_G_UNICODE_SCRIPT_ELYMAIC: GUnicodeScript = 149;
pub const GUnicodeScript_G_UNICODE_SCRIPT_NANDINAGARI: GUnicodeScript = 150;
pub const GUnicodeScript_G_UNICODE_SCRIPT_NYIAKENG_PUACHUE_HMONG: GUnicodeScript = 151;
pub const GUnicodeScript_G_UNICODE_SCRIPT_WANCHO: GUnicodeScript = 152;
pub const GUnicodeScript_G_UNICODE_SCRIPT_CHORASMIAN: GUnicodeScript = 153;
pub const GUnicodeScript_G_UNICODE_SCRIPT_DIVES_AKURU: GUnicodeScript = 154;
pub const GUnicodeScript_G_UNICODE_SCRIPT_KHITAN_SMALL_SCRIPT: GUnicodeScript = 155;
pub const GUnicodeScript_G_UNICODE_SCRIPT_YEZIDI: GUnicodeScript = 156;
pub const GUnicodeScript_G_UNICODE_SCRIPT_CYPRO_MINOAN: GUnicodeScript = 157;
pub const GUnicodeScript_G_UNICODE_SCRIPT_OLD_UYGHUR: GUnicodeScript = 158;
pub const GUnicodeScript_G_UNICODE_SCRIPT_TANGSA: GUnicodeScript = 159;
pub const GUnicodeScript_G_UNICODE_SCRIPT_TOTO: GUnicodeScript = 160;
pub const GUnicodeScript_G_UNICODE_SCRIPT_VITHKUQI: GUnicodeScript = 161;
pub const GUnicodeScript_G_UNICODE_SCRIPT_MATH: GUnicodeScript = 162;
pub const GUnicodeScript_G_UNICODE_SCRIPT_KAWI: GUnicodeScript = 163;
pub const GUnicodeScript_G_UNICODE_SCRIPT_NAG_MUNDARI: GUnicodeScript = 164;
pub type GUnicodeScript = ::core::ffi::c_int;
extern "C" {
    pub fn _frida_g_unicode_script_to_iso15924(script: GUnicodeScript) -> guint32;
}
extern "C" {
    pub fn _frida_g_unicode_script_from_iso15924(iso15924: guint32) -> GUnicodeScript;
}
extern "C" {
    pub fn _frida_g_unichar_isalnum(c: gunichar) -> gboolean;
}
extern "C" {
    pub fn _frida_g_unichar_isalpha(c: gunichar) -> gboolean;
}
extern "C" {
    pub fn _frida_g_unichar_iscntrl(c: gunichar) -> gboolean;
}
extern "C" {
    pub fn _frida_g_unichar_isdigit(c: gunichar) -> gboolean;
}
extern "C" {
    pub fn _frida_g_unichar_isgraph(c: gunichar) -> gboolean;
}
extern "C" {
    pub fn _frida_g_unichar_islower(c: gunichar) -> gboolean;
}
extern "C" {
    pub fn _frida_g_unichar_isprint(c: gunichar) -> gboolean;
}
extern "C" {
    pub fn _frida_g_unichar_ispunct(c: gunichar) -> gboolean;
}
extern "C" {
    pub fn _frida_g_unichar_isspace(c: gunichar) -> gboolean;
}
extern "C" {
    pub fn _frida_g_unichar_isupper(c: gunichar) -> gboolean;
}
extern "C" {
    pub fn _frida_g_unichar_isxdigit(c: gunichar) -> gboolean;
}
extern "C" {
    pub fn _frida_g_unichar_istitle(c: gunichar) -> gboolean;
}
extern "C" {
    pub fn _frida_g_unichar_isdefined(c: gunichar) -> gboolean;
}
extern "C" {
    pub fn _frida_g_unichar_iswide(c: gunichar) -> gboolean;
}
extern "C" {
    pub fn _frida_g_unichar_iswide_cjk(c: gunichar) -> gboolean;
}
extern "C" {
    pub fn _frida_g_unichar_iszerowidth(c: gunichar) -> gboolean;
}
extern "C" {
    pub fn _frida_g_unichar_ismark(c: gunichar) -> gboolean;
}
extern "C" {
    pub fn _frida_g_unichar_toupper(c: gunichar) -> gunichar;
}
extern "C" {
    pub fn _frida_g_unichar_tolower(c: gunichar) -> gunichar;
}
extern "C" {
    pub fn _frida_g_unichar_totitle(c: gunichar) -> gunichar;
}
extern "C" {
    pub fn _frida_g_unichar_digit_value(c: gunichar) -> gint;
}
extern "C" {
    pub fn _frida_g_unichar_xdigit_value(c: gunichar) -> gint;
}
extern "C" {
    pub fn _frida_g_unichar_type(c: gunichar) -> GUnicodeType;
}
extern "C" {
    pub fn _frida_g_unichar_break_type(c: gunichar) -> GUnicodeBreakType;
}
extern "C" {
    pub fn _frida_g_unichar_combining_class(uc: gunichar) -> gint;
}
extern "C" {
    pub fn _frida_g_unichar_get_mirror_char(ch: gunichar, mirrored_ch: *mut gunichar) -> gboolean;
}
extern "C" {
    pub fn _frida_g_unichar_get_script(ch: gunichar) -> GUnicodeScript;
}
extern "C" {
    pub fn _frida_g_unichar_validate(ch: gunichar) -> gboolean;
}
extern "C" {
    pub fn _frida_g_unichar_compose(a: gunichar, b: gunichar, ch: *mut gunichar) -> gboolean;
}
extern "C" {
    pub fn _frida_g_unichar_decompose(ch: gunichar, a: *mut gunichar, b: *mut gunichar)
        -> gboolean;
}
extern "C" {
    pub fn _frida_g_unichar_fully_decompose(
        ch: gunichar,
        compat: gboolean,
        result: *mut gunichar,
        result_len: gsize,
    ) -> gsize;
}
extern "C" {
    pub fn _frida_g_unicode_canonical_ordering(string: *mut gunichar, len: gsize);
}
extern "C" {
    pub fn _frida_g_unicode_canonical_decomposition(
        ch: gunichar,
        result_len: *mut gsize,
    ) -> *mut gunichar;
}
extern "C" {
    pub static _frida_g_utf8_skip: *const gchar;
}
extern "C" {
    pub fn _frida_g_utf8_get_char(p: *const gchar) -> gunichar;
}
extern "C" {
    pub fn _frida_g_utf8_get_char_validated(p: *const gchar, max_len: gssize) -> gunichar;
}
extern "C" {
    pub fn _frida_g_utf8_offset_to_pointer(str_: *const gchar, offset: glong) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_utf8_pointer_to_offset(str_: *const gchar, pos: *const gchar) -> glong;
}
extern "C" {
    pub fn _frida_g_utf8_prev_char(p: *const gchar) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_utf8_find_next_char(p: *const gchar, end: *const gchar) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_utf8_find_prev_char(str_: *const gchar, p: *const gchar) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_utf8_strlen(p: *const gchar, max: gssize) -> glong;
}
extern "C" {
    pub fn _frida_g_utf8_substring(
        str_: *const gchar,
        start_pos: glong,
        end_pos: glong,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_utf8_strncpy(dest: *mut gchar, src: *const gchar, n: gsize) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_utf8_strchr(p: *const gchar, len: gssize, c: gunichar) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_utf8_strrchr(p: *const gchar, len: gssize, c: gunichar) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_utf8_strreverse(str_: *const gchar, len: gssize) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_utf8_to_utf16(
        str_: *const gchar,
        len: glong,
        items_read: *mut glong,
        items_written: *mut glong,
        error: *mut *mut GError,
    ) -> *mut gunichar2;
}
extern "C" {
    pub fn _frida_g_utf8_to_ucs4(
        str_: *const gchar,
        len: glong,
        items_read: *mut glong,
        items_written: *mut glong,
        error: *mut *mut GError,
    ) -> *mut gunichar;
}
extern "C" {
    pub fn _frida_g_utf8_to_ucs4_fast(
        str_: *const gchar,
        len: glong,
        items_written: *mut glong,
    ) -> *mut gunichar;
}
extern "C" {
    pub fn _frida_g_utf16_to_ucs4(
        str_: *const gunichar2,
        len: glong,
        items_read: *mut glong,
        items_written: *mut glong,
        error: *mut *mut GError,
    ) -> *mut gunichar;
}
extern "C" {
    pub fn _frida_g_utf16_to_utf8(
        str_: *const gunichar2,
        len: glong,
        items_read: *mut glong,
        items_written: *mut glong,
        error: *mut *mut GError,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_ucs4_to_utf16(
        str_: *const gunichar,
        len: glong,
        items_read: *mut glong,
        items_written: *mut glong,
        error: *mut *mut GError,
    ) -> *mut gunichar2;
}
extern "C" {
    pub fn _frida_g_ucs4_to_utf8(
        str_: *const gunichar,
        len: glong,
        items_read: *mut glong,
        items_written: *mut glong,
        error: *mut *mut GError,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_unichar_to_utf8(c: gunichar, outbuf: *mut gchar) -> gint;
}
extern "C" {
    pub fn _frida_g_utf8_validate(
        str_: *const gchar,
        max_len: gssize,
        end: *mut *const gchar,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_utf8_validate_len(
        str_: *const gchar,
        max_len: gsize,
        end: *mut *const gchar,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_utf8_strup(str_: *const gchar, len: gssize) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_utf8_strdown(str_: *const gchar, len: gssize) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_utf8_casefold(str_: *const gchar, len: gssize) -> *mut gchar;
}
pub const GNormalizeMode_G_NORMALIZE_DEFAULT: GNormalizeMode = 0;
pub const GNormalizeMode_G_NORMALIZE_NFD: GNormalizeMode = 0;
pub const GNormalizeMode_G_NORMALIZE_DEFAULT_COMPOSE: GNormalizeMode = 1;
pub const GNormalizeMode_G_NORMALIZE_NFC: GNormalizeMode = 1;
pub const GNormalizeMode_G_NORMALIZE_ALL: GNormalizeMode = 2;
pub const GNormalizeMode_G_NORMALIZE_NFKD: GNormalizeMode = 2;
pub const GNormalizeMode_G_NORMALIZE_ALL_COMPOSE: GNormalizeMode = 3;
pub const GNormalizeMode_G_NORMALIZE_NFKC: GNormalizeMode = 3;
pub type GNormalizeMode = ::core::ffi::c_uint;
extern "C" {
    pub fn _frida_g_utf8_normalize(
        str_: *const gchar,
        len: gssize,
        mode: GNormalizeMode,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_utf8_collate(str1: *const gchar, str2: *const gchar) -> gint;
}
extern "C" {
    pub fn _frida_g_utf8_collate_key(str_: *const gchar, len: gssize) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_utf8_collate_key_for_filename(str_: *const gchar, len: gssize) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_utf8_make_valid(str_: *const gchar, len: gssize) -> *mut gchar;
}
pub type GString = _GString;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GString {
    pub str_: *mut gchar,
    pub len: gsize,
    pub allocated_len: gsize,
}
extern "C" {
    pub fn _frida_g_string_new(init: *const gchar) -> *mut GString;
}
extern "C" {
    pub fn _frida_g_string_new_len(init: *const gchar, len: gssize) -> *mut GString;
}
extern "C" {
    pub fn _frida_g_string_sized_new(dfl_size: gsize) -> *mut GString;
}
extern "C" {
    pub fn _frida_g_string_free(string: *mut GString, free_segment: gboolean) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_string_free_to_bytes(string: *mut GString) -> *mut GBytes;
}
extern "C" {
    pub fn _frida_g_string_equal(v: *const GString, v2: *const GString) -> gboolean;
}
extern "C" {
    pub fn _frida_g_string_hash(str_: *const GString) -> guint;
}
extern "C" {
    pub fn _frida_g_string_assign(string: *mut GString, rval: *const gchar) -> *mut GString;
}
extern "C" {
    pub fn _frida_g_string_truncate(string: *mut GString, len: gsize) -> *mut GString;
}
extern "C" {
    pub fn _frida_g_string_set_size(string: *mut GString, len: gsize) -> *mut GString;
}
extern "C" {
    pub fn _frida_g_string_insert_len(
        string: *mut GString,
        pos: gssize,
        val: *const gchar,
        len: gssize,
    ) -> *mut GString;
}
extern "C" {
    pub fn _frida_g_string_append(string: *mut GString, val: *const gchar) -> *mut GString;
}
extern "C" {
    pub fn _frida_g_string_append_len(
        string: *mut GString,
        val: *const gchar,
        len: gssize,
    ) -> *mut GString;
}
extern "C" {
    pub fn _frida_g_string_append_c(string: *mut GString, c: gchar) -> *mut GString;
}
extern "C" {
    pub fn _frida_g_string_append_unichar(string: *mut GString, wc: gunichar) -> *mut GString;
}
extern "C" {
    pub fn _frida_g_string_prepend(string: *mut GString, val: *const gchar) -> *mut GString;
}
extern "C" {
    pub fn _frida_g_string_prepend_c(string: *mut GString, c: gchar) -> *mut GString;
}
extern "C" {
    pub fn _frida_g_string_prepend_unichar(string: *mut GString, wc: gunichar) -> *mut GString;
}
extern "C" {
    pub fn _frida_g_string_prepend_len(
        string: *mut GString,
        val: *const gchar,
        len: gssize,
    ) -> *mut GString;
}
extern "C" {
    pub fn _frida_g_string_insert(
        string: *mut GString,
        pos: gssize,
        val: *const gchar,
    ) -> *mut GString;
}
extern "C" {
    pub fn _frida_g_string_insert_c(string: *mut GString, pos: gssize, c: gchar) -> *mut GString;
}
extern "C" {
    pub fn _frida_g_string_insert_unichar(
        string: *mut GString,
        pos: gssize,
        wc: gunichar,
    ) -> *mut GString;
}
extern "C" {
    pub fn _frida_g_string_overwrite(
        string: *mut GString,
        pos: gsize,
        val: *const gchar,
    ) -> *mut GString;
}
extern "C" {
    pub fn _frida_g_string_overwrite_len(
        string: *mut GString,
        pos: gsize,
        val: *const gchar,
        len: gssize,
    ) -> *mut GString;
}
extern "C" {
    pub fn _frida_g_string_erase(string: *mut GString, pos: gssize, len: gssize) -> *mut GString;
}
extern "C" {
    pub fn _frida_g_string_replace(
        string: *mut GString,
        find: *const gchar,
        replace: *const gchar,
        limit: guint,
    ) -> guint;
}
extern "C" {
    pub fn _frida_g_string_ascii_down(string: *mut GString) -> *mut GString;
}
extern "C" {
    pub fn _frida_g_string_ascii_up(string: *mut GString) -> *mut GString;
}
extern "C" {
    pub fn _frida_g_string_vprintf(string: *mut GString, format: *const gchar, args: va_list);
}
extern "C" {
    pub fn _frida_g_string_printf(string: *mut GString, format: *const gchar, ...);
}
extern "C" {
    pub fn _frida_g_string_append_vprintf(
        string: *mut GString,
        format: *const gchar,
        args: va_list,
    );
}
extern "C" {
    pub fn _frida_g_string_append_printf(string: *mut GString, format: *const gchar, ...);
}
extern "C" {
    pub fn _frida_g_string_append_uri_escaped(
        string: *mut GString,
        unescaped: *const gchar,
        reserved_chars_allowed: *const gchar,
        allow_utf8: gboolean,
    ) -> *mut GString;
}
extern "C" {
    pub fn _frida_g_string_down(string: *mut GString) -> *mut GString;
}
extern "C" {
    pub fn _frida_g_string_up(string: *mut GString) -> *mut GString;
}
pub type GIOChannel = _GIOChannel;
pub type GIOFuncs = _GIOFuncs;
pub const GIOError_G_IO_ERROR_NONE: GIOError = 0;
pub const GIOError_G_IO_ERROR_AGAIN: GIOError = 1;
pub const GIOError_G_IO_ERROR_INVAL: GIOError = 2;
pub const GIOError_G_IO_ERROR_UNKNOWN: GIOError = 3;
pub type GIOError = ::core::ffi::c_uint;
pub const GIOChannelError_G_IO_CHANNEL_ERROR_FBIG: GIOChannelError = 0;
pub const GIOChannelError_G_IO_CHANNEL_ERROR_INVAL: GIOChannelError = 1;
pub const GIOChannelError_G_IO_CHANNEL_ERROR_IO: GIOChannelError = 2;
pub const GIOChannelError_G_IO_CHANNEL_ERROR_ISDIR: GIOChannelError = 3;
pub const GIOChannelError_G_IO_CHANNEL_ERROR_NOSPC: GIOChannelError = 4;
pub const GIOChannelError_G_IO_CHANNEL_ERROR_NXIO: GIOChannelError = 5;
pub const GIOChannelError_G_IO_CHANNEL_ERROR_OVERFLOW: GIOChannelError = 6;
pub const GIOChannelError_G_IO_CHANNEL_ERROR_PIPE: GIOChannelError = 7;
pub const GIOChannelError_G_IO_CHANNEL_ERROR_FAILED: GIOChannelError = 8;
pub type GIOChannelError = ::core::ffi::c_uint;
pub const GIOStatus_G_IO_STATUS_ERROR: GIOStatus = 0;
pub const GIOStatus_G_IO_STATUS_NORMAL: GIOStatus = 1;
pub const GIOStatus_G_IO_STATUS_EOF: GIOStatus = 2;
pub const GIOStatus_G_IO_STATUS_AGAIN: GIOStatus = 3;
pub type GIOStatus = ::core::ffi::c_uint;
pub const GSeekType_G_SEEK_CUR: GSeekType = 0;
pub const GSeekType_G_SEEK_SET: GSeekType = 1;
pub const GSeekType_G_SEEK_END: GSeekType = 2;
pub type GSeekType = ::core::ffi::c_uint;
pub const GIOFlags_G_IO_FLAG_NONE: GIOFlags = 0;
pub const GIOFlags_G_IO_FLAG_APPEND: GIOFlags = 1;
pub const GIOFlags_G_IO_FLAG_NONBLOCK: GIOFlags = 2;
pub const GIOFlags_G_IO_FLAG_IS_READABLE: GIOFlags = 4;
pub const GIOFlags_G_IO_FLAG_IS_WRITABLE: GIOFlags = 8;
pub const GIOFlags_G_IO_FLAG_IS_WRITEABLE: GIOFlags = 8;
pub const GIOFlags_G_IO_FLAG_IS_SEEKABLE: GIOFlags = 16;
pub const GIOFlags_G_IO_FLAG_MASK: GIOFlags = 31;
pub const GIOFlags_G_IO_FLAG_GET_MASK: GIOFlags = 31;
pub const GIOFlags_G_IO_FLAG_SET_MASK: GIOFlags = 3;
pub type GIOFlags = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GIOChannel {
    pub ref_count: gint,
    pub funcs: *mut GIOFuncs,
    pub encoding: *mut gchar,
    pub read_cd: GIConv,
    pub write_cd: GIConv,
    pub line_term: *mut gchar,
    pub line_term_len: guint,
    pub buf_size: gsize,
    pub read_buf: *mut GString,
    pub encoded_read_buf: *mut GString,
    pub write_buf: *mut GString,
    pub partial_write_buf: [gchar; 6usize],
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub reserved1: gpointer,
    pub reserved2: gpointer,
}
impl _GIOChannel {
    #[inline]
    pub fn use_buffer(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_use_buffer(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn do_encode(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_do_encode(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn close_on_unref(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_close_on_unref(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_readable(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_readable(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_writeable(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_writeable(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_seekable(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_seekable(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        use_buffer: guint,
        do_encode: guint,
        close_on_unref: guint,
        is_readable: guint,
        is_writeable: guint,
        is_seekable: guint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let use_buffer: u32 = unsafe { ::core::mem::transmute(use_buffer) };
            use_buffer as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let do_encode: u32 = unsafe { ::core::mem::transmute(do_encode) };
            do_encode as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let close_on_unref: u32 = unsafe { ::core::mem::transmute(close_on_unref) };
            close_on_unref as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let is_readable: u32 = unsafe { ::core::mem::transmute(is_readable) };
            is_readable as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let is_writeable: u32 = unsafe { ::core::mem::transmute(is_writeable) };
            is_writeable as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let is_seekable: u32 = unsafe { ::core::mem::transmute(is_seekable) };
            is_seekable as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type GIOFunc = ::core::option::Option<
    unsafe extern "C" fn(
        source: *mut GIOChannel,
        condition: GIOCondition,
        user_data: gpointer,
    ) -> gboolean,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GIOFuncs {
    pub io_read: ::core::option::Option<
        unsafe extern "C" fn(
            channel: *mut GIOChannel,
            buf: *mut gchar,
            count: gsize,
            bytes_read: *mut gsize,
            err: *mut *mut GError,
        ) -> GIOStatus,
    >,
    pub io_write: ::core::option::Option<
        unsafe extern "C" fn(
            channel: *mut GIOChannel,
            buf: *const gchar,
            count: gsize,
            bytes_written: *mut gsize,
            err: *mut *mut GError,
        ) -> GIOStatus,
    >,
    pub io_seek: ::core::option::Option<
        unsafe extern "C" fn(
            channel: *mut GIOChannel,
            offset: gint64,
            type_: GSeekType,
            err: *mut *mut GError,
        ) -> GIOStatus,
    >,
    pub io_close: ::core::option::Option<
        unsafe extern "C" fn(channel: *mut GIOChannel, err: *mut *mut GError) -> GIOStatus,
    >,
    pub io_create_watch: ::core::option::Option<
        unsafe extern "C" fn(channel: *mut GIOChannel, condition: GIOCondition) -> *mut GSource,
    >,
    pub io_free: ::core::option::Option<unsafe extern "C" fn(channel: *mut GIOChannel)>,
    pub io_set_flags: ::core::option::Option<
        unsafe extern "C" fn(
            channel: *mut GIOChannel,
            flags: GIOFlags,
            err: *mut *mut GError,
        ) -> GIOStatus,
    >,
    pub io_get_flags:
        ::core::option::Option<unsafe extern "C" fn(channel: *mut GIOChannel) -> GIOFlags>,
}
extern "C" {
    pub fn _frida_g_io_channel_init(channel: *mut GIOChannel);
}
extern "C" {
    pub fn _frida_g_io_channel_ref(channel: *mut GIOChannel) -> *mut GIOChannel;
}
extern "C" {
    pub fn _frida_g_io_channel_unref(channel: *mut GIOChannel);
}
extern "C" {
    pub fn _frida_g_io_channel_read(
        channel: *mut GIOChannel,
        buf: *mut gchar,
        count: gsize,
        bytes_read: *mut gsize,
    ) -> GIOError;
}
extern "C" {
    pub fn _frida_g_io_channel_write(
        channel: *mut GIOChannel,
        buf: *const gchar,
        count: gsize,
        bytes_written: *mut gsize,
    ) -> GIOError;
}
extern "C" {
    pub fn _frida_g_io_channel_seek(
        channel: *mut GIOChannel,
        offset: gint64,
        type_: GSeekType,
    ) -> GIOError;
}
extern "C" {
    pub fn _frida_g_io_channel_close(channel: *mut GIOChannel);
}
extern "C" {
    pub fn _frida_g_io_channel_shutdown(
        channel: *mut GIOChannel,
        flush: gboolean,
        err: *mut *mut GError,
    ) -> GIOStatus;
}
extern "C" {
    pub fn _frida_g_io_add_watch_full(
        channel: *mut GIOChannel,
        priority: gint,
        condition: GIOCondition,
        func: GIOFunc,
        user_data: gpointer,
        notify: GDestroyNotify,
    ) -> guint;
}
extern "C" {
    pub fn _frida_g_io_create_watch(
        channel: *mut GIOChannel,
        condition: GIOCondition,
    ) -> *mut GSource;
}
extern "C" {
    pub fn _frida_g_io_add_watch(
        channel: *mut GIOChannel,
        condition: GIOCondition,
        func: GIOFunc,
        user_data: gpointer,
    ) -> guint;
}
extern "C" {
    pub fn _frida_g_io_channel_set_buffer_size(channel: *mut GIOChannel, size: gsize);
}
extern "C" {
    pub fn _frida_g_io_channel_get_buffer_size(channel: *mut GIOChannel) -> gsize;
}
extern "C" {
    pub fn _frida_g_io_channel_get_buffer_condition(channel: *mut GIOChannel) -> GIOCondition;
}
extern "C" {
    pub fn _frida_g_io_channel_set_flags(
        channel: *mut GIOChannel,
        flags: GIOFlags,
        error: *mut *mut GError,
    ) -> GIOStatus;
}
extern "C" {
    pub fn _frida_g_io_channel_get_flags(channel: *mut GIOChannel) -> GIOFlags;
}
extern "C" {
    pub fn _frida_g_io_channel_set_line_term(
        channel: *mut GIOChannel,
        line_term: *const gchar,
        length: gint,
    );
}
extern "C" {
    pub fn _frida_g_io_channel_get_line_term(
        channel: *mut GIOChannel,
        length: *mut gint,
    ) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_io_channel_set_buffered(channel: *mut GIOChannel, buffered: gboolean);
}
extern "C" {
    pub fn _frida_g_io_channel_get_buffered(channel: *mut GIOChannel) -> gboolean;
}
extern "C" {
    pub fn _frida_g_io_channel_set_encoding(
        channel: *mut GIOChannel,
        encoding: *const gchar,
        error: *mut *mut GError,
    ) -> GIOStatus;
}
extern "C" {
    pub fn _frida_g_io_channel_get_encoding(channel: *mut GIOChannel) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_io_channel_set_close_on_unref(channel: *mut GIOChannel, do_close: gboolean);
}
extern "C" {
    pub fn _frida_g_io_channel_get_close_on_unref(channel: *mut GIOChannel) -> gboolean;
}
extern "C" {
    pub fn _frida_g_io_channel_flush(
        channel: *mut GIOChannel,
        error: *mut *mut GError,
    ) -> GIOStatus;
}
extern "C" {
    pub fn _frida_g_io_channel_read_line(
        channel: *mut GIOChannel,
        str_return: *mut *mut gchar,
        length: *mut gsize,
        terminator_pos: *mut gsize,
        error: *mut *mut GError,
    ) -> GIOStatus;
}
extern "C" {
    pub fn _frida_g_io_channel_read_line_string(
        channel: *mut GIOChannel,
        buffer: *mut GString,
        terminator_pos: *mut gsize,
        error: *mut *mut GError,
    ) -> GIOStatus;
}
extern "C" {
    pub fn _frida_g_io_channel_read_to_end(
        channel: *mut GIOChannel,
        str_return: *mut *mut gchar,
        length: *mut gsize,
        error: *mut *mut GError,
    ) -> GIOStatus;
}
extern "C" {
    pub fn _frida_g_io_channel_read_chars(
        channel: *mut GIOChannel,
        buf: *mut gchar,
        count: gsize,
        bytes_read: *mut gsize,
        error: *mut *mut GError,
    ) -> GIOStatus;
}
extern "C" {
    pub fn _frida_g_io_channel_read_unichar(
        channel: *mut GIOChannel,
        thechar: *mut gunichar,
        error: *mut *mut GError,
    ) -> GIOStatus;
}
extern "C" {
    pub fn _frida_g_io_channel_write_chars(
        channel: *mut GIOChannel,
        buf: *const gchar,
        count: gssize,
        bytes_written: *mut gsize,
        error: *mut *mut GError,
    ) -> GIOStatus;
}
extern "C" {
    pub fn _frida_g_io_channel_write_unichar(
        channel: *mut GIOChannel,
        thechar: gunichar,
        error: *mut *mut GError,
    ) -> GIOStatus;
}
extern "C" {
    pub fn _frida_g_io_channel_seek_position(
        channel: *mut GIOChannel,
        offset: gint64,
        type_: GSeekType,
        error: *mut *mut GError,
    ) -> GIOStatus;
}
extern "C" {
    pub fn _frida_g_io_channel_new_file(
        filename: *const gchar,
        mode: *const gchar,
        error: *mut *mut GError,
    ) -> *mut GIOChannel;
}
extern "C" {
    pub fn _frida_g_io_channel_error_quark() -> GQuark;
}
extern "C" {
    pub fn _frida_g_io_channel_error_from_errno(en: gint) -> GIOChannelError;
}
extern "C" {
    pub fn _frida_g_io_channel_unix_new(fd: ::core::ffi::c_int) -> *mut GIOChannel;
}
extern "C" {
    pub fn _frida_g_io_channel_unix_get_fd(channel: *mut GIOChannel) -> gint;
}
extern "C" {
    pub static mut _frida_g_io_watch_funcs: GSourceFuncs;
}
pub const GKeyFileError_G_KEY_FILE_ERROR_UNKNOWN_ENCODING: GKeyFileError = 0;
pub const GKeyFileError_G_KEY_FILE_ERROR_PARSE: GKeyFileError = 1;
pub const GKeyFileError_G_KEY_FILE_ERROR_NOT_FOUND: GKeyFileError = 2;
pub const GKeyFileError_G_KEY_FILE_ERROR_KEY_NOT_FOUND: GKeyFileError = 3;
pub const GKeyFileError_G_KEY_FILE_ERROR_GROUP_NOT_FOUND: GKeyFileError = 4;
pub const GKeyFileError_G_KEY_FILE_ERROR_INVALID_VALUE: GKeyFileError = 5;
pub type GKeyFileError = ::core::ffi::c_uint;
extern "C" {
    pub fn _frida_g_key_file_error_quark() -> GQuark;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GKeyFile {
    _unused: [u8; 0],
}
pub type GKeyFile = _GKeyFile;
pub const GKeyFileFlags_G_KEY_FILE_NONE: GKeyFileFlags = 0;
pub const GKeyFileFlags_G_KEY_FILE_KEEP_COMMENTS: GKeyFileFlags = 1;
pub const GKeyFileFlags_G_KEY_FILE_KEEP_TRANSLATIONS: GKeyFileFlags = 2;
pub type GKeyFileFlags = ::core::ffi::c_uint;
extern "C" {
    pub fn _frida_g_key_file_new() -> *mut GKeyFile;
}
extern "C" {
    pub fn _frida_g_key_file_ref(key_file: *mut GKeyFile) -> *mut GKeyFile;
}
extern "C" {
    pub fn _frida_g_key_file_unref(key_file: *mut GKeyFile);
}
extern "C" {
    pub fn _frida_g_key_file_free(key_file: *mut GKeyFile);
}
extern "C" {
    pub fn _frida_g_key_file_set_list_separator(key_file: *mut GKeyFile, separator: gchar);
}
extern "C" {
    pub fn _frida_g_key_file_load_from_file(
        key_file: *mut GKeyFile,
        file: *const gchar,
        flags: GKeyFileFlags,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_key_file_load_from_data(
        key_file: *mut GKeyFile,
        data: *const gchar,
        length: gsize,
        flags: GKeyFileFlags,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_key_file_load_from_bytes(
        key_file: *mut GKeyFile,
        bytes: *mut GBytes,
        flags: GKeyFileFlags,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_key_file_load_from_dirs(
        key_file: *mut GKeyFile,
        file: *const gchar,
        search_dirs: *mut *const gchar,
        full_path: *mut *mut gchar,
        flags: GKeyFileFlags,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_key_file_load_from_data_dirs(
        key_file: *mut GKeyFile,
        file: *const gchar,
        full_path: *mut *mut gchar,
        flags: GKeyFileFlags,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_key_file_to_data(
        key_file: *mut GKeyFile,
        length: *mut gsize,
        error: *mut *mut GError,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_key_file_save_to_file(
        key_file: *mut GKeyFile,
        filename: *const gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_key_file_get_start_group(key_file: *mut GKeyFile) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_key_file_get_groups(
        key_file: *mut GKeyFile,
        length: *mut gsize,
    ) -> *mut *mut gchar;
}
extern "C" {
    pub fn _frida_g_key_file_get_keys(
        key_file: *mut GKeyFile,
        group_name: *const gchar,
        length: *mut gsize,
        error: *mut *mut GError,
    ) -> *mut *mut gchar;
}
extern "C" {
    pub fn _frida_g_key_file_has_group(
        key_file: *mut GKeyFile,
        group_name: *const gchar,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_key_file_has_key(
        key_file: *mut GKeyFile,
        group_name: *const gchar,
        key: *const gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_key_file_get_value(
        key_file: *mut GKeyFile,
        group_name: *const gchar,
        key: *const gchar,
        error: *mut *mut GError,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_key_file_set_value(
        key_file: *mut GKeyFile,
        group_name: *const gchar,
        key: *const gchar,
        value: *const gchar,
    );
}
extern "C" {
    pub fn _frida_g_key_file_get_string(
        key_file: *mut GKeyFile,
        group_name: *const gchar,
        key: *const gchar,
        error: *mut *mut GError,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_key_file_set_string(
        key_file: *mut GKeyFile,
        group_name: *const gchar,
        key: *const gchar,
        string: *const gchar,
    );
}
extern "C" {
    pub fn _frida_g_key_file_get_locale_string(
        key_file: *mut GKeyFile,
        group_name: *const gchar,
        key: *const gchar,
        locale: *const gchar,
        error: *mut *mut GError,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_key_file_get_locale_for_key(
        key_file: *mut GKeyFile,
        group_name: *const gchar,
        key: *const gchar,
        locale: *const gchar,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_key_file_set_locale_string(
        key_file: *mut GKeyFile,
        group_name: *const gchar,
        key: *const gchar,
        locale: *const gchar,
        string: *const gchar,
    );
}
extern "C" {
    pub fn _frida_g_key_file_get_boolean(
        key_file: *mut GKeyFile,
        group_name: *const gchar,
        key: *const gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_key_file_set_boolean(
        key_file: *mut GKeyFile,
        group_name: *const gchar,
        key: *const gchar,
        value: gboolean,
    );
}
extern "C" {
    pub fn _frida_g_key_file_get_integer(
        key_file: *mut GKeyFile,
        group_name: *const gchar,
        key: *const gchar,
        error: *mut *mut GError,
    ) -> gint;
}
extern "C" {
    pub fn _frida_g_key_file_set_integer(
        key_file: *mut GKeyFile,
        group_name: *const gchar,
        key: *const gchar,
        value: gint,
    );
}
extern "C" {
    pub fn _frida_g_key_file_get_int64(
        key_file: *mut GKeyFile,
        group_name: *const gchar,
        key: *const gchar,
        error: *mut *mut GError,
    ) -> gint64;
}
extern "C" {
    pub fn _frida_g_key_file_set_int64(
        key_file: *mut GKeyFile,
        group_name: *const gchar,
        key: *const gchar,
        value: gint64,
    );
}
extern "C" {
    pub fn _frida_g_key_file_get_uint64(
        key_file: *mut GKeyFile,
        group_name: *const gchar,
        key: *const gchar,
        error: *mut *mut GError,
    ) -> guint64;
}
extern "C" {
    pub fn _frida_g_key_file_set_uint64(
        key_file: *mut GKeyFile,
        group_name: *const gchar,
        key: *const gchar,
        value: guint64,
    );
}
extern "C" {
    pub fn _frida_g_key_file_get_double(
        key_file: *mut GKeyFile,
        group_name: *const gchar,
        key: *const gchar,
        error: *mut *mut GError,
    ) -> gdouble;
}
extern "C" {
    pub fn _frida_g_key_file_set_double(
        key_file: *mut GKeyFile,
        group_name: *const gchar,
        key: *const gchar,
        value: gdouble,
    );
}
extern "C" {
    pub fn _frida_g_key_file_get_string_list(
        key_file: *mut GKeyFile,
        group_name: *const gchar,
        key: *const gchar,
        length: *mut gsize,
        error: *mut *mut GError,
    ) -> *mut *mut gchar;
}
extern "C" {
    pub fn _frida_g_key_file_set_string_list(
        key_file: *mut GKeyFile,
        group_name: *const gchar,
        key: *const gchar,
        list: *const *const gchar,
        length: gsize,
    );
}
extern "C" {
    pub fn _frida_g_key_file_get_locale_string_list(
        key_file: *mut GKeyFile,
        group_name: *const gchar,
        key: *const gchar,
        locale: *const gchar,
        length: *mut gsize,
        error: *mut *mut GError,
    ) -> *mut *mut gchar;
}
extern "C" {
    pub fn _frida_g_key_file_set_locale_string_list(
        key_file: *mut GKeyFile,
        group_name: *const gchar,
        key: *const gchar,
        locale: *const gchar,
        list: *const *const gchar,
        length: gsize,
    );
}
extern "C" {
    pub fn _frida_g_key_file_get_boolean_list(
        key_file: *mut GKeyFile,
        group_name: *const gchar,
        key: *const gchar,
        length: *mut gsize,
        error: *mut *mut GError,
    ) -> *mut gboolean;
}
extern "C" {
    pub fn _frida_g_key_file_set_boolean_list(
        key_file: *mut GKeyFile,
        group_name: *const gchar,
        key: *const gchar,
        list: *mut gboolean,
        length: gsize,
    );
}
extern "C" {
    pub fn _frida_g_key_file_get_integer_list(
        key_file: *mut GKeyFile,
        group_name: *const gchar,
        key: *const gchar,
        length: *mut gsize,
        error: *mut *mut GError,
    ) -> *mut gint;
}
extern "C" {
    pub fn _frida_g_key_file_set_double_list(
        key_file: *mut GKeyFile,
        group_name: *const gchar,
        key: *const gchar,
        list: *mut gdouble,
        length: gsize,
    );
}
extern "C" {
    pub fn _frida_g_key_file_get_double_list(
        key_file: *mut GKeyFile,
        group_name: *const gchar,
        key: *const gchar,
        length: *mut gsize,
        error: *mut *mut GError,
    ) -> *mut gdouble;
}
extern "C" {
    pub fn _frida_g_key_file_set_integer_list(
        key_file: *mut GKeyFile,
        group_name: *const gchar,
        key: *const gchar,
        list: *mut gint,
        length: gsize,
    );
}
extern "C" {
    pub fn _frida_g_key_file_set_comment(
        key_file: *mut GKeyFile,
        group_name: *const gchar,
        key: *const gchar,
        comment: *const gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_key_file_get_comment(
        key_file: *mut GKeyFile,
        group_name: *const gchar,
        key: *const gchar,
        error: *mut *mut GError,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_key_file_remove_comment(
        key_file: *mut GKeyFile,
        group_name: *const gchar,
        key: *const gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_key_file_remove_key(
        key_file: *mut GKeyFile,
        group_name: *const gchar,
        key: *const gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_key_file_remove_group(
        key_file: *mut GKeyFile,
        group_name: *const gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GMappedFile {
    _unused: [u8; 0],
}
pub type GMappedFile = _GMappedFile;
extern "C" {
    pub fn _frida_g_mapped_file_new(
        filename: *const gchar,
        writable: gboolean,
        error: *mut *mut GError,
    ) -> *mut GMappedFile;
}
extern "C" {
    pub fn _frida_g_mapped_file_new_from_fd(
        fd: gint,
        writable: gboolean,
        error: *mut *mut GError,
    ) -> *mut GMappedFile;
}
extern "C" {
    pub fn _frida_g_mapped_file_get_length(file: *mut GMappedFile) -> gsize;
}
extern "C" {
    pub fn _frida_g_mapped_file_get_contents(file: *mut GMappedFile) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_mapped_file_get_bytes(file: *mut GMappedFile) -> *mut GBytes;
}
extern "C" {
    pub fn _frida_g_mapped_file_ref(file: *mut GMappedFile) -> *mut GMappedFile;
}
extern "C" {
    pub fn _frida_g_mapped_file_unref(file: *mut GMappedFile);
}
extern "C" {
    pub fn _frida_g_mapped_file_free(file: *mut GMappedFile);
}
pub const GMarkupError_G_MARKUP_ERROR_BAD_UTF8: GMarkupError = 0;
pub const GMarkupError_G_MARKUP_ERROR_EMPTY: GMarkupError = 1;
pub const GMarkupError_G_MARKUP_ERROR_PARSE: GMarkupError = 2;
pub const GMarkupError_G_MARKUP_ERROR_UNKNOWN_ELEMENT: GMarkupError = 3;
pub const GMarkupError_G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE: GMarkupError = 4;
pub const GMarkupError_G_MARKUP_ERROR_INVALID_CONTENT: GMarkupError = 5;
pub const GMarkupError_G_MARKUP_ERROR_MISSING_ATTRIBUTE: GMarkupError = 6;
pub type GMarkupError = ::core::ffi::c_uint;
extern "C" {
    pub fn _frida_g_markup_error_quark() -> GQuark;
}
pub const GMarkupParseFlags_G_MARKUP_DEFAULT_FLAGS: GMarkupParseFlags = 0;
pub const GMarkupParseFlags_G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG: GMarkupParseFlags = 1;
pub const GMarkupParseFlags_G_MARKUP_TREAT_CDATA_AS_TEXT: GMarkupParseFlags = 2;
pub const GMarkupParseFlags_G_MARKUP_PREFIX_ERROR_POSITION: GMarkupParseFlags = 4;
pub const GMarkupParseFlags_G_MARKUP_IGNORE_QUALIFIED: GMarkupParseFlags = 8;
pub type GMarkupParseFlags = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GMarkupParseContext {
    _unused: [u8; 0],
}
pub type GMarkupParseContext = _GMarkupParseContext;
pub type GMarkupParser = _GMarkupParser;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GMarkupParser {
    pub start_element: ::core::option::Option<
        unsafe extern "C" fn(
            context: *mut GMarkupParseContext,
            element_name: *const gchar,
            attribute_names: *mut *const gchar,
            attribute_values: *mut *const gchar,
            user_data: gpointer,
            error: *mut *mut GError,
        ),
    >,
    pub end_element: ::core::option::Option<
        unsafe extern "C" fn(
            context: *mut GMarkupParseContext,
            element_name: *const gchar,
            user_data: gpointer,
            error: *mut *mut GError,
        ),
    >,
    pub text: ::core::option::Option<
        unsafe extern "C" fn(
            context: *mut GMarkupParseContext,
            text: *const gchar,
            text_len: gsize,
            user_data: gpointer,
            error: *mut *mut GError,
        ),
    >,
    pub passthrough: ::core::option::Option<
        unsafe extern "C" fn(
            context: *mut GMarkupParseContext,
            passthrough_text: *const gchar,
            text_len: gsize,
            user_data: gpointer,
            error: *mut *mut GError,
        ),
    >,
    pub error: ::core::option::Option<
        unsafe extern "C" fn(
            context: *mut GMarkupParseContext,
            error: *mut GError,
            user_data: gpointer,
        ),
    >,
}
extern "C" {
    pub fn _frida_g_markup_parse_context_new(
        parser: *const GMarkupParser,
        flags: GMarkupParseFlags,
        user_data: gpointer,
        user_data_dnotify: GDestroyNotify,
    ) -> *mut GMarkupParseContext;
}
extern "C" {
    pub fn _frida_g_markup_parse_context_ref(
        context: *mut GMarkupParseContext,
    ) -> *mut GMarkupParseContext;
}
extern "C" {
    pub fn _frida_g_markup_parse_context_unref(context: *mut GMarkupParseContext);
}
extern "C" {
    pub fn _frida_g_markup_parse_context_free(context: *mut GMarkupParseContext);
}
extern "C" {
    pub fn _frida_g_markup_parse_context_parse(
        context: *mut GMarkupParseContext,
        text: *const gchar,
        text_len: gssize,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_markup_parse_context_push(
        context: *mut GMarkupParseContext,
        parser: *const GMarkupParser,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_markup_parse_context_pop(context: *mut GMarkupParseContext) -> gpointer;
}
extern "C" {
    pub fn _frida_g_markup_parse_context_end_parse(
        context: *mut GMarkupParseContext,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_markup_parse_context_get_element(
        context: *mut GMarkupParseContext,
    ) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_markup_parse_context_get_element_stack(
        context: *mut GMarkupParseContext,
    ) -> *const GSList;
}
extern "C" {
    pub fn _frida_g_markup_parse_context_get_position(
        context: *mut GMarkupParseContext,
        line_number: *mut gint,
        char_number: *mut gint,
    );
}
extern "C" {
    pub fn _frida_g_markup_parse_context_get_user_data(
        context: *mut GMarkupParseContext,
    ) -> gpointer;
}
extern "C" {
    pub fn _frida_g_markup_escape_text(text: *const gchar, length: gssize) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_markup_printf_escaped(format: *const ::core::ffi::c_char, ...) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_markup_vprintf_escaped(
        format: *const ::core::ffi::c_char,
        args: va_list,
    ) -> *mut gchar;
}
pub const GMarkupCollectType_G_MARKUP_COLLECT_INVALID: GMarkupCollectType = 0;
pub const GMarkupCollectType_G_MARKUP_COLLECT_STRING: GMarkupCollectType = 1;
pub const GMarkupCollectType_G_MARKUP_COLLECT_STRDUP: GMarkupCollectType = 2;
pub const GMarkupCollectType_G_MARKUP_COLLECT_BOOLEAN: GMarkupCollectType = 3;
pub const GMarkupCollectType_G_MARKUP_COLLECT_TRISTATE: GMarkupCollectType = 4;
pub const GMarkupCollectType_G_MARKUP_COLLECT_OPTIONAL: GMarkupCollectType = 65536;
pub type GMarkupCollectType = ::core::ffi::c_uint;
extern "C" {
    pub fn _frida_g_markup_collect_attributes(
        element_name: *const gchar,
        attribute_names: *mut *const gchar,
        attribute_values: *mut *const gchar,
        error: *mut *mut GError,
        first_type: GMarkupCollectType,
        first_attr: *const gchar,
        ...
    ) -> gboolean;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GVariantType {
    _unused: [u8; 0],
}
pub type GVariantType = _GVariantType;
extern "C" {
    pub fn _frida_g_variant_type_string_is_valid(type_string: *const gchar) -> gboolean;
}
extern "C" {
    pub fn _frida_g_variant_type_string_scan(
        string: *const gchar,
        limit: *const gchar,
        endptr: *mut *const gchar,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_variant_type_free(type_: *mut GVariantType);
}
extern "C" {
    pub fn _frida_g_variant_type_copy(type_: *const GVariantType) -> *mut GVariantType;
}
extern "C" {
    pub fn _frida_g_variant_type_new(type_string: *const gchar) -> *mut GVariantType;
}
extern "C" {
    pub fn _frida_g_variant_type_get_string_length(type_: *const GVariantType) -> gsize;
}
extern "C" {
    pub fn _frida_g_variant_type_peek_string(type_: *const GVariantType) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_variant_type_dup_string(type_: *const GVariantType) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_variant_type_is_definite(type_: *const GVariantType) -> gboolean;
}
extern "C" {
    pub fn _frida_g_variant_type_is_container(type_: *const GVariantType) -> gboolean;
}
extern "C" {
    pub fn _frida_g_variant_type_is_basic(type_: *const GVariantType) -> gboolean;
}
extern "C" {
    pub fn _frida_g_variant_type_is_maybe(type_: *const GVariantType) -> gboolean;
}
extern "C" {
    pub fn _frida_g_variant_type_is_array(type_: *const GVariantType) -> gboolean;
}
extern "C" {
    pub fn _frida_g_variant_type_is_tuple(type_: *const GVariantType) -> gboolean;
}
extern "C" {
    pub fn _frida_g_variant_type_is_dict_entry(type_: *const GVariantType) -> gboolean;
}
extern "C" {
    pub fn _frida_g_variant_type_is_variant(type_: *const GVariantType) -> gboolean;
}
extern "C" {
    pub fn _frida_g_variant_type_hash(type_: gconstpointer) -> guint;
}
extern "C" {
    pub fn _frida_g_variant_type_equal(type1: gconstpointer, type2: gconstpointer) -> gboolean;
}
extern "C" {
    pub fn _frida_g_variant_type_is_subtype_of(
        type_: *const GVariantType,
        supertype: *const GVariantType,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_variant_type_element(type_: *const GVariantType) -> *const GVariantType;
}
extern "C" {
    pub fn _frida_g_variant_type_first(type_: *const GVariantType) -> *const GVariantType;
}
extern "C" {
    pub fn _frida_g_variant_type_next(type_: *const GVariantType) -> *const GVariantType;
}
extern "C" {
    pub fn _frida_g_variant_type_n_items(type_: *const GVariantType) -> gsize;
}
extern "C" {
    pub fn _frida_g_variant_type_key(type_: *const GVariantType) -> *const GVariantType;
}
extern "C" {
    pub fn _frida_g_variant_type_value(type_: *const GVariantType) -> *const GVariantType;
}
extern "C" {
    pub fn _frida_g_variant_type_new_array(element: *const GVariantType) -> *mut GVariantType;
}
extern "C" {
    pub fn _frida_g_variant_type_new_maybe(element: *const GVariantType) -> *mut GVariantType;
}
extern "C" {
    pub fn _frida_g_variant_type_new_tuple(
        items: *const *const GVariantType,
        length: gint,
    ) -> *mut GVariantType;
}
extern "C" {
    pub fn _frida_g_variant_type_new_dict_entry(
        key: *const GVariantType,
        value: *const GVariantType,
    ) -> *mut GVariantType;
}
extern "C" {
    pub fn _frida_g_variant_type_checked_(arg1: *const gchar) -> *const GVariantType;
}
extern "C" {
    pub fn _frida_g_variant_type_string_get_depth_(type_string: *const gchar) -> gsize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GVariant {
    _unused: [u8; 0],
}
pub type GVariant = _GVariant;
pub const GVariantClass_G_VARIANT_CLASS_BOOLEAN: GVariantClass = 98;
pub const GVariantClass_G_VARIANT_CLASS_BYTE: GVariantClass = 121;
pub const GVariantClass_G_VARIANT_CLASS_INT16: GVariantClass = 110;
pub const GVariantClass_G_VARIANT_CLASS_UINT16: GVariantClass = 113;
pub const GVariantClass_G_VARIANT_CLASS_INT32: GVariantClass = 105;
pub const GVariantClass_G_VARIANT_CLASS_UINT32: GVariantClass = 117;
pub const GVariantClass_G_VARIANT_CLASS_INT64: GVariantClass = 120;
pub const GVariantClass_G_VARIANT_CLASS_UINT64: GVariantClass = 116;
pub const GVariantClass_G_VARIANT_CLASS_HANDLE: GVariantClass = 104;
pub const GVariantClass_G_VARIANT_CLASS_DOUBLE: GVariantClass = 100;
pub const GVariantClass_G_VARIANT_CLASS_STRING: GVariantClass = 115;
pub const GVariantClass_G_VARIANT_CLASS_OBJECT_PATH: GVariantClass = 111;
pub const GVariantClass_G_VARIANT_CLASS_SIGNATURE: GVariantClass = 103;
pub const GVariantClass_G_VARIANT_CLASS_VARIANT: GVariantClass = 118;
pub const GVariantClass_G_VARIANT_CLASS_MAYBE: GVariantClass = 109;
pub const GVariantClass_G_VARIANT_CLASS_ARRAY: GVariantClass = 97;
pub const GVariantClass_G_VARIANT_CLASS_TUPLE: GVariantClass = 40;
pub const GVariantClass_G_VARIANT_CLASS_DICT_ENTRY: GVariantClass = 123;
pub type GVariantClass = ::core::ffi::c_uint;
extern "C" {
    pub fn _frida_g_variant_unref(value: *mut GVariant);
}
extern "C" {
    pub fn _frida_g_variant_ref(value: *mut GVariant) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_variant_ref_sink(value: *mut GVariant) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_variant_is_floating(value: *mut GVariant) -> gboolean;
}
extern "C" {
    pub fn _frida_g_variant_take_ref(value: *mut GVariant) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_variant_get_type(value: *mut GVariant) -> *const GVariantType;
}
extern "C" {
    pub fn _frida_g_variant_get_type_string(value: *mut GVariant) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_variant_is_of_type(
        value: *mut GVariant,
        type_: *const GVariantType,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_variant_is_container(value: *mut GVariant) -> gboolean;
}
extern "C" {
    pub fn _frida_g_variant_classify(value: *mut GVariant) -> GVariantClass;
}
extern "C" {
    pub fn _frida_g_variant_new_boolean(value: gboolean) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_variant_new_byte(value: guint8) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_variant_new_int16(value: gint16) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_variant_new_uint16(value: guint16) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_variant_new_int32(value: gint32) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_variant_new_uint32(value: guint32) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_variant_new_int64(value: gint64) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_variant_new_uint64(value: guint64) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_variant_new_handle(value: gint32) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_variant_new_double(value: gdouble) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_variant_new_string(string: *const gchar) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_variant_new_take_string(string: *mut gchar) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_variant_new_printf(format_string: *const gchar, ...) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_variant_new_object_path(object_path: *const gchar) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_variant_is_object_path(string: *const gchar) -> gboolean;
}
extern "C" {
    pub fn _frida_g_variant_new_signature(signature: *const gchar) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_variant_is_signature(string: *const gchar) -> gboolean;
}
extern "C" {
    pub fn _frida_g_variant_new_variant(value: *mut GVariant) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_variant_new_strv(strv: *const *const gchar, length: gssize) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_variant_new_objv(strv: *const *const gchar, length: gssize) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_variant_new_bytestring(string: *const gchar) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_variant_new_bytestring_array(
        strv: *const *const gchar,
        length: gssize,
    ) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_variant_new_fixed_array(
        element_type: *const GVariantType,
        elements: gconstpointer,
        n_elements: gsize,
        element_size: gsize,
    ) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_variant_get_boolean(value: *mut GVariant) -> gboolean;
}
extern "C" {
    pub fn _frida_g_variant_get_byte(value: *mut GVariant) -> guint8;
}
extern "C" {
    pub fn _frida_g_variant_get_int16(value: *mut GVariant) -> gint16;
}
extern "C" {
    pub fn _frida_g_variant_get_uint16(value: *mut GVariant) -> guint16;
}
extern "C" {
    pub fn _frida_g_variant_get_int32(value: *mut GVariant) -> gint32;
}
extern "C" {
    pub fn _frida_g_variant_get_uint32(value: *mut GVariant) -> guint32;
}
extern "C" {
    pub fn _frida_g_variant_get_int64(value: *mut GVariant) -> gint64;
}
extern "C" {
    pub fn _frida_g_variant_get_uint64(value: *mut GVariant) -> guint64;
}
extern "C" {
    pub fn _frida_g_variant_get_handle(value: *mut GVariant) -> gint32;
}
extern "C" {
    pub fn _frida_g_variant_get_double(value: *mut GVariant) -> gdouble;
}
extern "C" {
    pub fn _frida_g_variant_get_variant(value: *mut GVariant) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_variant_get_string(value: *mut GVariant, length: *mut gsize) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_variant_dup_string(value: *mut GVariant, length: *mut gsize) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_variant_get_strv(value: *mut GVariant, length: *mut gsize)
        -> *mut *const gchar;
}
extern "C" {
    pub fn _frida_g_variant_dup_strv(value: *mut GVariant, length: *mut gsize) -> *mut *mut gchar;
}
extern "C" {
    pub fn _frida_g_variant_get_objv(value: *mut GVariant, length: *mut gsize)
        -> *mut *const gchar;
}
extern "C" {
    pub fn _frida_g_variant_dup_objv(value: *mut GVariant, length: *mut gsize) -> *mut *mut gchar;
}
extern "C" {
    pub fn _frida_g_variant_get_bytestring(value: *mut GVariant) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_variant_dup_bytestring(value: *mut GVariant, length: *mut gsize) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_variant_get_bytestring_array(
        value: *mut GVariant,
        length: *mut gsize,
    ) -> *mut *const gchar;
}
extern "C" {
    pub fn _frida_g_variant_dup_bytestring_array(
        value: *mut GVariant,
        length: *mut gsize,
    ) -> *mut *mut gchar;
}
extern "C" {
    pub fn _frida_g_variant_new_maybe(
        child_type: *const GVariantType,
        child: *mut GVariant,
    ) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_variant_new_array(
        child_type: *const GVariantType,
        children: *const *mut GVariant,
        n_children: gsize,
    ) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_variant_new_tuple(
        children: *const *mut GVariant,
        n_children: gsize,
    ) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_variant_new_dict_entry(
        key: *mut GVariant,
        value: *mut GVariant,
    ) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_variant_get_maybe(value: *mut GVariant) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_variant_n_children(value: *mut GVariant) -> gsize;
}
extern "C" {
    pub fn _frida_g_variant_get_child(
        value: *mut GVariant,
        index_: gsize,
        format_string: *const gchar,
        ...
    );
}
extern "C" {
    pub fn _frida_g_variant_get_child_value(value: *mut GVariant, index_: gsize) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_variant_lookup(
        dictionary: *mut GVariant,
        key: *const gchar,
        format_string: *const gchar,
        ...
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_variant_lookup_value(
        dictionary: *mut GVariant,
        key: *const gchar,
        expected_type: *const GVariantType,
    ) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_variant_get_fixed_array(
        value: *mut GVariant,
        n_elements: *mut gsize,
        element_size: gsize,
    ) -> gconstpointer;
}
extern "C" {
    pub fn _frida_g_variant_get_size(value: *mut GVariant) -> gsize;
}
extern "C" {
    pub fn _frida_g_variant_get_data(value: *mut GVariant) -> gconstpointer;
}
extern "C" {
    pub fn _frida_g_variant_get_data_as_bytes(value: *mut GVariant) -> *mut GBytes;
}
extern "C" {
    pub fn _frida_g_variant_store(value: *mut GVariant, data: gpointer);
}
extern "C" {
    pub fn _frida_g_variant_print(value: *mut GVariant, type_annotate: gboolean) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_variant_print_string(
        value: *mut GVariant,
        string: *mut GString,
        type_annotate: gboolean,
    ) -> *mut GString;
}
extern "C" {
    pub fn _frida_g_variant_hash(value: gconstpointer) -> guint;
}
extern "C" {
    pub fn _frida_g_variant_equal(one: gconstpointer, two: gconstpointer) -> gboolean;
}
extern "C" {
    pub fn _frida_g_variant_get_normal_form(value: *mut GVariant) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_variant_is_normal_form(value: *mut GVariant) -> gboolean;
}
extern "C" {
    pub fn _frida_g_variant_byteswap(value: *mut GVariant) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_variant_new_from_bytes(
        type_: *const GVariantType,
        bytes: *mut GBytes,
        trusted: gboolean,
    ) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_variant_new_from_data(
        type_: *const GVariantType,
        data: gconstpointer,
        size: gsize,
        trusted: gboolean,
        notify: GDestroyNotify,
        user_data: gpointer,
    ) -> *mut GVariant;
}
pub type GVariantIter = _GVariantIter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GVariantIter {
    pub x: [gsize; 16usize],
}
extern "C" {
    pub fn _frida_g_variant_iter_new(value: *mut GVariant) -> *mut GVariantIter;
}
extern "C" {
    pub fn _frida_g_variant_iter_init(iter: *mut GVariantIter, value: *mut GVariant) -> gsize;
}
extern "C" {
    pub fn _frida_g_variant_iter_copy(iter: *mut GVariantIter) -> *mut GVariantIter;
}
extern "C" {
    pub fn _frida_g_variant_iter_n_children(iter: *mut GVariantIter) -> gsize;
}
extern "C" {
    pub fn _frida_g_variant_iter_free(iter: *mut GVariantIter);
}
extern "C" {
    pub fn _frida_g_variant_iter_next_value(iter: *mut GVariantIter) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_variant_iter_next(
        iter: *mut GVariantIter,
        format_string: *const gchar,
        ...
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_variant_iter_loop(
        iter: *mut GVariantIter,
        format_string: *const gchar,
        ...
    ) -> gboolean;
}
pub type GVariantBuilder = _GVariantBuilder;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _GVariantBuilder {
    pub u: _GVariantBuilder__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _GVariantBuilder__bindgen_ty_1 {
    pub s: _GVariantBuilder__bindgen_ty_1__bindgen_ty_1,
    pub x: [gsize; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GVariantBuilder__bindgen_ty_1__bindgen_ty_1 {
    pub partial_magic: gsize,
    pub type_: *const GVariantType,
    pub y: [gsize; 14usize],
}
pub const GVariantParseError_G_VARIANT_PARSE_ERROR_FAILED: GVariantParseError = 0;
pub const GVariantParseError_G_VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED: GVariantParseError = 1;
pub const GVariantParseError_G_VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE: GVariantParseError = 2;
pub const GVariantParseError_G_VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED: GVariantParseError = 3;
pub const GVariantParseError_G_VARIANT_PARSE_ERROR_INPUT_NOT_AT_END: GVariantParseError = 4;
pub const GVariantParseError_G_VARIANT_PARSE_ERROR_INVALID_CHARACTER: GVariantParseError = 5;
pub const GVariantParseError_G_VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING: GVariantParseError = 6;
pub const GVariantParseError_G_VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH: GVariantParseError = 7;
pub const GVariantParseError_G_VARIANT_PARSE_ERROR_INVALID_SIGNATURE: GVariantParseError = 8;
pub const GVariantParseError_G_VARIANT_PARSE_ERROR_INVALID_TYPE_STRING: GVariantParseError = 9;
pub const GVariantParseError_G_VARIANT_PARSE_ERROR_NO_COMMON_TYPE: GVariantParseError = 10;
pub const GVariantParseError_G_VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE: GVariantParseError = 11;
pub const GVariantParseError_G_VARIANT_PARSE_ERROR_NUMBER_TOO_BIG: GVariantParseError = 12;
pub const GVariantParseError_G_VARIANT_PARSE_ERROR_TYPE_ERROR: GVariantParseError = 13;
pub const GVariantParseError_G_VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN: GVariantParseError = 14;
pub const GVariantParseError_G_VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD: GVariantParseError = 15;
pub const GVariantParseError_G_VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT:
    GVariantParseError = 16;
pub const GVariantParseError_G_VARIANT_PARSE_ERROR_VALUE_EXPECTED: GVariantParseError = 17;
pub const GVariantParseError_G_VARIANT_PARSE_ERROR_RECURSION: GVariantParseError = 18;
pub type GVariantParseError = ::core::ffi::c_uint;
extern "C" {
    pub fn _frida_g_variant_parser_get_error_quark() -> GQuark;
}
extern "C" {
    pub fn _frida_g_variant_parse_error_quark() -> GQuark;
}
extern "C" {
    pub fn _frida_g_variant_builder_new(type_: *const GVariantType) -> *mut GVariantBuilder;
}
extern "C" {
    pub fn _frida_g_variant_builder_unref(builder: *mut GVariantBuilder);
}
extern "C" {
    pub fn _frida_g_variant_builder_ref(builder: *mut GVariantBuilder) -> *mut GVariantBuilder;
}
extern "C" {
    pub fn _frida_g_variant_builder_init(builder: *mut GVariantBuilder, type_: *const GVariantType);
}
extern "C" {
    pub fn _frida_g_variant_builder_end(builder: *mut GVariantBuilder) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_variant_builder_clear(builder: *mut GVariantBuilder);
}
extern "C" {
    pub fn _frida_g_variant_builder_open(builder: *mut GVariantBuilder, type_: *const GVariantType);
}
extern "C" {
    pub fn _frida_g_variant_builder_close(builder: *mut GVariantBuilder);
}
extern "C" {
    pub fn _frida_g_variant_builder_add_value(builder: *mut GVariantBuilder, value: *mut GVariant);
}
extern "C" {
    pub fn _frida_g_variant_builder_add(
        builder: *mut GVariantBuilder,
        format_string: *const gchar,
        ...
    );
}
extern "C" {
    pub fn _frida_g_variant_builder_add_parsed(
        builder: *mut GVariantBuilder,
        format: *const gchar,
        ...
    );
}
extern "C" {
    pub fn _frida_g_variant_new(format_string: *const gchar, ...) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_variant_get(value: *mut GVariant, format_string: *const gchar, ...);
}
extern "C" {
    pub fn _frida_g_variant_new_va(
        format_string: *const gchar,
        endptr: *mut *const gchar,
        app: *mut va_list,
    ) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_variant_get_va(
        value: *mut GVariant,
        format_string: *const gchar,
        endptr: *mut *const gchar,
        app: *mut va_list,
    );
}
extern "C" {
    pub fn _frida_g_variant_check_format_string(
        value: *mut GVariant,
        format_string: *const gchar,
        copy_only: gboolean,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_variant_parse(
        type_: *const GVariantType,
        text: *const gchar,
        limit: *const gchar,
        endptr: *mut *const gchar,
        error: *mut *mut GError,
    ) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_variant_new_parsed(format: *const gchar, ...) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_variant_new_parsed_va(format: *const gchar, app: *mut va_list)
        -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_variant_parse_error_print_context(
        error: *mut GError,
        source_str: *const gchar,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_variant_compare(one: gconstpointer, two: gconstpointer) -> gint;
}
pub type GVariantDict = _GVariantDict;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _GVariantDict {
    pub u: _GVariantDict__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _GVariantDict__bindgen_ty_1 {
    pub s: _GVariantDict__bindgen_ty_1__bindgen_ty_1,
    pub x: [gsize; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GVariantDict__bindgen_ty_1__bindgen_ty_1 {
    pub asv: *mut GVariant,
    pub partial_magic: gsize,
    pub y: [gsize; 14usize],
}
extern "C" {
    pub fn _frida_g_variant_dict_new(from_asv: *mut GVariant) -> *mut GVariantDict;
}
extern "C" {
    pub fn _frida_g_variant_dict_init(dict: *mut GVariantDict, from_asv: *mut GVariant);
}
extern "C" {
    pub fn _frida_g_variant_dict_lookup(
        dict: *mut GVariantDict,
        key: *const gchar,
        format_string: *const gchar,
        ...
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_variant_dict_lookup_value(
        dict: *mut GVariantDict,
        key: *const gchar,
        expected_type: *const GVariantType,
    ) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_variant_dict_contains(dict: *mut GVariantDict, key: *const gchar) -> gboolean;
}
extern "C" {
    pub fn _frida_g_variant_dict_insert(
        dict: *mut GVariantDict,
        key: *const gchar,
        format_string: *const gchar,
        ...
    );
}
extern "C" {
    pub fn _frida_g_variant_dict_insert_value(
        dict: *mut GVariantDict,
        key: *const gchar,
        value: *mut GVariant,
    );
}
extern "C" {
    pub fn _frida_g_variant_dict_remove(dict: *mut GVariantDict, key: *const gchar) -> gboolean;
}
extern "C" {
    pub fn _frida_g_variant_dict_clear(dict: *mut GVariantDict);
}
extern "C" {
    pub fn _frida_g_variant_dict_end(dict: *mut GVariantDict) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_variant_dict_ref(dict: *mut GVariantDict) -> *mut GVariantDict;
}
extern "C" {
    pub fn _frida_g_variant_dict_unref(dict: *mut GVariantDict);
}
extern "C" {
    pub fn _frida_g_printf_string_upper_bound(format: *const gchar, args: va_list) -> gsize;
}
pub const GLogLevelFlags_G_LOG_FLAG_RECURSION: GLogLevelFlags = 1;
pub const GLogLevelFlags_G_LOG_FLAG_FATAL: GLogLevelFlags = 2;
pub const GLogLevelFlags_G_LOG_LEVEL_ERROR: GLogLevelFlags = 4;
pub const GLogLevelFlags_G_LOG_LEVEL_CRITICAL: GLogLevelFlags = 8;
pub const GLogLevelFlags_G_LOG_LEVEL_WARNING: GLogLevelFlags = 16;
pub const GLogLevelFlags_G_LOG_LEVEL_MESSAGE: GLogLevelFlags = 32;
pub const GLogLevelFlags_G_LOG_LEVEL_INFO: GLogLevelFlags = 64;
pub const GLogLevelFlags_G_LOG_LEVEL_DEBUG: GLogLevelFlags = 128;
pub const GLogLevelFlags_G_LOG_LEVEL_MASK: GLogLevelFlags = -4;
pub type GLogLevelFlags = ::core::ffi::c_int;
pub type GLogFunc = ::core::option::Option<
    unsafe extern "C" fn(
        log_domain: *const gchar,
        log_level: GLogLevelFlags,
        message: *const gchar,
        user_data: gpointer,
    ),
>;
extern "C" {
    pub fn _frida_g_log_set_handler(
        log_domain: *const gchar,
        log_levels: GLogLevelFlags,
        log_func: GLogFunc,
        user_data: gpointer,
    ) -> guint;
}
extern "C" {
    pub fn _frida_g_log_set_handler_full(
        log_domain: *const gchar,
        log_levels: GLogLevelFlags,
        log_func: GLogFunc,
        user_data: gpointer,
        destroy: GDestroyNotify,
    ) -> guint;
}
extern "C" {
    pub fn _frida_g_log_remove_handler(log_domain: *const gchar, handler_id: guint);
}
extern "C" {
    pub fn _frida_g_log_default_handler(
        log_domain: *const gchar,
        log_level: GLogLevelFlags,
        message: *const gchar,
        unused_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_log_set_default_handler(log_func: GLogFunc, user_data: gpointer) -> GLogFunc;
}
extern "C" {
    pub fn _frida_g_log(
        log_domain: *const gchar,
        log_level: GLogLevelFlags,
        format: *const gchar,
        ...
    );
}
extern "C" {
    pub fn _frida_g_logv(
        log_domain: *const gchar,
        log_level: GLogLevelFlags,
        format: *const gchar,
        args: va_list,
    );
}
extern "C" {
    pub fn _frida_g_log_set_fatal_mask(
        log_domain: *const gchar,
        fatal_mask: GLogLevelFlags,
    ) -> GLogLevelFlags;
}
extern "C" {
    pub fn _frida_g_log_set_always_fatal(fatal_mask: GLogLevelFlags) -> GLogLevelFlags;
}
pub const GLogWriterOutput_G_LOG_WRITER_HANDLED: GLogWriterOutput = 1;
pub const GLogWriterOutput_G_LOG_WRITER_UNHANDLED: GLogWriterOutput = 0;
pub type GLogWriterOutput = ::core::ffi::c_uint;
pub type GLogField = _GLogField;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GLogField {
    pub key: *const gchar,
    pub value: gconstpointer,
    pub length: gssize,
}
pub type GLogWriterFunc = ::core::option::Option<
    unsafe extern "C" fn(
        log_level: GLogLevelFlags,
        fields: *const GLogField,
        n_fields: gsize,
        user_data: gpointer,
    ) -> GLogWriterOutput,
>;
extern "C" {
    pub fn _frida_g_log_structured(log_domain: *const gchar, log_level: GLogLevelFlags, ...);
}
extern "C" {
    pub fn _frida_g_log_structured_array(
        log_level: GLogLevelFlags,
        fields: *const GLogField,
        n_fields: gsize,
    );
}
extern "C" {
    pub fn _frida_g_log_variant(
        log_domain: *const gchar,
        log_level: GLogLevelFlags,
        fields: *mut GVariant,
    );
}
extern "C" {
    pub fn _frida_g_log_set_writer_func(
        func: GLogWriterFunc,
        user_data: gpointer,
        user_data_free: GDestroyNotify,
    );
}
extern "C" {
    pub fn _frida_g_log_writer_supports_color(output_fd: gint) -> gboolean;
}
extern "C" {
    pub fn _frida_g_log_writer_is_journald(output_fd: gint) -> gboolean;
}
extern "C" {
    pub fn _frida_g_log_writer_format_fields(
        log_level: GLogLevelFlags,
        fields: *const GLogField,
        n_fields: gsize,
        use_color: gboolean,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_log_writer_journald(
        log_level: GLogLevelFlags,
        fields: *const GLogField,
        n_fields: gsize,
        user_data: gpointer,
    ) -> GLogWriterOutput;
}
extern "C" {
    pub fn _frida_g_log_writer_standard_streams(
        log_level: GLogLevelFlags,
        fields: *const GLogField,
        n_fields: gsize,
        user_data: gpointer,
    ) -> GLogWriterOutput;
}
extern "C" {
    pub fn _frida_g_log_writer_default(
        log_level: GLogLevelFlags,
        fields: *const GLogField,
        n_fields: gsize,
        user_data: gpointer,
    ) -> GLogWriterOutput;
}
extern "C" {
    pub fn _frida_g_log_writer_default_set_use_stderr(use_stderr: gboolean);
}
extern "C" {
    pub fn _frida_g_log_writer_default_would_drop(
        log_level: GLogLevelFlags,
        log_domain: *const ::core::ffi::c_char,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_log_get_debug_enabled() -> gboolean;
}
extern "C" {
    pub fn _frida_g_log_set_debug_enabled(enabled: gboolean);
}
extern "C" {
    pub fn _g_log_fallback_handler(
        log_domain: *const gchar,
        log_level: GLogLevelFlags,
        message: *const gchar,
        unused_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_return_if_fail_warning(
        log_domain: *const ::core::ffi::c_char,
        pretty_function: *const ::core::ffi::c_char,
        expression: *const ::core::ffi::c_char,
    );
}
extern "C" {
    pub fn _frida_g_warn_message(
        domain: *const ::core::ffi::c_char,
        file: *const ::core::ffi::c_char,
        line: ::core::ffi::c_int,
        func: *const ::core::ffi::c_char,
        warnexpr: *const ::core::ffi::c_char,
    );
}
extern "C" {
    pub fn _frida_g_assert_warning(
        log_domain: *const ::core::ffi::c_char,
        file: *const ::core::ffi::c_char,
        line: ::core::ffi::c_int,
        pretty_function: *const ::core::ffi::c_char,
        expression: *const ::core::ffi::c_char,
    ) -> !;
}
extern "C" {
    pub fn _frida_g_log_structured_standard(
        log_domain: *const gchar,
        log_level: GLogLevelFlags,
        file: *const gchar,
        line: *const gchar,
        func: *const gchar,
        message_format: *const gchar,
        ...
    );
}
pub type GPrintFunc = ::core::option::Option<unsafe extern "C" fn(string: *const gchar)>;
extern "C" {
    pub fn _frida_g_print(format: *const gchar, ...);
}
extern "C" {
    pub fn _frida_g_set_print_handler(func: GPrintFunc) -> GPrintFunc;
}
extern "C" {
    pub fn _frida_g_printerr(format: *const gchar, ...);
}
extern "C" {
    pub fn _frida_g_set_printerr_handler(func: GPrintFunc) -> GPrintFunc;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GOptionContext {
    _unused: [u8; 0],
}
pub type GOptionContext = _GOptionContext;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GOptionGroup {
    _unused: [u8; 0],
}
pub type GOptionGroup = _GOptionGroup;
pub type GOptionEntry = _GOptionEntry;
pub const GOptionFlags_G_OPTION_FLAG_NONE: GOptionFlags = 0;
pub const GOptionFlags_G_OPTION_FLAG_HIDDEN: GOptionFlags = 1;
pub const GOptionFlags_G_OPTION_FLAG_IN_MAIN: GOptionFlags = 2;
pub const GOptionFlags_G_OPTION_FLAG_REVERSE: GOptionFlags = 4;
pub const GOptionFlags_G_OPTION_FLAG_NO_ARG: GOptionFlags = 8;
pub const GOptionFlags_G_OPTION_FLAG_FILENAME: GOptionFlags = 16;
pub const GOptionFlags_G_OPTION_FLAG_OPTIONAL_ARG: GOptionFlags = 32;
pub const GOptionFlags_G_OPTION_FLAG_NOALIAS: GOptionFlags = 64;
pub type GOptionFlags = ::core::ffi::c_uint;
pub const GOptionArg_G_OPTION_ARG_NONE: GOptionArg = 0;
pub const GOptionArg_G_OPTION_ARG_STRING: GOptionArg = 1;
pub const GOptionArg_G_OPTION_ARG_INT: GOptionArg = 2;
pub const GOptionArg_G_OPTION_ARG_CALLBACK: GOptionArg = 3;
pub const GOptionArg_G_OPTION_ARG_FILENAME: GOptionArg = 4;
pub const GOptionArg_G_OPTION_ARG_STRING_ARRAY: GOptionArg = 5;
pub const GOptionArg_G_OPTION_ARG_FILENAME_ARRAY: GOptionArg = 6;
pub const GOptionArg_G_OPTION_ARG_DOUBLE: GOptionArg = 7;
pub const GOptionArg_G_OPTION_ARG_INT64: GOptionArg = 8;
pub type GOptionArg = ::core::ffi::c_uint;
pub type GOptionArgFunc = ::core::option::Option<
    unsafe extern "C" fn(
        option_name: *const gchar,
        value: *const gchar,
        user_data: gpointer,
        error: *mut *mut GError,
    ) -> gboolean,
>;
pub type GOptionParseFunc = ::core::option::Option<
    unsafe extern "C" fn(
        context: *mut GOptionContext,
        group: *mut GOptionGroup,
        user_data: gpointer,
        error: *mut *mut GError,
    ) -> gboolean,
>;
pub type GOptionErrorFunc = ::core::option::Option<
    unsafe extern "C" fn(
        context: *mut GOptionContext,
        group: *mut GOptionGroup,
        user_data: gpointer,
        error: *mut *mut GError,
    ),
>;
pub const GOptionError_G_OPTION_ERROR_UNKNOWN_OPTION: GOptionError = 0;
pub const GOptionError_G_OPTION_ERROR_BAD_VALUE: GOptionError = 1;
pub const GOptionError_G_OPTION_ERROR_FAILED: GOptionError = 2;
pub type GOptionError = ::core::ffi::c_uint;
extern "C" {
    pub fn _frida_g_option_error_quark() -> GQuark;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GOptionEntry {
    pub long_name: *const gchar,
    pub short_name: gchar,
    pub flags: gint,
    pub arg: GOptionArg,
    pub arg_data: gpointer,
    pub description: *const gchar,
    pub arg_description: *const gchar,
}
extern "C" {
    pub fn _frida_g_option_context_new(parameter_string: *const gchar) -> *mut GOptionContext;
}
extern "C" {
    pub fn _frida_g_option_context_set_summary(context: *mut GOptionContext, summary: *const gchar);
}
extern "C" {
    pub fn _frida_g_option_context_get_summary(context: *mut GOptionContext) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_option_context_set_description(
        context: *mut GOptionContext,
        description: *const gchar,
    );
}
extern "C" {
    pub fn _frida_g_option_context_get_description(context: *mut GOptionContext) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_option_context_free(context: *mut GOptionContext);
}
extern "C" {
    pub fn _frida_g_option_context_set_help_enabled(
        context: *mut GOptionContext,
        help_enabled: gboolean,
    );
}
extern "C" {
    pub fn _frida_g_option_context_get_help_enabled(context: *mut GOptionContext) -> gboolean;
}
extern "C" {
    pub fn _frida_g_option_context_set_ignore_unknown_options(
        context: *mut GOptionContext,
        ignore_unknown: gboolean,
    );
}
extern "C" {
    pub fn _frida_g_option_context_get_ignore_unknown_options(
        context: *mut GOptionContext,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_option_context_set_strict_posix(
        context: *mut GOptionContext,
        strict_posix: gboolean,
    );
}
extern "C" {
    pub fn _frida_g_option_context_get_strict_posix(context: *mut GOptionContext) -> gboolean;
}
extern "C" {
    pub fn _frida_g_option_context_add_main_entries(
        context: *mut GOptionContext,
        entries: *const GOptionEntry,
        translation_domain: *const gchar,
    );
}
extern "C" {
    pub fn _frida_g_option_context_parse(
        context: *mut GOptionContext,
        argc: *mut gint,
        argv: *mut *mut *mut gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_option_context_parse_strv(
        context: *mut GOptionContext,
        arguments: *mut *mut *mut gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_option_context_set_translate_func(
        context: *mut GOptionContext,
        func: GTranslateFunc,
        data: gpointer,
        destroy_notify: GDestroyNotify,
    );
}
extern "C" {
    pub fn _frida_g_option_context_set_translation_domain(
        context: *mut GOptionContext,
        domain: *const gchar,
    );
}
extern "C" {
    pub fn _frida_g_option_context_add_group(
        context: *mut GOptionContext,
        group: *mut GOptionGroup,
    );
}
extern "C" {
    pub fn _frida_g_option_context_set_main_group(
        context: *mut GOptionContext,
        group: *mut GOptionGroup,
    );
}
extern "C" {
    pub fn _frida_g_option_context_get_main_group(
        context: *mut GOptionContext,
    ) -> *mut GOptionGroup;
}
extern "C" {
    pub fn _frida_g_option_context_get_help(
        context: *mut GOptionContext,
        main_help: gboolean,
        group: *mut GOptionGroup,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_option_group_new(
        name: *const gchar,
        description: *const gchar,
        help_description: *const gchar,
        user_data: gpointer,
        destroy: GDestroyNotify,
    ) -> *mut GOptionGroup;
}
extern "C" {
    pub fn _frida_g_option_group_set_parse_hooks(
        group: *mut GOptionGroup,
        pre_parse_func: GOptionParseFunc,
        post_parse_func: GOptionParseFunc,
    );
}
extern "C" {
    pub fn _frida_g_option_group_set_error_hook(
        group: *mut GOptionGroup,
        error_func: GOptionErrorFunc,
    );
}
extern "C" {
    pub fn _frida_g_option_group_free(group: *mut GOptionGroup);
}
extern "C" {
    pub fn _frida_g_option_group_ref(group: *mut GOptionGroup) -> *mut GOptionGroup;
}
extern "C" {
    pub fn _frida_g_option_group_unref(group: *mut GOptionGroup);
}
extern "C" {
    pub fn _frida_g_option_group_add_entries(
        group: *mut GOptionGroup,
        entries: *const GOptionEntry,
    );
}
extern "C" {
    pub fn _frida_g_option_group_set_translate_func(
        group: *mut GOptionGroup,
        func: GTranslateFunc,
        data: gpointer,
        destroy_notify: GDestroyNotify,
    );
}
extern "C" {
    pub fn _frida_g_option_group_set_translation_domain(
        group: *mut GOptionGroup,
        domain: *const gchar,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GPatternSpec {
    _unused: [u8; 0],
}
pub type GPatternSpec = _GPatternSpec;
extern "C" {
    pub fn _frida_g_pattern_spec_new(pattern: *const gchar) -> *mut GPatternSpec;
}
extern "C" {
    pub fn _frida_g_pattern_spec_free(pspec: *mut GPatternSpec);
}
extern "C" {
    pub fn _frida_g_pattern_spec_copy(pspec: *mut GPatternSpec) -> *mut GPatternSpec;
}
extern "C" {
    pub fn _frida_g_pattern_spec_equal(
        pspec1: *mut GPatternSpec,
        pspec2: *mut GPatternSpec,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_pattern_spec_match(
        pspec: *mut GPatternSpec,
        string_length: gsize,
        string: *const gchar,
        string_reversed: *const gchar,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_pattern_spec_match_string(
        pspec: *mut GPatternSpec,
        string: *const gchar,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_pattern_match(
        pspec: *mut GPatternSpec,
        string_length: guint,
        string: *const gchar,
        string_reversed: *const gchar,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_pattern_match_string(
        pspec: *mut GPatternSpec,
        string: *const gchar,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_pattern_match_simple(pattern: *const gchar, string: *const gchar) -> gboolean;
}
pub type GFDCallbacks = _GFDCallbacks;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GFDCallbacks {
    pub on_fd_opened:
        ::core::option::Option<unsafe extern "C" fn(fd: gint, description: *const gchar)>,
    pub on_fd_closed:
        ::core::option::Option<unsafe extern "C" fn(fd: gint, description: *const gchar)>,
}
extern "C" {
    pub static mut _frida_glib_fd_callbacks: *mut GFDCallbacks;
}
extern "C" {
    pub fn _frida_g_platform_audit_set_fd_callbacks(callbacks: *mut GFDCallbacks);
}
extern "C" {
    pub fn _frida_g_spaced_primes_closest(num: guint) -> guint;
}
extern "C" {
    pub fn _frida_g_qsort_with_data(
        pbase: gconstpointer,
        total_elems: gint,
        size: gsize,
        compare_func: GCompareDataFunc,
        user_data: gpointer,
    );
}
pub type GQueue = _GQueue;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GQueue {
    pub head: *mut GList,
    pub tail: *mut GList,
    pub length: guint,
}
extern "C" {
    pub fn _frida_g_queue_new() -> *mut GQueue;
}
extern "C" {
    pub fn _frida_g_queue_free(queue: *mut GQueue);
}
extern "C" {
    pub fn _frida_g_queue_free_full(queue: *mut GQueue, free_func: GDestroyNotify);
}
extern "C" {
    pub fn _frida_g_queue_init(queue: *mut GQueue);
}
extern "C" {
    pub fn _frida_g_queue_clear(queue: *mut GQueue);
}
extern "C" {
    pub fn _frida_g_queue_is_empty(queue: *mut GQueue) -> gboolean;
}
extern "C" {
    pub fn _frida_g_queue_clear_full(queue: *mut GQueue, free_func: GDestroyNotify);
}
extern "C" {
    pub fn _frida_g_queue_get_length(queue: *mut GQueue) -> guint;
}
extern "C" {
    pub fn _frida_g_queue_reverse(queue: *mut GQueue);
}
extern "C" {
    pub fn _frida_g_queue_copy(queue: *mut GQueue) -> *mut GQueue;
}
extern "C" {
    pub fn _frida_g_queue_foreach(queue: *mut GQueue, func: GFunc, user_data: gpointer);
}
extern "C" {
    pub fn _frida_g_queue_find(queue: *mut GQueue, data: gconstpointer) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_queue_find_custom(
        queue: *mut GQueue,
        data: gconstpointer,
        func: GCompareFunc,
    ) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_queue_sort(
        queue: *mut GQueue,
        compare_func: GCompareDataFunc,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_queue_push_head(queue: *mut GQueue, data: gpointer);
}
extern "C" {
    pub fn _frida_g_queue_push_tail(queue: *mut GQueue, data: gpointer);
}
extern "C" {
    pub fn _frida_g_queue_push_nth(queue: *mut GQueue, data: gpointer, n: gint);
}
extern "C" {
    pub fn _frida_g_queue_pop_head(queue: *mut GQueue) -> gpointer;
}
extern "C" {
    pub fn _frida_g_queue_pop_tail(queue: *mut GQueue) -> gpointer;
}
extern "C" {
    pub fn _frida_g_queue_pop_nth(queue: *mut GQueue, n: guint) -> gpointer;
}
extern "C" {
    pub fn _frida_g_queue_peek_head(queue: *mut GQueue) -> gpointer;
}
extern "C" {
    pub fn _frida_g_queue_peek_tail(queue: *mut GQueue) -> gpointer;
}
extern "C" {
    pub fn _frida_g_queue_peek_nth(queue: *mut GQueue, n: guint) -> gpointer;
}
extern "C" {
    pub fn _frida_g_queue_index(queue: *mut GQueue, data: gconstpointer) -> gint;
}
extern "C" {
    pub fn _frida_g_queue_remove(queue: *mut GQueue, data: gconstpointer) -> gboolean;
}
extern "C" {
    pub fn _frida_g_queue_remove_all(queue: *mut GQueue, data: gconstpointer) -> guint;
}
extern "C" {
    pub fn _frida_g_queue_insert_before(queue: *mut GQueue, sibling: *mut GList, data: gpointer);
}
extern "C" {
    pub fn _frida_g_queue_insert_before_link(
        queue: *mut GQueue,
        sibling: *mut GList,
        link_: *mut GList,
    );
}
extern "C" {
    pub fn _frida_g_queue_insert_after(queue: *mut GQueue, sibling: *mut GList, data: gpointer);
}
extern "C" {
    pub fn _frida_g_queue_insert_after_link(
        queue: *mut GQueue,
        sibling: *mut GList,
        link_: *mut GList,
    );
}
extern "C" {
    pub fn _frida_g_queue_insert_sorted(
        queue: *mut GQueue,
        data: gpointer,
        func: GCompareDataFunc,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_queue_push_head_link(queue: *mut GQueue, link_: *mut GList);
}
extern "C" {
    pub fn _frida_g_queue_push_tail_link(queue: *mut GQueue, link_: *mut GList);
}
extern "C" {
    pub fn _frida_g_queue_push_nth_link(queue: *mut GQueue, n: gint, link_: *mut GList);
}
extern "C" {
    pub fn _frida_g_queue_pop_head_link(queue: *mut GQueue) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_queue_pop_tail_link(queue: *mut GQueue) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_queue_pop_nth_link(queue: *mut GQueue, n: guint) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_queue_peek_head_link(queue: *mut GQueue) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_queue_peek_tail_link(queue: *mut GQueue) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_queue_peek_nth_link(queue: *mut GQueue, n: guint) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_queue_link_index(queue: *mut GQueue, link_: *mut GList) -> gint;
}
extern "C" {
    pub fn _frida_g_queue_unlink(queue: *mut GQueue, link_: *mut GList);
}
extern "C" {
    pub fn _frida_g_queue_delete_link(queue: *mut GQueue, link_: *mut GList);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GRand {
    _unused: [u8; 0],
}
pub type GRand = _GRand;
extern "C" {
    pub fn _frida_g_rand_new_with_seed(seed: guint32) -> *mut GRand;
}
extern "C" {
    pub fn _frida_g_rand_new_with_seed_array(
        seed: *const guint32,
        seed_length: guint,
    ) -> *mut GRand;
}
extern "C" {
    pub fn _frida_g_rand_new() -> *mut GRand;
}
extern "C" {
    pub fn _frida_g_rand_free(rand_: *mut GRand);
}
extern "C" {
    pub fn _frida_g_rand_copy(rand_: *mut GRand) -> *mut GRand;
}
extern "C" {
    pub fn _frida_g_rand_set_seed(rand_: *mut GRand, seed: guint32);
}
extern "C" {
    pub fn _frida_g_rand_set_seed_array(
        rand_: *mut GRand,
        seed: *const guint32,
        seed_length: guint,
    );
}
extern "C" {
    pub fn _frida_g_rand_int(rand_: *mut GRand) -> guint32;
}
extern "C" {
    pub fn _frida_g_rand_int_range(rand_: *mut GRand, begin: gint32, end: gint32) -> gint32;
}
extern "C" {
    pub fn _frida_g_rand_double(rand_: *mut GRand) -> gdouble;
}
extern "C" {
    pub fn _frida_g_rand_double_range(rand_: *mut GRand, begin: gdouble, end: gdouble) -> gdouble;
}
extern "C" {
    pub fn _frida_g_random_set_seed(seed: guint32);
}
extern "C" {
    pub fn _frida_g_random_int() -> guint32;
}
extern "C" {
    pub fn _frida_g_random_int_range(begin: gint32, end: gint32) -> gint32;
}
extern "C" {
    pub fn _frida_g_random_double() -> gdouble;
}
extern "C" {
    pub fn _frida_g_random_double_range(begin: gdouble, end: gdouble) -> gdouble;
}
extern "C" {
    pub fn _frida_g_rc_box_alloc(block_size: gsize) -> gpointer;
}
extern "C" {
    pub fn _frida_g_rc_box_alloc0(block_size: gsize) -> gpointer;
}
extern "C" {
    pub fn _frida_g_rc_box_dup(block_size: gsize, mem_block: gconstpointer) -> gpointer;
}
extern "C" {
    pub fn _frida_g_rc_box_acquire(mem_block: gpointer) -> gpointer;
}
extern "C" {
    pub fn _frida_g_rc_box_release(mem_block: gpointer);
}
extern "C" {
    pub fn _frida_g_rc_box_release_full(mem_block: gpointer, clear_func: GDestroyNotify);
}
extern "C" {
    pub fn _frida_g_rc_box_get_size(mem_block: gpointer) -> gsize;
}
extern "C" {
    pub fn _frida_g_atomic_rc_box_alloc(block_size: gsize) -> gpointer;
}
extern "C" {
    pub fn _frida_g_atomic_rc_box_alloc0(block_size: gsize) -> gpointer;
}
extern "C" {
    pub fn _frida_g_atomic_rc_box_dup(block_size: gsize, mem_block: gconstpointer) -> gpointer;
}
extern "C" {
    pub fn _frida_g_atomic_rc_box_acquire(mem_block: gpointer) -> gpointer;
}
extern "C" {
    pub fn _frida_g_atomic_rc_box_release(mem_block: gpointer);
}
extern "C" {
    pub fn _frida_g_atomic_rc_box_release_full(mem_block: gpointer, clear_func: GDestroyNotify);
}
extern "C" {
    pub fn _frida_g_atomic_rc_box_get_size(mem_block: gpointer) -> gsize;
}
extern "C" {
    pub fn _frida_g_ref_count_init(rc: *mut grefcount);
}
extern "C" {
    pub fn _frida_g_ref_count_inc(rc: *mut grefcount);
}
extern "C" {
    pub fn _frida_g_ref_count_dec(rc: *mut grefcount) -> gboolean;
}
extern "C" {
    pub fn _frida_g_ref_count_compare(rc: *mut grefcount, val: gint) -> gboolean;
}
extern "C" {
    pub fn _frida_g_atomic_ref_count_init(arc: *mut gatomicrefcount);
}
extern "C" {
    pub fn _frida_g_atomic_ref_count_inc(arc: *mut gatomicrefcount);
}
extern "C" {
    pub fn _frida_g_atomic_ref_count_dec(arc: *mut gatomicrefcount) -> gboolean;
}
extern "C" {
    pub fn _frida_g_atomic_ref_count_compare(arc: *mut gatomicrefcount, val: gint) -> gboolean;
}
extern "C" {
    pub fn _frida_g_ref_string_new(str_: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_ref_string_new_len(
        str_: *const ::core::ffi::c_char,
        len: gssize,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_ref_string_new_intern(
        str_: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_ref_string_acquire(str_: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_ref_string_release(str_: *mut ::core::ffi::c_char);
}
extern "C" {
    pub fn _frida_g_ref_string_length(str_: *mut ::core::ffi::c_char) -> gsize;
}
pub type GRefString = ::core::ffi::c_char;
pub const GRegexError_G_REGEX_ERROR_COMPILE: GRegexError = 0;
pub const GRegexError_G_REGEX_ERROR_OPTIMIZE: GRegexError = 1;
pub const GRegexError_G_REGEX_ERROR_REPLACE: GRegexError = 2;
pub const GRegexError_G_REGEX_ERROR_MATCH: GRegexError = 3;
pub const GRegexError_G_REGEX_ERROR_INTERNAL: GRegexError = 4;
pub const GRegexError_G_REGEX_ERROR_STRAY_BACKSLASH: GRegexError = 101;
pub const GRegexError_G_REGEX_ERROR_MISSING_CONTROL_CHAR: GRegexError = 102;
pub const GRegexError_G_REGEX_ERROR_UNRECOGNIZED_ESCAPE: GRegexError = 103;
pub const GRegexError_G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER: GRegexError = 104;
pub const GRegexError_G_REGEX_ERROR_QUANTIFIER_TOO_BIG: GRegexError = 105;
pub const GRegexError_G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS: GRegexError = 106;
pub const GRegexError_G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS: GRegexError = 107;
pub const GRegexError_G_REGEX_ERROR_RANGE_OUT_OF_ORDER: GRegexError = 108;
pub const GRegexError_G_REGEX_ERROR_NOTHING_TO_REPEAT: GRegexError = 109;
pub const GRegexError_G_REGEX_ERROR_UNRECOGNIZED_CHARACTER: GRegexError = 112;
pub const GRegexError_G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS: GRegexError = 113;
pub const GRegexError_G_REGEX_ERROR_UNMATCHED_PARENTHESIS: GRegexError = 114;
pub const GRegexError_G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE: GRegexError = 115;
pub const GRegexError_G_REGEX_ERROR_UNTERMINATED_COMMENT: GRegexError = 118;
pub const GRegexError_G_REGEX_ERROR_EXPRESSION_TOO_LARGE: GRegexError = 120;
pub const GRegexError_G_REGEX_ERROR_MEMORY_ERROR: GRegexError = 121;
pub const GRegexError_G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND: GRegexError = 125;
pub const GRegexError_G_REGEX_ERROR_MALFORMED_CONDITION: GRegexError = 126;
pub const GRegexError_G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES: GRegexError = 127;
pub const GRegexError_G_REGEX_ERROR_ASSERTION_EXPECTED: GRegexError = 128;
pub const GRegexError_G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME: GRegexError = 130;
pub const GRegexError_G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED: GRegexError = 131;
pub const GRegexError_G_REGEX_ERROR_HEX_CODE_TOO_LARGE: GRegexError = 134;
pub const GRegexError_G_REGEX_ERROR_INVALID_CONDITION: GRegexError = 135;
pub const GRegexError_G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND: GRegexError = 136;
pub const GRegexError_G_REGEX_ERROR_INFINITE_LOOP: GRegexError = 140;
pub const GRegexError_G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR: GRegexError = 142;
pub const GRegexError_G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME: GRegexError = 143;
pub const GRegexError_G_REGEX_ERROR_MALFORMED_PROPERTY: GRegexError = 146;
pub const GRegexError_G_REGEX_ERROR_UNKNOWN_PROPERTY: GRegexError = 147;
pub const GRegexError_G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG: GRegexError = 148;
pub const GRegexError_G_REGEX_ERROR_TOO_MANY_SUBPATTERNS: GRegexError = 149;
pub const GRegexError_G_REGEX_ERROR_INVALID_OCTAL_VALUE: GRegexError = 151;
pub const GRegexError_G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE: GRegexError = 154;
pub const GRegexError_G_REGEX_ERROR_DEFINE_REPETION: GRegexError = 155;
pub const GRegexError_G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS: GRegexError = 156;
pub const GRegexError_G_REGEX_ERROR_MISSING_BACK_REFERENCE: GRegexError = 157;
pub const GRegexError_G_REGEX_ERROR_INVALID_RELATIVE_REFERENCE: GRegexError = 158;
pub const GRegexError_G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN: GRegexError = 159;
pub const GRegexError_G_REGEX_ERROR_UNKNOWN_BACKTRACKING_CONTROL_VERB: GRegexError = 160;
pub const GRegexError_G_REGEX_ERROR_NUMBER_TOO_BIG: GRegexError = 161;
pub const GRegexError_G_REGEX_ERROR_MISSING_SUBPATTERN_NAME: GRegexError = 162;
pub const GRegexError_G_REGEX_ERROR_MISSING_DIGIT: GRegexError = 163;
pub const GRegexError_G_REGEX_ERROR_INVALID_DATA_CHARACTER: GRegexError = 164;
pub const GRegexError_G_REGEX_ERROR_EXTRA_SUBPATTERN_NAME: GRegexError = 165;
pub const GRegexError_G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED: GRegexError = 166;
pub const GRegexError_G_REGEX_ERROR_INVALID_CONTROL_CHAR: GRegexError = 168;
pub const GRegexError_G_REGEX_ERROR_MISSING_NAME: GRegexError = 169;
pub const GRegexError_G_REGEX_ERROR_NOT_SUPPORTED_IN_CLASS: GRegexError = 171;
pub const GRegexError_G_REGEX_ERROR_TOO_MANY_FORWARD_REFERENCES: GRegexError = 172;
pub const GRegexError_G_REGEX_ERROR_NAME_TOO_LONG: GRegexError = 175;
pub const GRegexError_G_REGEX_ERROR_CHARACTER_VALUE_TOO_LARGE: GRegexError = 176;
pub type GRegexError = ::core::ffi::c_uint;
extern "C" {
    pub fn _frida_g_regex_error_quark() -> GQuark;
}
pub const GRegexCompileFlags_G_REGEX_DEFAULT: GRegexCompileFlags = 0;
pub const GRegexCompileFlags_G_REGEX_CASELESS: GRegexCompileFlags = 1;
pub const GRegexCompileFlags_G_REGEX_MULTILINE: GRegexCompileFlags = 2;
pub const GRegexCompileFlags_G_REGEX_DOTALL: GRegexCompileFlags = 4;
pub const GRegexCompileFlags_G_REGEX_EXTENDED: GRegexCompileFlags = 8;
pub const GRegexCompileFlags_G_REGEX_ANCHORED: GRegexCompileFlags = 16;
pub const GRegexCompileFlags_G_REGEX_DOLLAR_ENDONLY: GRegexCompileFlags = 32;
pub const GRegexCompileFlags_G_REGEX_UNGREEDY: GRegexCompileFlags = 512;
pub const GRegexCompileFlags_G_REGEX_RAW: GRegexCompileFlags = 2048;
pub const GRegexCompileFlags_G_REGEX_NO_AUTO_CAPTURE: GRegexCompileFlags = 4096;
pub const GRegexCompileFlags_G_REGEX_OPTIMIZE: GRegexCompileFlags = 8192;
pub const GRegexCompileFlags_G_REGEX_FIRSTLINE: GRegexCompileFlags = 262144;
pub const GRegexCompileFlags_G_REGEX_DUPNAMES: GRegexCompileFlags = 524288;
pub const GRegexCompileFlags_G_REGEX_NEWLINE_CR: GRegexCompileFlags = 1048576;
pub const GRegexCompileFlags_G_REGEX_NEWLINE_LF: GRegexCompileFlags = 2097152;
pub const GRegexCompileFlags_G_REGEX_NEWLINE_CRLF: GRegexCompileFlags = 3145728;
pub const GRegexCompileFlags_G_REGEX_NEWLINE_ANYCRLF: GRegexCompileFlags = 5242880;
pub const GRegexCompileFlags_G_REGEX_BSR_ANYCRLF: GRegexCompileFlags = 8388608;
pub const GRegexCompileFlags_G_REGEX_JAVASCRIPT_COMPAT: GRegexCompileFlags = 33554432;
pub type GRegexCompileFlags = ::core::ffi::c_uint;
pub const GRegexMatchFlags_G_REGEX_MATCH_DEFAULT: GRegexMatchFlags = 0;
pub const GRegexMatchFlags_G_REGEX_MATCH_ANCHORED: GRegexMatchFlags = 16;
pub const GRegexMatchFlags_G_REGEX_MATCH_NOTBOL: GRegexMatchFlags = 128;
pub const GRegexMatchFlags_G_REGEX_MATCH_NOTEOL: GRegexMatchFlags = 256;
pub const GRegexMatchFlags_G_REGEX_MATCH_NOTEMPTY: GRegexMatchFlags = 1024;
pub const GRegexMatchFlags_G_REGEX_MATCH_PARTIAL: GRegexMatchFlags = 32768;
pub const GRegexMatchFlags_G_REGEX_MATCH_NEWLINE_CR: GRegexMatchFlags = 1048576;
pub const GRegexMatchFlags_G_REGEX_MATCH_NEWLINE_LF: GRegexMatchFlags = 2097152;
pub const GRegexMatchFlags_G_REGEX_MATCH_NEWLINE_CRLF: GRegexMatchFlags = 3145728;
pub const GRegexMatchFlags_G_REGEX_MATCH_NEWLINE_ANY: GRegexMatchFlags = 4194304;
pub const GRegexMatchFlags_G_REGEX_MATCH_NEWLINE_ANYCRLF: GRegexMatchFlags = 5242880;
pub const GRegexMatchFlags_G_REGEX_MATCH_BSR_ANYCRLF: GRegexMatchFlags = 8388608;
pub const GRegexMatchFlags_G_REGEX_MATCH_BSR_ANY: GRegexMatchFlags = 16777216;
pub const GRegexMatchFlags_G_REGEX_MATCH_PARTIAL_SOFT: GRegexMatchFlags = 32768;
pub const GRegexMatchFlags_G_REGEX_MATCH_PARTIAL_HARD: GRegexMatchFlags = 134217728;
pub const GRegexMatchFlags_G_REGEX_MATCH_NOTEMPTY_ATSTART: GRegexMatchFlags = 268435456;
pub type GRegexMatchFlags = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GRegex {
    _unused: [u8; 0],
}
pub type GRegex = _GRegex;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GMatchInfo {
    _unused: [u8; 0],
}
pub type GMatchInfo = _GMatchInfo;
pub type GRegexEvalCallback = ::core::option::Option<
    unsafe extern "C" fn(
        match_info: *const GMatchInfo,
        result: *mut GString,
        user_data: gpointer,
    ) -> gboolean,
>;
extern "C" {
    pub fn _frida_g_regex_new(
        pattern: *const gchar,
        compile_options: GRegexCompileFlags,
        match_options: GRegexMatchFlags,
        error: *mut *mut GError,
    ) -> *mut GRegex;
}
extern "C" {
    pub fn _frida_g_regex_ref(regex: *mut GRegex) -> *mut GRegex;
}
extern "C" {
    pub fn _frida_g_regex_unref(regex: *mut GRegex);
}
extern "C" {
    pub fn _frida_g_regex_get_pattern(regex: *const GRegex) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_regex_get_max_backref(regex: *const GRegex) -> gint;
}
extern "C" {
    pub fn _frida_g_regex_get_capture_count(regex: *const GRegex) -> gint;
}
extern "C" {
    pub fn _frida_g_regex_get_has_cr_or_lf(regex: *const GRegex) -> gboolean;
}
extern "C" {
    pub fn _frida_g_regex_get_max_lookbehind(regex: *const GRegex) -> gint;
}
extern "C" {
    pub fn _frida_g_regex_get_string_number(regex: *const GRegex, name: *const gchar) -> gint;
}
extern "C" {
    pub fn _frida_g_regex_escape_string(string: *const gchar, length: gint) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_regex_escape_nul(string: *const gchar, length: gint) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_regex_get_compile_flags(regex: *const GRegex) -> GRegexCompileFlags;
}
extern "C" {
    pub fn _frida_g_regex_get_match_flags(regex: *const GRegex) -> GRegexMatchFlags;
}
extern "C" {
    pub fn _frida_g_regex_match_simple(
        pattern: *const gchar,
        string: *const gchar,
        compile_options: GRegexCompileFlags,
        match_options: GRegexMatchFlags,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_regex_match(
        regex: *const GRegex,
        string: *const gchar,
        match_options: GRegexMatchFlags,
        match_info: *mut *mut GMatchInfo,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_regex_match_full(
        regex: *const GRegex,
        string: *const gchar,
        string_len: gssize,
        start_position: gint,
        match_options: GRegexMatchFlags,
        match_info: *mut *mut GMatchInfo,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_regex_match_all(
        regex: *const GRegex,
        string: *const gchar,
        match_options: GRegexMatchFlags,
        match_info: *mut *mut GMatchInfo,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_regex_match_all_full(
        regex: *const GRegex,
        string: *const gchar,
        string_len: gssize,
        start_position: gint,
        match_options: GRegexMatchFlags,
        match_info: *mut *mut GMatchInfo,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_regex_split_simple(
        pattern: *const gchar,
        string: *const gchar,
        compile_options: GRegexCompileFlags,
        match_options: GRegexMatchFlags,
    ) -> *mut *mut gchar;
}
extern "C" {
    pub fn _frida_g_regex_split(
        regex: *const GRegex,
        string: *const gchar,
        match_options: GRegexMatchFlags,
    ) -> *mut *mut gchar;
}
extern "C" {
    pub fn _frida_g_regex_split_full(
        regex: *const GRegex,
        string: *const gchar,
        string_len: gssize,
        start_position: gint,
        match_options: GRegexMatchFlags,
        max_tokens: gint,
        error: *mut *mut GError,
    ) -> *mut *mut gchar;
}
extern "C" {
    pub fn _frida_g_regex_replace(
        regex: *const GRegex,
        string: *const gchar,
        string_len: gssize,
        start_position: gint,
        replacement: *const gchar,
        match_options: GRegexMatchFlags,
        error: *mut *mut GError,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_regex_replace_literal(
        regex: *const GRegex,
        string: *const gchar,
        string_len: gssize,
        start_position: gint,
        replacement: *const gchar,
        match_options: GRegexMatchFlags,
        error: *mut *mut GError,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_regex_replace_eval(
        regex: *const GRegex,
        string: *const gchar,
        string_len: gssize,
        start_position: gint,
        match_options: GRegexMatchFlags,
        eval: GRegexEvalCallback,
        user_data: gpointer,
        error: *mut *mut GError,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_regex_check_replacement(
        replacement: *const gchar,
        has_references: *mut gboolean,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_match_info_get_regex(match_info: *const GMatchInfo) -> *mut GRegex;
}
extern "C" {
    pub fn _frida_g_match_info_get_string(match_info: *const GMatchInfo) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_match_info_ref(match_info: *mut GMatchInfo) -> *mut GMatchInfo;
}
extern "C" {
    pub fn _frida_g_match_info_unref(match_info: *mut GMatchInfo);
}
extern "C" {
    pub fn _frida_g_match_info_free(match_info: *mut GMatchInfo);
}
extern "C" {
    pub fn _frida_g_match_info_next(
        match_info: *mut GMatchInfo,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_match_info_matches(match_info: *const GMatchInfo) -> gboolean;
}
extern "C" {
    pub fn _frida_g_match_info_get_match_count(match_info: *const GMatchInfo) -> gint;
}
extern "C" {
    pub fn _frida_g_match_info_is_partial_match(match_info: *const GMatchInfo) -> gboolean;
}
extern "C" {
    pub fn _frida_g_match_info_expand_references(
        match_info: *const GMatchInfo,
        string_to_expand: *const gchar,
        error: *mut *mut GError,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_match_info_fetch(match_info: *const GMatchInfo, match_num: gint) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_match_info_fetch_pos(
        match_info: *const GMatchInfo,
        match_num: gint,
        start_pos: *mut gint,
        end_pos: *mut gint,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_match_info_fetch_named(
        match_info: *const GMatchInfo,
        name: *const gchar,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_match_info_fetch_named_pos(
        match_info: *const GMatchInfo,
        name: *const gchar,
        start_pos: *mut gint,
        end_pos: *mut gint,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_match_info_fetch_all(match_info: *const GMatchInfo) -> *mut *mut gchar;
}
pub type GScanner = _GScanner;
pub type GScannerConfig = _GScannerConfig;
pub type GTokenValue = _GTokenValue;
pub type GScannerMsgFunc = ::core::option::Option<
    unsafe extern "C" fn(scanner: *mut GScanner, message: *mut gchar, error: gboolean),
>;
pub const GErrorType_G_ERR_UNKNOWN: GErrorType = 0;
pub const GErrorType_G_ERR_UNEXP_EOF: GErrorType = 1;
pub const GErrorType_G_ERR_UNEXP_EOF_IN_STRING: GErrorType = 2;
pub const GErrorType_G_ERR_UNEXP_EOF_IN_COMMENT: GErrorType = 3;
pub const GErrorType_G_ERR_NON_DIGIT_IN_CONST: GErrorType = 4;
pub const GErrorType_G_ERR_DIGIT_RADIX: GErrorType = 5;
pub const GErrorType_G_ERR_FLOAT_RADIX: GErrorType = 6;
pub const GErrorType_G_ERR_FLOAT_MALFORMED: GErrorType = 7;
pub type GErrorType = ::core::ffi::c_uint;
pub const GTokenType_G_TOKEN_EOF: GTokenType = 0;
pub const GTokenType_G_TOKEN_LEFT_PAREN: GTokenType = 40;
pub const GTokenType_G_TOKEN_RIGHT_PAREN: GTokenType = 41;
pub const GTokenType_G_TOKEN_LEFT_CURLY: GTokenType = 123;
pub const GTokenType_G_TOKEN_RIGHT_CURLY: GTokenType = 125;
pub const GTokenType_G_TOKEN_LEFT_BRACE: GTokenType = 91;
pub const GTokenType_G_TOKEN_RIGHT_BRACE: GTokenType = 93;
pub const GTokenType_G_TOKEN_EQUAL_SIGN: GTokenType = 61;
pub const GTokenType_G_TOKEN_COMMA: GTokenType = 44;
pub const GTokenType_G_TOKEN_NONE: GTokenType = 256;
pub const GTokenType_G_TOKEN_ERROR: GTokenType = 257;
pub const GTokenType_G_TOKEN_CHAR: GTokenType = 258;
pub const GTokenType_G_TOKEN_BINARY: GTokenType = 259;
pub const GTokenType_G_TOKEN_OCTAL: GTokenType = 260;
pub const GTokenType_G_TOKEN_INT: GTokenType = 261;
pub const GTokenType_G_TOKEN_HEX: GTokenType = 262;
pub const GTokenType_G_TOKEN_FLOAT: GTokenType = 263;
pub const GTokenType_G_TOKEN_STRING: GTokenType = 264;
pub const GTokenType_G_TOKEN_SYMBOL: GTokenType = 265;
pub const GTokenType_G_TOKEN_IDENTIFIER: GTokenType = 266;
pub const GTokenType_G_TOKEN_IDENTIFIER_NULL: GTokenType = 267;
pub const GTokenType_G_TOKEN_COMMENT_SINGLE: GTokenType = 268;
pub const GTokenType_G_TOKEN_COMMENT_MULTI: GTokenType = 269;
pub const GTokenType_G_TOKEN_LAST: GTokenType = 270;
pub type GTokenType = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _GTokenValue {
    pub v_symbol: gpointer,
    pub v_identifier: *mut gchar,
    pub v_binary: gulong,
    pub v_octal: gulong,
    pub v_int: gulong,
    pub v_int64: guint64,
    pub v_float: gdouble,
    pub v_hex: gulong,
    pub v_string: *mut gchar,
    pub v_comment: *mut gchar,
    pub v_char: guchar,
    pub v_error: guint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GScannerConfig {
    pub cset_skip_characters: *mut gchar,
    pub cset_identifier_first: *mut gchar,
    pub cset_identifier_nth: *mut gchar,
    pub cpair_comment_single: *mut gchar,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
    pub padding_dummy: guint,
}
impl _GScannerConfig {
    #[inline]
    pub fn case_sensitive(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_case_sensitive(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn skip_comment_multi(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_skip_comment_multi(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn skip_comment_single(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_skip_comment_single(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn scan_comment_multi(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_scan_comment_multi(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn scan_identifier(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_scan_identifier(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn scan_identifier_1char(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_scan_identifier_1char(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn scan_identifier_NULL(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_scan_identifier_NULL(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn scan_symbols(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_scan_symbols(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn scan_binary(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_scan_binary(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn scan_octal(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_scan_octal(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn scan_float(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_scan_float(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn scan_hex(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_scan_hex(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn scan_hex_dollar(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_scan_hex_dollar(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn scan_string_sq(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_scan_string_sq(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn scan_string_dq(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_scan_string_dq(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn numbers_2_int(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_numbers_2_int(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn int_2_float(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_int_2_float(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn identifier_2_string(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_identifier_2_string(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn char_2_token(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_char_2_token(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn symbol_2_token(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_symbol_2_token(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn scope_0_fallback(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_scope_0_fallback(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn store_int64(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_store_int64(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(21usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        case_sensitive: guint,
        skip_comment_multi: guint,
        skip_comment_single: guint,
        scan_comment_multi: guint,
        scan_identifier: guint,
        scan_identifier_1char: guint,
        scan_identifier_NULL: guint,
        scan_symbols: guint,
        scan_binary: guint,
        scan_octal: guint,
        scan_float: guint,
        scan_hex: guint,
        scan_hex_dollar: guint,
        scan_string_sq: guint,
        scan_string_dq: guint,
        numbers_2_int: guint,
        int_2_float: guint,
        identifier_2_string: guint,
        char_2_token: guint,
        symbol_2_token: guint,
        scope_0_fallback: guint,
        store_int64: guint,
    ) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let case_sensitive: u32 = unsafe { ::core::mem::transmute(case_sensitive) };
            case_sensitive as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let skip_comment_multi: u32 = unsafe { ::core::mem::transmute(skip_comment_multi) };
            skip_comment_multi as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let skip_comment_single: u32 = unsafe { ::core::mem::transmute(skip_comment_single) };
            skip_comment_single as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let scan_comment_multi: u32 = unsafe { ::core::mem::transmute(scan_comment_multi) };
            scan_comment_multi as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let scan_identifier: u32 = unsafe { ::core::mem::transmute(scan_identifier) };
            scan_identifier as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let scan_identifier_1char: u32 =
                unsafe { ::core::mem::transmute(scan_identifier_1char) };
            scan_identifier_1char as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let scan_identifier_NULL: u32 = unsafe { ::core::mem::transmute(scan_identifier_NULL) };
            scan_identifier_NULL as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let scan_symbols: u32 = unsafe { ::core::mem::transmute(scan_symbols) };
            scan_symbols as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let scan_binary: u32 = unsafe { ::core::mem::transmute(scan_binary) };
            scan_binary as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let scan_octal: u32 = unsafe { ::core::mem::transmute(scan_octal) };
            scan_octal as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let scan_float: u32 = unsafe { ::core::mem::transmute(scan_float) };
            scan_float as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let scan_hex: u32 = unsafe { ::core::mem::transmute(scan_hex) };
            scan_hex as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let scan_hex_dollar: u32 = unsafe { ::core::mem::transmute(scan_hex_dollar) };
            scan_hex_dollar as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let scan_string_sq: u32 = unsafe { ::core::mem::transmute(scan_string_sq) };
            scan_string_sq as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let scan_string_dq: u32 = unsafe { ::core::mem::transmute(scan_string_dq) };
            scan_string_dq as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let numbers_2_int: u32 = unsafe { ::core::mem::transmute(numbers_2_int) };
            numbers_2_int as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let int_2_float: u32 = unsafe { ::core::mem::transmute(int_2_float) };
            int_2_float as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let identifier_2_string: u32 = unsafe { ::core::mem::transmute(identifier_2_string) };
            identifier_2_string as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let char_2_token: u32 = unsafe { ::core::mem::transmute(char_2_token) };
            char_2_token as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let symbol_2_token: u32 = unsafe { ::core::mem::transmute(symbol_2_token) };
            symbol_2_token as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let scope_0_fallback: u32 = unsafe { ::core::mem::transmute(scope_0_fallback) };
            scope_0_fallback as u64
        });
        __bindgen_bitfield_unit.set(21usize, 1u8, {
            let store_int64: u32 = unsafe { ::core::mem::transmute(store_int64) };
            store_int64 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _GScanner {
    pub user_data: gpointer,
    pub max_parse_errors: guint,
    pub parse_errors: guint,
    pub input_name: *const gchar,
    pub qdata: *mut GData,
    pub config: *mut GScannerConfig,
    pub token: GTokenType,
    pub value: GTokenValue,
    pub line: guint,
    pub position: guint,
    pub next_token: GTokenType,
    pub next_value: GTokenValue,
    pub next_line: guint,
    pub next_position: guint,
    pub symbol_table: *mut GHashTable,
    pub input_fd: gint,
    pub text: *const gchar,
    pub text_end: *const gchar,
    pub buffer: *mut gchar,
    pub scope_id: guint,
    pub msg_handler: GScannerMsgFunc,
}
extern "C" {
    pub fn _frida_g_scanner_new(config_templ: *const GScannerConfig) -> *mut GScanner;
}
extern "C" {
    pub fn _frida_g_scanner_destroy(scanner: *mut GScanner);
}
extern "C" {
    pub fn _frida_g_scanner_input_file(scanner: *mut GScanner, input_fd: gint);
}
extern "C" {
    pub fn _frida_g_scanner_sync_file_offset(scanner: *mut GScanner);
}
extern "C" {
    pub fn _frida_g_scanner_input_text(scanner: *mut GScanner, text: *const gchar, text_len: guint);
}
extern "C" {
    pub fn _frida_g_scanner_get_next_token(scanner: *mut GScanner) -> GTokenType;
}
extern "C" {
    pub fn _frida_g_scanner_peek_next_token(scanner: *mut GScanner) -> GTokenType;
}
extern "C" {
    pub fn _frida_g_scanner_cur_token(scanner: *mut GScanner) -> GTokenType;
}
extern "C" {
    pub fn _frida_g_scanner_cur_value(scanner: *mut GScanner) -> GTokenValue;
}
extern "C" {
    pub fn _frida_g_scanner_cur_line(scanner: *mut GScanner) -> guint;
}
extern "C" {
    pub fn _frida_g_scanner_cur_position(scanner: *mut GScanner) -> guint;
}
extern "C" {
    pub fn _frida_g_scanner_eof(scanner: *mut GScanner) -> gboolean;
}
extern "C" {
    pub fn _frida_g_scanner_set_scope(scanner: *mut GScanner, scope_id: guint) -> guint;
}
extern "C" {
    pub fn _frida_g_scanner_scope_add_symbol(
        scanner: *mut GScanner,
        scope_id: guint,
        symbol: *const gchar,
        value: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_scanner_scope_remove_symbol(
        scanner: *mut GScanner,
        scope_id: guint,
        symbol: *const gchar,
    );
}
extern "C" {
    pub fn _frida_g_scanner_scope_lookup_symbol(
        scanner: *mut GScanner,
        scope_id: guint,
        symbol: *const gchar,
    ) -> gpointer;
}
extern "C" {
    pub fn _frida_g_scanner_scope_foreach_symbol(
        scanner: *mut GScanner,
        scope_id: guint,
        func: GHFunc,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_scanner_lookup_symbol(scanner: *mut GScanner, symbol: *const gchar)
        -> gpointer;
}
extern "C" {
    pub fn _frida_g_scanner_unexp_token(
        scanner: *mut GScanner,
        expected_token: GTokenType,
        identifier_spec: *const gchar,
        symbol_spec: *const gchar,
        symbol_name: *const gchar,
        message: *const gchar,
        is_error: gint,
    );
}
extern "C" {
    pub fn _frida_g_scanner_error(scanner: *mut GScanner, format: *const gchar, ...);
}
extern "C" {
    pub fn _frida_g_scanner_warn(scanner: *mut GScanner, format: *const gchar, ...);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSequence {
    _unused: [u8; 0],
}
pub type GSequence = _GSequence;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSequenceNode {
    _unused: [u8; 0],
}
pub type GSequenceIter = _GSequenceNode;
pub type GSequenceIterCompareFunc = ::core::option::Option<
    unsafe extern "C" fn(a: *mut GSequenceIter, b: *mut GSequenceIter, user_data: gpointer) -> gint,
>;
extern "C" {
    pub fn _frida_g_sequence_new(data_destroy: GDestroyNotify) -> *mut GSequence;
}
extern "C" {
    pub fn _frida_g_sequence_free(seq: *mut GSequence);
}
extern "C" {
    pub fn _frida_g_sequence_get_length(seq: *mut GSequence) -> gint;
}
extern "C" {
    pub fn _frida_g_sequence_foreach(seq: *mut GSequence, func: GFunc, user_data: gpointer);
}
extern "C" {
    pub fn _frida_g_sequence_foreach_range(
        begin: *mut GSequenceIter,
        end: *mut GSequenceIter,
        func: GFunc,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_sequence_sort(
        seq: *mut GSequence,
        cmp_func: GCompareDataFunc,
        cmp_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_sequence_sort_iter(
        seq: *mut GSequence,
        cmp_func: GSequenceIterCompareFunc,
        cmp_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_sequence_is_empty(seq: *mut GSequence) -> gboolean;
}
extern "C" {
    pub fn _frida_g_sequence_get_begin_iter(seq: *mut GSequence) -> *mut GSequenceIter;
}
extern "C" {
    pub fn _frida_g_sequence_get_end_iter(seq: *mut GSequence) -> *mut GSequenceIter;
}
extern "C" {
    pub fn _frida_g_sequence_get_iter_at_pos(seq: *mut GSequence, pos: gint) -> *mut GSequenceIter;
}
extern "C" {
    pub fn _frida_g_sequence_append(seq: *mut GSequence, data: gpointer) -> *mut GSequenceIter;
}
extern "C" {
    pub fn _frida_g_sequence_prepend(seq: *mut GSequence, data: gpointer) -> *mut GSequenceIter;
}
extern "C" {
    pub fn _frida_g_sequence_insert_before(
        iter: *mut GSequenceIter,
        data: gpointer,
    ) -> *mut GSequenceIter;
}
extern "C" {
    pub fn _frida_g_sequence_move(src: *mut GSequenceIter, dest: *mut GSequenceIter);
}
extern "C" {
    pub fn _frida_g_sequence_swap(a: *mut GSequenceIter, b: *mut GSequenceIter);
}
extern "C" {
    pub fn _frida_g_sequence_insert_sorted(
        seq: *mut GSequence,
        data: gpointer,
        cmp_func: GCompareDataFunc,
        cmp_data: gpointer,
    ) -> *mut GSequenceIter;
}
extern "C" {
    pub fn _frida_g_sequence_insert_sorted_iter(
        seq: *mut GSequence,
        data: gpointer,
        iter_cmp: GSequenceIterCompareFunc,
        cmp_data: gpointer,
    ) -> *mut GSequenceIter;
}
extern "C" {
    pub fn _frida_g_sequence_sort_changed(
        iter: *mut GSequenceIter,
        cmp_func: GCompareDataFunc,
        cmp_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_sequence_sort_changed_iter(
        iter: *mut GSequenceIter,
        iter_cmp: GSequenceIterCompareFunc,
        cmp_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_sequence_remove(iter: *mut GSequenceIter);
}
extern "C" {
    pub fn _frida_g_sequence_remove_range(begin: *mut GSequenceIter, end: *mut GSequenceIter);
}
extern "C" {
    pub fn _frida_g_sequence_move_range(
        dest: *mut GSequenceIter,
        begin: *mut GSequenceIter,
        end: *mut GSequenceIter,
    );
}
extern "C" {
    pub fn _frida_g_sequence_search(
        seq: *mut GSequence,
        data: gpointer,
        cmp_func: GCompareDataFunc,
        cmp_data: gpointer,
    ) -> *mut GSequenceIter;
}
extern "C" {
    pub fn _frida_g_sequence_search_iter(
        seq: *mut GSequence,
        data: gpointer,
        iter_cmp: GSequenceIterCompareFunc,
        cmp_data: gpointer,
    ) -> *mut GSequenceIter;
}
extern "C" {
    pub fn _frida_g_sequence_lookup(
        seq: *mut GSequence,
        data: gpointer,
        cmp_func: GCompareDataFunc,
        cmp_data: gpointer,
    ) -> *mut GSequenceIter;
}
extern "C" {
    pub fn _frida_g_sequence_lookup_iter(
        seq: *mut GSequence,
        data: gpointer,
        iter_cmp: GSequenceIterCompareFunc,
        cmp_data: gpointer,
    ) -> *mut GSequenceIter;
}
extern "C" {
    pub fn _frida_g_sequence_get(iter: *mut GSequenceIter) -> gpointer;
}
extern "C" {
    pub fn _frida_g_sequence_set(iter: *mut GSequenceIter, data: gpointer);
}
extern "C" {
    pub fn _frida_g_sequence_iter_is_begin(iter: *mut GSequenceIter) -> gboolean;
}
extern "C" {
    pub fn _frida_g_sequence_iter_is_end(iter: *mut GSequenceIter) -> gboolean;
}
extern "C" {
    pub fn _frida_g_sequence_iter_next(iter: *mut GSequenceIter) -> *mut GSequenceIter;
}
extern "C" {
    pub fn _frida_g_sequence_iter_prev(iter: *mut GSequenceIter) -> *mut GSequenceIter;
}
extern "C" {
    pub fn _frida_g_sequence_iter_get_position(iter: *mut GSequenceIter) -> gint;
}
extern "C" {
    pub fn _frida_g_sequence_iter_move(iter: *mut GSequenceIter, delta: gint)
        -> *mut GSequenceIter;
}
extern "C" {
    pub fn _frida_g_sequence_iter_get_sequence(iter: *mut GSequenceIter) -> *mut GSequence;
}
extern "C" {
    pub fn _frida_g_sequence_iter_compare(a: *mut GSequenceIter, b: *mut GSequenceIter) -> gint;
}
extern "C" {
    pub fn _frida_g_sequence_range_get_midpoint(
        begin: *mut GSequenceIter,
        end: *mut GSequenceIter,
    ) -> *mut GSequenceIter;
}
pub const GShellError_G_SHELL_ERROR_BAD_QUOTING: GShellError = 0;
pub const GShellError_G_SHELL_ERROR_EMPTY_STRING: GShellError = 1;
pub const GShellError_G_SHELL_ERROR_FAILED: GShellError = 2;
pub type GShellError = ::core::ffi::c_uint;
extern "C" {
    pub fn _frida_g_shell_error_quark() -> GQuark;
}
extern "C" {
    pub fn _frida_g_shell_quote(unquoted_string: *const gchar) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_shell_unquote(
        quoted_string: *const gchar,
        error: *mut *mut GError,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_shell_parse_argv(
        command_line: *const gchar,
        argcp: *mut gint,
        argvp: *mut *mut *mut gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_slice_alloc(block_size: gsize) -> gpointer;
}
extern "C" {
    pub fn _frida_g_slice_alloc0(block_size: gsize) -> gpointer;
}
extern "C" {
    pub fn _frida_g_slice_copy(block_size: gsize, mem_block: gconstpointer) -> gpointer;
}
extern "C" {
    pub fn _frida_g_slice_free1(block_size: gsize, mem_block: gpointer);
}
extern "C" {
    pub fn _frida_g_slice_free_chain_with_offset(
        block_size: gsize,
        mem_chain: gpointer,
        next_offset: gsize,
    );
}
pub const GSliceConfig_G_SLICE_CONFIG_ALWAYS_MALLOC: GSliceConfig = 1;
pub const GSliceConfig_G_SLICE_CONFIG_BYPASS_MAGAZINES: GSliceConfig = 2;
pub const GSliceConfig_G_SLICE_CONFIG_WORKING_SET_MSECS: GSliceConfig = 3;
pub const GSliceConfig_G_SLICE_CONFIG_COLOR_INCREMENT: GSliceConfig = 4;
pub const GSliceConfig_G_SLICE_CONFIG_CHUNK_SIZES: GSliceConfig = 5;
pub const GSliceConfig_G_SLICE_CONFIG_CONTENTION_COUNTER: GSliceConfig = 6;
pub type GSliceConfig = ::core::ffi::c_uint;
extern "C" {
    pub fn _frida_g_slice_set_config(ckey: GSliceConfig, value: gint64);
}
extern "C" {
    pub fn _frida_g_slice_get_config(ckey: GSliceConfig) -> gint64;
}
extern "C" {
    pub fn _frida_g_slice_get_config_state(
        ckey: GSliceConfig,
        address: gint64,
        n_values: *mut guint,
    ) -> *mut gint64;
}
pub const GSpawnError_G_SPAWN_ERROR_FORK: GSpawnError = 0;
pub const GSpawnError_G_SPAWN_ERROR_READ: GSpawnError = 1;
pub const GSpawnError_G_SPAWN_ERROR_CHDIR: GSpawnError = 2;
pub const GSpawnError_G_SPAWN_ERROR_ACCES: GSpawnError = 3;
pub const GSpawnError_G_SPAWN_ERROR_PERM: GSpawnError = 4;
pub const GSpawnError_G_SPAWN_ERROR_TOO_BIG: GSpawnError = 5;
pub const GSpawnError_G_SPAWN_ERROR_2BIG: GSpawnError = 5;
pub const GSpawnError_G_SPAWN_ERROR_NOEXEC: GSpawnError = 6;
pub const GSpawnError_G_SPAWN_ERROR_NAMETOOLONG: GSpawnError = 7;
pub const GSpawnError_G_SPAWN_ERROR_NOENT: GSpawnError = 8;
pub const GSpawnError_G_SPAWN_ERROR_NOMEM: GSpawnError = 9;
pub const GSpawnError_G_SPAWN_ERROR_NOTDIR: GSpawnError = 10;
pub const GSpawnError_G_SPAWN_ERROR_LOOP: GSpawnError = 11;
pub const GSpawnError_G_SPAWN_ERROR_TXTBUSY: GSpawnError = 12;
pub const GSpawnError_G_SPAWN_ERROR_IO: GSpawnError = 13;
pub const GSpawnError_G_SPAWN_ERROR_NFILE: GSpawnError = 14;
pub const GSpawnError_G_SPAWN_ERROR_MFILE: GSpawnError = 15;
pub const GSpawnError_G_SPAWN_ERROR_INVAL: GSpawnError = 16;
pub const GSpawnError_G_SPAWN_ERROR_ISDIR: GSpawnError = 17;
pub const GSpawnError_G_SPAWN_ERROR_LIBBAD: GSpawnError = 18;
pub const GSpawnError_G_SPAWN_ERROR_FAILED: GSpawnError = 19;
pub type GSpawnError = ::core::ffi::c_uint;
pub type GSpawnChildSetupFunc = ::core::option::Option<unsafe extern "C" fn(user_data: gpointer)>;
pub const GSpawnFlags_G_SPAWN_DEFAULT: GSpawnFlags = 0;
pub const GSpawnFlags_G_SPAWN_LEAVE_DESCRIPTORS_OPEN: GSpawnFlags = 1;
pub const GSpawnFlags_G_SPAWN_DO_NOT_REAP_CHILD: GSpawnFlags = 2;
pub const GSpawnFlags_G_SPAWN_SEARCH_PATH: GSpawnFlags = 4;
pub const GSpawnFlags_G_SPAWN_STDOUT_TO_DEV_NULL: GSpawnFlags = 8;
pub const GSpawnFlags_G_SPAWN_STDERR_TO_DEV_NULL: GSpawnFlags = 16;
pub const GSpawnFlags_G_SPAWN_CHILD_INHERITS_STDIN: GSpawnFlags = 32;
pub const GSpawnFlags_G_SPAWN_FILE_AND_ARGV_ZERO: GSpawnFlags = 64;
pub const GSpawnFlags_G_SPAWN_SEARCH_PATH_FROM_ENVP: GSpawnFlags = 128;
pub const GSpawnFlags_G_SPAWN_CLOEXEC_PIPES: GSpawnFlags = 256;
pub const GSpawnFlags_G_SPAWN_CHILD_INHERITS_STDOUT: GSpawnFlags = 512;
pub const GSpawnFlags_G_SPAWN_CHILD_INHERITS_STDERR: GSpawnFlags = 1024;
pub const GSpawnFlags_G_SPAWN_STDIN_FROM_DEV_NULL: GSpawnFlags = 2048;
pub type GSpawnFlags = ::core::ffi::c_uint;
extern "C" {
    pub fn _frida_g_spawn_error_quark() -> GQuark;
}
extern "C" {
    pub fn _frida_g_spawn_exit_error_quark() -> GQuark;
}
extern "C" {
    pub fn _frida_g_spawn_async(
        working_directory: *const gchar,
        argv: *mut *mut gchar,
        envp: *mut *mut gchar,
        flags: GSpawnFlags,
        child_setup: GSpawnChildSetupFunc,
        user_data: gpointer,
        child_pid: *mut GPid,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_spawn_async_with_pipes(
        working_directory: *const gchar,
        argv: *mut *mut gchar,
        envp: *mut *mut gchar,
        flags: GSpawnFlags,
        child_setup: GSpawnChildSetupFunc,
        user_data: gpointer,
        child_pid: *mut GPid,
        standard_input: *mut gint,
        standard_output: *mut gint,
        standard_error: *mut gint,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_spawn_async_with_pipes_and_fds(
        working_directory: *const gchar,
        argv: *const *const gchar,
        envp: *const *const gchar,
        flags: GSpawnFlags,
        child_setup: GSpawnChildSetupFunc,
        user_data: gpointer,
        stdin_fd: gint,
        stdout_fd: gint,
        stderr_fd: gint,
        source_fds: *const gint,
        target_fds: *const gint,
        n_fds: gsize,
        child_pid_out: *mut GPid,
        stdin_pipe_out: *mut gint,
        stdout_pipe_out: *mut gint,
        stderr_pipe_out: *mut gint,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_spawn_async_with_fds(
        working_directory: *const gchar,
        argv: *mut *mut gchar,
        envp: *mut *mut gchar,
        flags: GSpawnFlags,
        child_setup: GSpawnChildSetupFunc,
        user_data: gpointer,
        child_pid: *mut GPid,
        stdin_fd: gint,
        stdout_fd: gint,
        stderr_fd: gint,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_spawn_sync(
        working_directory: *const gchar,
        argv: *mut *mut gchar,
        envp: *mut *mut gchar,
        flags: GSpawnFlags,
        child_setup: GSpawnChildSetupFunc,
        user_data: gpointer,
        standard_output: *mut *mut gchar,
        standard_error: *mut *mut gchar,
        wait_status: *mut gint,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_spawn_command_line_sync(
        command_line: *const gchar,
        standard_output: *mut *mut gchar,
        standard_error: *mut *mut gchar,
        wait_status: *mut gint,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_spawn_command_line_async(
        command_line: *const gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_spawn_check_wait_status(wait_status: gint, error: *mut *mut GError)
        -> gboolean;
}
extern "C" {
    pub fn _frida_g_spawn_check_exit_status(wait_status: gint, error: *mut *mut GError)
        -> gboolean;
}
extern "C" {
    pub fn _frida_g_spawn_close_pid(pid: GPid);
}
pub const GAsciiType_G_ASCII_ALNUM: GAsciiType = 1;
pub const GAsciiType_G_ASCII_ALPHA: GAsciiType = 2;
pub const GAsciiType_G_ASCII_CNTRL: GAsciiType = 4;
pub const GAsciiType_G_ASCII_DIGIT: GAsciiType = 8;
pub const GAsciiType_G_ASCII_GRAPH: GAsciiType = 16;
pub const GAsciiType_G_ASCII_LOWER: GAsciiType = 32;
pub const GAsciiType_G_ASCII_PRINT: GAsciiType = 64;
pub const GAsciiType_G_ASCII_PUNCT: GAsciiType = 128;
pub const GAsciiType_G_ASCII_SPACE: GAsciiType = 256;
pub const GAsciiType_G_ASCII_UPPER: GAsciiType = 512;
pub const GAsciiType_G_ASCII_XDIGIT: GAsciiType = 1024;
pub type GAsciiType = ::core::ffi::c_uint;
extern "C" {
    pub static _frida_g_ascii_table: *const guint16;
}
extern "C" {
    pub fn _frida_g_ascii_tolower(c: gchar) -> gchar;
}
extern "C" {
    pub fn _frida_g_ascii_toupper(c: gchar) -> gchar;
}
extern "C" {
    pub fn _frida_g_ascii_digit_value(c: gchar) -> gint;
}
extern "C" {
    pub fn _frida_g_ascii_xdigit_value(c: gchar) -> gint;
}
extern "C" {
    pub fn _frida_g_strdelimit(
        string: *mut gchar,
        delimiters: *const gchar,
        new_delimiter: gchar,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_strcanon(
        string: *mut gchar,
        valid_chars: *const gchar,
        substitutor: gchar,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_strerror(errnum: gint) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_strsignal(signum: gint) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_strreverse(string: *mut gchar) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_strlcpy(dest: *mut gchar, src: *const gchar, dest_size: gsize) -> gsize;
}
extern "C" {
    pub fn _frida_g_strlcat(dest: *mut gchar, src: *const gchar, dest_size: gsize) -> gsize;
}
extern "C" {
    pub fn _frida_g_strstr_len(
        haystack: *const gchar,
        haystack_len: gssize,
        needle: *const gchar,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_strrstr(haystack: *const gchar, needle: *const gchar) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_strrstr_len(
        haystack: *const gchar,
        haystack_len: gssize,
        needle: *const gchar,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_str_has_suffix(str_: *const gchar, suffix: *const gchar) -> gboolean;
}
extern "C" {
    pub fn _frida_g_str_has_prefix(str_: *const gchar, prefix: *const gchar) -> gboolean;
}
extern "C" {
    pub fn _frida_g_strtod(nptr: *const gchar, endptr: *mut *mut gchar) -> gdouble;
}
extern "C" {
    pub fn _frida_g_ascii_strtod(nptr: *const gchar, endptr: *mut *mut gchar) -> gdouble;
}
extern "C" {
    pub fn _frida_g_ascii_strtoull(
        nptr: *const gchar,
        endptr: *mut *mut gchar,
        base: guint,
    ) -> guint64;
}
extern "C" {
    pub fn _frida_g_ascii_strtoll(
        nptr: *const gchar,
        endptr: *mut *mut gchar,
        base: guint,
    ) -> gint64;
}
extern "C" {
    pub fn _frida_g_ascii_dtostr(buffer: *mut gchar, buf_len: gint, d: gdouble) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_ascii_formatd(
        buffer: *mut gchar,
        buf_len: gint,
        format: *const gchar,
        d: gdouble,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_strchug(string: *mut gchar) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_strchomp(string: *mut gchar) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_ascii_strcasecmp(s1: *const gchar, s2: *const gchar) -> gint;
}
extern "C" {
    pub fn _frida_g_ascii_strncasecmp(s1: *const gchar, s2: *const gchar, n: gsize) -> gint;
}
extern "C" {
    pub fn _frida_g_ascii_strdown(str_: *const gchar, len: gssize) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_ascii_strup(str_: *const gchar, len: gssize) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_str_is_ascii(str_: *const gchar) -> gboolean;
}
extern "C" {
    pub fn _frida_g_strcasecmp(s1: *const gchar, s2: *const gchar) -> gint;
}
extern "C" {
    pub fn _frida_g_strncasecmp(s1: *const gchar, s2: *const gchar, n: guint) -> gint;
}
extern "C" {
    pub fn _frida_g_strdown(string: *mut gchar) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_strup(string: *mut gchar) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_strdup(str_: *const gchar) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_strdup_printf(format: *const gchar, ...) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_strdup_vprintf(format: *const gchar, args: va_list) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_strndup(str_: *const gchar, n: gsize) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_strnfill(length: gsize, fill_char: gchar) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_strconcat(string1: *const gchar, ...) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_strjoin(separator: *const gchar, ...) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_strcompress(source: *const gchar) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_strescape(source: *const gchar, exceptions: *const gchar) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_memdup(mem: gconstpointer, byte_size: guint) -> gpointer;
}
extern "C" {
    pub fn _frida_g_memdup2(mem: gconstpointer, byte_size: gsize) -> gpointer;
}
pub type GStrv = *mut *mut gchar;
extern "C" {
    pub fn _frida_g_strsplit(
        string: *const gchar,
        delimiter: *const gchar,
        max_tokens: gint,
    ) -> *mut *mut gchar;
}
extern "C" {
    pub fn _frida_g_strsplit_set(
        string: *const gchar,
        delimiters: *const gchar,
        max_tokens: gint,
    ) -> *mut *mut gchar;
}
extern "C" {
    pub fn _frida_g_strjoinv(separator: *const gchar, str_array: *mut *mut gchar) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_strfreev(str_array: *mut *mut gchar);
}
extern "C" {
    pub fn _frida_g_strdupv(str_array: *mut *mut gchar) -> *mut *mut gchar;
}
extern "C" {
    pub fn _frida_g_strv_length(str_array: *mut *mut gchar) -> guint;
}
extern "C" {
    pub fn _frida_g_stpcpy(dest: *mut gchar, src: *const ::core::ffi::c_char) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_str_to_ascii(str_: *const gchar, from_locale: *const gchar) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_str_tokenize_and_fold(
        string: *const gchar,
        translit_locale: *const gchar,
        ascii_alternates: *mut *mut *mut gchar,
    ) -> *mut *mut gchar;
}
extern "C" {
    pub fn _frida_g_str_match_string(
        search_term: *const gchar,
        potential_hit: *const gchar,
        accept_alternates: gboolean,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_strv_contains(strv: *const *const gchar, str_: *const gchar) -> gboolean;
}
extern "C" {
    pub fn _frida_g_strv_equal(strv1: *const *const gchar, strv2: *const *const gchar) -> gboolean;
}
pub const GNumberParserError_G_NUMBER_PARSER_ERROR_INVALID: GNumberParserError = 0;
pub const GNumberParserError_G_NUMBER_PARSER_ERROR_OUT_OF_BOUNDS: GNumberParserError = 1;
pub type GNumberParserError = ::core::ffi::c_uint;
extern "C" {
    pub fn _frida_g_number_parser_error_quark() -> GQuark;
}
extern "C" {
    pub fn _frida_g_ascii_string_to_signed(
        str_: *const gchar,
        base: guint,
        min: gint64,
        max: gint64,
        out_num: *mut gint64,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_ascii_string_to_unsigned(
        str_: *const gchar,
        base: guint,
        min: guint64,
        max: guint64,
        out_num: *mut guint64,
        error: *mut *mut GError,
    ) -> gboolean;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GStringChunk {
    _unused: [u8; 0],
}
pub type GStringChunk = _GStringChunk;
extern "C" {
    pub fn _frida_g_string_chunk_new(size: gsize) -> *mut GStringChunk;
}
extern "C" {
    pub fn _frida_g_string_chunk_free(chunk: *mut GStringChunk);
}
extern "C" {
    pub fn _frida_g_string_chunk_clear(chunk: *mut GStringChunk);
}
extern "C" {
    pub fn _frida_g_string_chunk_insert(
        chunk: *mut GStringChunk,
        string: *const gchar,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_string_chunk_insert_len(
        chunk: *mut GStringChunk,
        string: *const gchar,
        len: gssize,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_string_chunk_insert_const(
        chunk: *mut GStringChunk,
        string: *const gchar,
    ) -> *mut gchar;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GStrvBuilder {
    _unused: [u8; 0],
}
pub type GStrvBuilder = _GStrvBuilder;
extern "C" {
    pub fn _frida_g_strv_builder_new() -> *mut GStrvBuilder;
}
extern "C" {
    pub fn _frida_g_strv_builder_unref(builder: *mut GStrvBuilder);
}
extern "C" {
    pub fn _frida_g_strv_builder_ref(builder: *mut GStrvBuilder) -> *mut GStrvBuilder;
}
extern "C" {
    pub fn _frida_g_strv_builder_add(builder: *mut GStrvBuilder, value: *const ::core::ffi::c_char);
}
extern "C" {
    pub fn _frida_g_strv_builder_addv(
        builder: *mut GStrvBuilder,
        value: *mut *const ::core::ffi::c_char,
    );
}
extern "C" {
    pub fn _frida_g_strv_builder_add_many(builder: *mut GStrvBuilder, ...);
}
extern "C" {
    pub fn _frida_g_strv_builder_end(builder: *mut GStrvBuilder) -> GStrv;
}
extern "C" {
    pub fn __errno() -> *mut ::core::ffi::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GTestCase {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GTestSuite {
    _unused: [u8; 0],
}
pub type GTestFunc = ::core::option::Option<unsafe extern "C" fn()>;
pub type GTestDataFunc = ::core::option::Option<unsafe extern "C" fn(user_data: gconstpointer)>;
pub type GTestFixtureFunc =
    ::core::option::Option<unsafe extern "C" fn(fixture: gpointer, user_data: gconstpointer)>;
extern "C" {
    pub fn _frida_g_strcmp0(
        str1: *const ::core::ffi::c_char,
        str2: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _frida_g_test_minimized_result(
        minimized_quantity: f64,
        format: *const ::core::ffi::c_char,
        ...
    );
}
extern "C" {
    pub fn _frida_g_test_maximized_result(
        maximized_quantity: f64,
        format: *const ::core::ffi::c_char,
        ...
    );
}
extern "C" {
    pub fn _frida_g_test_init(
        argc: *mut ::core::ffi::c_int,
        argv: *mut *mut *mut ::core::ffi::c_char,
        ...
    );
}
extern "C" {
    pub fn _frida_g_test_subprocess() -> gboolean;
}
extern "C" {
    pub fn _frida_g_test_run() -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _frida_g_test_add_func(testpath: *const ::core::ffi::c_char, test_func: GTestFunc);
}
extern "C" {
    pub fn _frida_g_test_add_data_func(
        testpath: *const ::core::ffi::c_char,
        test_data: gconstpointer,
        test_func: GTestDataFunc,
    );
}
extern "C" {
    pub fn _frida_g_test_add_data_func_full(
        testpath: *const ::core::ffi::c_char,
        test_data: gpointer,
        test_func: GTestDataFunc,
        data_free_func: GDestroyNotify,
    );
}
extern "C" {
    pub fn _frida_g_test_get_path() -> *const ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_test_fail();
}
extern "C" {
    pub fn _frida_g_test_fail_printf(format: *const ::core::ffi::c_char, ...);
}
extern "C" {
    pub fn _frida_g_test_incomplete(msg: *const gchar);
}
extern "C" {
    pub fn _frida_g_test_incomplete_printf(format: *const ::core::ffi::c_char, ...);
}
extern "C" {
    pub fn _frida_g_test_skip(msg: *const gchar);
}
extern "C" {
    pub fn _frida_g_test_skip_printf(format: *const ::core::ffi::c_char, ...);
}
extern "C" {
    pub fn _frida_g_test_failed() -> gboolean;
}
extern "C" {
    pub fn _frida_g_test_set_nonfatal_assertions();
}
extern "C" {
    pub fn _frida_g_test_message(format: *const ::core::ffi::c_char, ...);
}
extern "C" {
    pub fn _frida_g_test_bug_base(uri_pattern: *const ::core::ffi::c_char);
}
extern "C" {
    pub fn _frida_g_test_bug(bug_uri_snippet: *const ::core::ffi::c_char);
}
extern "C" {
    pub fn _frida_g_test_summary(summary: *const ::core::ffi::c_char);
}
extern "C" {
    pub fn _frida_g_test_timer_start();
}
extern "C" {
    pub fn _frida_g_test_timer_elapsed() -> f64;
}
extern "C" {
    pub fn _frida_g_test_timer_last() -> f64;
}
extern "C" {
    pub fn _frida_g_test_queue_free(gfree_pointer: gpointer);
}
extern "C" {
    pub fn _frida_g_test_queue_destroy(destroy_func: GDestroyNotify, destroy_data: gpointer);
}
pub const GTestTrapFlags_G_TEST_TRAP_DEFAULT: GTestTrapFlags = 0;
pub const GTestTrapFlags_G_TEST_TRAP_SILENCE_STDOUT: GTestTrapFlags = 128;
pub const GTestTrapFlags_G_TEST_TRAP_SILENCE_STDERR: GTestTrapFlags = 256;
pub const GTestTrapFlags_G_TEST_TRAP_INHERIT_STDIN: GTestTrapFlags = 512;
pub type GTestTrapFlags = ::core::ffi::c_uint;
extern "C" {
    pub fn _frida_g_test_trap_fork(
        usec_timeout: guint64,
        test_trap_flags: GTestTrapFlags,
    ) -> gboolean;
}
pub const GTestSubprocessFlags_G_TEST_SUBPROCESS_DEFAULT: GTestSubprocessFlags = 0;
pub const GTestSubprocessFlags_G_TEST_SUBPROCESS_INHERIT_STDIN: GTestSubprocessFlags = 1;
pub const GTestSubprocessFlags_G_TEST_SUBPROCESS_INHERIT_STDOUT: GTestSubprocessFlags = 2;
pub const GTestSubprocessFlags_G_TEST_SUBPROCESS_INHERIT_STDERR: GTestSubprocessFlags = 4;
pub type GTestSubprocessFlags = ::core::ffi::c_uint;
extern "C" {
    pub fn _frida_g_test_trap_subprocess(
        test_path: *const ::core::ffi::c_char,
        usec_timeout: guint64,
        test_flags: GTestSubprocessFlags,
    );
}
extern "C" {
    pub fn _frida_g_test_trap_has_passed() -> gboolean;
}
extern "C" {
    pub fn _frida_g_test_trap_reached_timeout() -> gboolean;
}
extern "C" {
    pub fn _frida_g_test_rand_int() -> gint32;
}
extern "C" {
    pub fn _frida_g_test_rand_int_range(begin: gint32, end: gint32) -> gint32;
}
extern "C" {
    pub fn _frida_g_test_rand_double() -> f64;
}
extern "C" {
    pub fn _frida_g_test_rand_double_range(range_start: f64, range_end: f64) -> f64;
}
extern "C" {
    pub fn _frida_g_test_create_case(
        test_name: *const ::core::ffi::c_char,
        data_size: gsize,
        test_data: gconstpointer,
        data_setup: GTestFixtureFunc,
        data_test: GTestFixtureFunc,
        data_teardown: GTestFixtureFunc,
    ) -> *mut GTestCase;
}
extern "C" {
    pub fn _frida_g_test_create_suite(suite_name: *const ::core::ffi::c_char) -> *mut GTestSuite;
}
extern "C" {
    pub fn _frida_g_test_get_root() -> *mut GTestSuite;
}
extern "C" {
    pub fn _frida_g_test_suite_add(suite: *mut GTestSuite, test_case: *mut GTestCase);
}
extern "C" {
    pub fn _frida_g_test_suite_add_suite(suite: *mut GTestSuite, nestedsuite: *mut GTestSuite);
}
extern "C" {
    pub fn _frida_g_test_run_suite(suite: *mut GTestSuite) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _frida_g_test_case_free(test_case: *mut GTestCase);
}
extern "C" {
    pub fn _frida_g_test_suite_free(suite: *mut GTestSuite);
}
extern "C" {
    pub fn _frida_g_test_trap_assertions(
        domain: *const ::core::ffi::c_char,
        file: *const ::core::ffi::c_char,
        line: ::core::ffi::c_int,
        func: *const ::core::ffi::c_char,
        assertion_flags: guint64,
        pattern: *const ::core::ffi::c_char,
    );
}
extern "C" {
    pub fn _frida_g_assertion_message(
        domain: *const ::core::ffi::c_char,
        file: *const ::core::ffi::c_char,
        line: ::core::ffi::c_int,
        func: *const ::core::ffi::c_char,
        message: *const ::core::ffi::c_char,
    );
}
extern "C" {
    pub fn _frida_g_assertion_message_expr(
        domain: *const ::core::ffi::c_char,
        file: *const ::core::ffi::c_char,
        line: ::core::ffi::c_int,
        func: *const ::core::ffi::c_char,
        expr: *const ::core::ffi::c_char,
    ) -> !;
}
extern "C" {
    pub fn _frida_g_assertion_message_cmpstr(
        domain: *const ::core::ffi::c_char,
        file: *const ::core::ffi::c_char,
        line: ::core::ffi::c_int,
        func: *const ::core::ffi::c_char,
        expr: *const ::core::ffi::c_char,
        arg1: *const ::core::ffi::c_char,
        cmp: *const ::core::ffi::c_char,
        arg2: *const ::core::ffi::c_char,
    );
}
extern "C" {
    pub fn _frida_g_assertion_message_cmpstrv(
        domain: *const ::core::ffi::c_char,
        file: *const ::core::ffi::c_char,
        line: ::core::ffi::c_int,
        func: *const ::core::ffi::c_char,
        expr: *const ::core::ffi::c_char,
        arg1: *const *const ::core::ffi::c_char,
        arg2: *const *const ::core::ffi::c_char,
        first_wrong_idx: gsize,
    );
}
extern "C" {
    pub fn _frida_g_assertion_message_cmpnum(
        domain: *const ::core::ffi::c_char,
        file: *const ::core::ffi::c_char,
        line: ::core::ffi::c_int,
        func: *const ::core::ffi::c_char,
        expr: *const ::core::ffi::c_char,
        arg1: u128,
        cmp: *const ::core::ffi::c_char,
        arg2: u128,
        numtype: ::core::ffi::c_char,
    );
}
extern "C" {
    pub fn _frida_g_assertion_message_error(
        domain: *const ::core::ffi::c_char,
        file: *const ::core::ffi::c_char,
        line: ::core::ffi::c_int,
        func: *const ::core::ffi::c_char,
        expr: *const ::core::ffi::c_char,
        error: *const GError,
        error_domain: GQuark,
        error_code: ::core::ffi::c_int,
    );
}
extern "C" {
    pub fn _frida_g_test_add_vtable(
        testpath: *const ::core::ffi::c_char,
        data_size: gsize,
        test_data: gconstpointer,
        data_setup: GTestFixtureFunc,
        data_test: GTestFixtureFunc,
        data_teardown: GTestFixtureFunc,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GTestConfig {
    pub test_initialized: gboolean,
    pub test_quick: gboolean,
    pub test_perf: gboolean,
    pub test_verbose: gboolean,
    pub test_quiet: gboolean,
    pub test_undefined: gboolean,
}
extern "C" {
    pub static _frida_g_test_config_vars: *const GTestConfig;
}
pub const GTestResult_G_TEST_RUN_SUCCESS: GTestResult = 0;
pub const GTestResult_G_TEST_RUN_SKIPPED: GTestResult = 1;
pub const GTestResult_G_TEST_RUN_FAILURE: GTestResult = 2;
pub const GTestResult_G_TEST_RUN_INCOMPLETE: GTestResult = 3;
pub type GTestResult = ::core::ffi::c_uint;
pub const GTestLogType_G_TEST_LOG_NONE: GTestLogType = 0;
pub const GTestLogType_G_TEST_LOG_ERROR: GTestLogType = 1;
pub const GTestLogType_G_TEST_LOG_START_BINARY: GTestLogType = 2;
pub const GTestLogType_G_TEST_LOG_LIST_CASE: GTestLogType = 3;
pub const GTestLogType_G_TEST_LOG_SKIP_CASE: GTestLogType = 4;
pub const GTestLogType_G_TEST_LOG_START_CASE: GTestLogType = 5;
pub const GTestLogType_G_TEST_LOG_STOP_CASE: GTestLogType = 6;
pub const GTestLogType_G_TEST_LOG_MIN_RESULT: GTestLogType = 7;
pub const GTestLogType_G_TEST_LOG_MAX_RESULT: GTestLogType = 8;
pub const GTestLogType_G_TEST_LOG_MESSAGE: GTestLogType = 9;
pub const GTestLogType_G_TEST_LOG_START_SUITE: GTestLogType = 10;
pub const GTestLogType_G_TEST_LOG_STOP_SUITE: GTestLogType = 11;
pub type GTestLogType = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GTestLogMsg {
    pub log_type: GTestLogType,
    pub n_strings: guint,
    pub strings: *mut *mut gchar,
    pub n_nums: guint,
    pub nums: *mut u128,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GTestLogBuffer {
    pub data: *mut GString,
    pub msgs: *mut GSList,
}
extern "C" {
    pub fn _frida_g_test_log_type_name(log_type: GTestLogType) -> *const ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_test_log_buffer_new() -> *mut GTestLogBuffer;
}
extern "C" {
    pub fn _frida_g_test_log_buffer_free(tbuffer: *mut GTestLogBuffer);
}
extern "C" {
    pub fn _frida_g_test_log_buffer_push(
        tbuffer: *mut GTestLogBuffer,
        n_bytes: guint,
        bytes: *const guint8,
    );
}
extern "C" {
    pub fn _frida_g_test_log_buffer_pop(tbuffer: *mut GTestLogBuffer) -> *mut GTestLogMsg;
}
extern "C" {
    pub fn _frida_g_test_log_msg_free(tmsg: *mut GTestLogMsg);
}
pub type GTestLogFatalFunc = ::core::option::Option<
    unsafe extern "C" fn(
        log_domain: *const gchar,
        log_level: GLogLevelFlags,
        message: *const gchar,
        user_data: gpointer,
    ) -> gboolean,
>;
extern "C" {
    pub fn _frida_g_test_log_set_fatal_handler(log_func: GTestLogFatalFunc, user_data: gpointer);
}
extern "C" {
    pub fn _frida_g_test_expect_message(
        log_domain: *const gchar,
        log_level: GLogLevelFlags,
        pattern: *const gchar,
    );
}
extern "C" {
    pub fn _frida_g_test_assert_expected_messages_internal(
        domain: *const ::core::ffi::c_char,
        file: *const ::core::ffi::c_char,
        line: ::core::ffi::c_int,
        func: *const ::core::ffi::c_char,
    );
}
pub const GTestFileType_G_TEST_DIST: GTestFileType = 0;
pub const GTestFileType_G_TEST_BUILT: GTestFileType = 1;
pub type GTestFileType = ::core::ffi::c_uint;
extern "C" {
    pub fn _frida_g_test_build_filename(
        file_type: GTestFileType,
        first_path: *const gchar,
        ...
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_test_get_dir(file_type: GTestFileType) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_test_get_filename(
        file_type: GTestFileType,
        first_path: *const gchar,
        ...
    ) -> *const gchar;
}
pub type GThreadPool = _GThreadPool;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GThreadPool {
    pub func: GFunc,
    pub user_data: gpointer,
    pub exclusive: gboolean,
}
extern "C" {
    pub fn _frida_g_thread_pool_new(
        func: GFunc,
        user_data: gpointer,
        max_threads: gint,
        exclusive: gboolean,
        error: *mut *mut GError,
    ) -> *mut GThreadPool;
}
extern "C" {
    pub fn _frida_g_thread_pool_new_full(
        func: GFunc,
        user_data: gpointer,
        item_free_func: GDestroyNotify,
        max_threads: gint,
        exclusive: gboolean,
        error: *mut *mut GError,
    ) -> *mut GThreadPool;
}
extern "C" {
    pub fn _frida_g_thread_pool_free(pool: *mut GThreadPool, immediate: gboolean, wait_: gboolean);
}
extern "C" {
    pub fn _frida_g_thread_pool_push(
        pool: *mut GThreadPool,
        data: gpointer,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_thread_pool_unprocessed(pool: *mut GThreadPool) -> guint;
}
extern "C" {
    pub fn _frida_g_thread_pool_set_sort_function(
        pool: *mut GThreadPool,
        func: GCompareDataFunc,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_thread_pool_move_to_front(pool: *mut GThreadPool, data: gpointer) -> gboolean;
}
extern "C" {
    pub fn _frida_g_thread_pool_set_max_threads(
        pool: *mut GThreadPool,
        max_threads: gint,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_thread_pool_get_max_threads(pool: *mut GThreadPool) -> gint;
}
extern "C" {
    pub fn _frida_g_thread_pool_get_num_threads(pool: *mut GThreadPool) -> guint;
}
extern "C" {
    pub fn _frida_g_thread_pool_set_max_unused_threads(max_threads: gint);
}
extern "C" {
    pub fn _frida_g_thread_pool_get_max_unused_threads() -> gint;
}
extern "C" {
    pub fn _frida_g_thread_pool_get_num_unused_threads() -> guint;
}
extern "C" {
    pub fn _frida_g_thread_pool_stop_unused_threads();
}
extern "C" {
    pub fn _frida_g_thread_pool_set_max_idle_time(interval: guint);
}
extern "C" {
    pub fn _frida_g_thread_pool_get_max_idle_time() -> guint;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTimer {
    _unused: [u8; 0],
}
pub type GTimer = _GTimer;
extern "C" {
    pub fn _frida_g_timer_new() -> *mut GTimer;
}
extern "C" {
    pub fn _frida_g_timer_destroy(timer: *mut GTimer);
}
extern "C" {
    pub fn _frida_g_timer_start(timer: *mut GTimer);
}
extern "C" {
    pub fn _frida_g_timer_stop(timer: *mut GTimer);
}
extern "C" {
    pub fn _frida_g_timer_reset(timer: *mut GTimer);
}
extern "C" {
    pub fn _frida_g_timer_continue(timer: *mut GTimer);
}
extern "C" {
    pub fn _frida_g_timer_elapsed(timer: *mut GTimer, microseconds: *mut gulong) -> gdouble;
}
extern "C" {
    pub fn _frida_g_timer_is_active(timer: *mut GTimer) -> gboolean;
}
extern "C" {
    pub fn _frida_g_usleep(microseconds: gulong);
}
extern "C" {
    pub fn _frida_g_time_val_add(time_: *mut GTimeVal, microseconds: glong);
}
extern "C" {
    pub fn _frida_g_time_val_from_iso8601(iso_date: *const gchar, time_: *mut GTimeVal)
        -> gboolean;
}
extern "C" {
    pub fn _frida_g_time_val_to_iso8601(time_: *mut GTimeVal) -> *mut gchar;
}
pub type GTrashStack = _GTrashStack;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTrashStack {
    pub next: *mut GTrashStack,
}
extern "C" {
    pub fn _frida_g_trash_stack_push(stack_p: *mut *mut GTrashStack, data_p: gpointer);
}
extern "C" {
    pub fn _frida_g_trash_stack_pop(stack_p: *mut *mut GTrashStack) -> gpointer;
}
extern "C" {
    pub fn _frida_g_trash_stack_peek(stack_p: *mut *mut GTrashStack) -> gpointer;
}
extern "C" {
    pub fn _frida_g_trash_stack_height(stack_p: *mut *mut GTrashStack) -> guint;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTree {
    _unused: [u8; 0],
}
pub type GTree = _GTree;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTreeNode {
    _unused: [u8; 0],
}
pub type GTreeNode = _GTreeNode;
pub type GTraverseFunc = ::core::option::Option<
    unsafe extern "C" fn(key: gpointer, value: gpointer, user_data: gpointer) -> gboolean,
>;
pub type GTraverseNodeFunc = ::core::option::Option<
    unsafe extern "C" fn(node: *mut GTreeNode, user_data: gpointer) -> gboolean,
>;
extern "C" {
    pub fn _frida_g_tree_new(key_compare_func: GCompareFunc) -> *mut GTree;
}
extern "C" {
    pub fn _frida_g_tree_new_with_data(
        key_compare_func: GCompareDataFunc,
        key_compare_data: gpointer,
    ) -> *mut GTree;
}
extern "C" {
    pub fn _frida_g_tree_new_full(
        key_compare_func: GCompareDataFunc,
        key_compare_data: gpointer,
        key_destroy_func: GDestroyNotify,
        value_destroy_func: GDestroyNotify,
    ) -> *mut GTree;
}
extern "C" {
    pub fn _frida_g_tree_node_first(tree: *mut GTree) -> *mut GTreeNode;
}
extern "C" {
    pub fn _frida_g_tree_node_last(tree: *mut GTree) -> *mut GTreeNode;
}
extern "C" {
    pub fn _frida_g_tree_node_previous(node: *mut GTreeNode) -> *mut GTreeNode;
}
extern "C" {
    pub fn _frida_g_tree_node_next(node: *mut GTreeNode) -> *mut GTreeNode;
}
extern "C" {
    pub fn _frida_g_tree_ref(tree: *mut GTree) -> *mut GTree;
}
extern "C" {
    pub fn _frida_g_tree_unref(tree: *mut GTree);
}
extern "C" {
    pub fn _frida_g_tree_destroy(tree: *mut GTree);
}
extern "C" {
    pub fn _frida_g_tree_insert_node(
        tree: *mut GTree,
        key: gpointer,
        value: gpointer,
    ) -> *mut GTreeNode;
}
extern "C" {
    pub fn _frida_g_tree_insert(tree: *mut GTree, key: gpointer, value: gpointer);
}
extern "C" {
    pub fn _frida_g_tree_replace_node(
        tree: *mut GTree,
        key: gpointer,
        value: gpointer,
    ) -> *mut GTreeNode;
}
extern "C" {
    pub fn _frida_g_tree_replace(tree: *mut GTree, key: gpointer, value: gpointer);
}
extern "C" {
    pub fn _frida_g_tree_remove(tree: *mut GTree, key: gconstpointer) -> gboolean;
}
extern "C" {
    pub fn _frida_g_tree_remove_all(tree: *mut GTree);
}
extern "C" {
    pub fn _frida_g_tree_steal(tree: *mut GTree, key: gconstpointer) -> gboolean;
}
extern "C" {
    pub fn _frida_g_tree_node_key(node: *mut GTreeNode) -> gpointer;
}
extern "C" {
    pub fn _frida_g_tree_node_value(node: *mut GTreeNode) -> gpointer;
}
extern "C" {
    pub fn _frida_g_tree_lookup_node(tree: *mut GTree, key: gconstpointer) -> *mut GTreeNode;
}
extern "C" {
    pub fn _frida_g_tree_lookup(tree: *mut GTree, key: gconstpointer) -> gpointer;
}
extern "C" {
    pub fn _frida_g_tree_lookup_extended(
        tree: *mut GTree,
        lookup_key: gconstpointer,
        orig_key: *mut gpointer,
        value: *mut gpointer,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_tree_foreach(tree: *mut GTree, func: GTraverseFunc, user_data: gpointer);
}
extern "C" {
    pub fn _frida_g_tree_foreach_node(
        tree: *mut GTree,
        func: GTraverseNodeFunc,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_tree_traverse(
        tree: *mut GTree,
        traverse_func: GTraverseFunc,
        traverse_type: GTraverseType,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_tree_search_node(
        tree: *mut GTree,
        search_func: GCompareFunc,
        user_data: gconstpointer,
    ) -> *mut GTreeNode;
}
extern "C" {
    pub fn _frida_g_tree_search(
        tree: *mut GTree,
        search_func: GCompareFunc,
        user_data: gconstpointer,
    ) -> gpointer;
}
extern "C" {
    pub fn _frida_g_tree_lower_bound(tree: *mut GTree, key: gconstpointer) -> *mut GTreeNode;
}
extern "C" {
    pub fn _frida_g_tree_upper_bound(tree: *mut GTree, key: gconstpointer) -> *mut GTreeNode;
}
extern "C" {
    pub fn _frida_g_tree_height(tree: *mut GTree) -> gint;
}
extern "C" {
    pub fn _frida_g_tree_nnodes(tree: *mut GTree) -> gint;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GUri {
    _unused: [u8; 0],
}
pub type GUri = _GUri;
extern "C" {
    pub fn _frida_g_uri_ref(uri: *mut GUri) -> *mut GUri;
}
extern "C" {
    pub fn _frida_g_uri_unref(uri: *mut GUri);
}
pub const GUriFlags_G_URI_FLAGS_NONE: GUriFlags = 0;
pub const GUriFlags_G_URI_FLAGS_PARSE_RELAXED: GUriFlags = 1;
pub const GUriFlags_G_URI_FLAGS_HAS_PASSWORD: GUriFlags = 2;
pub const GUriFlags_G_URI_FLAGS_HAS_AUTH_PARAMS: GUriFlags = 4;
pub const GUriFlags_G_URI_FLAGS_ENCODED: GUriFlags = 8;
pub const GUriFlags_G_URI_FLAGS_NON_DNS: GUriFlags = 16;
pub const GUriFlags_G_URI_FLAGS_ENCODED_QUERY: GUriFlags = 32;
pub const GUriFlags_G_URI_FLAGS_ENCODED_PATH: GUriFlags = 64;
pub const GUriFlags_G_URI_FLAGS_ENCODED_FRAGMENT: GUriFlags = 128;
pub const GUriFlags_G_URI_FLAGS_SCHEME_NORMALIZE: GUriFlags = 256;
pub type GUriFlags = ::core::ffi::c_uint;
extern "C" {
    pub fn _frida_g_uri_split(
        uri_ref: *const gchar,
        flags: GUriFlags,
        scheme: *mut *mut gchar,
        userinfo: *mut *mut gchar,
        host: *mut *mut gchar,
        port: *mut gint,
        path: *mut *mut gchar,
        query: *mut *mut gchar,
        fragment: *mut *mut gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_uri_split_with_user(
        uri_ref: *const gchar,
        flags: GUriFlags,
        scheme: *mut *mut gchar,
        user: *mut *mut gchar,
        password: *mut *mut gchar,
        auth_params: *mut *mut gchar,
        host: *mut *mut gchar,
        port: *mut gint,
        path: *mut *mut gchar,
        query: *mut *mut gchar,
        fragment: *mut *mut gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_uri_split_network(
        uri_string: *const gchar,
        flags: GUriFlags,
        scheme: *mut *mut gchar,
        host: *mut *mut gchar,
        port: *mut gint,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_uri_is_valid(
        uri_string: *const gchar,
        flags: GUriFlags,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_uri_join(
        flags: GUriFlags,
        scheme: *const gchar,
        userinfo: *const gchar,
        host: *const gchar,
        port: gint,
        path: *const gchar,
        query: *const gchar,
        fragment: *const gchar,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_uri_join_with_user(
        flags: GUriFlags,
        scheme: *const gchar,
        user: *const gchar,
        password: *const gchar,
        auth_params: *const gchar,
        host: *const gchar,
        port: gint,
        path: *const gchar,
        query: *const gchar,
        fragment: *const gchar,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_uri_parse(
        uri_string: *const gchar,
        flags: GUriFlags,
        error: *mut *mut GError,
    ) -> *mut GUri;
}
extern "C" {
    pub fn _frida_g_uri_parse_relative(
        base_uri: *mut GUri,
        uri_ref: *const gchar,
        flags: GUriFlags,
        error: *mut *mut GError,
    ) -> *mut GUri;
}
extern "C" {
    pub fn _frida_g_uri_resolve_relative(
        base_uri_string: *const gchar,
        uri_ref: *const gchar,
        flags: GUriFlags,
        error: *mut *mut GError,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_uri_build(
        flags: GUriFlags,
        scheme: *const gchar,
        userinfo: *const gchar,
        host: *const gchar,
        port: gint,
        path: *const gchar,
        query: *const gchar,
        fragment: *const gchar,
    ) -> *mut GUri;
}
extern "C" {
    pub fn _frida_g_uri_build_with_user(
        flags: GUriFlags,
        scheme: *const gchar,
        user: *const gchar,
        password: *const gchar,
        auth_params: *const gchar,
        host: *const gchar,
        port: gint,
        path: *const gchar,
        query: *const gchar,
        fragment: *const gchar,
    ) -> *mut GUri;
}
pub const GUriHideFlags_G_URI_HIDE_NONE: GUriHideFlags = 0;
pub const GUriHideFlags_G_URI_HIDE_USERINFO: GUriHideFlags = 1;
pub const GUriHideFlags_G_URI_HIDE_PASSWORD: GUriHideFlags = 2;
pub const GUriHideFlags_G_URI_HIDE_AUTH_PARAMS: GUriHideFlags = 4;
pub const GUriHideFlags_G_URI_HIDE_QUERY: GUriHideFlags = 8;
pub const GUriHideFlags_G_URI_HIDE_FRAGMENT: GUriHideFlags = 16;
pub type GUriHideFlags = ::core::ffi::c_uint;
extern "C" {
    pub fn _frida_g_uri_to_string(uri: *mut GUri) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_uri_to_string_partial(
        uri: *mut GUri,
        flags: GUriHideFlags,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_uri_get_scheme(uri: *mut GUri) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_uri_get_userinfo(uri: *mut GUri) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_uri_get_user(uri: *mut GUri) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_uri_get_password(uri: *mut GUri) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_uri_get_auth_params(uri: *mut GUri) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_uri_get_host(uri: *mut GUri) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_uri_get_port(uri: *mut GUri) -> gint;
}
extern "C" {
    pub fn _frida_g_uri_get_path(uri: *mut GUri) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_uri_get_query(uri: *mut GUri) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_uri_get_fragment(uri: *mut GUri) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_uri_get_flags(uri: *mut GUri) -> GUriFlags;
}
pub const GUriParamsFlags_G_URI_PARAMS_NONE: GUriParamsFlags = 0;
pub const GUriParamsFlags_G_URI_PARAMS_CASE_INSENSITIVE: GUriParamsFlags = 1;
pub const GUriParamsFlags_G_URI_PARAMS_WWW_FORM: GUriParamsFlags = 2;
pub const GUriParamsFlags_G_URI_PARAMS_PARSE_RELAXED: GUriParamsFlags = 4;
pub type GUriParamsFlags = ::core::ffi::c_uint;
extern "C" {
    pub fn _frida_g_uri_parse_params(
        params: *const gchar,
        length: gssize,
        separators: *const gchar,
        flags: GUriParamsFlags,
        error: *mut *mut GError,
    ) -> *mut GHashTable;
}
pub type GUriParamsIter = _GUriParamsIter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GUriParamsIter {
    pub dummy0: gint,
    pub dummy1: gpointer,
    pub dummy2: gpointer,
    pub dummy3: [guint8; 256usize],
}
extern "C" {
    pub fn _frida_g_uri_params_iter_init(
        iter: *mut GUriParamsIter,
        params: *const gchar,
        length: gssize,
        separators: *const gchar,
        flags: GUriParamsFlags,
    );
}
extern "C" {
    pub fn _frida_g_uri_params_iter_next(
        iter: *mut GUriParamsIter,
        attribute: *mut *mut gchar,
        value: *mut *mut gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_uri_error_quark() -> GQuark;
}
pub const GUriError_G_URI_ERROR_FAILED: GUriError = 0;
pub const GUriError_G_URI_ERROR_BAD_SCHEME: GUriError = 1;
pub const GUriError_G_URI_ERROR_BAD_USER: GUriError = 2;
pub const GUriError_G_URI_ERROR_BAD_PASSWORD: GUriError = 3;
pub const GUriError_G_URI_ERROR_BAD_AUTH_PARAMS: GUriError = 4;
pub const GUriError_G_URI_ERROR_BAD_HOST: GUriError = 5;
pub const GUriError_G_URI_ERROR_BAD_PORT: GUriError = 6;
pub const GUriError_G_URI_ERROR_BAD_PATH: GUriError = 7;
pub const GUriError_G_URI_ERROR_BAD_QUERY: GUriError = 8;
pub const GUriError_G_URI_ERROR_BAD_FRAGMENT: GUriError = 9;
pub type GUriError = ::core::ffi::c_uint;
extern "C" {
    pub fn _frida_g_uri_unescape_string(
        escaped_string: *const ::core::ffi::c_char,
        illegal_characters: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_uri_unescape_segment(
        escaped_string: *const ::core::ffi::c_char,
        escaped_string_end: *const ::core::ffi::c_char,
        illegal_characters: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_uri_parse_scheme(uri: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_uri_peek_scheme(uri: *const ::core::ffi::c_char) -> *const ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_uri_escape_string(
        unescaped: *const ::core::ffi::c_char,
        reserved_chars_allowed: *const ::core::ffi::c_char,
        allow_utf8: gboolean,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_uri_unescape_bytes(
        escaped_string: *const ::core::ffi::c_char,
        length: gssize,
        illegal_characters: *const ::core::ffi::c_char,
        error: *mut *mut GError,
    ) -> *mut GBytes;
}
extern "C" {
    pub fn _frida_g_uri_escape_bytes(
        unescaped: *const guint8,
        length: gsize,
        reserved_chars_allowed: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_uuid_string_is_valid(str_: *const gchar) -> gboolean;
}
extern "C" {
    pub fn _frida_g_uuid_string_random() -> *mut gchar;
}
extern "C" {
    pub static _frida_glib_major_version: guint;
}
extern "C" {
    pub static _frida_glib_minor_version: guint;
}
extern "C" {
    pub static _frida_glib_micro_version: guint;
}
extern "C" {
    pub static _frida_glib_interface_age: guint;
}
extern "C" {
    pub static _frida_glib_binary_age: guint;
}
extern "C" {
    pub fn _frida_glib_check_version(
        required_major: guint,
        required_minor: guint,
        required_micro: guint,
    ) -> *const gchar;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GAllocator {
    _unused: [u8; 0],
}
pub type GAllocator = _GAllocator;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GMemChunk {
    _unused: [u8; 0],
}
pub type GMemChunk = _GMemChunk;
extern "C" {
    pub fn _frida_g_mem_chunk_new(
        name: *const gchar,
        atom_size: gint,
        area_size: gsize,
        type_: gint,
    ) -> *mut GMemChunk;
}
extern "C" {
    pub fn _frida_g_mem_chunk_destroy(mem_chunk: *mut GMemChunk);
}
extern "C" {
    pub fn _frida_g_mem_chunk_alloc(mem_chunk: *mut GMemChunk) -> gpointer;
}
extern "C" {
    pub fn _frida_g_mem_chunk_alloc0(mem_chunk: *mut GMemChunk) -> gpointer;
}
extern "C" {
    pub fn _frida_g_mem_chunk_free(mem_chunk: *mut GMemChunk, mem: gpointer);
}
extern "C" {
    pub fn _frida_g_mem_chunk_clean(mem_chunk: *mut GMemChunk);
}
extern "C" {
    pub fn _frida_g_mem_chunk_reset(mem_chunk: *mut GMemChunk);
}
extern "C" {
    pub fn _frida_g_mem_chunk_print(mem_chunk: *mut GMemChunk);
}
extern "C" {
    pub fn _frida_g_mem_chunk_info();
}
extern "C" {
    pub fn _frida_g_blow_chunks();
}
extern "C" {
    pub fn _frida_g_allocator_new(name: *const gchar, n_preallocs: guint) -> *mut GAllocator;
}
extern "C" {
    pub fn _frida_g_allocator_free(allocator: *mut GAllocator);
}
extern "C" {
    pub fn _frida_g_list_push_allocator(allocator: *mut GAllocator);
}
extern "C" {
    pub fn _frida_g_list_pop_allocator();
}
extern "C" {
    pub fn _frida_g_slist_push_allocator(allocator: *mut GAllocator);
}
extern "C" {
    pub fn _frida_g_slist_pop_allocator();
}
extern "C" {
    pub fn _frida_g_node_push_allocator(allocator: *mut GAllocator);
}
extern "C" {
    pub fn _frida_g_node_pop_allocator();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GCache {
    _unused: [u8; 0],
}
pub type GCache = _GCache;
pub type GCacheNewFunc = ::core::option::Option<unsafe extern "C" fn(key: gpointer) -> gpointer>;
pub type GCacheDupFunc = ::core::option::Option<unsafe extern "C" fn(value: gpointer) -> gpointer>;
pub type GCacheDestroyFunc = ::core::option::Option<unsafe extern "C" fn(value: gpointer)>;
extern "C" {
    pub fn _frida_g_cache_new(
        value_new_func: GCacheNewFunc,
        value_destroy_func: GCacheDestroyFunc,
        key_dup_func: GCacheDupFunc,
        key_destroy_func: GCacheDestroyFunc,
        hash_key_func: GHashFunc,
        hash_value_func: GHashFunc,
        key_equal_func: GEqualFunc,
    ) -> *mut GCache;
}
extern "C" {
    pub fn _frida_g_cache_destroy(cache: *mut GCache);
}
extern "C" {
    pub fn _frida_g_cache_insert(cache: *mut GCache, key: gpointer) -> gpointer;
}
extern "C" {
    pub fn _frida_g_cache_remove(cache: *mut GCache, value: gconstpointer);
}
extern "C" {
    pub fn _frida_g_cache_key_foreach(cache: *mut GCache, func: GHFunc, user_data: gpointer);
}
extern "C" {
    pub fn _frida_g_cache_value_foreach(cache: *mut GCache, func: GHFunc, user_data: gpointer);
}
pub type GCompletion = _GCompletion;
pub type GCompletionFunc =
    ::core::option::Option<unsafe extern "C" fn(arg1: gpointer) -> *mut gchar>;
pub type GCompletionStrncmpFunc = ::core::option::Option<
    unsafe extern "C" fn(s1: *const gchar, s2: *const gchar, n: gsize) -> gint,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GCompletion {
    pub items: *mut GList,
    pub func: GCompletionFunc,
    pub prefix: *mut gchar,
    pub cache: *mut GList,
    pub strncmp_func: GCompletionStrncmpFunc,
}
extern "C" {
    pub fn _frida_g_completion_new(func: GCompletionFunc) -> *mut GCompletion;
}
extern "C" {
    pub fn _frida_g_completion_add_items(cmp: *mut GCompletion, items: *mut GList);
}
extern "C" {
    pub fn _frida_g_completion_remove_items(cmp: *mut GCompletion, items: *mut GList);
}
extern "C" {
    pub fn _frida_g_completion_clear_items(cmp: *mut GCompletion);
}
extern "C" {
    pub fn _frida_g_completion_complete(
        cmp: *mut GCompletion,
        prefix: *const gchar,
        new_prefix: *mut *mut gchar,
    ) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_completion_complete_utf8(
        cmp: *mut GCompletion,
        prefix: *const gchar,
        new_prefix: *mut *mut gchar,
    ) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_completion_set_compare(
        cmp: *mut GCompletion,
        strncmp_func: GCompletionStrncmpFunc,
    );
}
extern "C" {
    pub fn _frida_g_completion_free(cmp: *mut GCompletion);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GRelation {
    _unused: [u8; 0],
}
pub type GRelation = _GRelation;
pub type GTuples = _GTuples;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTuples {
    pub len: guint,
}
extern "C" {
    pub fn _frida_g_relation_new(fields: gint) -> *mut GRelation;
}
extern "C" {
    pub fn _frida_g_relation_destroy(relation: *mut GRelation);
}
extern "C" {
    pub fn _frida_g_relation_index(
        relation: *mut GRelation,
        field: gint,
        hash_func: GHashFunc,
        key_equal_func: GEqualFunc,
    );
}
extern "C" {
    pub fn _frida_g_relation_insert(relation: *mut GRelation, ...);
}
extern "C" {
    pub fn _frida_g_relation_delete(
        relation: *mut GRelation,
        key: gconstpointer,
        field: gint,
    ) -> gint;
}
extern "C" {
    pub fn _frida_g_relation_select(
        relation: *mut GRelation,
        key: gconstpointer,
        field: gint,
    ) -> *mut GTuples;
}
extern "C" {
    pub fn _frida_g_relation_count(
        relation: *mut GRelation,
        key: gconstpointer,
        field: gint,
    ) -> gint;
}
extern "C" {
    pub fn _frida_g_relation_exists(relation: *mut GRelation, ...) -> gboolean;
}
extern "C" {
    pub fn _frida_g_relation_print(relation: *mut GRelation);
}
extern "C" {
    pub fn _frida_g_tuples_destroy(tuples: *mut GTuples);
}
extern "C" {
    pub fn _frida_g_tuples_index(tuples: *mut GTuples, index_: gint, field: gint) -> gpointer;
}
pub const GThreadPriority_G_THREAD_PRIORITY_LOW: GThreadPriority = 0;
pub const GThreadPriority_G_THREAD_PRIORITY_NORMAL: GThreadPriority = 1;
pub const GThreadPriority_G_THREAD_PRIORITY_HIGH: GThreadPriority = 2;
pub const GThreadPriority_G_THREAD_PRIORITY_URGENT: GThreadPriority = 3;
pub type GThreadPriority = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GThread {
    pub func: GThreadFunc,
    pub data: gpointer,
    pub joinable: gboolean,
    pub priority: GThreadPriority,
}
pub type GThreadFunctions = _GThreadFunctions;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GThreadFunctions {
    pub mutex_new: ::core::option::Option<unsafe extern "C" fn() -> *mut GMutex>,
    pub mutex_lock: ::core::option::Option<unsafe extern "C" fn(mutex: *mut GMutex)>,
    pub mutex_trylock: ::core::option::Option<unsafe extern "C" fn(mutex: *mut GMutex) -> gboolean>,
    pub mutex_unlock: ::core::option::Option<unsafe extern "C" fn(mutex: *mut GMutex)>,
    pub mutex_free: ::core::option::Option<unsafe extern "C" fn(mutex: *mut GMutex)>,
    pub cond_new: ::core::option::Option<unsafe extern "C" fn() -> *mut GCond>,
    pub cond_signal: ::core::option::Option<unsafe extern "C" fn(cond: *mut GCond)>,
    pub cond_broadcast: ::core::option::Option<unsafe extern "C" fn(cond: *mut GCond)>,
    pub cond_wait:
        ::core::option::Option<unsafe extern "C" fn(cond: *mut GCond, mutex: *mut GMutex)>,
    pub cond_timed_wait: ::core::option::Option<
        unsafe extern "C" fn(
            cond: *mut GCond,
            mutex: *mut GMutex,
            end_time: *mut GTimeVal,
        ) -> gboolean,
    >,
    pub cond_free: ::core::option::Option<unsafe extern "C" fn(cond: *mut GCond)>,
    pub private_new:
        ::core::option::Option<unsafe extern "C" fn(destructor: GDestroyNotify) -> *mut GPrivate>,
    pub private_get:
        ::core::option::Option<unsafe extern "C" fn(private_key: *mut GPrivate) -> gpointer>,
    pub private_set:
        ::core::option::Option<unsafe extern "C" fn(private_key: *mut GPrivate, data: gpointer)>,
    pub thread_create: ::core::option::Option<
        unsafe extern "C" fn(
            func: GThreadFunc,
            data: gpointer,
            stack_size: gulong,
            joinable: gboolean,
            bound: gboolean,
            priority: GThreadPriority,
            thread: gpointer,
            error: *mut *mut GError,
        ),
    >,
    pub thread_yield: ::core::option::Option<unsafe extern "C" fn()>,
    pub thread_join: ::core::option::Option<unsafe extern "C" fn(thread: gpointer)>,
    pub thread_exit: ::core::option::Option<unsafe extern "C" fn()>,
    pub thread_set_priority:
        ::core::option::Option<unsafe extern "C" fn(thread: gpointer, priority: GThreadPriority)>,
    pub thread_self: ::core::option::Option<unsafe extern "C" fn(thread: gpointer)>,
    pub thread_equal: ::core::option::Option<
        unsafe extern "C" fn(thread1: gpointer, thread2: gpointer) -> gboolean,
    >,
}
extern "C" {
    pub static mut _frida_g_thread_functions_for_glib_use: GThreadFunctions;
}
extern "C" {
    pub static mut _frida_g_thread_use_default_impl: gboolean;
}
extern "C" {
    pub static mut _frida_g_thread_gettime:
        ::core::option::Option<unsafe extern "C" fn() -> guint64>;
}
extern "C" {
    pub fn _frida_g_thread_create(
        func: GThreadFunc,
        data: gpointer,
        joinable: gboolean,
        error: *mut *mut GError,
    ) -> *mut GThread;
}
extern "C" {
    pub fn _frida_g_thread_create_full(
        func: GThreadFunc,
        data: gpointer,
        stack_size: gulong,
        joinable: gboolean,
        bound: gboolean,
        priority: GThreadPriority,
        error: *mut *mut GError,
    ) -> *mut GThread;
}
extern "C" {
    pub fn _frida_g_thread_set_priority(thread: *mut GThread, priority: GThreadPriority);
}
extern "C" {
    pub fn _frida_g_thread_foreach(thread_func: GFunc, user_data: gpointer);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clone_args {
    pub flags: __u64,
    pub pidfd: __u64,
    pub child_tid: __u64,
    pub parent_tid: __u64,
    pub exit_signal: __u64,
    pub stack: __u64,
    pub stack_size: __u64,
    pub tls: __u64,
    pub set_tid: __u64,
    pub set_tid_size: __u64,
    pub cgroup: __u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_param {
    pub sched_priority: ::core::ffi::c_int,
}
extern "C" {
    pub fn sched_setscheduler(
        __pid: pid_t,
        __policy: ::core::ffi::c_int,
        __param: *const sched_param,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sched_getscheduler(__pid: pid_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sched_yield() -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sched_get_priority_max(__policy: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sched_get_priority_min(__policy: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sched_setparam(__pid: pid_t, __param: *const sched_param) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sched_getparam(__pid: pid_t, __param: *mut sched_param) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sched_rr_get_interval(__pid: pid_t, __quantum: *mut timespec) -> ::core::ffi::c_int;
}
pub const PTHREAD_MUTEX_NORMAL: _bindgen_ty_1 = 0;
pub const PTHREAD_MUTEX_RECURSIVE: _bindgen_ty_1 = 1;
pub const PTHREAD_MUTEX_ERRORCHECK: _bindgen_ty_1 = 2;
pub const PTHREAD_MUTEX_ERRORCHECK_NP: _bindgen_ty_1 = 2;
pub const PTHREAD_MUTEX_RECURSIVE_NP: _bindgen_ty_1 = 1;
pub const PTHREAD_MUTEX_DEFAULT: _bindgen_ty_1 = 0;
pub type _bindgen_ty_1 = ::core::ffi::c_uint;
pub const PTHREAD_RWLOCK_PREFER_READER_NP: _bindgen_ty_2 = 0;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP: _bindgen_ty_2 = 1;
pub type _bindgen_ty_2 = ::core::ffi::c_uint;
extern "C" {
    pub fn pthread_atfork(
        __prepare: ::core::option::Option<unsafe extern "C" fn()>,
        __parent: ::core::option::Option<unsafe extern "C" fn()>,
        __child: ::core::option::Option<unsafe extern "C" fn()>,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_attr_destroy(__attr: *mut pthread_attr_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_attr_getdetachstate(
        __attr: *const pthread_attr_t,
        __state: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_attr_getguardsize(
        __attr: *const pthread_attr_t,
        __size: *mut usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_attr_getinheritsched(
        __attr: *const pthread_attr_t,
        __flag: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedparam(
        __attr: *const pthread_attr_t,
        __param: *mut sched_param,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedpolicy(
        __attr: *const pthread_attr_t,
        __policy: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_attr_getscope(
        __attr: *const pthread_attr_t,
        __scope: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_attr_getstack(
        __attr: *const pthread_attr_t,
        __addr: *mut *mut ::core::ffi::c_void,
        __size: *mut usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_attr_getstacksize(
        __attr: *const pthread_attr_t,
        __size: *mut usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_attr_init(__attr: *mut pthread_attr_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_attr_setdetachstate(
        __attr: *mut pthread_attr_t,
        __state: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_attr_setguardsize(
        __attr: *mut pthread_attr_t,
        __size: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_attr_setinheritsched(
        __attr: *mut pthread_attr_t,
        __flag: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedparam(
        __attr: *mut pthread_attr_t,
        __param: *const sched_param,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedpolicy(
        __attr: *mut pthread_attr_t,
        __policy: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_attr_setscope(
        __attr: *mut pthread_attr_t,
        __scope: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_attr_setstack(
        __attr: *mut pthread_attr_t,
        __addr: *mut ::core::ffi::c_void,
        __size: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_attr_setstacksize(
        __addr: *mut pthread_attr_t,
        __size: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_condattr_destroy(__attr: *mut pthread_condattr_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_condattr_getclock(
        __attr: *const pthread_condattr_t,
        __clock: *mut clockid_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_condattr_getpshared(
        __attr: *const pthread_condattr_t,
        __shared: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_condattr_init(__attr: *mut pthread_condattr_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_condattr_setclock(
        __attr: *mut pthread_condattr_t,
        __clock: clockid_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_condattr_setpshared(
        __attr: *mut pthread_condattr_t,
        __shared: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_cond_broadcast(__cond: *mut pthread_cond_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_cond_clockwait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
        __clock: clockid_t,
        __timeout: *const timespec,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_cond_destroy(__cond: *mut pthread_cond_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_cond_init(
        __cond: *mut pthread_cond_t,
        __attr: *const pthread_condattr_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_cond_signal(__cond: *mut pthread_cond_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_cond_timedwait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
        __timeout: *const timespec,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_cond_timedwait_monotonic_np(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
        __timeout: *const timespec,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_cond_wait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_create(
        __pthread_ptr: *mut pthread_t,
        __attr: *const pthread_attr_t,
        __start_routine: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void) -> *mut ::core::ffi::c_void,
        >,
        arg1: *mut ::core::ffi::c_void,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_detach(__pthread: pthread_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_exit(__return_value: *mut ::core::ffi::c_void) -> !;
}
extern "C" {
    pub fn pthread_equal(__lhs: pthread_t, __rhs: pthread_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_getattr_np(
        __pthread: pthread_t,
        __attr: *mut pthread_attr_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_getcpuclockid(
        __pthread: pthread_t,
        __clock: *mut clockid_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_getschedparam(
        __pthread: pthread_t,
        __policy: *mut ::core::ffi::c_int,
        __param: *mut sched_param,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_getspecific(__key: pthread_key_t) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn pthread_gettid_np(__pthread: pthread_t) -> pid_t;
}
extern "C" {
    pub fn pthread_join(
        __pthread: pthread_t,
        __return_value_ptr: *mut *mut ::core::ffi::c_void,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_key_create(
        __key_ptr: *mut pthread_key_t,
        __key_destructor: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void),
        >,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_key_delete(__key: pthread_key_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_destroy(__attr: *mut pthread_mutexattr_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getpshared(
        __attr: *const pthread_mutexattr_t,
        __shared: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_gettype(
        __attr: *const pthread_mutexattr_t,
        __type: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprotocol(
        __attr: *const pthread_mutexattr_t,
        __protocol: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_init(__attr: *mut pthread_mutexattr_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setpshared(
        __attr: *mut pthread_mutexattr_t,
        __shared: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_settype(
        __attr: *mut pthread_mutexattr_t,
        __type: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprotocol(
        __attr: *mut pthread_mutexattr_t,
        __protocol: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_mutex_clocklock(
        __mutex: *mut pthread_mutex_t,
        __clock: clockid_t,
        __abstime: *const timespec,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_mutex_destroy(__mutex: *mut pthread_mutex_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_mutex_init(
        __mutex: *mut pthread_mutex_t,
        __attr: *const pthread_mutexattr_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_mutex_lock(__mutex: *mut pthread_mutex_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_mutex_timedlock(
        __mutex: *mut pthread_mutex_t,
        __timeout: *const timespec,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_mutex_timedlock_monotonic_np(
        __mutex: *mut pthread_mutex_t,
        __timeout: *const timespec,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_mutex_trylock(__mutex: *mut pthread_mutex_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_mutex_unlock(__mutex: *mut pthread_mutex_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_once(
        __once: *mut pthread_once_t,
        __init_routine: ::core::option::Option<unsafe extern "C" fn()>,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_init(__attr: *mut pthread_rwlockattr_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_destroy(__attr: *mut pthread_rwlockattr_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getpshared(
        __attr: *const pthread_rwlockattr_t,
        __shared: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setpshared(
        __attr: *mut pthread_rwlockattr_t,
        __shared: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getkind_np(
        __attr: *const pthread_rwlockattr_t,
        __kind: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setkind_np(
        __attr: *mut pthread_rwlockattr_t,
        __kind: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_rwlock_clockrdlock(
        __rwlock: *mut pthread_rwlock_t,
        __clock: clockid_t,
        __timeout: *const timespec,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_rwlock_clockwrlock(
        __rwlock: *mut pthread_rwlock_t,
        __clock: clockid_t,
        __timeout: *const timespec,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_rwlock_destroy(__rwlock: *mut pthread_rwlock_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_rwlock_init(
        __rwlock: *mut pthread_rwlock_t,
        __attr: *const pthread_rwlockattr_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_rwlock_rdlock(__rwlock: *mut pthread_rwlock_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_rwlock_timedrdlock(
        __rwlock: *mut pthread_rwlock_t,
        __timeout: *const timespec,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_rwlock_timedrdlock_monotonic_np(
        __rwlock: *mut pthread_rwlock_t,
        __timeout: *const timespec,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_rwlock_timedwrlock(
        __rwlock: *mut pthread_rwlock_t,
        __timeout: *const timespec,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_rwlock_timedwrlock_monotonic_np(
        __rwlock: *mut pthread_rwlock_t,
        __timeout: *const timespec,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_rwlock_tryrdlock(__rwlock: *mut pthread_rwlock_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_rwlock_trywrlock(__rwlock: *mut pthread_rwlock_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_rwlock_unlock(__rwlock: *mut pthread_rwlock_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_rwlock_wrlock(__rwlock: *mut pthread_rwlock_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_init(__attr: *mut pthread_barrierattr_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_destroy(__attr: *mut pthread_barrierattr_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_getpshared(
        __attr: *const pthread_barrierattr_t,
        __shared: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_setpshared(
        __attr: *mut pthread_barrierattr_t,
        __shared: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_barrier_init(
        __barrier: *mut pthread_barrier_t,
        __attr: *const pthread_barrierattr_t,
        __count: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_barrier_destroy(__barrier: *mut pthread_barrier_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_barrier_wait(__barrier: *mut pthread_barrier_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_spin_destroy(__spinlock: *mut pthread_spinlock_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_spin_init(
        __spinlock: *mut pthread_spinlock_t,
        __shared: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_spin_lock(__spinlock: *mut pthread_spinlock_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_spin_trylock(__spinlock: *mut pthread_spinlock_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_spin_unlock(__spinlock: *mut pthread_spinlock_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_self() -> pthread_t;
}
extern "C" {
    pub fn pthread_setname_np(
        __pthread: pthread_t,
        __name: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_setschedparam(
        __pthread: pthread_t,
        __policy: ::core::ffi::c_int,
        __param: *const sched_param,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_setschedprio(
        __pthread: pthread_t,
        __priority: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pthread_setspecific(
        __key: pthread_key_t,
        __value: *const ::core::ffi::c_void,
    ) -> ::core::ffi::c_int;
}
pub type __pthread_cleanup_func_t =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cleanup_t {
    pub __cleanup_prev: *mut __pthread_cleanup_t,
    pub __cleanup_routine: __pthread_cleanup_func_t,
    pub __cleanup_arg: *mut ::core::ffi::c_void,
}
extern "C" {
    pub fn __pthread_cleanup_push(
        c: *mut __pthread_cleanup_t,
        arg1: __pthread_cleanup_func_t,
        arg2: *mut ::core::ffi::c_void,
    );
}
extern "C" {
    pub fn __pthread_cleanup_pop(arg1: *mut __pthread_cleanup_t, arg2: ::core::ffi::c_int);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GStaticMutex {
    pub mutex: *mut GMutex,
    pub unused: pthread_mutex_t,
}
extern "C" {
    pub fn _frida_g_static_mutex_init(mutex: *mut GStaticMutex);
}
extern "C" {
    pub fn _frida_g_static_mutex_free(mutex: *mut GStaticMutex);
}
extern "C" {
    pub fn _frida_g_static_mutex_get_mutex_impl(mutex: *mut GStaticMutex) -> *mut GMutex;
}
pub type GStaticRecMutex = _GStaticRecMutex;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _GStaticRecMutex {
    pub mutex: GStaticMutex,
    pub depth: guint,
    pub unused: _GStaticRecMutex__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _GStaticRecMutex__bindgen_ty_1 {
    pub owner: pthread_t,
    pub dummy: gdouble,
}
extern "C" {
    pub fn _frida_g_static_rec_mutex_init(mutex: *mut GStaticRecMutex);
}
extern "C" {
    pub fn _frida_g_static_rec_mutex_lock(mutex: *mut GStaticRecMutex);
}
extern "C" {
    pub fn _frida_g_static_rec_mutex_trylock(mutex: *mut GStaticRecMutex) -> gboolean;
}
extern "C" {
    pub fn _frida_g_static_rec_mutex_unlock(mutex: *mut GStaticRecMutex);
}
extern "C" {
    pub fn _frida_g_static_rec_mutex_lock_full(mutex: *mut GStaticRecMutex, depth: guint);
}
extern "C" {
    pub fn _frida_g_static_rec_mutex_unlock_full(mutex: *mut GStaticRecMutex) -> guint;
}
extern "C" {
    pub fn _frida_g_static_rec_mutex_free(mutex: *mut GStaticRecMutex);
}
pub type GStaticRWLock = _GStaticRWLock;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GStaticRWLock {
    pub mutex: GStaticMutex,
    pub read_cond: *mut GCond,
    pub write_cond: *mut GCond,
    pub read_counter: guint,
    pub have_writer: gboolean,
    pub want_to_read: guint,
    pub want_to_write: guint,
}
extern "C" {
    pub fn _frida_g_static_rw_lock_init(lock: *mut GStaticRWLock);
}
extern "C" {
    pub fn _frida_g_static_rw_lock_reader_lock(lock: *mut GStaticRWLock);
}
extern "C" {
    pub fn _frida_g_static_rw_lock_reader_trylock(lock: *mut GStaticRWLock) -> gboolean;
}
extern "C" {
    pub fn _frida_g_static_rw_lock_reader_unlock(lock: *mut GStaticRWLock);
}
extern "C" {
    pub fn _frida_g_static_rw_lock_writer_lock(lock: *mut GStaticRWLock);
}
extern "C" {
    pub fn _frida_g_static_rw_lock_writer_trylock(lock: *mut GStaticRWLock) -> gboolean;
}
extern "C" {
    pub fn _frida_g_static_rw_lock_writer_unlock(lock: *mut GStaticRWLock);
}
extern "C" {
    pub fn _frida_g_static_rw_lock_free(lock: *mut GStaticRWLock);
}
extern "C" {
    pub fn _frida_g_private_new(notify: GDestroyNotify) -> *mut GPrivate;
}
pub type GStaticPrivate = _GStaticPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GStaticPrivate {
    pub index: guint,
}
extern "C" {
    pub fn _frida_g_static_private_init(private_key: *mut GStaticPrivate);
}
extern "C" {
    pub fn _frida_g_static_private_get(private_key: *mut GStaticPrivate) -> gpointer;
}
extern "C" {
    pub fn _frida_g_static_private_set(
        private_key: *mut GStaticPrivate,
        data: gpointer,
        notify: GDestroyNotify,
    );
}
extern "C" {
    pub fn _frida_g_static_private_free(private_key: *mut GStaticPrivate);
}
extern "C" {
    pub fn _frida_g_once_init_enter_impl(location: *mut gsize) -> gboolean;
}
extern "C" {
    pub fn g_thread_init(vtable: gpointer);
}
extern "C" {
    pub fn g_thread_init_with_errorcheck_mutexes(vtable: gpointer);
}
extern "C" {
    pub fn _frida_g_thread_get_initialized() -> gboolean;
}
extern "C" {
    pub static mut _frida_g_threads_got_initialized: gboolean;
}
extern "C" {
    pub fn _frida_g_mutex_new() -> *mut GMutex;
}
extern "C" {
    pub fn _frida_g_mutex_free(mutex: *mut GMutex);
}
extern "C" {
    pub fn _frida_g_cond_new() -> *mut GCond;
}
extern "C" {
    pub fn _frida_g_cond_free(cond: *mut GCond);
}
extern "C" {
    pub fn _frida_g_cond_timed_wait(
        cond: *mut GCond,
        mutex: *mut GMutex,
        timeval: *mut GTimeVal,
    ) -> gboolean;
}
pub type GAsyncQueue_autoptr = *mut GAsyncQueue;
pub type GAsyncQueue_listautoptr = *mut GList;
pub type GAsyncQueue_slistautoptr = *mut GSList;
pub type GAsyncQueue_queueautoptr = *mut GQueue;
pub type GBookmarkFile_autoptr = *mut GBookmarkFile;
pub type GBookmarkFile_listautoptr = *mut GList;
pub type GBookmarkFile_slistautoptr = *mut GSList;
pub type GBookmarkFile_queueautoptr = *mut GQueue;
pub type GBytes_autoptr = *mut GBytes;
pub type GBytes_listautoptr = *mut GList;
pub type GBytes_slistautoptr = *mut GSList;
pub type GBytes_queueautoptr = *mut GQueue;
pub type GChecksum_autoptr = *mut GChecksum;
pub type GChecksum_listautoptr = *mut GList;
pub type GChecksum_slistautoptr = *mut GSList;
pub type GChecksum_queueautoptr = *mut GQueue;
pub type GDateTime_autoptr = *mut GDateTime;
pub type GDateTime_listautoptr = *mut GList;
pub type GDateTime_slistautoptr = *mut GSList;
pub type GDateTime_queueautoptr = *mut GQueue;
pub type GDate_autoptr = *mut GDate;
pub type GDate_listautoptr = *mut GList;
pub type GDate_slistautoptr = *mut GSList;
pub type GDate_queueautoptr = *mut GQueue;
pub type GDir_autoptr = *mut GDir;
pub type GDir_listautoptr = *mut GList;
pub type GDir_slistautoptr = *mut GSList;
pub type GDir_queueautoptr = *mut GQueue;
pub type GError_autoptr = *mut GError;
pub type GError_listautoptr = *mut GList;
pub type GError_slistautoptr = *mut GSList;
pub type GError_queueautoptr = *mut GQueue;
pub type GHashTable_autoptr = *mut GHashTable;
pub type GHashTable_listautoptr = *mut GList;
pub type GHashTable_slistautoptr = *mut GSList;
pub type GHashTable_queueautoptr = *mut GQueue;
pub type GHmac_autoptr = *mut GHmac;
pub type GHmac_listautoptr = *mut GList;
pub type GHmac_slistautoptr = *mut GSList;
pub type GHmac_queueautoptr = *mut GQueue;
pub type GIOChannel_autoptr = *mut GIOChannel;
pub type GIOChannel_listautoptr = *mut GList;
pub type GIOChannel_slistautoptr = *mut GSList;
pub type GIOChannel_queueautoptr = *mut GQueue;
pub type GKeyFile_autoptr = *mut GKeyFile;
pub type GKeyFile_listautoptr = *mut GList;
pub type GKeyFile_slistautoptr = *mut GSList;
pub type GKeyFile_queueautoptr = *mut GQueue;
pub type GList_autoptr = *mut GList;
pub type GList_listautoptr = *mut GList;
pub type GList_slistautoptr = *mut GSList;
pub type GList_queueautoptr = *mut GQueue;
pub type GArray_autoptr = *mut GArray;
pub type GArray_listautoptr = *mut GList;
pub type GArray_slistautoptr = *mut GSList;
pub type GArray_queueautoptr = *mut GQueue;
pub type GPtrArray_autoptr = *mut GPtrArray;
pub type GPtrArray_listautoptr = *mut GList;
pub type GPtrArray_slistautoptr = *mut GSList;
pub type GPtrArray_queueautoptr = *mut GQueue;
pub type GByteArray_autoptr = *mut GByteArray;
pub type GByteArray_listautoptr = *mut GList;
pub type GByteArray_slistautoptr = *mut GSList;
pub type GByteArray_queueautoptr = *mut GQueue;
pub type GMainContext_autoptr = *mut GMainContext;
pub type GMainContext_listautoptr = *mut GList;
pub type GMainContext_slistautoptr = *mut GSList;
pub type GMainContext_queueautoptr = *mut GQueue;
pub type GMainContextPusher_autoptr = *mut GMainContextPusher;
pub type GMainContextPusher_listautoptr = *mut GList;
pub type GMainContextPusher_slistautoptr = *mut GSList;
pub type GMainContextPusher_queueautoptr = *mut GQueue;
pub type GMainLoop_autoptr = *mut GMainLoop;
pub type GMainLoop_listautoptr = *mut GList;
pub type GMainLoop_slistautoptr = *mut GSList;
pub type GMainLoop_queueautoptr = *mut GQueue;
pub type GSource_autoptr = *mut GSource;
pub type GSource_listautoptr = *mut GList;
pub type GSource_slistautoptr = *mut GSList;
pub type GSource_queueautoptr = *mut GQueue;
pub type GMappedFile_autoptr = *mut GMappedFile;
pub type GMappedFile_listautoptr = *mut GList;
pub type GMappedFile_slistautoptr = *mut GSList;
pub type GMappedFile_queueautoptr = *mut GQueue;
pub type GMarkupParseContext_autoptr = *mut GMarkupParseContext;
pub type GMarkupParseContext_listautoptr = *mut GList;
pub type GMarkupParseContext_slistautoptr = *mut GSList;
pub type GMarkupParseContext_queueautoptr = *mut GQueue;
pub type GNode_autoptr = *mut GNode;
pub type GNode_listautoptr = *mut GList;
pub type GNode_slistautoptr = *mut GSList;
pub type GNode_queueautoptr = *mut GQueue;
pub type GOptionContext_autoptr = *mut GOptionContext;
pub type GOptionContext_listautoptr = *mut GList;
pub type GOptionContext_slistautoptr = *mut GSList;
pub type GOptionContext_queueautoptr = *mut GQueue;
pub type GOptionGroup_autoptr = *mut GOptionGroup;
pub type GOptionGroup_listautoptr = *mut GList;
pub type GOptionGroup_slistautoptr = *mut GSList;
pub type GOptionGroup_queueautoptr = *mut GQueue;
pub type GPatternSpec_autoptr = *mut GPatternSpec;
pub type GPatternSpec_listautoptr = *mut GList;
pub type GPatternSpec_slistautoptr = *mut GSList;
pub type GPatternSpec_queueautoptr = *mut GQueue;
pub type GQueue_autoptr = *mut GQueue;
pub type GQueue_listautoptr = *mut GList;
pub type GQueue_slistautoptr = *mut GSList;
pub type GQueue_queueautoptr = *mut GQueue;
pub type GRand_autoptr = *mut GRand;
pub type GRand_listautoptr = *mut GList;
pub type GRand_slistautoptr = *mut GSList;
pub type GRand_queueautoptr = *mut GQueue;
pub type GRegex_autoptr = *mut GRegex;
pub type GRegex_listautoptr = *mut GList;
pub type GRegex_slistautoptr = *mut GSList;
pub type GRegex_queueautoptr = *mut GQueue;
pub type GMatchInfo_autoptr = *mut GMatchInfo;
pub type GMatchInfo_listautoptr = *mut GList;
pub type GMatchInfo_slistautoptr = *mut GSList;
pub type GMatchInfo_queueautoptr = *mut GQueue;
pub type GScanner_autoptr = *mut GScanner;
pub type GScanner_listautoptr = *mut GList;
pub type GScanner_slistautoptr = *mut GSList;
pub type GScanner_queueautoptr = *mut GQueue;
pub type GSequence_autoptr = *mut GSequence;
pub type GSequence_listautoptr = *mut GList;
pub type GSequence_slistautoptr = *mut GSList;
pub type GSequence_queueautoptr = *mut GQueue;
pub type GSList_autoptr = *mut GSList;
pub type GSList_listautoptr = *mut GList;
pub type GSList_slistautoptr = *mut GSList;
pub type GSList_queueautoptr = *mut GQueue;
pub type GString_autoptr = *mut GString;
pub type GString_listautoptr = *mut GList;
pub type GString_slistautoptr = *mut GSList;
pub type GString_queueautoptr = *mut GQueue;
pub type GStringChunk_autoptr = *mut GStringChunk;
pub type GStringChunk_listautoptr = *mut GList;
pub type GStringChunk_slistautoptr = *mut GSList;
pub type GStringChunk_queueautoptr = *mut GQueue;
pub type GStrvBuilder_autoptr = *mut GStrvBuilder;
pub type GStrvBuilder_listautoptr = *mut GList;
pub type GStrvBuilder_slistautoptr = *mut GSList;
pub type GStrvBuilder_queueautoptr = *mut GQueue;
pub type GThread_autoptr = *mut GThread;
pub type GThread_listautoptr = *mut GList;
pub type GThread_slistautoptr = *mut GSList;
pub type GThread_queueautoptr = *mut GQueue;
pub type GMutexLocker_autoptr = *mut GMutexLocker;
pub type GMutexLocker_listautoptr = *mut GList;
pub type GMutexLocker_slistautoptr = *mut GSList;
pub type GMutexLocker_queueautoptr = *mut GQueue;
pub type GRecMutexLocker_autoptr = *mut GRecMutexLocker;
pub type GRecMutexLocker_listautoptr = *mut GList;
pub type GRecMutexLocker_slistautoptr = *mut GSList;
pub type GRecMutexLocker_queueautoptr = *mut GQueue;
pub type GRWLockWriterLocker_autoptr = *mut GRWLockWriterLocker;
pub type GRWLockWriterLocker_listautoptr = *mut GList;
pub type GRWLockWriterLocker_slistautoptr = *mut GSList;
pub type GRWLockWriterLocker_queueautoptr = *mut GQueue;
pub type GRWLockReaderLocker_autoptr = *mut GRWLockReaderLocker;
pub type GRWLockReaderLocker_listautoptr = *mut GList;
pub type GRWLockReaderLocker_slistautoptr = *mut GSList;
pub type GRWLockReaderLocker_queueautoptr = *mut GQueue;
pub type GTimer_autoptr = *mut GTimer;
pub type GTimer_listautoptr = *mut GList;
pub type GTimer_slistautoptr = *mut GSList;
pub type GTimer_queueautoptr = *mut GQueue;
pub type GTimeZone_autoptr = *mut GTimeZone;
pub type GTimeZone_listautoptr = *mut GList;
pub type GTimeZone_slistautoptr = *mut GSList;
pub type GTimeZone_queueautoptr = *mut GQueue;
pub type GTree_autoptr = *mut GTree;
pub type GTree_listautoptr = *mut GList;
pub type GTree_slistautoptr = *mut GSList;
pub type GTree_queueautoptr = *mut GQueue;
pub type GVariant_autoptr = *mut GVariant;
pub type GVariant_listautoptr = *mut GList;
pub type GVariant_slistautoptr = *mut GSList;
pub type GVariant_queueautoptr = *mut GQueue;
pub type GVariantBuilder_autoptr = *mut GVariantBuilder;
pub type GVariantBuilder_listautoptr = *mut GList;
pub type GVariantBuilder_slistautoptr = *mut GSList;
pub type GVariantBuilder_queueautoptr = *mut GQueue;
pub type GVariantIter_autoptr = *mut GVariantIter;
pub type GVariantIter_listautoptr = *mut GList;
pub type GVariantIter_slistautoptr = *mut GSList;
pub type GVariantIter_queueautoptr = *mut GQueue;
pub type GVariantDict_autoptr = *mut GVariantDict;
pub type GVariantDict_listautoptr = *mut GList;
pub type GVariantDict_slistautoptr = *mut GSList;
pub type GVariantDict_queueautoptr = *mut GQueue;
pub type GVariantType_autoptr = *mut GVariantType;
pub type GVariantType_listautoptr = *mut GList;
pub type GVariantType_slistautoptr = *mut GSList;
pub type GVariantType_queueautoptr = *mut GQueue;
pub type GRefString_autoptr = *mut GRefString;
pub type GRefString_listautoptr = *mut GList;
pub type GRefString_slistautoptr = *mut GSList;
pub type GRefString_queueautoptr = *mut GQueue;
pub type GUri_autoptr = *mut GUri;
pub type GUri_listautoptr = *mut GList;
pub type GUri_slistautoptr = *mut GSList;
pub type GUri_queueautoptr = *mut GQueue;
extern "C" {
    pub fn _frida_glib_init();
}
extern "C" {
    pub fn _frida_glib_enable_io_features();
}
extern "C" {
    pub fn _frida_glib_shutdown();
}
extern "C" {
    pub fn _frida_glib_deinit();
}
extern "C" {
    pub fn _frida_glib_prepare_to_fork();
}
extern "C" {
    pub fn _frida_glib_recover_from_fork_in_parent();
}
extern "C" {
    pub fn _frida_glib_recover_from_fork_in_child();
}
pub type GType = gsize;
pub type GValue = _GValue;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _GTypeCValue {
    _unused: [u8; 0],
}
pub type GTypeCValue = _GTypeCValue;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTypePlugin {
    _unused: [u8; 0],
}
pub type GTypePlugin = _GTypePlugin;
pub type GTypeClass = _GTypeClass;
pub type GTypeInterface = _GTypeInterface;
pub type GTypeInstance = _GTypeInstance;
pub type GTypeInfo = _GTypeInfo;
pub type GTypeFundamentalInfo = _GTypeFundamentalInfo;
pub type GInterfaceInfo = _GInterfaceInfo;
pub type GTypeValueTable = _GTypeValueTable;
pub type GTypeQuery = _GTypeQuery;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTypeClass {
    pub g_type: GType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTypeInstance {
    pub g_class: *mut GTypeClass,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTypeInterface {
    pub g_type: GType,
    pub g_instance_type: GType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTypeQuery {
    pub type_: GType,
    pub type_name: *const gchar,
    pub class_size: guint,
    pub instance_size: guint,
}
pub const GTypeDebugFlags_G_TYPE_DEBUG_NONE: GTypeDebugFlags = 0;
pub const GTypeDebugFlags_G_TYPE_DEBUG_OBJECTS: GTypeDebugFlags = 1;
pub const GTypeDebugFlags_G_TYPE_DEBUG_SIGNALS: GTypeDebugFlags = 2;
pub const GTypeDebugFlags_G_TYPE_DEBUG_INSTANCE_COUNT: GTypeDebugFlags = 4;
pub const GTypeDebugFlags_G_TYPE_DEBUG_MASK: GTypeDebugFlags = 7;
pub type GTypeDebugFlags = ::core::ffi::c_uint;
extern "C" {
    pub fn _frida_gobject_init();
}
extern "C" {
    pub fn _frida_g_type_init();
}
extern "C" {
    pub fn _frida_g_type_init_with_debug_flags(debug_flags: GTypeDebugFlags);
}
extern "C" {
    pub fn _frida_g_type_name(type_: GType) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_type_qname(type_: GType) -> GQuark;
}
extern "C" {
    pub fn _frida_g_type_from_name(name: *const gchar) -> GType;
}
extern "C" {
    pub fn _frida_g_type_parent(type_: GType) -> GType;
}
extern "C" {
    pub fn _frida_g_type_depth(type_: GType) -> guint;
}
extern "C" {
    pub fn _frida_g_type_next_base(leaf_type: GType, root_type: GType) -> GType;
}
extern "C" {
    pub fn _frida_g_type_is_a(type_: GType, is_a_type: GType) -> gboolean;
}
extern "C" {
    pub fn _frida_g_type_class_ref(type_: GType) -> gpointer;
}
extern "C" {
    pub fn _frida_g_type_class_peek(type_: GType) -> gpointer;
}
extern "C" {
    pub fn _frida_g_type_class_peek_static(type_: GType) -> gpointer;
}
extern "C" {
    pub fn _frida_g_type_class_unref(g_class: gpointer);
}
extern "C" {
    pub fn _frida_g_type_class_peek_parent(g_class: gpointer) -> gpointer;
}
extern "C" {
    pub fn _frida_g_type_interface_peek(instance_class: gpointer, iface_type: GType) -> gpointer;
}
extern "C" {
    pub fn _frida_g_type_interface_peek_parent(g_iface: gpointer) -> gpointer;
}
extern "C" {
    pub fn _frida_g_type_default_interface_ref(g_type: GType) -> gpointer;
}
extern "C" {
    pub fn _frida_g_type_default_interface_peek(g_type: GType) -> gpointer;
}
extern "C" {
    pub fn _frida_g_type_default_interface_unref(g_iface: gpointer);
}
extern "C" {
    pub fn _frida_g_type_children(type_: GType, n_children: *mut guint) -> *mut GType;
}
extern "C" {
    pub fn _frida_g_type_interfaces(type_: GType, n_interfaces: *mut guint) -> *mut GType;
}
extern "C" {
    pub fn _frida_g_type_set_qdata(type_: GType, quark: GQuark, data: gpointer);
}
extern "C" {
    pub fn _frida_g_type_get_qdata(type_: GType, quark: GQuark) -> gpointer;
}
extern "C" {
    pub fn _frida_g_type_query(type_: GType, query: *mut GTypeQuery);
}
extern "C" {
    pub fn _frida_g_type_get_instance_count(type_: GType) -> ::core::ffi::c_int;
}
pub type GBaseInitFunc = ::core::option::Option<unsafe extern "C" fn(g_class: gpointer)>;
pub type GBaseFinalizeFunc = ::core::option::Option<unsafe extern "C" fn(g_class: gpointer)>;
pub type GClassInitFunc =
    ::core::option::Option<unsafe extern "C" fn(g_class: gpointer, class_data: gpointer)>;
pub type GClassFinalizeFunc =
    ::core::option::Option<unsafe extern "C" fn(g_class: gpointer, class_data: gpointer)>;
pub type GInstanceInitFunc =
    ::core::option::Option<unsafe extern "C" fn(instance: *mut GTypeInstance, g_class: gpointer)>;
pub type GInterfaceInitFunc =
    ::core::option::Option<unsafe extern "C" fn(g_iface: gpointer, iface_data: gpointer)>;
pub type GInterfaceFinalizeFunc =
    ::core::option::Option<unsafe extern "C" fn(g_iface: gpointer, iface_data: gpointer)>;
pub type GTypeClassCacheFunc = ::core::option::Option<
    unsafe extern "C" fn(cache_data: gpointer, g_class: *mut GTypeClass) -> gboolean,
>;
pub type GTypeInterfaceCheckFunc =
    ::core::option::Option<unsafe extern "C" fn(check_data: gpointer, g_iface: gpointer)>;
pub const GTypeFundamentalFlags_G_TYPE_FLAG_CLASSED: GTypeFundamentalFlags = 1;
pub const GTypeFundamentalFlags_G_TYPE_FLAG_INSTANTIATABLE: GTypeFundamentalFlags = 2;
pub const GTypeFundamentalFlags_G_TYPE_FLAG_DERIVABLE: GTypeFundamentalFlags = 4;
pub const GTypeFundamentalFlags_G_TYPE_FLAG_DEEP_DERIVABLE: GTypeFundamentalFlags = 8;
pub type GTypeFundamentalFlags = ::core::ffi::c_uint;
pub const GTypeFlags_G_TYPE_FLAG_NONE: GTypeFlags = 0;
pub const GTypeFlags_G_TYPE_FLAG_ABSTRACT: GTypeFlags = 16;
pub const GTypeFlags_G_TYPE_FLAG_VALUE_ABSTRACT: GTypeFlags = 32;
pub const GTypeFlags_G_TYPE_FLAG_FINAL: GTypeFlags = 64;
pub type GTypeFlags = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTypeInfo {
    pub class_size: guint16,
    pub base_init: GBaseInitFunc,
    pub base_finalize: GBaseFinalizeFunc,
    pub class_init: GClassInitFunc,
    pub class_finalize: GClassFinalizeFunc,
    pub class_data: gconstpointer,
    pub instance_size: guint16,
    pub n_preallocs: guint16,
    pub instance_init: GInstanceInitFunc,
    pub value_table: *const GTypeValueTable,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTypeFundamentalInfo {
    pub type_flags: GTypeFundamentalFlags,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GInterfaceInfo {
    pub interface_init: GInterfaceInitFunc,
    pub interface_finalize: GInterfaceFinalizeFunc,
    pub interface_data: gpointer,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTypeValueTable {
    pub value_init: ::core::option::Option<unsafe extern "C" fn(value: *mut GValue)>,
    pub value_free: ::core::option::Option<unsafe extern "C" fn(value: *mut GValue)>,
    pub value_copy: ::core::option::Option<
        unsafe extern "C" fn(src_value: *const GValue, dest_value: *mut GValue),
    >,
    pub value_peek_pointer:
        ::core::option::Option<unsafe extern "C" fn(value: *const GValue) -> gpointer>,
    pub collect_format: *const gchar,
    pub collect_value: ::core::option::Option<
        unsafe extern "C" fn(
            value: *mut GValue,
            n_collect_values: guint,
            collect_values: *mut GTypeCValue,
            collect_flags: guint,
        ) -> *mut gchar,
    >,
    pub lcopy_format: *const gchar,
    pub lcopy_value: ::core::option::Option<
        unsafe extern "C" fn(
            value: *const GValue,
            n_collect_values: guint,
            collect_values: *mut GTypeCValue,
            collect_flags: guint,
        ) -> *mut gchar,
    >,
}
extern "C" {
    pub fn _frida_g_type_register_static(
        parent_type: GType,
        type_name: *const gchar,
        info: *const GTypeInfo,
        flags: GTypeFlags,
    ) -> GType;
}
extern "C" {
    pub fn _frida_g_type_register_static_simple(
        parent_type: GType,
        type_name: *const gchar,
        class_size: guint,
        class_init: GClassInitFunc,
        instance_size: guint,
        instance_init: GInstanceInitFunc,
        flags: GTypeFlags,
    ) -> GType;
}
extern "C" {
    pub fn _frida_g_type_register_dynamic(
        parent_type: GType,
        type_name: *const gchar,
        plugin: *mut GTypePlugin,
        flags: GTypeFlags,
    ) -> GType;
}
extern "C" {
    pub fn _frida_g_type_register_fundamental(
        type_id: GType,
        type_name: *const gchar,
        info: *const GTypeInfo,
        finfo: *const GTypeFundamentalInfo,
        flags: GTypeFlags,
    ) -> GType;
}
extern "C" {
    pub fn _frida_g_type_add_interface_static(
        instance_type: GType,
        interface_type: GType,
        info: *const GInterfaceInfo,
    );
}
extern "C" {
    pub fn _frida_g_type_add_interface_dynamic(
        instance_type: GType,
        interface_type: GType,
        plugin: *mut GTypePlugin,
    );
}
extern "C" {
    pub fn _frida_g_type_interface_add_prerequisite(
        interface_type: GType,
        prerequisite_type: GType,
    );
}
extern "C" {
    pub fn _frida_g_type_interface_prerequisites(
        interface_type: GType,
        n_prerequisites: *mut guint,
    ) -> *mut GType;
}
extern "C" {
    pub fn _frida_g_type_interface_instantiatable_prerequisite(interface_type: GType) -> GType;
}
extern "C" {
    pub fn _frida_g_type_class_add_private(g_class: gpointer, private_size: gsize);
}
extern "C" {
    pub fn _frida_g_type_add_instance_private(class_type: GType, private_size: gsize) -> gint;
}
extern "C" {
    pub fn _frida_g_type_instance_get_private(
        instance: *mut GTypeInstance,
        private_type: GType,
    ) -> gpointer;
}
extern "C" {
    pub fn _frida_g_type_class_adjust_private_offset(
        g_class: gpointer,
        private_size_or_offset: *mut gint,
    );
}
extern "C" {
    pub fn _frida_g_type_add_class_private(class_type: GType, private_size: gsize);
}
extern "C" {
    pub fn _frida_g_type_class_get_private(klass: *mut GTypeClass, private_type: GType)
        -> gpointer;
}
extern "C" {
    pub fn _frida_g_type_class_get_instance_private_offset(g_class: gpointer) -> gint;
}
extern "C" {
    pub fn _frida_g_type_ensure(type_: GType);
}
extern "C" {
    pub fn _frida_g_type_get_type_registration_serial() -> guint;
}
extern "C" {
    pub fn _frida_g_type_get_plugin(type_: GType) -> *mut GTypePlugin;
}
extern "C" {
    pub fn _frida_g_type_interface_get_plugin(
        instance_type: GType,
        interface_type: GType,
    ) -> *mut GTypePlugin;
}
extern "C" {
    pub fn _frida_g_type_fundamental_next() -> GType;
}
extern "C" {
    pub fn _frida_g_type_fundamental(type_id: GType) -> GType;
}
extern "C" {
    pub fn _frida_g_type_create_instance(type_: GType) -> *mut GTypeInstance;
}
extern "C" {
    pub fn _frida_g_type_free_instance(instance: *mut GTypeInstance);
}
extern "C" {
    pub fn _frida_g_type_add_class_cache_func(
        cache_data: gpointer,
        cache_func: GTypeClassCacheFunc,
    );
}
extern "C" {
    pub fn _frida_g_type_remove_class_cache_func(
        cache_data: gpointer,
        cache_func: GTypeClassCacheFunc,
    );
}
extern "C" {
    pub fn _frida_g_type_class_unref_uncached(g_class: gpointer);
}
extern "C" {
    pub fn _frida_g_type_add_interface_check(
        check_data: gpointer,
        check_func: GTypeInterfaceCheckFunc,
    );
}
extern "C" {
    pub fn _frida_g_type_remove_interface_check(
        check_data: gpointer,
        check_func: GTypeInterfaceCheckFunc,
    );
}
extern "C" {
    pub fn _frida_g_type_value_table_peek(type_: GType) -> *mut GTypeValueTable;
}
extern "C" {
    pub fn _frida_g_type_check_instance(instance: *mut GTypeInstance) -> gboolean;
}
extern "C" {
    pub fn _frida_g_type_check_instance_cast(
        instance: *mut GTypeInstance,
        iface_type: GType,
    ) -> *mut GTypeInstance;
}
extern "C" {
    pub fn _frida_g_type_check_instance_is_a(
        instance: *mut GTypeInstance,
        iface_type: GType,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_type_check_instance_is_fundamentally_a(
        instance: *mut GTypeInstance,
        fundamental_type: GType,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_type_check_class_cast(
        g_class: *mut GTypeClass,
        is_a_type: GType,
    ) -> *mut GTypeClass;
}
extern "C" {
    pub fn _frida_g_type_check_class_is_a(g_class: *mut GTypeClass, is_a_type: GType) -> gboolean;
}
extern "C" {
    pub fn _frida_g_type_check_is_value_type(type_: GType) -> gboolean;
}
extern "C" {
    pub fn _frida_g_type_check_value(value: *const GValue) -> gboolean;
}
extern "C" {
    pub fn _frida_g_type_check_value_holds(value: *const GValue, type_: GType) -> gboolean;
}
extern "C" {
    pub fn _frida_g_type_test_flags(type_: GType, flags: guint) -> gboolean;
}
extern "C" {
    pub fn _frida_g_type_name_from_instance(instance: *mut GTypeInstance) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_type_name_from_class(g_class: *mut GTypeClass) -> *const gchar;
}
pub type GValueTransform =
    ::core::option::Option<unsafe extern "C" fn(src_value: *const GValue, dest_value: *mut GValue)>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _GValue {
    pub g_type: GType,
    pub data: [_GValue__bindgen_ty_1; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _GValue__bindgen_ty_1 {
    pub v_int: gint,
    pub v_uint: guint,
    pub v_long: glong,
    pub v_ulong: gulong,
    pub v_int64: gint64,
    pub v_uint64: guint64,
    pub v_float: gfloat,
    pub v_double: gdouble,
    pub v_pointer: gpointer,
}
extern "C" {
    pub fn _frida_g_value_init(value: *mut GValue, g_type: GType) -> *mut GValue;
}
extern "C" {
    pub fn _frida_g_value_copy(src_value: *const GValue, dest_value: *mut GValue);
}
extern "C" {
    pub fn _frida_g_value_reset(value: *mut GValue) -> *mut GValue;
}
extern "C" {
    pub fn _frida_g_value_unset(value: *mut GValue);
}
extern "C" {
    pub fn _frida_g_value_set_instance(value: *mut GValue, instance: gpointer);
}
extern "C" {
    pub fn _frida_g_value_init_from_instance(value: *mut GValue, instance: gpointer);
}
extern "C" {
    pub fn _frida_g_value_fits_pointer(value: *const GValue) -> gboolean;
}
extern "C" {
    pub fn _frida_g_value_peek_pointer(value: *const GValue) -> gpointer;
}
extern "C" {
    pub fn _frida_g_value_type_compatible(src_type: GType, dest_type: GType) -> gboolean;
}
extern "C" {
    pub fn _frida_g_value_type_transformable(src_type: GType, dest_type: GType) -> gboolean;
}
extern "C" {
    pub fn _frida_g_value_transform(src_value: *const GValue, dest_value: *mut GValue) -> gboolean;
}
extern "C" {
    pub fn _frida_g_value_register_transform_func(
        src_type: GType,
        dest_type: GType,
        transform_func: GValueTransform,
    );
}
pub const GParamFlags_G_PARAM_READABLE: GParamFlags = 1;
pub const GParamFlags_G_PARAM_WRITABLE: GParamFlags = 2;
pub const GParamFlags_G_PARAM_READWRITE: GParamFlags = 3;
pub const GParamFlags_G_PARAM_CONSTRUCT: GParamFlags = 4;
pub const GParamFlags_G_PARAM_CONSTRUCT_ONLY: GParamFlags = 8;
pub const GParamFlags_G_PARAM_LAX_VALIDATION: GParamFlags = 16;
pub const GParamFlags_G_PARAM_STATIC_NAME: GParamFlags = 32;
pub const GParamFlags_G_PARAM_PRIVATE: GParamFlags = 32;
pub const GParamFlags_G_PARAM_STATIC_NICK: GParamFlags = 64;
pub const GParamFlags_G_PARAM_STATIC_BLURB: GParamFlags = 128;
pub const GParamFlags_G_PARAM_EXPLICIT_NOTIFY: GParamFlags = 1073741824;
pub const GParamFlags_G_PARAM_DEPRECATED: GParamFlags = -2147483648;
pub type GParamFlags = ::core::ffi::c_int;
pub type GParamSpec = _GParamSpec;
pub type GParamSpecClass = _GParamSpecClass;
pub type GParameter = _GParameter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GParamSpecPool {
    _unused: [u8; 0],
}
pub type GParamSpecPool = _GParamSpecPool;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GParamSpec {
    pub g_type_instance: GTypeInstance,
    pub name: *const gchar,
    pub flags: GParamFlags,
    pub value_type: GType,
    pub owner_type: GType,
    pub _nick: *mut gchar,
    pub _blurb: *mut gchar,
    pub qdata: *mut GData,
    pub ref_count: guint,
    pub param_id: guint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GParamSpecClass {
    pub g_type_class: GTypeClass,
    pub value_type: GType,
    pub finalize: ::core::option::Option<unsafe extern "C" fn(pspec: *mut GParamSpec)>,
    pub value_set_default:
        ::core::option::Option<unsafe extern "C" fn(pspec: *mut GParamSpec, value: *mut GValue)>,
    pub value_validate: ::core::option::Option<
        unsafe extern "C" fn(pspec: *mut GParamSpec, value: *mut GValue) -> gboolean,
    >,
    pub values_cmp: ::core::option::Option<
        unsafe extern "C" fn(
            pspec: *mut GParamSpec,
            value1: *const GValue,
            value2: *const GValue,
        ) -> gint,
    >,
    pub value_is_valid: ::core::option::Option<
        unsafe extern "C" fn(pspec: *mut GParamSpec, value: *const GValue) -> gboolean,
    >,
    pub dummy: [gpointer; 3usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _GParameter {
    pub name: *const gchar,
    pub value: GValue,
}
extern "C" {
    pub fn _frida_g_param_spec_ref(pspec: *mut GParamSpec) -> *mut GParamSpec;
}
extern "C" {
    pub fn _frida_g_param_spec_unref(pspec: *mut GParamSpec);
}
extern "C" {
    pub fn _frida_g_param_spec_sink(pspec: *mut GParamSpec);
}
extern "C" {
    pub fn _frida_g_param_spec_ref_sink(pspec: *mut GParamSpec) -> *mut GParamSpec;
}
extern "C" {
    pub fn _frida_g_param_spec_get_qdata(pspec: *mut GParamSpec, quark: GQuark) -> gpointer;
}
extern "C" {
    pub fn _frida_g_param_spec_set_qdata(pspec: *mut GParamSpec, quark: GQuark, data: gpointer);
}
extern "C" {
    pub fn _frida_g_param_spec_set_qdata_full(
        pspec: *mut GParamSpec,
        quark: GQuark,
        data: gpointer,
        destroy: GDestroyNotify,
    );
}
extern "C" {
    pub fn _frida_g_param_spec_steal_qdata(pspec: *mut GParamSpec, quark: GQuark) -> gpointer;
}
extern "C" {
    pub fn _frida_g_param_spec_get_redirect_target(pspec: *mut GParamSpec) -> *mut GParamSpec;
}
extern "C" {
    pub fn _frida_g_param_value_set_default(pspec: *mut GParamSpec, value: *mut GValue);
}
extern "C" {
    pub fn _frida_g_param_value_defaults(pspec: *mut GParamSpec, value: *const GValue) -> gboolean;
}
extern "C" {
    pub fn _frida_g_param_value_validate(pspec: *mut GParamSpec, value: *mut GValue) -> gboolean;
}
extern "C" {
    pub fn _frida_g_param_value_is_valid(pspec: *mut GParamSpec, value: *const GValue) -> gboolean;
}
extern "C" {
    pub fn _frida_g_param_value_convert(
        pspec: *mut GParamSpec,
        src_value: *const GValue,
        dest_value: *mut GValue,
        strict_validation: gboolean,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_param_values_cmp(
        pspec: *mut GParamSpec,
        value1: *const GValue,
        value2: *const GValue,
    ) -> gint;
}
extern "C" {
    pub fn _frida_g_param_spec_get_name(pspec: *mut GParamSpec) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_param_spec_get_nick(pspec: *mut GParamSpec) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_param_spec_get_blurb(pspec: *mut GParamSpec) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_value_set_param(value: *mut GValue, param: *mut GParamSpec);
}
extern "C" {
    pub fn _frida_g_value_get_param(value: *const GValue) -> *mut GParamSpec;
}
extern "C" {
    pub fn _frida_g_value_dup_param(value: *const GValue) -> *mut GParamSpec;
}
extern "C" {
    pub fn _frida_g_value_take_param(value: *mut GValue, param: *mut GParamSpec);
}
extern "C" {
    pub fn _frida_g_value_set_param_take_ownership(value: *mut GValue, param: *mut GParamSpec);
}
extern "C" {
    pub fn _frida_g_param_spec_get_default_value(pspec: *mut GParamSpec) -> *const GValue;
}
extern "C" {
    pub fn _frida_g_param_spec_get_name_quark(pspec: *mut GParamSpec) -> GQuark;
}
pub type GParamSpecTypeInfo = _GParamSpecTypeInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GParamSpecTypeInfo {
    pub instance_size: guint16,
    pub n_preallocs: guint16,
    pub instance_init: ::core::option::Option<unsafe extern "C" fn(pspec: *mut GParamSpec)>,
    pub value_type: GType,
    pub finalize: ::core::option::Option<unsafe extern "C" fn(pspec: *mut GParamSpec)>,
    pub value_set_default:
        ::core::option::Option<unsafe extern "C" fn(pspec: *mut GParamSpec, value: *mut GValue)>,
    pub value_validate: ::core::option::Option<
        unsafe extern "C" fn(pspec: *mut GParamSpec, value: *mut GValue) -> gboolean,
    >,
    pub values_cmp: ::core::option::Option<
        unsafe extern "C" fn(
            pspec: *mut GParamSpec,
            value1: *const GValue,
            value2: *const GValue,
        ) -> gint,
    >,
}
extern "C" {
    pub fn _frida_g_param_type_register_static(
        name: *const gchar,
        pspec_info: *const GParamSpecTypeInfo,
    ) -> GType;
}
extern "C" {
    pub fn _frida_g_param_spec_is_valid_name(name: *const gchar) -> gboolean;
}
extern "C" {
    pub fn _g_param_type_register_static_constant(
        name: *const gchar,
        pspec_info: *const GParamSpecTypeInfo,
        opt_type: GType,
    ) -> GType;
}
extern "C" {
    pub fn _frida_g_param_spec_internal(
        param_type: GType,
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        flags: GParamFlags,
    ) -> gpointer;
}
extern "C" {
    pub fn _frida_g_param_spec_pool_new(type_prefixing: gboolean) -> *mut GParamSpecPool;
}
extern "C" {
    pub fn _frida_g_param_spec_pool_insert(
        pool: *mut GParamSpecPool,
        pspec: *mut GParamSpec,
        owner_type: GType,
    );
}
extern "C" {
    pub fn _frida_g_param_spec_pool_remove(pool: *mut GParamSpecPool, pspec: *mut GParamSpec);
}
extern "C" {
    pub fn _frida_g_param_spec_pool_lookup(
        pool: *mut GParamSpecPool,
        param_name: *const gchar,
        owner_type: GType,
        walk_ancestors: gboolean,
    ) -> *mut GParamSpec;
}
extern "C" {
    pub fn _frida_g_param_spec_pool_list_owned(
        pool: *mut GParamSpecPool,
        owner_type: GType,
    ) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_param_spec_pool_list(
        pool: *mut GParamSpecPool,
        owner_type: GType,
        n_pspecs_p: *mut guint,
    ) -> *mut *mut GParamSpec;
}
pub type GClosure = _GClosure;
pub type GClosureNotifyData = _GClosureNotifyData;
pub type GCallback = ::core::option::Option<unsafe extern "C" fn()>;
pub type GClosureNotify =
    ::core::option::Option<unsafe extern "C" fn(data: gpointer, closure: *mut GClosure)>;
pub type GClosureMarshal = ::core::option::Option<
    unsafe extern "C" fn(
        closure: *mut GClosure,
        return_value: *mut GValue,
        n_param_values: guint,
        param_values: *const GValue,
        invocation_hint: gpointer,
        user_data: gpointer,
    ),
>;
pub type GVaClosureMarshal = ::core::option::Option<
    unsafe extern "C" fn(
        closure: *mut GClosure,
        return_value: *mut GValue,
        instance: gpointer,
        args: va_list,
        marshal_data: gpointer,
        n_params: ::core::ffi::c_int,
        param_types: *mut GType,
    ),
>;
pub type GCClosure = _GCClosure;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GClosureNotifyData {
    pub data: gpointer,
    pub notify: GClosureNotify,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GClosure {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub marshal: ::core::option::Option<
        unsafe extern "C" fn(
            closure: *mut GClosure,
            return_value: *mut GValue,
            n_param_values: guint,
            param_values: *const GValue,
            invocation_hint: gpointer,
            marshal_data: gpointer,
        ),
    >,
    pub data: gpointer,
    pub notifiers: *mut GClosureNotifyData,
}
impl _GClosure {
    #[inline]
    pub fn ref_count(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 15u8) as u32) }
    }
    #[inline]
    pub fn set_ref_count(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 15u8, val as u64)
        }
    }
    #[inline]
    pub fn meta_marshal_nouse(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_meta_marshal_nouse(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn n_guards(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_n_guards(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn n_fnotifiers(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(17usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_n_fnotifiers(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(17usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn n_inotifiers(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(19usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_n_inotifiers(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(19usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn in_inotify(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_in_inotify(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn floating(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_floating(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn derivative_flag(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_derivative_flag(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn in_marshal(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_in_marshal(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn is_invalid(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_is_invalid(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ref_count: guint,
        meta_marshal_nouse: guint,
        n_guards: guint,
        n_fnotifiers: guint,
        n_inotifiers: guint,
        in_inotify: guint,
        floating: guint,
        derivative_flag: guint,
        in_marshal: guint,
        is_invalid: guint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 15u8, {
            let ref_count: u32 = unsafe { ::core::mem::transmute(ref_count) };
            ref_count as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let meta_marshal_nouse: u32 = unsafe { ::core::mem::transmute(meta_marshal_nouse) };
            meta_marshal_nouse as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let n_guards: u32 = unsafe { ::core::mem::transmute(n_guards) };
            n_guards as u64
        });
        __bindgen_bitfield_unit.set(17usize, 2u8, {
            let n_fnotifiers: u32 = unsafe { ::core::mem::transmute(n_fnotifiers) };
            n_fnotifiers as u64
        });
        __bindgen_bitfield_unit.set(19usize, 8u8, {
            let n_inotifiers: u32 = unsafe { ::core::mem::transmute(n_inotifiers) };
            n_inotifiers as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let in_inotify: u32 = unsafe { ::core::mem::transmute(in_inotify) };
            in_inotify as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let floating: u32 = unsafe { ::core::mem::transmute(floating) };
            floating as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let derivative_flag: u32 = unsafe { ::core::mem::transmute(derivative_flag) };
            derivative_flag as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let in_marshal: u32 = unsafe { ::core::mem::transmute(in_marshal) };
            in_marshal as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let is_invalid: u32 = unsafe { ::core::mem::transmute(is_invalid) };
            is_invalid as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GCClosure {
    pub closure: GClosure,
    pub callback: gpointer,
}
extern "C" {
    pub fn _frida_g_cclosure_new(
        callback_func: GCallback,
        user_data: gpointer,
        destroy_data: GClosureNotify,
    ) -> *mut GClosure;
}
extern "C" {
    pub fn _frida_g_cclosure_new_swap(
        callback_func: GCallback,
        user_data: gpointer,
        destroy_data: GClosureNotify,
    ) -> *mut GClosure;
}
extern "C" {
    pub fn _frida_g_signal_type_cclosure_new(itype: GType, struct_offset: guint) -> *mut GClosure;
}
extern "C" {
    pub fn _frida_g_closure_ref(closure: *mut GClosure) -> *mut GClosure;
}
extern "C" {
    pub fn _frida_g_closure_sink(closure: *mut GClosure);
}
extern "C" {
    pub fn _frida_g_closure_unref(closure: *mut GClosure);
}
extern "C" {
    pub fn _frida_g_closure_new_simple(sizeof_closure: guint, data: gpointer) -> *mut GClosure;
}
extern "C" {
    pub fn _frida_g_closure_add_finalize_notifier(
        closure: *mut GClosure,
        notify_data: gpointer,
        notify_func: GClosureNotify,
    );
}
extern "C" {
    pub fn _frida_g_closure_remove_finalize_notifier(
        closure: *mut GClosure,
        notify_data: gpointer,
        notify_func: GClosureNotify,
    );
}
extern "C" {
    pub fn _frida_g_closure_add_invalidate_notifier(
        closure: *mut GClosure,
        notify_data: gpointer,
        notify_func: GClosureNotify,
    );
}
extern "C" {
    pub fn _frida_g_closure_remove_invalidate_notifier(
        closure: *mut GClosure,
        notify_data: gpointer,
        notify_func: GClosureNotify,
    );
}
extern "C" {
    pub fn _frida_g_closure_add_marshal_guards(
        closure: *mut GClosure,
        pre_marshal_data: gpointer,
        pre_marshal_notify: GClosureNotify,
        post_marshal_data: gpointer,
        post_marshal_notify: GClosureNotify,
    );
}
extern "C" {
    pub fn _frida_g_closure_set_marshal(closure: *mut GClosure, marshal: GClosureMarshal);
}
extern "C" {
    pub fn _frida_g_closure_set_meta_marshal(
        closure: *mut GClosure,
        marshal_data: gpointer,
        meta_marshal: GClosureMarshal,
    );
}
extern "C" {
    pub fn _frida_g_closure_invalidate(closure: *mut GClosure);
}
extern "C" {
    pub fn _frida_g_closure_invoke(
        closure: *mut GClosure,
        return_value: *mut GValue,
        n_param_values: guint,
        param_values: *const GValue,
        invocation_hint: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_cclosure_marshal_generic(
        closure: *mut GClosure,
        return_gvalue: *mut GValue,
        n_param_values: guint,
        param_values: *const GValue,
        invocation_hint: gpointer,
        marshal_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_cclosure_marshal_generic_va(
        closure: *mut GClosure,
        return_value: *mut GValue,
        instance: gpointer,
        args_list: va_list,
        marshal_data: gpointer,
        n_params: ::core::ffi::c_int,
        param_types: *mut GType,
    );
}
extern "C" {
    pub fn _frida_g_cclosure_marshal_VOID__VOID(
        closure: *mut GClosure,
        return_value: *mut GValue,
        n_param_values: guint,
        param_values: *const GValue,
        invocation_hint: gpointer,
        marshal_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_cclosure_marshal_VOID__VOIDv(
        closure: *mut GClosure,
        return_value: *mut GValue,
        instance: gpointer,
        args: va_list,
        marshal_data: gpointer,
        n_params: ::core::ffi::c_int,
        param_types: *mut GType,
    );
}
extern "C" {
    pub fn _frida_g_cclosure_marshal_VOID__BOOLEAN(
        closure: *mut GClosure,
        return_value: *mut GValue,
        n_param_values: guint,
        param_values: *const GValue,
        invocation_hint: gpointer,
        marshal_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_cclosure_marshal_VOID__BOOLEANv(
        closure: *mut GClosure,
        return_value: *mut GValue,
        instance: gpointer,
        args: va_list,
        marshal_data: gpointer,
        n_params: ::core::ffi::c_int,
        param_types: *mut GType,
    );
}
extern "C" {
    pub fn _frida_g_cclosure_marshal_VOID__CHAR(
        closure: *mut GClosure,
        return_value: *mut GValue,
        n_param_values: guint,
        param_values: *const GValue,
        invocation_hint: gpointer,
        marshal_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_cclosure_marshal_VOID__CHARv(
        closure: *mut GClosure,
        return_value: *mut GValue,
        instance: gpointer,
        args: va_list,
        marshal_data: gpointer,
        n_params: ::core::ffi::c_int,
        param_types: *mut GType,
    );
}
extern "C" {
    pub fn _frida_g_cclosure_marshal_VOID__UCHAR(
        closure: *mut GClosure,
        return_value: *mut GValue,
        n_param_values: guint,
        param_values: *const GValue,
        invocation_hint: gpointer,
        marshal_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_cclosure_marshal_VOID__UCHARv(
        closure: *mut GClosure,
        return_value: *mut GValue,
        instance: gpointer,
        args: va_list,
        marshal_data: gpointer,
        n_params: ::core::ffi::c_int,
        param_types: *mut GType,
    );
}
extern "C" {
    pub fn _frida_g_cclosure_marshal_VOID__INT(
        closure: *mut GClosure,
        return_value: *mut GValue,
        n_param_values: guint,
        param_values: *const GValue,
        invocation_hint: gpointer,
        marshal_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_cclosure_marshal_VOID__INTv(
        closure: *mut GClosure,
        return_value: *mut GValue,
        instance: gpointer,
        args: va_list,
        marshal_data: gpointer,
        n_params: ::core::ffi::c_int,
        param_types: *mut GType,
    );
}
extern "C" {
    pub fn _frida_g_cclosure_marshal_VOID__UINT(
        closure: *mut GClosure,
        return_value: *mut GValue,
        n_param_values: guint,
        param_values: *const GValue,
        invocation_hint: gpointer,
        marshal_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_cclosure_marshal_VOID__UINTv(
        closure: *mut GClosure,
        return_value: *mut GValue,
        instance: gpointer,
        args: va_list,
        marshal_data: gpointer,
        n_params: ::core::ffi::c_int,
        param_types: *mut GType,
    );
}
extern "C" {
    pub fn _frida_g_cclosure_marshal_VOID__LONG(
        closure: *mut GClosure,
        return_value: *mut GValue,
        n_param_values: guint,
        param_values: *const GValue,
        invocation_hint: gpointer,
        marshal_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_cclosure_marshal_VOID__LONGv(
        closure: *mut GClosure,
        return_value: *mut GValue,
        instance: gpointer,
        args: va_list,
        marshal_data: gpointer,
        n_params: ::core::ffi::c_int,
        param_types: *mut GType,
    );
}
extern "C" {
    pub fn _frida_g_cclosure_marshal_VOID__ULONG(
        closure: *mut GClosure,
        return_value: *mut GValue,
        n_param_values: guint,
        param_values: *const GValue,
        invocation_hint: gpointer,
        marshal_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_cclosure_marshal_VOID__ULONGv(
        closure: *mut GClosure,
        return_value: *mut GValue,
        instance: gpointer,
        args: va_list,
        marshal_data: gpointer,
        n_params: ::core::ffi::c_int,
        param_types: *mut GType,
    );
}
extern "C" {
    pub fn _frida_g_cclosure_marshal_VOID__ENUM(
        closure: *mut GClosure,
        return_value: *mut GValue,
        n_param_values: guint,
        param_values: *const GValue,
        invocation_hint: gpointer,
        marshal_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_cclosure_marshal_VOID__ENUMv(
        closure: *mut GClosure,
        return_value: *mut GValue,
        instance: gpointer,
        args: va_list,
        marshal_data: gpointer,
        n_params: ::core::ffi::c_int,
        param_types: *mut GType,
    );
}
extern "C" {
    pub fn _frida_g_cclosure_marshal_VOID__FLAGS(
        closure: *mut GClosure,
        return_value: *mut GValue,
        n_param_values: guint,
        param_values: *const GValue,
        invocation_hint: gpointer,
        marshal_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_cclosure_marshal_VOID__FLAGSv(
        closure: *mut GClosure,
        return_value: *mut GValue,
        instance: gpointer,
        args: va_list,
        marshal_data: gpointer,
        n_params: ::core::ffi::c_int,
        param_types: *mut GType,
    );
}
extern "C" {
    pub fn _frida_g_cclosure_marshal_VOID__FLOAT(
        closure: *mut GClosure,
        return_value: *mut GValue,
        n_param_values: guint,
        param_values: *const GValue,
        invocation_hint: gpointer,
        marshal_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_cclosure_marshal_VOID__FLOATv(
        closure: *mut GClosure,
        return_value: *mut GValue,
        instance: gpointer,
        args: va_list,
        marshal_data: gpointer,
        n_params: ::core::ffi::c_int,
        param_types: *mut GType,
    );
}
extern "C" {
    pub fn _frida_g_cclosure_marshal_VOID__DOUBLE(
        closure: *mut GClosure,
        return_value: *mut GValue,
        n_param_values: guint,
        param_values: *const GValue,
        invocation_hint: gpointer,
        marshal_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_cclosure_marshal_VOID__DOUBLEv(
        closure: *mut GClosure,
        return_value: *mut GValue,
        instance: gpointer,
        args: va_list,
        marshal_data: gpointer,
        n_params: ::core::ffi::c_int,
        param_types: *mut GType,
    );
}
extern "C" {
    pub fn _frida_g_cclosure_marshal_VOID__STRING(
        closure: *mut GClosure,
        return_value: *mut GValue,
        n_param_values: guint,
        param_values: *const GValue,
        invocation_hint: gpointer,
        marshal_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_cclosure_marshal_VOID__STRINGv(
        closure: *mut GClosure,
        return_value: *mut GValue,
        instance: gpointer,
        args: va_list,
        marshal_data: gpointer,
        n_params: ::core::ffi::c_int,
        param_types: *mut GType,
    );
}
extern "C" {
    pub fn _frida_g_cclosure_marshal_VOID__PARAM(
        closure: *mut GClosure,
        return_value: *mut GValue,
        n_param_values: guint,
        param_values: *const GValue,
        invocation_hint: gpointer,
        marshal_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_cclosure_marshal_VOID__PARAMv(
        closure: *mut GClosure,
        return_value: *mut GValue,
        instance: gpointer,
        args: va_list,
        marshal_data: gpointer,
        n_params: ::core::ffi::c_int,
        param_types: *mut GType,
    );
}
extern "C" {
    pub fn _frida_g_cclosure_marshal_VOID__BOXED(
        closure: *mut GClosure,
        return_value: *mut GValue,
        n_param_values: guint,
        param_values: *const GValue,
        invocation_hint: gpointer,
        marshal_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_cclosure_marshal_VOID__BOXEDv(
        closure: *mut GClosure,
        return_value: *mut GValue,
        instance: gpointer,
        args: va_list,
        marshal_data: gpointer,
        n_params: ::core::ffi::c_int,
        param_types: *mut GType,
    );
}
extern "C" {
    pub fn _frida_g_cclosure_marshal_VOID__POINTER(
        closure: *mut GClosure,
        return_value: *mut GValue,
        n_param_values: guint,
        param_values: *const GValue,
        invocation_hint: gpointer,
        marshal_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_cclosure_marshal_VOID__POINTERv(
        closure: *mut GClosure,
        return_value: *mut GValue,
        instance: gpointer,
        args: va_list,
        marshal_data: gpointer,
        n_params: ::core::ffi::c_int,
        param_types: *mut GType,
    );
}
extern "C" {
    pub fn _frida_g_cclosure_marshal_VOID__OBJECT(
        closure: *mut GClosure,
        return_value: *mut GValue,
        n_param_values: guint,
        param_values: *const GValue,
        invocation_hint: gpointer,
        marshal_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_cclosure_marshal_VOID__OBJECTv(
        closure: *mut GClosure,
        return_value: *mut GValue,
        instance: gpointer,
        args: va_list,
        marshal_data: gpointer,
        n_params: ::core::ffi::c_int,
        param_types: *mut GType,
    );
}
extern "C" {
    pub fn _frida_g_cclosure_marshal_VOID__VARIANT(
        closure: *mut GClosure,
        return_value: *mut GValue,
        n_param_values: guint,
        param_values: *const GValue,
        invocation_hint: gpointer,
        marshal_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_cclosure_marshal_VOID__VARIANTv(
        closure: *mut GClosure,
        return_value: *mut GValue,
        instance: gpointer,
        args: va_list,
        marshal_data: gpointer,
        n_params: ::core::ffi::c_int,
        param_types: *mut GType,
    );
}
extern "C" {
    pub fn _frida_g_cclosure_marshal_VOID__UINT_POINTER(
        closure: *mut GClosure,
        return_value: *mut GValue,
        n_param_values: guint,
        param_values: *const GValue,
        invocation_hint: gpointer,
        marshal_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_cclosure_marshal_VOID__UINT_POINTERv(
        closure: *mut GClosure,
        return_value: *mut GValue,
        instance: gpointer,
        args: va_list,
        marshal_data: gpointer,
        n_params: ::core::ffi::c_int,
        param_types: *mut GType,
    );
}
extern "C" {
    pub fn _frida_g_cclosure_marshal_BOOLEAN__FLAGS(
        closure: *mut GClosure,
        return_value: *mut GValue,
        n_param_values: guint,
        param_values: *const GValue,
        invocation_hint: gpointer,
        marshal_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_cclosure_marshal_BOOLEAN__FLAGSv(
        closure: *mut GClosure,
        return_value: *mut GValue,
        instance: gpointer,
        args: va_list,
        marshal_data: gpointer,
        n_params: ::core::ffi::c_int,
        param_types: *mut GType,
    );
}
extern "C" {
    pub fn _frida_g_cclosure_marshal_STRING__OBJECT_POINTER(
        closure: *mut GClosure,
        return_value: *mut GValue,
        n_param_values: guint,
        param_values: *const GValue,
        invocation_hint: gpointer,
        marshal_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_cclosure_marshal_STRING__OBJECT_POINTERv(
        closure: *mut GClosure,
        return_value: *mut GValue,
        instance: gpointer,
        args: va_list,
        marshal_data: gpointer,
        n_params: ::core::ffi::c_int,
        param_types: *mut GType,
    );
}
extern "C" {
    pub fn _frida_g_cclosure_marshal_BOOLEAN__BOXED_BOXED(
        closure: *mut GClosure,
        return_value: *mut GValue,
        n_param_values: guint,
        param_values: *const GValue,
        invocation_hint: gpointer,
        marshal_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv(
        closure: *mut GClosure,
        return_value: *mut GValue,
        instance: gpointer,
        args: va_list,
        marshal_data: gpointer,
        n_params: ::core::ffi::c_int,
        param_types: *mut GType,
    );
}
pub type GSignalQuery = _GSignalQuery;
pub type GSignalInvocationHint = _GSignalInvocationHint;
pub type GSignalCMarshaller = GClosureMarshal;
pub type GSignalCVaMarshaller = GVaClosureMarshal;
pub type GSignalEmissionHook = ::core::option::Option<
    unsafe extern "C" fn(
        ihint: *mut GSignalInvocationHint,
        n_param_values: guint,
        param_values: *const GValue,
        user_data: gpointer,
    ) -> gboolean,
>;
pub type GSignalAccumulator = ::core::option::Option<
    unsafe extern "C" fn(
        ihint: *mut GSignalInvocationHint,
        return_accu: *mut GValue,
        handler_return: *const GValue,
        user_data: gpointer,
    ) -> gboolean,
>;
pub const GSignalFlags_G_SIGNAL_RUN_FIRST: GSignalFlags = 1;
pub const GSignalFlags_G_SIGNAL_RUN_LAST: GSignalFlags = 2;
pub const GSignalFlags_G_SIGNAL_RUN_CLEANUP: GSignalFlags = 4;
pub const GSignalFlags_G_SIGNAL_NO_RECURSE: GSignalFlags = 8;
pub const GSignalFlags_G_SIGNAL_DETAILED: GSignalFlags = 16;
pub const GSignalFlags_G_SIGNAL_ACTION: GSignalFlags = 32;
pub const GSignalFlags_G_SIGNAL_NO_HOOKS: GSignalFlags = 64;
pub const GSignalFlags_G_SIGNAL_MUST_COLLECT: GSignalFlags = 128;
pub const GSignalFlags_G_SIGNAL_DEPRECATED: GSignalFlags = 256;
pub const GSignalFlags_G_SIGNAL_ACCUMULATOR_FIRST_RUN: GSignalFlags = 131072;
pub type GSignalFlags = ::core::ffi::c_uint;
pub const GConnectFlags_G_CONNECT_DEFAULT: GConnectFlags = 0;
pub const GConnectFlags_G_CONNECT_AFTER: GConnectFlags = 1;
pub const GConnectFlags_G_CONNECT_SWAPPED: GConnectFlags = 2;
pub type GConnectFlags = ::core::ffi::c_uint;
pub const GSignalMatchType_G_SIGNAL_MATCH_ID: GSignalMatchType = 1;
pub const GSignalMatchType_G_SIGNAL_MATCH_DETAIL: GSignalMatchType = 2;
pub const GSignalMatchType_G_SIGNAL_MATCH_CLOSURE: GSignalMatchType = 4;
pub const GSignalMatchType_G_SIGNAL_MATCH_FUNC: GSignalMatchType = 8;
pub const GSignalMatchType_G_SIGNAL_MATCH_DATA: GSignalMatchType = 16;
pub const GSignalMatchType_G_SIGNAL_MATCH_UNBLOCKED: GSignalMatchType = 32;
pub type GSignalMatchType = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSignalInvocationHint {
    pub signal_id: guint,
    pub detail: GQuark,
    pub run_type: GSignalFlags,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSignalQuery {
    pub signal_id: guint,
    pub signal_name: *const gchar,
    pub itype: GType,
    pub signal_flags: GSignalFlags,
    pub return_type: GType,
    pub n_params: guint,
    pub param_types: *const GType,
}
extern "C" {
    pub fn _frida_g_signal_newv(
        signal_name: *const gchar,
        itype: GType,
        signal_flags: GSignalFlags,
        class_closure: *mut GClosure,
        accumulator: GSignalAccumulator,
        accu_data: gpointer,
        c_marshaller: GSignalCMarshaller,
        return_type: GType,
        n_params: guint,
        param_types: *mut GType,
    ) -> guint;
}
extern "C" {
    pub fn _frida_g_signal_new_valist(
        signal_name: *const gchar,
        itype: GType,
        signal_flags: GSignalFlags,
        class_closure: *mut GClosure,
        accumulator: GSignalAccumulator,
        accu_data: gpointer,
        c_marshaller: GSignalCMarshaller,
        return_type: GType,
        n_params: guint,
        args: va_list,
    ) -> guint;
}
extern "C" {
    pub fn _frida_g_signal_new(
        signal_name: *const gchar,
        itype: GType,
        signal_flags: GSignalFlags,
        class_offset: guint,
        accumulator: GSignalAccumulator,
        accu_data: gpointer,
        c_marshaller: GSignalCMarshaller,
        return_type: GType,
        n_params: guint,
        ...
    ) -> guint;
}
extern "C" {
    pub fn _frida_g_signal_new_class_handler(
        signal_name: *const gchar,
        itype: GType,
        signal_flags: GSignalFlags,
        class_handler: GCallback,
        accumulator: GSignalAccumulator,
        accu_data: gpointer,
        c_marshaller: GSignalCMarshaller,
        return_type: GType,
        n_params: guint,
        ...
    ) -> guint;
}
extern "C" {
    pub fn _frida_g_signal_set_va_marshaller(
        signal_id: guint,
        instance_type: GType,
        va_marshaller: GSignalCVaMarshaller,
    );
}
extern "C" {
    pub fn _frida_g_signal_emitv(
        instance_and_params: *const GValue,
        signal_id: guint,
        detail: GQuark,
        return_value: *mut GValue,
    );
}
extern "C" {
    pub fn _frida_g_signal_emit_valist(
        instance: gpointer,
        signal_id: guint,
        detail: GQuark,
        var_args: va_list,
    );
}
extern "C" {
    pub fn _frida_g_signal_emit(instance: gpointer, signal_id: guint, detail: GQuark, ...);
}
extern "C" {
    pub fn _frida_g_signal_emit_by_name(instance: gpointer, detailed_signal: *const gchar, ...);
}
extern "C" {
    pub fn _frida_g_signal_lookup(name: *const gchar, itype: GType) -> guint;
}
extern "C" {
    pub fn _frida_g_signal_name(signal_id: guint) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_signal_query(signal_id: guint, query: *mut GSignalQuery);
}
extern "C" {
    pub fn _frida_g_signal_list_ids(itype: GType, n_ids: *mut guint) -> *mut guint;
}
extern "C" {
    pub fn _frida_g_signal_is_valid_name(name: *const gchar) -> gboolean;
}
extern "C" {
    pub fn _frida_g_signal_parse_name(
        detailed_signal: *const gchar,
        itype: GType,
        signal_id_p: *mut guint,
        detail_p: *mut GQuark,
        force_detail_quark: gboolean,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_signal_get_invocation_hint(instance: gpointer) -> *mut GSignalInvocationHint;
}
extern "C" {
    pub fn _frida_g_signal_stop_emission(instance: gpointer, signal_id: guint, detail: GQuark);
}
extern "C" {
    pub fn _frida_g_signal_stop_emission_by_name(instance: gpointer, detailed_signal: *const gchar);
}
extern "C" {
    pub fn _frida_g_signal_add_emission_hook(
        signal_id: guint,
        detail: GQuark,
        hook_func: GSignalEmissionHook,
        hook_data: gpointer,
        data_destroy: GDestroyNotify,
    ) -> gulong;
}
extern "C" {
    pub fn _frida_g_signal_remove_emission_hook(signal_id: guint, hook_id: gulong);
}
extern "C" {
    pub fn _frida_g_signal_has_handler_pending(
        instance: gpointer,
        signal_id: guint,
        detail: GQuark,
        may_be_blocked: gboolean,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_signal_connect_closure_by_id(
        instance: gpointer,
        signal_id: guint,
        detail: GQuark,
        closure: *mut GClosure,
        after: gboolean,
    ) -> gulong;
}
extern "C" {
    pub fn _frida_g_signal_connect_closure(
        instance: gpointer,
        detailed_signal: *const gchar,
        closure: *mut GClosure,
        after: gboolean,
    ) -> gulong;
}
extern "C" {
    pub fn _frida_g_signal_connect_data(
        instance: gpointer,
        detailed_signal: *const gchar,
        c_handler: GCallback,
        data: gpointer,
        destroy_data: GClosureNotify,
        connect_flags: GConnectFlags,
    ) -> gulong;
}
extern "C" {
    pub fn _frida_g_signal_handler_block(instance: gpointer, handler_id: gulong);
}
extern "C" {
    pub fn _frida_g_signal_handler_unblock(instance: gpointer, handler_id: gulong);
}
extern "C" {
    pub fn _frida_g_signal_handler_disconnect(instance: gpointer, handler_id: gulong);
}
extern "C" {
    pub fn _frida_g_signal_handler_is_connected(instance: gpointer, handler_id: gulong)
        -> gboolean;
}
extern "C" {
    pub fn _frida_g_signal_handler_find(
        instance: gpointer,
        mask: GSignalMatchType,
        signal_id: guint,
        detail: GQuark,
        closure: *mut GClosure,
        func: gpointer,
        data: gpointer,
    ) -> gulong;
}
extern "C" {
    pub fn _frida_g_signal_handlers_block_matched(
        instance: gpointer,
        mask: GSignalMatchType,
        signal_id: guint,
        detail: GQuark,
        closure: *mut GClosure,
        func: gpointer,
        data: gpointer,
    ) -> guint;
}
extern "C" {
    pub fn _frida_g_signal_handlers_unblock_matched(
        instance: gpointer,
        mask: GSignalMatchType,
        signal_id: guint,
        detail: GQuark,
        closure: *mut GClosure,
        func: gpointer,
        data: gpointer,
    ) -> guint;
}
extern "C" {
    pub fn _frida_g_signal_handlers_disconnect_matched(
        instance: gpointer,
        mask: GSignalMatchType,
        signal_id: guint,
        detail: GQuark,
        closure: *mut GClosure,
        func: gpointer,
        data: gpointer,
    ) -> guint;
}
extern "C" {
    pub fn _frida_g_clear_signal_handler(handler_id_ptr: *mut gulong, instance: gpointer);
}
extern "C" {
    pub fn _frida_g_signal_override_class_closure(
        signal_id: guint,
        instance_type: GType,
        class_closure: *mut GClosure,
    );
}
extern "C" {
    pub fn _frida_g_signal_override_class_handler(
        signal_name: *const gchar,
        instance_type: GType,
        class_handler: GCallback,
    );
}
extern "C" {
    pub fn _frida_g_signal_chain_from_overridden(
        instance_and_params: *const GValue,
        return_value: *mut GValue,
    );
}
extern "C" {
    pub fn _frida_g_signal_chain_from_overridden_handler(instance: gpointer, ...);
}
extern "C" {
    pub fn _frida_g_signal_accumulator_true_handled(
        ihint: *mut GSignalInvocationHint,
        return_accu: *mut GValue,
        handler_return: *const GValue,
        dummy: gpointer,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_signal_accumulator_first_wins(
        ihint: *mut GSignalInvocationHint,
        return_accu: *mut GValue,
        handler_return: *const GValue,
        dummy: gpointer,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_signal_handlers_destroy(instance: gpointer);
}
extern "C" {
    pub fn _g_signals_destroy(itype: GType);
}
extern "C" {
    pub fn _frida_g_date_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_strv_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_gstring_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_hash_table_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_array_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_byte_array_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_ptr_array_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_bytes_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_variant_type_get_gtype() -> GType;
}
extern "C" {
    pub fn _frida_g_regex_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_match_info_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_error_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_date_time_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_time_zone_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_io_channel_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_io_condition_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_variant_builder_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_variant_dict_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_key_file_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_main_loop_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_main_context_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_source_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_pollfd_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_thread_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_checksum_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_markup_parse_context_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_mapped_file_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_option_group_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_uri_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_tree_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_pattern_spec_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_bookmark_file_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_variant_get_gtype() -> GType;
}
pub type GBoxedCopyFunc = ::core::option::Option<unsafe extern "C" fn(boxed: gpointer) -> gpointer>;
pub type GBoxedFreeFunc = ::core::option::Option<unsafe extern "C" fn(boxed: gpointer)>;
extern "C" {
    pub fn _frida_g_boxed_copy(boxed_type: GType, src_boxed: gconstpointer) -> gpointer;
}
extern "C" {
    pub fn _frida_g_boxed_free(boxed_type: GType, boxed: gpointer);
}
extern "C" {
    pub fn _frida_g_value_set_boxed(value: *mut GValue, v_boxed: gconstpointer);
}
extern "C" {
    pub fn _frida_g_value_set_static_boxed(value: *mut GValue, v_boxed: gconstpointer);
}
extern "C" {
    pub fn _frida_g_value_take_boxed(value: *mut GValue, v_boxed: gconstpointer);
}
extern "C" {
    pub fn _frida_g_value_set_boxed_take_ownership(value: *mut GValue, v_boxed: gconstpointer);
}
extern "C" {
    pub fn _frida_g_value_get_boxed(value: *const GValue) -> gpointer;
}
extern "C" {
    pub fn _frida_g_value_dup_boxed(value: *const GValue) -> gpointer;
}
extern "C" {
    pub fn _frida_g_boxed_type_register_static(
        name: *const gchar,
        boxed_copy: GBoxedCopyFunc,
        boxed_free: GBoxedFreeFunc,
    ) -> GType;
}
extern "C" {
    pub fn _frida_g_closure_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_value_get_type() -> GType;
}
pub type GObject = _GObject;
pub type GObjectClass = _GObjectClass;
pub type GInitiallyUnowned = _GObject;
pub type GInitiallyUnownedClass = _GObjectClass;
pub type GObjectConstructParam = _GObjectConstructParam;
pub type GObjectGetPropertyFunc = ::core::option::Option<
    unsafe extern "C" fn(
        object: *mut GObject,
        property_id: guint,
        value: *mut GValue,
        pspec: *mut GParamSpec,
    ),
>;
pub type GObjectSetPropertyFunc = ::core::option::Option<
    unsafe extern "C" fn(
        object: *mut GObject,
        property_id: guint,
        value: *const GValue,
        pspec: *mut GParamSpec,
    ),
>;
pub type GObjectFinalizeFunc = ::core::option::Option<unsafe extern "C" fn(object: *mut GObject)>;
pub type GWeakNotify = ::core::option::Option<
    unsafe extern "C" fn(data: gpointer, where_the_object_was: *mut GObject),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GObject {
    pub g_type_instance: GTypeInstance,
    pub ref_count: guint,
    pub qdata: *mut GData,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GObjectClass {
    pub g_type_class: GTypeClass,
    pub construct_properties: *mut GSList,
    pub constructor: ::core::option::Option<
        unsafe extern "C" fn(
            type_: GType,
            n_construct_properties: guint,
            construct_properties: *mut GObjectConstructParam,
        ) -> *mut GObject,
    >,
    pub set_property: ::core::option::Option<
        unsafe extern "C" fn(
            object: *mut GObject,
            property_id: guint,
            value: *const GValue,
            pspec: *mut GParamSpec,
        ),
    >,
    pub get_property: ::core::option::Option<
        unsafe extern "C" fn(
            object: *mut GObject,
            property_id: guint,
            value: *mut GValue,
            pspec: *mut GParamSpec,
        ),
    >,
    pub dispose: ::core::option::Option<unsafe extern "C" fn(object: *mut GObject)>,
    pub finalize: ::core::option::Option<unsafe extern "C" fn(object: *mut GObject)>,
    pub dispatch_properties_changed: ::core::option::Option<
        unsafe extern "C" fn(object: *mut GObject, n_pspecs: guint, pspecs: *mut *mut GParamSpec),
    >,
    pub notify:
        ::core::option::Option<unsafe extern "C" fn(object: *mut GObject, pspec: *mut GParamSpec)>,
    pub constructed: ::core::option::Option<unsafe extern "C" fn(object: *mut GObject)>,
    pub flags: gsize,
    pub n_construct_properties: gsize,
    pub pspecs: gpointer,
    pub n_pspecs: gsize,
    pub pdummy: [gpointer; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GObjectConstructParam {
    pub pspec: *mut GParamSpec,
    pub value: *mut GValue,
}
extern "C" {
    pub fn _frida_g_initially_unowned_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_object_class_install_property(
        oclass: *mut GObjectClass,
        property_id: guint,
        pspec: *mut GParamSpec,
    );
}
extern "C" {
    pub fn _frida_g_object_class_find_property(
        oclass: *mut GObjectClass,
        property_name: *const gchar,
    ) -> *mut GParamSpec;
}
extern "C" {
    pub fn _frida_g_object_class_list_properties(
        oclass: *mut GObjectClass,
        n_properties: *mut guint,
    ) -> *mut *mut GParamSpec;
}
extern "C" {
    pub fn _frida_g_object_class_override_property(
        oclass: *mut GObjectClass,
        property_id: guint,
        name: *const gchar,
    );
}
extern "C" {
    pub fn _frida_g_object_class_install_properties(
        oclass: *mut GObjectClass,
        n_pspecs: guint,
        pspecs: *mut *mut GParamSpec,
    );
}
extern "C" {
    pub fn _frida_g_object_interface_install_property(g_iface: gpointer, pspec: *mut GParamSpec);
}
extern "C" {
    pub fn _frida_g_object_interface_find_property(
        g_iface: gpointer,
        property_name: *const gchar,
    ) -> *mut GParamSpec;
}
extern "C" {
    pub fn _frida_g_object_interface_list_properties(
        g_iface: gpointer,
        n_properties_p: *mut guint,
    ) -> *mut *mut GParamSpec;
}
extern "C" {
    pub fn _frida_g_object_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_object_new(
        object_type: GType,
        first_property_name: *const gchar,
        ...
    ) -> gpointer;
}
extern "C" {
    pub fn _frida_g_object_new_with_properties(
        object_type: GType,
        n_properties: guint,
        names: *mut *const ::core::ffi::c_char,
        values: *const GValue,
    ) -> *mut GObject;
}
extern "C" {
    pub fn _frida_g_object_newv(
        object_type: GType,
        n_parameters: guint,
        parameters: *mut GParameter,
    ) -> gpointer;
}
extern "C" {
    pub fn _frida_g_object_new_valist(
        object_type: GType,
        first_property_name: *const gchar,
        var_args: va_list,
    ) -> *mut GObject;
}
extern "C" {
    pub fn _frida_g_object_set(object: gpointer, first_property_name: *const gchar, ...);
}
extern "C" {
    pub fn _frida_g_object_get(object: gpointer, first_property_name: *const gchar, ...);
}
extern "C" {
    pub fn _frida_g_object_connect(object: gpointer, signal_spec: *const gchar, ...) -> gpointer;
}
extern "C" {
    pub fn _frida_g_object_disconnect(object: gpointer, signal_spec: *const gchar, ...);
}
extern "C" {
    pub fn _frida_g_object_setv(
        object: *mut GObject,
        n_properties: guint,
        names: *mut *const gchar,
        values: *const GValue,
    );
}
extern "C" {
    pub fn _frida_g_object_set_valist(
        object: *mut GObject,
        first_property_name: *const gchar,
        var_args: va_list,
    );
}
extern "C" {
    pub fn _frida_g_object_getv(
        object: *mut GObject,
        n_properties: guint,
        names: *mut *const gchar,
        values: *mut GValue,
    );
}
extern "C" {
    pub fn _frida_g_object_get_valist(
        object: *mut GObject,
        first_property_name: *const gchar,
        var_args: va_list,
    );
}
extern "C" {
    pub fn _frida_g_object_set_property(
        object: *mut GObject,
        property_name: *const gchar,
        value: *const GValue,
    );
}
extern "C" {
    pub fn _frida_g_object_get_property(
        object: *mut GObject,
        property_name: *const gchar,
        value: *mut GValue,
    );
}
extern "C" {
    pub fn _frida_g_object_freeze_notify(object: *mut GObject);
}
extern "C" {
    pub fn _frida_g_object_notify(object: *mut GObject, property_name: *const gchar);
}
extern "C" {
    pub fn _frida_g_object_notify_by_pspec(object: *mut GObject, pspec: *mut GParamSpec);
}
extern "C" {
    pub fn _frida_g_object_thaw_notify(object: *mut GObject);
}
extern "C" {
    pub fn _frida_g_object_is_floating(object: gpointer) -> gboolean;
}
extern "C" {
    pub fn _frida_g_object_ref_sink(object: gpointer) -> gpointer;
}
extern "C" {
    pub fn _frida_g_object_take_ref(object: gpointer) -> gpointer;
}
extern "C" {
    pub fn _frida_g_object_ref(object: gpointer) -> gpointer;
}
extern "C" {
    pub fn _frida_g_object_unref(object: gpointer);
}
extern "C" {
    pub fn _frida_g_object_weak_ref(object: *mut GObject, notify: GWeakNotify, data: gpointer);
}
extern "C" {
    pub fn _frida_g_object_weak_unref(object: *mut GObject, notify: GWeakNotify, data: gpointer);
}
extern "C" {
    pub fn _frida_g_object_add_weak_pointer(
        object: *mut GObject,
        weak_pointer_location: *mut gpointer,
    );
}
extern "C" {
    pub fn _frida_g_object_remove_weak_pointer(
        object: *mut GObject,
        weak_pointer_location: *mut gpointer,
    );
}
pub type GToggleNotify = ::core::option::Option<
    unsafe extern "C" fn(data: gpointer, object: *mut GObject, is_last_ref: gboolean),
>;
extern "C" {
    pub fn _frida_g_object_add_toggle_ref(
        object: *mut GObject,
        notify: GToggleNotify,
        data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_object_remove_toggle_ref(
        object: *mut GObject,
        notify: GToggleNotify,
        data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_object_get_qdata(object: *mut GObject, quark: GQuark) -> gpointer;
}
extern "C" {
    pub fn _frida_g_object_set_qdata(object: *mut GObject, quark: GQuark, data: gpointer);
}
extern "C" {
    pub fn _frida_g_object_set_qdata_full(
        object: *mut GObject,
        quark: GQuark,
        data: gpointer,
        destroy: GDestroyNotify,
    );
}
extern "C" {
    pub fn _frida_g_object_steal_qdata(object: *mut GObject, quark: GQuark) -> gpointer;
}
extern "C" {
    pub fn _frida_g_object_dup_qdata(
        object: *mut GObject,
        quark: GQuark,
        dup_func: GDuplicateFunc,
        user_data: gpointer,
    ) -> gpointer;
}
extern "C" {
    pub fn _frida_g_object_replace_qdata(
        object: *mut GObject,
        quark: GQuark,
        oldval: gpointer,
        newval: gpointer,
        destroy: GDestroyNotify,
        old_destroy: *mut GDestroyNotify,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_object_get_data(object: *mut GObject, key: *const gchar) -> gpointer;
}
extern "C" {
    pub fn _frida_g_object_set_data(object: *mut GObject, key: *const gchar, data: gpointer);
}
extern "C" {
    pub fn _frida_g_object_set_data_full(
        object: *mut GObject,
        key: *const gchar,
        data: gpointer,
        destroy: GDestroyNotify,
    );
}
extern "C" {
    pub fn _frida_g_object_steal_data(object: *mut GObject, key: *const gchar) -> gpointer;
}
extern "C" {
    pub fn _frida_g_object_dup_data(
        object: *mut GObject,
        key: *const gchar,
        dup_func: GDuplicateFunc,
        user_data: gpointer,
    ) -> gpointer;
}
extern "C" {
    pub fn _frida_g_object_replace_data(
        object: *mut GObject,
        key: *const gchar,
        oldval: gpointer,
        newval: gpointer,
        destroy: GDestroyNotify,
        old_destroy: *mut GDestroyNotify,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_object_watch_closure(object: *mut GObject, closure: *mut GClosure);
}
extern "C" {
    pub fn _frida_g_cclosure_new_object(
        callback_func: GCallback,
        object: *mut GObject,
    ) -> *mut GClosure;
}
extern "C" {
    pub fn _frida_g_cclosure_new_object_swap(
        callback_func: GCallback,
        object: *mut GObject,
    ) -> *mut GClosure;
}
extern "C" {
    pub fn _frida_g_closure_new_object(
        sizeof_closure: guint,
        object: *mut GObject,
    ) -> *mut GClosure;
}
extern "C" {
    pub fn _frida_g_value_set_object(value: *mut GValue, v_object: gpointer);
}
extern "C" {
    pub fn _frida_g_value_get_object(value: *const GValue) -> gpointer;
}
extern "C" {
    pub fn _frida_g_value_dup_object(value: *const GValue) -> gpointer;
}
extern "C" {
    pub fn _frida_g_signal_connect_object(
        instance: gpointer,
        detailed_signal: *const gchar,
        c_handler: GCallback,
        gobject: gpointer,
        connect_flags: GConnectFlags,
    ) -> gulong;
}
extern "C" {
    pub fn _frida_g_object_force_floating(object: *mut GObject);
}
extern "C" {
    pub fn _frida_g_object_run_dispose(object: *mut GObject);
}
extern "C" {
    pub fn _frida_g_value_take_object(value: *mut GValue, v_object: gpointer);
}
extern "C" {
    pub fn _frida_g_value_set_object_take_ownership(value: *mut GValue, v_object: gpointer);
}
extern "C" {
    pub fn _frida_g_object_compat_control(what: gsize, data: gpointer) -> gsize;
}
extern "C" {
    pub fn _frida_g_clear_object(object_ptr: *mut *mut GObject);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct GWeakRef {
    pub priv_: GWeakRef__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union GWeakRef__bindgen_ty_1 {
    pub p: gpointer,
}
extern "C" {
    pub fn _frida_g_weak_ref_init(weak_ref: *mut GWeakRef, object: gpointer);
}
extern "C" {
    pub fn _frida_g_weak_ref_clear(weak_ref: *mut GWeakRef);
}
extern "C" {
    pub fn _frida_g_weak_ref_get(weak_ref: *mut GWeakRef) -> gpointer;
}
extern "C" {
    pub fn _frida_g_weak_ref_set(weak_ref: *mut GWeakRef, object: gpointer);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GBinding {
    _unused: [u8; 0],
}
pub type GBinding = _GBinding;
pub type GBindingTransformFunc = ::core::option::Option<
    unsafe extern "C" fn(
        binding: *mut GBinding,
        from_value: *const GValue,
        to_value: *mut GValue,
        user_data: gpointer,
    ) -> gboolean,
>;
pub const GBindingFlags_G_BINDING_DEFAULT: GBindingFlags = 0;
pub const GBindingFlags_G_BINDING_BIDIRECTIONAL: GBindingFlags = 1;
pub const GBindingFlags_G_BINDING_SYNC_CREATE: GBindingFlags = 2;
pub const GBindingFlags_G_BINDING_INVERT_BOOLEAN: GBindingFlags = 4;
pub type GBindingFlags = ::core::ffi::c_uint;
extern "C" {
    pub fn _frida_g_binding_flags_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_binding_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_binding_get_flags(binding: *mut GBinding) -> GBindingFlags;
}
extern "C" {
    pub fn _frida_g_binding_get_source(binding: *mut GBinding) -> *mut GObject;
}
extern "C" {
    pub fn _frida_g_binding_dup_source(binding: *mut GBinding) -> *mut GObject;
}
extern "C" {
    pub fn _frida_g_binding_get_target(binding: *mut GBinding) -> *mut GObject;
}
extern "C" {
    pub fn _frida_g_binding_dup_target(binding: *mut GBinding) -> *mut GObject;
}
extern "C" {
    pub fn _frida_g_binding_get_source_property(binding: *mut GBinding) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_binding_get_target_property(binding: *mut GBinding) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_binding_unbind(binding: *mut GBinding);
}
extern "C" {
    pub fn _frida_g_object_bind_property(
        source: gpointer,
        source_property: *const gchar,
        target: gpointer,
        target_property: *const gchar,
        flags: GBindingFlags,
    ) -> *mut GBinding;
}
extern "C" {
    pub fn _frida_g_object_bind_property_full(
        source: gpointer,
        source_property: *const gchar,
        target: gpointer,
        target_property: *const gchar,
        flags: GBindingFlags,
        transform_to: GBindingTransformFunc,
        transform_from: GBindingTransformFunc,
        user_data: gpointer,
        notify: GDestroyNotify,
    ) -> *mut GBinding;
}
extern "C" {
    pub fn _frida_g_object_bind_property_with_closures(
        source: gpointer,
        source_property: *const gchar,
        target: gpointer,
        target_property: *const gchar,
        flags: GBindingFlags,
        transform_to: *mut GClosure,
        transform_from: *mut GClosure,
    ) -> *mut GBinding;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GBindingGroup {
    _unused: [u8; 0],
}
pub type GBindingGroup = _GBindingGroup;
extern "C" {
    pub fn _frida_g_binding_group_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_binding_group_new() -> *mut GBindingGroup;
}
extern "C" {
    pub fn _frida_g_binding_group_dup_source(self_: *mut GBindingGroup) -> gpointer;
}
extern "C" {
    pub fn _frida_g_binding_group_set_source(self_: *mut GBindingGroup, source: gpointer);
}
extern "C" {
    pub fn _frida_g_binding_group_bind(
        self_: *mut GBindingGroup,
        source_property: *const gchar,
        target: gpointer,
        target_property: *const gchar,
        flags: GBindingFlags,
    );
}
extern "C" {
    pub fn _frida_g_binding_group_bind_full(
        self_: *mut GBindingGroup,
        source_property: *const gchar,
        target: gpointer,
        target_property: *const gchar,
        flags: GBindingFlags,
        transform_to: GBindingTransformFunc,
        transform_from: GBindingTransformFunc,
        user_data: gpointer,
        user_data_destroy: GDestroyNotify,
    );
}
extern "C" {
    pub fn _frida_g_binding_group_bind_with_closures(
        self_: *mut GBindingGroup,
        source_property: *const gchar,
        target: gpointer,
        target_property: *const gchar,
        flags: GBindingFlags,
        transform_to: *mut GClosure,
        transform_from: *mut GClosure,
    );
}
pub type GEnumClass = _GEnumClass;
pub type GFlagsClass = _GFlagsClass;
pub type GEnumValue = _GEnumValue;
pub type GFlagsValue = _GFlagsValue;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GEnumClass {
    pub g_type_class: GTypeClass,
    pub minimum: gint,
    pub maximum: gint,
    pub n_values: guint,
    pub values: *mut GEnumValue,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GFlagsClass {
    pub g_type_class: GTypeClass,
    pub mask: guint,
    pub n_values: guint,
    pub values: *mut GFlagsValue,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GEnumValue {
    pub value: gint,
    pub value_name: *const gchar,
    pub value_nick: *const gchar,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GFlagsValue {
    pub value: guint,
    pub value_name: *const gchar,
    pub value_nick: *const gchar,
}
extern "C" {
    pub fn _frida_g_enum_get_value(enum_class: *mut GEnumClass, value: gint) -> *mut GEnumValue;
}
extern "C" {
    pub fn _frida_g_enum_get_value_by_name(
        enum_class: *mut GEnumClass,
        name: *const gchar,
    ) -> *mut GEnumValue;
}
extern "C" {
    pub fn _frida_g_enum_get_value_by_nick(
        enum_class: *mut GEnumClass,
        nick: *const gchar,
    ) -> *mut GEnumValue;
}
extern "C" {
    pub fn _frida_g_flags_get_first_value(
        flags_class: *mut GFlagsClass,
        value: guint,
    ) -> *mut GFlagsValue;
}
extern "C" {
    pub fn _frida_g_flags_get_value_by_name(
        flags_class: *mut GFlagsClass,
        name: *const gchar,
    ) -> *mut GFlagsValue;
}
extern "C" {
    pub fn _frida_g_flags_get_value_by_nick(
        flags_class: *mut GFlagsClass,
        nick: *const gchar,
    ) -> *mut GFlagsValue;
}
extern "C" {
    pub fn _frida_g_enum_to_string(g_enum_type: GType, value: gint) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_flags_to_string(flags_type: GType, value: guint) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_value_set_enum(value: *mut GValue, v_enum: gint);
}
extern "C" {
    pub fn _frida_g_value_get_enum(value: *const GValue) -> gint;
}
extern "C" {
    pub fn _frida_g_value_set_flags(value: *mut GValue, v_flags: guint);
}
extern "C" {
    pub fn _frida_g_value_get_flags(value: *const GValue) -> guint;
}
extern "C" {
    pub fn _frida_g_enum_register_static(
        name: *const gchar,
        const_static_values: *const GEnumValue,
    ) -> GType;
}
extern "C" {
    pub fn _frida_g_flags_register_static(
        name: *const gchar,
        const_static_values: *const GFlagsValue,
    ) -> GType;
}
extern "C" {
    pub fn _frida_g_enum_complete_type_info(
        g_enum_type: GType,
        info: *mut GTypeInfo,
        const_values: *const GEnumValue,
    );
}
extern "C" {
    pub fn _frida_g_flags_complete_type_info(
        g_flags_type: GType,
        info: *mut GTypeInfo,
        const_values: *const GFlagsValue,
    );
}
extern "C" {
    pub fn _frida_g_unicode_type_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_unicode_break_type_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_unicode_script_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_normalize_mode_get_type() -> GType;
}
pub type GParamSpecChar = _GParamSpecChar;
pub type GParamSpecUChar = _GParamSpecUChar;
pub type GParamSpecBoolean = _GParamSpecBoolean;
pub type GParamSpecInt = _GParamSpecInt;
pub type GParamSpecUInt = _GParamSpecUInt;
pub type GParamSpecLong = _GParamSpecLong;
pub type GParamSpecULong = _GParamSpecULong;
pub type GParamSpecInt64 = _GParamSpecInt64;
pub type GParamSpecUInt64 = _GParamSpecUInt64;
pub type GParamSpecUnichar = _GParamSpecUnichar;
pub type GParamSpecEnum = _GParamSpecEnum;
pub type GParamSpecFlags = _GParamSpecFlags;
pub type GParamSpecFloat = _GParamSpecFloat;
pub type GParamSpecDouble = _GParamSpecDouble;
pub type GParamSpecString = _GParamSpecString;
pub type GParamSpecParam = _GParamSpecParam;
pub type GParamSpecBoxed = _GParamSpecBoxed;
pub type GParamSpecPointer = _GParamSpecPointer;
pub type GParamSpecValueArray = _GParamSpecValueArray;
pub type GParamSpecObject = _GParamSpecObject;
pub type GParamSpecOverride = _GParamSpecOverride;
pub type GParamSpecGType = _GParamSpecGType;
pub type GParamSpecVariant = _GParamSpecVariant;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GParamSpecChar {
    pub parent_instance: GParamSpec,
    pub minimum: gint8,
    pub maximum: gint8,
    pub default_value: gint8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GParamSpecUChar {
    pub parent_instance: GParamSpec,
    pub minimum: guint8,
    pub maximum: guint8,
    pub default_value: guint8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GParamSpecBoolean {
    pub parent_instance: GParamSpec,
    pub default_value: gboolean,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GParamSpecInt {
    pub parent_instance: GParamSpec,
    pub minimum: gint,
    pub maximum: gint,
    pub default_value: gint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GParamSpecUInt {
    pub parent_instance: GParamSpec,
    pub minimum: guint,
    pub maximum: guint,
    pub default_value: guint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GParamSpecLong {
    pub parent_instance: GParamSpec,
    pub minimum: glong,
    pub maximum: glong,
    pub default_value: glong,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GParamSpecULong {
    pub parent_instance: GParamSpec,
    pub minimum: gulong,
    pub maximum: gulong,
    pub default_value: gulong,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GParamSpecInt64 {
    pub parent_instance: GParamSpec,
    pub minimum: gint64,
    pub maximum: gint64,
    pub default_value: gint64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GParamSpecUInt64 {
    pub parent_instance: GParamSpec,
    pub minimum: guint64,
    pub maximum: guint64,
    pub default_value: guint64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GParamSpecUnichar {
    pub parent_instance: GParamSpec,
    pub default_value: gunichar,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GParamSpecEnum {
    pub parent_instance: GParamSpec,
    pub enum_class: *mut GEnumClass,
    pub default_value: gint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GParamSpecFlags {
    pub parent_instance: GParamSpec,
    pub flags_class: *mut GFlagsClass,
    pub default_value: guint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GParamSpecFloat {
    pub parent_instance: GParamSpec,
    pub minimum: gfloat,
    pub maximum: gfloat,
    pub default_value: gfloat,
    pub epsilon: gfloat,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GParamSpecDouble {
    pub parent_instance: GParamSpec,
    pub minimum: gdouble,
    pub maximum: gdouble,
    pub default_value: gdouble,
    pub epsilon: gdouble,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GParamSpecString {
    pub parent_instance: GParamSpec,
    pub default_value: *mut gchar,
    pub cset_first: *mut gchar,
    pub cset_nth: *mut gchar,
    pub substitutor: gchar,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u16; 3usize],
}
impl _GParamSpecString {
    #[inline]
    pub fn null_fold_if_empty(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_null_fold_if_empty(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn ensure_non_null(&self) -> guint {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_ensure_non_null(&mut self, val: guint) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        null_fold_if_empty: guint,
        ensure_non_null: guint,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let null_fold_if_empty: u32 = unsafe { ::core::mem::transmute(null_fold_if_empty) };
            null_fold_if_empty as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let ensure_non_null: u32 = unsafe { ::core::mem::transmute(ensure_non_null) };
            ensure_non_null as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GParamSpecParam {
    pub parent_instance: GParamSpec,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GParamSpecBoxed {
    pub parent_instance: GParamSpec,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GParamSpecPointer {
    pub parent_instance: GParamSpec,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GParamSpecValueArray {
    pub parent_instance: GParamSpec,
    pub element_spec: *mut GParamSpec,
    pub fixed_n_elements: guint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GParamSpecObject {
    pub parent_instance: GParamSpec,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GParamSpecOverride {
    pub parent_instance: GParamSpec,
    pub overridden: *mut GParamSpec,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GParamSpecGType {
    pub parent_instance: GParamSpec,
    pub is_a_type: GType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GParamSpecVariant {
    pub parent_instance: GParamSpec,
    pub type_: *mut GVariantType,
    pub default_value: *mut GVariant,
    pub padding: [gpointer; 4usize],
}
extern "C" {
    pub fn _frida_g_param_spec_char(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        minimum: gint8,
        maximum: gint8,
        default_value: gint8,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
extern "C" {
    pub fn _frida_g_param_spec_uchar(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        minimum: guint8,
        maximum: guint8,
        default_value: guint8,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
extern "C" {
    pub fn _frida_g_param_spec_boolean(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        default_value: gboolean,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
extern "C" {
    pub fn _frida_g_param_spec_int(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        minimum: gint,
        maximum: gint,
        default_value: gint,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
extern "C" {
    pub fn _frida_g_param_spec_uint(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        minimum: guint,
        maximum: guint,
        default_value: guint,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
extern "C" {
    pub fn _frida_g_param_spec_long(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        minimum: glong,
        maximum: glong,
        default_value: glong,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
extern "C" {
    pub fn _frida_g_param_spec_ulong(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        minimum: gulong,
        maximum: gulong,
        default_value: gulong,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
extern "C" {
    pub fn _frida_g_param_spec_int64(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        minimum: gint64,
        maximum: gint64,
        default_value: gint64,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
extern "C" {
    pub fn _frida_g_param_spec_uint64(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        minimum: guint64,
        maximum: guint64,
        default_value: guint64,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
extern "C" {
    pub fn _frida_g_param_spec_unichar(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        default_value: gunichar,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
extern "C" {
    pub fn _frida_g_param_spec_enum(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        enum_type: GType,
        default_value: gint,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
extern "C" {
    pub fn _frida_g_param_spec_flags(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        flags_type: GType,
        default_value: guint,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
extern "C" {
    pub fn _frida_g_param_spec_float(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        minimum: gfloat,
        maximum: gfloat,
        default_value: gfloat,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
extern "C" {
    pub fn _frida_g_param_spec_double(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        minimum: gdouble,
        maximum: gdouble,
        default_value: gdouble,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
extern "C" {
    pub fn _frida_g_param_spec_string(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        default_value: *const gchar,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
extern "C" {
    pub fn _frida_g_param_spec_param(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        param_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
extern "C" {
    pub fn _frida_g_param_spec_boxed(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        boxed_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
extern "C" {
    pub fn _frida_g_param_spec_pointer(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
extern "C" {
    pub fn _frida_g_param_spec_value_array(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        element_spec: *mut GParamSpec,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
extern "C" {
    pub fn _frida_g_param_spec_object(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        object_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
extern "C" {
    pub fn _frida_g_param_spec_override(
        name: *const gchar,
        overridden: *mut GParamSpec,
    ) -> *mut GParamSpec;
}
extern "C" {
    pub fn _frida_g_param_spec_gtype(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        is_a_type: GType,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
extern "C" {
    pub fn _frida_g_param_spec_variant(
        name: *const gchar,
        nick: *const gchar,
        blurb: *const gchar,
        type_: *const GVariantType,
        default_value: *mut GVariant,
        flags: GParamFlags,
    ) -> *mut GParamSpec;
}
extern "C" {
    pub static mut _frida_g_param_spec_types: *mut GType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSignalGroup {
    _unused: [u8; 0],
}
pub type GSignalGroup = _GSignalGroup;
extern "C" {
    pub fn _frida_g_signal_group_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_signal_group_new(target_type: GType) -> *mut GSignalGroup;
}
extern "C" {
    pub fn _frida_g_signal_group_set_target(self_: *mut GSignalGroup, target: gpointer);
}
extern "C" {
    pub fn _frida_g_signal_group_dup_target(self_: *mut GSignalGroup) -> gpointer;
}
extern "C" {
    pub fn _frida_g_signal_group_block(self_: *mut GSignalGroup);
}
extern "C" {
    pub fn _frida_g_signal_group_unblock(self_: *mut GSignalGroup);
}
extern "C" {
    pub fn _frida_g_signal_group_connect_closure(
        self_: *mut GSignalGroup,
        detailed_signal: *const gchar,
        closure: *mut GClosure,
        after: gboolean,
    );
}
extern "C" {
    pub fn _frida_g_signal_group_connect_object(
        self_: *mut GSignalGroup,
        detailed_signal: *const gchar,
        c_handler: GCallback,
        object: gpointer,
        flags: GConnectFlags,
    );
}
extern "C" {
    pub fn _frida_g_signal_group_connect_data(
        self_: *mut GSignalGroup,
        detailed_signal: *const gchar,
        c_handler: GCallback,
        data: gpointer,
        notify: GClosureNotify,
        flags: GConnectFlags,
    );
}
extern "C" {
    pub fn _frida_g_signal_group_connect(
        self_: *mut GSignalGroup,
        detailed_signal: *const gchar,
        c_handler: GCallback,
        data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_signal_group_connect_after(
        self_: *mut GSignalGroup,
        detailed_signal: *const gchar,
        c_handler: GCallback,
        data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_signal_group_connect_swapped(
        self_: *mut GSignalGroup,
        detailed_signal: *const gchar,
        c_handler: GCallback,
        data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_source_set_closure(source: *mut GSource, closure: *mut GClosure);
}
extern "C" {
    pub fn _frida_g_source_set_dummy_callback(source: *mut GSource);
}
pub type GTypeModule = _GTypeModule;
pub type GTypeModuleClass = _GTypeModuleClass;
pub type GTypeModule_autoptr = *mut GTypeModule;
pub type GTypeModule_listautoptr = *mut GList;
pub type GTypeModule_slistautoptr = *mut GSList;
pub type GTypeModule_queueautoptr = *mut GQueue;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTypeModule {
    pub parent_instance: GObject,
    pub use_count: guint,
    pub type_infos: *mut GSList,
    pub interface_infos: *mut GSList,
    pub name: *mut gchar,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTypeModuleClass {
    pub parent_class: GObjectClass,
    pub load: ::core::option::Option<unsafe extern "C" fn(module: *mut GTypeModule) -> gboolean>,
    pub unload: ::core::option::Option<unsafe extern "C" fn(module: *mut GTypeModule)>,
    pub reserved1: ::core::option::Option<unsafe extern "C" fn()>,
    pub reserved2: ::core::option::Option<unsafe extern "C" fn()>,
    pub reserved3: ::core::option::Option<unsafe extern "C" fn()>,
    pub reserved4: ::core::option::Option<unsafe extern "C" fn()>,
}
extern "C" {
    pub fn _frida_g_type_module_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_type_module_use(module: *mut GTypeModule) -> gboolean;
}
extern "C" {
    pub fn _frida_g_type_module_unuse(module: *mut GTypeModule);
}
extern "C" {
    pub fn _frida_g_type_module_set_name(module: *mut GTypeModule, name: *const gchar);
}
extern "C" {
    pub fn _frida_g_type_module_register_type(
        module: *mut GTypeModule,
        parent_type: GType,
        type_name: *const gchar,
        type_info: *const GTypeInfo,
        flags: GTypeFlags,
    ) -> GType;
}
extern "C" {
    pub fn _frida_g_type_module_add_interface(
        module: *mut GTypeModule,
        instance_type: GType,
        interface_type: GType,
        interface_info: *const GInterfaceInfo,
    );
}
extern "C" {
    pub fn _frida_g_type_module_register_enum(
        module: *mut GTypeModule,
        name: *const gchar,
        const_static_values: *const GEnumValue,
    ) -> GType;
}
extern "C" {
    pub fn _frida_g_type_module_register_flags(
        module: *mut GTypeModule,
        name: *const gchar,
        const_static_values: *const GFlagsValue,
    ) -> GType;
}
pub type GTypePluginClass = _GTypePluginClass;
pub type GTypePluginUse = ::core::option::Option<unsafe extern "C" fn(plugin: *mut GTypePlugin)>;
pub type GTypePluginUnuse = ::core::option::Option<unsafe extern "C" fn(plugin: *mut GTypePlugin)>;
pub type GTypePluginCompleteTypeInfo = ::core::option::Option<
    unsafe extern "C" fn(
        plugin: *mut GTypePlugin,
        g_type: GType,
        info: *mut GTypeInfo,
        value_table: *mut GTypeValueTable,
    ),
>;
pub type GTypePluginCompleteInterfaceInfo = ::core::option::Option<
    unsafe extern "C" fn(
        plugin: *mut GTypePlugin,
        instance_type: GType,
        interface_type: GType,
        info: *mut GInterfaceInfo,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTypePluginClass {
    pub base_iface: GTypeInterface,
    pub use_plugin: GTypePluginUse,
    pub unuse_plugin: GTypePluginUnuse,
    pub complete_type_info: GTypePluginCompleteTypeInfo,
    pub complete_interface_info: GTypePluginCompleteInterfaceInfo,
}
extern "C" {
    pub fn _frida_g_type_plugin_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_type_plugin_use(plugin: *mut GTypePlugin);
}
extern "C" {
    pub fn _frida_g_type_plugin_unuse(plugin: *mut GTypePlugin);
}
extern "C" {
    pub fn _frida_g_type_plugin_complete_type_info(
        plugin: *mut GTypePlugin,
        g_type: GType,
        info: *mut GTypeInfo,
        value_table: *mut GTypeValueTable,
    );
}
extern "C" {
    pub fn _frida_g_type_plugin_complete_interface_info(
        plugin: *mut GTypePlugin,
        instance_type: GType,
        interface_type: GType,
        info: *mut GInterfaceInfo,
    );
}
pub type GValueArray = _GValueArray;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GValueArray {
    pub n_values: guint,
    pub values: *mut GValue,
    pub n_prealloced: guint,
}
extern "C" {
    pub fn _frida_g_value_array_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_value_array_get_nth(
        value_array: *mut GValueArray,
        index_: guint,
    ) -> *mut GValue;
}
extern "C" {
    pub fn _frida_g_value_array_new(n_prealloced: guint) -> *mut GValueArray;
}
extern "C" {
    pub fn _frida_g_value_array_free(value_array: *mut GValueArray);
}
extern "C" {
    pub fn _frida_g_value_array_copy(value_array: *const GValueArray) -> *mut GValueArray;
}
extern "C" {
    pub fn _frida_g_value_array_prepend(
        value_array: *mut GValueArray,
        value: *const GValue,
    ) -> *mut GValueArray;
}
extern "C" {
    pub fn _frida_g_value_array_append(
        value_array: *mut GValueArray,
        value: *const GValue,
    ) -> *mut GValueArray;
}
extern "C" {
    pub fn _frida_g_value_array_insert(
        value_array: *mut GValueArray,
        index_: guint,
        value: *const GValue,
    ) -> *mut GValueArray;
}
extern "C" {
    pub fn _frida_g_value_array_remove(
        value_array: *mut GValueArray,
        index_: guint,
    ) -> *mut GValueArray;
}
extern "C" {
    pub fn _frida_g_value_array_sort(
        value_array: *mut GValueArray,
        compare_func: GCompareFunc,
    ) -> *mut GValueArray;
}
extern "C" {
    pub fn _frida_g_value_array_sort_with_data(
        value_array: *mut GValueArray,
        compare_func: GCompareDataFunc,
        user_data: gpointer,
    ) -> *mut GValueArray;
}
extern "C" {
    pub fn _frida_g_value_set_char(value: *mut GValue, v_char: gchar);
}
extern "C" {
    pub fn _frida_g_value_get_char(value: *const GValue) -> gchar;
}
extern "C" {
    pub fn _frida_g_value_set_schar(value: *mut GValue, v_char: gint8);
}
extern "C" {
    pub fn _frida_g_value_get_schar(value: *const GValue) -> gint8;
}
extern "C" {
    pub fn _frida_g_value_set_uchar(value: *mut GValue, v_uchar: guchar);
}
extern "C" {
    pub fn _frida_g_value_get_uchar(value: *const GValue) -> guchar;
}
extern "C" {
    pub fn _frida_g_value_set_boolean(value: *mut GValue, v_boolean: gboolean);
}
extern "C" {
    pub fn _frida_g_value_get_boolean(value: *const GValue) -> gboolean;
}
extern "C" {
    pub fn _frida_g_value_set_int(value: *mut GValue, v_int: gint);
}
extern "C" {
    pub fn _frida_g_value_get_int(value: *const GValue) -> gint;
}
extern "C" {
    pub fn _frida_g_value_set_uint(value: *mut GValue, v_uint: guint);
}
extern "C" {
    pub fn _frida_g_value_get_uint(value: *const GValue) -> guint;
}
extern "C" {
    pub fn _frida_g_value_set_long(value: *mut GValue, v_long: glong);
}
extern "C" {
    pub fn _frida_g_value_get_long(value: *const GValue) -> glong;
}
extern "C" {
    pub fn _frida_g_value_set_ulong(value: *mut GValue, v_ulong: gulong);
}
extern "C" {
    pub fn _frida_g_value_get_ulong(value: *const GValue) -> gulong;
}
extern "C" {
    pub fn _frida_g_value_set_int64(value: *mut GValue, v_int64: gint64);
}
extern "C" {
    pub fn _frida_g_value_get_int64(value: *const GValue) -> gint64;
}
extern "C" {
    pub fn _frida_g_value_set_uint64(value: *mut GValue, v_uint64: guint64);
}
extern "C" {
    pub fn _frida_g_value_get_uint64(value: *const GValue) -> guint64;
}
extern "C" {
    pub fn _frida_g_value_set_float(value: *mut GValue, v_float: gfloat);
}
extern "C" {
    pub fn _frida_g_value_get_float(value: *const GValue) -> gfloat;
}
extern "C" {
    pub fn _frida_g_value_set_double(value: *mut GValue, v_double: gdouble);
}
extern "C" {
    pub fn _frida_g_value_get_double(value: *const GValue) -> gdouble;
}
extern "C" {
    pub fn _frida_g_value_set_string(value: *mut GValue, v_string: *const gchar);
}
extern "C" {
    pub fn _frida_g_value_set_static_string(value: *mut GValue, v_string: *const gchar);
}
extern "C" {
    pub fn _frida_g_value_set_interned_string(value: *mut GValue, v_string: *const gchar);
}
extern "C" {
    pub fn _frida_g_value_get_string(value: *const GValue) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_value_dup_string(value: *const GValue) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_value_set_pointer(value: *mut GValue, v_pointer: gpointer);
}
extern "C" {
    pub fn _frida_g_value_get_pointer(value: *const GValue) -> gpointer;
}
extern "C" {
    pub fn _frida_g_gtype_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_value_set_gtype(value: *mut GValue, v_gtype: GType);
}
extern "C" {
    pub fn _frida_g_value_get_gtype(value: *const GValue) -> GType;
}
extern "C" {
    pub fn _frida_g_value_set_variant(value: *mut GValue, variant: *mut GVariant);
}
extern "C" {
    pub fn _frida_g_value_take_variant(value: *mut GValue, variant: *mut GVariant);
}
extern "C" {
    pub fn _frida_g_value_get_variant(value: *const GValue) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_value_dup_variant(value: *const GValue) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_pointer_type_register_static(name: *const gchar) -> GType;
}
extern "C" {
    pub fn _frida_g_strdup_value_contents(value: *const GValue) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_value_take_string(value: *mut GValue, v_string: *mut gchar);
}
extern "C" {
    pub fn _frida_g_value_set_string_take_ownership(value: *mut GValue, v_string: *mut gchar);
}
pub type gchararray = *mut gchar;
pub type GClosure_autoptr = *mut GClosure;
pub type GClosure_listautoptr = *mut GList;
pub type GClosure_slistautoptr = *mut GSList;
pub type GClosure_queueautoptr = *mut GQueue;
pub type GEnumClass_autoptr = *mut GEnumClass;
pub type GEnumClass_listautoptr = *mut GList;
pub type GEnumClass_slistautoptr = *mut GSList;
pub type GEnumClass_queueautoptr = *mut GQueue;
pub type GFlagsClass_autoptr = *mut GFlagsClass;
pub type GFlagsClass_listautoptr = *mut GList;
pub type GFlagsClass_slistautoptr = *mut GSList;
pub type GFlagsClass_queueautoptr = *mut GQueue;
pub type GObject_autoptr = *mut GObject;
pub type GObject_listautoptr = *mut GList;
pub type GObject_slistautoptr = *mut GSList;
pub type GObject_queueautoptr = *mut GQueue;
pub type GInitiallyUnowned_autoptr = *mut GInitiallyUnowned;
pub type GInitiallyUnowned_listautoptr = *mut GList;
pub type GInitiallyUnowned_slistautoptr = *mut GSList;
pub type GInitiallyUnowned_queueautoptr = *mut GQueue;
pub type GParamSpec_autoptr = *mut GParamSpec;
pub type GParamSpec_listautoptr = *mut GList;
pub type GParamSpec_slistautoptr = *mut GSList;
pub type GParamSpec_queueautoptr = *mut GQueue;
pub type GTypeClass_autoptr = *mut GTypeClass;
pub type GTypeClass_listautoptr = *mut GList;
pub type GTypeClass_slistautoptr = *mut GSList;
pub type GTypeClass_queueautoptr = *mut GQueue;
pub const GAppInfoCreateFlags_G_APP_INFO_CREATE_NONE: GAppInfoCreateFlags = 0;
pub const GAppInfoCreateFlags_G_APP_INFO_CREATE_NEEDS_TERMINAL: GAppInfoCreateFlags = 1;
pub const GAppInfoCreateFlags_G_APP_INFO_CREATE_SUPPORTS_URIS: GAppInfoCreateFlags = 2;
pub const GAppInfoCreateFlags_G_APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION: GAppInfoCreateFlags =
    4;
pub type GAppInfoCreateFlags = ::core::ffi::c_uint;
pub const GConverterFlags_G_CONVERTER_NO_FLAGS: GConverterFlags = 0;
pub const GConverterFlags_G_CONVERTER_INPUT_AT_END: GConverterFlags = 1;
pub const GConverterFlags_G_CONVERTER_FLUSH: GConverterFlags = 2;
pub type GConverterFlags = ::core::ffi::c_uint;
pub const GConverterResult_G_CONVERTER_ERROR: GConverterResult = 0;
pub const GConverterResult_G_CONVERTER_CONVERTED: GConverterResult = 1;
pub const GConverterResult_G_CONVERTER_FINISHED: GConverterResult = 2;
pub const GConverterResult_G_CONVERTER_FLUSHED: GConverterResult = 3;
pub type GConverterResult = ::core::ffi::c_uint;
pub const GDataStreamByteOrder_G_DATA_STREAM_BYTE_ORDER_BIG_ENDIAN: GDataStreamByteOrder = 0;
pub const GDataStreamByteOrder_G_DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN: GDataStreamByteOrder = 1;
pub const GDataStreamByteOrder_G_DATA_STREAM_BYTE_ORDER_HOST_ENDIAN: GDataStreamByteOrder = 2;
pub type GDataStreamByteOrder = ::core::ffi::c_uint;
pub const GDataStreamNewlineType_G_DATA_STREAM_NEWLINE_TYPE_LF: GDataStreamNewlineType = 0;
pub const GDataStreamNewlineType_G_DATA_STREAM_NEWLINE_TYPE_CR: GDataStreamNewlineType = 1;
pub const GDataStreamNewlineType_G_DATA_STREAM_NEWLINE_TYPE_CR_LF: GDataStreamNewlineType = 2;
pub const GDataStreamNewlineType_G_DATA_STREAM_NEWLINE_TYPE_ANY: GDataStreamNewlineType = 3;
pub type GDataStreamNewlineType = ::core::ffi::c_uint;
pub const GFileAttributeType_G_FILE_ATTRIBUTE_TYPE_INVALID: GFileAttributeType = 0;
pub const GFileAttributeType_G_FILE_ATTRIBUTE_TYPE_STRING: GFileAttributeType = 1;
pub const GFileAttributeType_G_FILE_ATTRIBUTE_TYPE_BYTE_STRING: GFileAttributeType = 2;
pub const GFileAttributeType_G_FILE_ATTRIBUTE_TYPE_BOOLEAN: GFileAttributeType = 3;
pub const GFileAttributeType_G_FILE_ATTRIBUTE_TYPE_UINT32: GFileAttributeType = 4;
pub const GFileAttributeType_G_FILE_ATTRIBUTE_TYPE_INT32: GFileAttributeType = 5;
pub const GFileAttributeType_G_FILE_ATTRIBUTE_TYPE_UINT64: GFileAttributeType = 6;
pub const GFileAttributeType_G_FILE_ATTRIBUTE_TYPE_INT64: GFileAttributeType = 7;
pub const GFileAttributeType_G_FILE_ATTRIBUTE_TYPE_OBJECT: GFileAttributeType = 8;
pub const GFileAttributeType_G_FILE_ATTRIBUTE_TYPE_STRINGV: GFileAttributeType = 9;
pub type GFileAttributeType = ::core::ffi::c_uint;
pub const GFileAttributeInfoFlags_G_FILE_ATTRIBUTE_INFO_NONE: GFileAttributeInfoFlags = 0;
pub const GFileAttributeInfoFlags_G_FILE_ATTRIBUTE_INFO_COPY_WITH_FILE: GFileAttributeInfoFlags = 1;
pub const GFileAttributeInfoFlags_G_FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED: GFileAttributeInfoFlags =
    2;
pub type GFileAttributeInfoFlags = ::core::ffi::c_uint;
pub const GFileAttributeStatus_G_FILE_ATTRIBUTE_STATUS_UNSET: GFileAttributeStatus = 0;
pub const GFileAttributeStatus_G_FILE_ATTRIBUTE_STATUS_SET: GFileAttributeStatus = 1;
pub const GFileAttributeStatus_G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING: GFileAttributeStatus = 2;
pub type GFileAttributeStatus = ::core::ffi::c_uint;
pub const GFileQueryInfoFlags_G_FILE_QUERY_INFO_NONE: GFileQueryInfoFlags = 0;
pub const GFileQueryInfoFlags_G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS: GFileQueryInfoFlags = 1;
pub type GFileQueryInfoFlags = ::core::ffi::c_uint;
pub const GFileCreateFlags_G_FILE_CREATE_NONE: GFileCreateFlags = 0;
pub const GFileCreateFlags_G_FILE_CREATE_PRIVATE: GFileCreateFlags = 1;
pub const GFileCreateFlags_G_FILE_CREATE_REPLACE_DESTINATION: GFileCreateFlags = 2;
pub type GFileCreateFlags = ::core::ffi::c_uint;
pub const GFileMeasureFlags_G_FILE_MEASURE_NONE: GFileMeasureFlags = 0;
pub const GFileMeasureFlags_G_FILE_MEASURE_REPORT_ANY_ERROR: GFileMeasureFlags = 2;
pub const GFileMeasureFlags_G_FILE_MEASURE_APPARENT_SIZE: GFileMeasureFlags = 4;
pub const GFileMeasureFlags_G_FILE_MEASURE_NO_XDEV: GFileMeasureFlags = 8;
pub type GFileMeasureFlags = ::core::ffi::c_uint;
pub const GMountMountFlags_G_MOUNT_MOUNT_NONE: GMountMountFlags = 0;
pub type GMountMountFlags = ::core::ffi::c_uint;
pub const GMountUnmountFlags_G_MOUNT_UNMOUNT_NONE: GMountUnmountFlags = 0;
pub const GMountUnmountFlags_G_MOUNT_UNMOUNT_FORCE: GMountUnmountFlags = 1;
pub type GMountUnmountFlags = ::core::ffi::c_uint;
pub const GDriveStartFlags_G_DRIVE_START_NONE: GDriveStartFlags = 0;
pub type GDriveStartFlags = ::core::ffi::c_uint;
pub const GDriveStartStopType_G_DRIVE_START_STOP_TYPE_UNKNOWN: GDriveStartStopType = 0;
pub const GDriveStartStopType_G_DRIVE_START_STOP_TYPE_SHUTDOWN: GDriveStartStopType = 1;
pub const GDriveStartStopType_G_DRIVE_START_STOP_TYPE_NETWORK: GDriveStartStopType = 2;
pub const GDriveStartStopType_G_DRIVE_START_STOP_TYPE_MULTIDISK: GDriveStartStopType = 3;
pub const GDriveStartStopType_G_DRIVE_START_STOP_TYPE_PASSWORD: GDriveStartStopType = 4;
pub type GDriveStartStopType = ::core::ffi::c_uint;
pub const GFileCopyFlags_G_FILE_COPY_NONE: GFileCopyFlags = 0;
pub const GFileCopyFlags_G_FILE_COPY_OVERWRITE: GFileCopyFlags = 1;
pub const GFileCopyFlags_G_FILE_COPY_BACKUP: GFileCopyFlags = 2;
pub const GFileCopyFlags_G_FILE_COPY_NOFOLLOW_SYMLINKS: GFileCopyFlags = 4;
pub const GFileCopyFlags_G_FILE_COPY_ALL_METADATA: GFileCopyFlags = 8;
pub const GFileCopyFlags_G_FILE_COPY_NO_FALLBACK_FOR_MOVE: GFileCopyFlags = 16;
pub const GFileCopyFlags_G_FILE_COPY_TARGET_DEFAULT_PERMS: GFileCopyFlags = 32;
pub type GFileCopyFlags = ::core::ffi::c_uint;
pub const GFileMonitorFlags_G_FILE_MONITOR_NONE: GFileMonitorFlags = 0;
pub const GFileMonitorFlags_G_FILE_MONITOR_WATCH_MOUNTS: GFileMonitorFlags = 1;
pub const GFileMonitorFlags_G_FILE_MONITOR_SEND_MOVED: GFileMonitorFlags = 2;
pub const GFileMonitorFlags_G_FILE_MONITOR_WATCH_HARD_LINKS: GFileMonitorFlags = 4;
pub const GFileMonitorFlags_G_FILE_MONITOR_WATCH_MOVES: GFileMonitorFlags = 8;
pub type GFileMonitorFlags = ::core::ffi::c_uint;
pub const GFileType_G_FILE_TYPE_UNKNOWN: GFileType = 0;
pub const GFileType_G_FILE_TYPE_REGULAR: GFileType = 1;
pub const GFileType_G_FILE_TYPE_DIRECTORY: GFileType = 2;
pub const GFileType_G_FILE_TYPE_SYMBOLIC_LINK: GFileType = 3;
pub const GFileType_G_FILE_TYPE_SPECIAL: GFileType = 4;
pub const GFileType_G_FILE_TYPE_SHORTCUT: GFileType = 5;
pub const GFileType_G_FILE_TYPE_MOUNTABLE: GFileType = 6;
pub type GFileType = ::core::ffi::c_uint;
pub const GFilesystemPreviewType_G_FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS: GFilesystemPreviewType = 0;
pub const GFilesystemPreviewType_G_FILESYSTEM_PREVIEW_TYPE_IF_LOCAL: GFilesystemPreviewType = 1;
pub const GFilesystemPreviewType_G_FILESYSTEM_PREVIEW_TYPE_NEVER: GFilesystemPreviewType = 2;
pub type GFilesystemPreviewType = ::core::ffi::c_uint;
pub const GFileMonitorEvent_G_FILE_MONITOR_EVENT_CHANGED: GFileMonitorEvent = 0;
pub const GFileMonitorEvent_G_FILE_MONITOR_EVENT_CHANGES_DONE_HINT: GFileMonitorEvent = 1;
pub const GFileMonitorEvent_G_FILE_MONITOR_EVENT_DELETED: GFileMonitorEvent = 2;
pub const GFileMonitorEvent_G_FILE_MONITOR_EVENT_CREATED: GFileMonitorEvent = 3;
pub const GFileMonitorEvent_G_FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED: GFileMonitorEvent = 4;
pub const GFileMonitorEvent_G_FILE_MONITOR_EVENT_PRE_UNMOUNT: GFileMonitorEvent = 5;
pub const GFileMonitorEvent_G_FILE_MONITOR_EVENT_UNMOUNTED: GFileMonitorEvent = 6;
pub const GFileMonitorEvent_G_FILE_MONITOR_EVENT_MOVED: GFileMonitorEvent = 7;
pub const GFileMonitorEvent_G_FILE_MONITOR_EVENT_RENAMED: GFileMonitorEvent = 8;
pub const GFileMonitorEvent_G_FILE_MONITOR_EVENT_MOVED_IN: GFileMonitorEvent = 9;
pub const GFileMonitorEvent_G_FILE_MONITOR_EVENT_MOVED_OUT: GFileMonitorEvent = 10;
pub type GFileMonitorEvent = ::core::ffi::c_uint;
pub const GIOErrorEnum_G_IO_ERROR_FAILED: GIOErrorEnum = 0;
pub const GIOErrorEnum_G_IO_ERROR_NOT_FOUND: GIOErrorEnum = 1;
pub const GIOErrorEnum_G_IO_ERROR_EXISTS: GIOErrorEnum = 2;
pub const GIOErrorEnum_G_IO_ERROR_IS_DIRECTORY: GIOErrorEnum = 3;
pub const GIOErrorEnum_G_IO_ERROR_NOT_DIRECTORY: GIOErrorEnum = 4;
pub const GIOErrorEnum_G_IO_ERROR_NOT_EMPTY: GIOErrorEnum = 5;
pub const GIOErrorEnum_G_IO_ERROR_NOT_REGULAR_FILE: GIOErrorEnum = 6;
pub const GIOErrorEnum_G_IO_ERROR_NOT_SYMBOLIC_LINK: GIOErrorEnum = 7;
pub const GIOErrorEnum_G_IO_ERROR_NOT_MOUNTABLE_FILE: GIOErrorEnum = 8;
pub const GIOErrorEnum_G_IO_ERROR_FILENAME_TOO_LONG: GIOErrorEnum = 9;
pub const GIOErrorEnum_G_IO_ERROR_INVALID_FILENAME: GIOErrorEnum = 10;
pub const GIOErrorEnum_G_IO_ERROR_TOO_MANY_LINKS: GIOErrorEnum = 11;
pub const GIOErrorEnum_G_IO_ERROR_NO_SPACE: GIOErrorEnum = 12;
pub const GIOErrorEnum_G_IO_ERROR_INVALID_ARGUMENT: GIOErrorEnum = 13;
pub const GIOErrorEnum_G_IO_ERROR_PERMISSION_DENIED: GIOErrorEnum = 14;
pub const GIOErrorEnum_G_IO_ERROR_NOT_SUPPORTED: GIOErrorEnum = 15;
pub const GIOErrorEnum_G_IO_ERROR_NOT_MOUNTED: GIOErrorEnum = 16;
pub const GIOErrorEnum_G_IO_ERROR_ALREADY_MOUNTED: GIOErrorEnum = 17;
pub const GIOErrorEnum_G_IO_ERROR_CLOSED: GIOErrorEnum = 18;
pub const GIOErrorEnum_G_IO_ERROR_CANCELLED: GIOErrorEnum = 19;
pub const GIOErrorEnum_G_IO_ERROR_PENDING: GIOErrorEnum = 20;
pub const GIOErrorEnum_G_IO_ERROR_READ_ONLY: GIOErrorEnum = 21;
pub const GIOErrorEnum_G_IO_ERROR_CANT_CREATE_BACKUP: GIOErrorEnum = 22;
pub const GIOErrorEnum_G_IO_ERROR_WRONG_ETAG: GIOErrorEnum = 23;
pub const GIOErrorEnum_G_IO_ERROR_TIMED_OUT: GIOErrorEnum = 24;
pub const GIOErrorEnum_G_IO_ERROR_WOULD_RECURSE: GIOErrorEnum = 25;
pub const GIOErrorEnum_G_IO_ERROR_BUSY: GIOErrorEnum = 26;
pub const GIOErrorEnum_G_IO_ERROR_WOULD_BLOCK: GIOErrorEnum = 27;
pub const GIOErrorEnum_G_IO_ERROR_HOST_NOT_FOUND: GIOErrorEnum = 28;
pub const GIOErrorEnum_G_IO_ERROR_WOULD_MERGE: GIOErrorEnum = 29;
pub const GIOErrorEnum_G_IO_ERROR_FAILED_HANDLED: GIOErrorEnum = 30;
pub const GIOErrorEnum_G_IO_ERROR_TOO_MANY_OPEN_FILES: GIOErrorEnum = 31;
pub const GIOErrorEnum_G_IO_ERROR_NOT_INITIALIZED: GIOErrorEnum = 32;
pub const GIOErrorEnum_G_IO_ERROR_ADDRESS_IN_USE: GIOErrorEnum = 33;
pub const GIOErrorEnum_G_IO_ERROR_PARTIAL_INPUT: GIOErrorEnum = 34;
pub const GIOErrorEnum_G_IO_ERROR_INVALID_DATA: GIOErrorEnum = 35;
pub const GIOErrorEnum_G_IO_ERROR_DBUS_ERROR: GIOErrorEnum = 36;
pub const GIOErrorEnum_G_IO_ERROR_HOST_UNREACHABLE: GIOErrorEnum = 37;
pub const GIOErrorEnum_G_IO_ERROR_NETWORK_UNREACHABLE: GIOErrorEnum = 38;
pub const GIOErrorEnum_G_IO_ERROR_CONNECTION_REFUSED: GIOErrorEnum = 39;
pub const GIOErrorEnum_G_IO_ERROR_PROXY_FAILED: GIOErrorEnum = 40;
pub const GIOErrorEnum_G_IO_ERROR_PROXY_AUTH_FAILED: GIOErrorEnum = 41;
pub const GIOErrorEnum_G_IO_ERROR_PROXY_NEED_AUTH: GIOErrorEnum = 42;
pub const GIOErrorEnum_G_IO_ERROR_PROXY_NOT_ALLOWED: GIOErrorEnum = 43;
pub const GIOErrorEnum_G_IO_ERROR_BROKEN_PIPE: GIOErrorEnum = 44;
pub const GIOErrorEnum_G_IO_ERROR_CONNECTION_CLOSED: GIOErrorEnum = 44;
pub const GIOErrorEnum_G_IO_ERROR_NOT_CONNECTED: GIOErrorEnum = 45;
pub const GIOErrorEnum_G_IO_ERROR_MESSAGE_TOO_LARGE: GIOErrorEnum = 46;
pub const GIOErrorEnum_G_IO_ERROR_NO_SUCH_DEVICE: GIOErrorEnum = 47;
pub type GIOErrorEnum = ::core::ffi::c_uint;
pub const GAskPasswordFlags_G_ASK_PASSWORD_NEED_PASSWORD: GAskPasswordFlags = 1;
pub const GAskPasswordFlags_G_ASK_PASSWORD_NEED_USERNAME: GAskPasswordFlags = 2;
pub const GAskPasswordFlags_G_ASK_PASSWORD_NEED_DOMAIN: GAskPasswordFlags = 4;
pub const GAskPasswordFlags_G_ASK_PASSWORD_SAVING_SUPPORTED: GAskPasswordFlags = 8;
pub const GAskPasswordFlags_G_ASK_PASSWORD_ANONYMOUS_SUPPORTED: GAskPasswordFlags = 16;
pub const GAskPasswordFlags_G_ASK_PASSWORD_TCRYPT: GAskPasswordFlags = 32;
pub type GAskPasswordFlags = ::core::ffi::c_uint;
pub const GPasswordSave_G_PASSWORD_SAVE_NEVER: GPasswordSave = 0;
pub const GPasswordSave_G_PASSWORD_SAVE_FOR_SESSION: GPasswordSave = 1;
pub const GPasswordSave_G_PASSWORD_SAVE_PERMANENTLY: GPasswordSave = 2;
pub type GPasswordSave = ::core::ffi::c_uint;
pub const GMountOperationResult_G_MOUNT_OPERATION_HANDLED: GMountOperationResult = 0;
pub const GMountOperationResult_G_MOUNT_OPERATION_ABORTED: GMountOperationResult = 1;
pub const GMountOperationResult_G_MOUNT_OPERATION_UNHANDLED: GMountOperationResult = 2;
pub type GMountOperationResult = ::core::ffi::c_uint;
pub const GOutputStreamSpliceFlags_G_OUTPUT_STREAM_SPLICE_NONE: GOutputStreamSpliceFlags = 0;
pub const GOutputStreamSpliceFlags_G_OUTPUT_STREAM_SPLICE_CLOSE_SOURCE: GOutputStreamSpliceFlags =
    1;
pub const GOutputStreamSpliceFlags_G_OUTPUT_STREAM_SPLICE_CLOSE_TARGET: GOutputStreamSpliceFlags =
    2;
pub type GOutputStreamSpliceFlags = ::core::ffi::c_uint;
pub const GIOStreamSpliceFlags_G_IO_STREAM_SPLICE_NONE: GIOStreamSpliceFlags = 0;
pub const GIOStreamSpliceFlags_G_IO_STREAM_SPLICE_CLOSE_STREAM1: GIOStreamSpliceFlags = 1;
pub const GIOStreamSpliceFlags_G_IO_STREAM_SPLICE_CLOSE_STREAM2: GIOStreamSpliceFlags = 2;
pub const GIOStreamSpliceFlags_G_IO_STREAM_SPLICE_WAIT_FOR_BOTH: GIOStreamSpliceFlags = 4;
pub type GIOStreamSpliceFlags = ::core::ffi::c_uint;
pub const GEmblemOrigin_G_EMBLEM_ORIGIN_UNKNOWN: GEmblemOrigin = 0;
pub const GEmblemOrigin_G_EMBLEM_ORIGIN_DEVICE: GEmblemOrigin = 1;
pub const GEmblemOrigin_G_EMBLEM_ORIGIN_LIVEMETADATA: GEmblemOrigin = 2;
pub const GEmblemOrigin_G_EMBLEM_ORIGIN_TAG: GEmblemOrigin = 3;
pub type GEmblemOrigin = ::core::ffi::c_uint;
pub const GResolverError_G_RESOLVER_ERROR_NOT_FOUND: GResolverError = 0;
pub const GResolverError_G_RESOLVER_ERROR_TEMPORARY_FAILURE: GResolverError = 1;
pub const GResolverError_G_RESOLVER_ERROR_INTERNAL: GResolverError = 2;
pub type GResolverError = ::core::ffi::c_uint;
pub const GResolverRecordType_G_RESOLVER_RECORD_SRV: GResolverRecordType = 1;
pub const GResolverRecordType_G_RESOLVER_RECORD_MX: GResolverRecordType = 2;
pub const GResolverRecordType_G_RESOLVER_RECORD_TXT: GResolverRecordType = 3;
pub const GResolverRecordType_G_RESOLVER_RECORD_SOA: GResolverRecordType = 4;
pub const GResolverRecordType_G_RESOLVER_RECORD_NS: GResolverRecordType = 5;
pub type GResolverRecordType = ::core::ffi::c_uint;
pub const GResourceError_G_RESOURCE_ERROR_NOT_FOUND: GResourceError = 0;
pub const GResourceError_G_RESOURCE_ERROR_INTERNAL: GResourceError = 1;
pub type GResourceError = ::core::ffi::c_uint;
pub const GResourceFlags_G_RESOURCE_FLAGS_NONE: GResourceFlags = 0;
pub const GResourceFlags_G_RESOURCE_FLAGS_COMPRESSED: GResourceFlags = 1;
pub type GResourceFlags = ::core::ffi::c_uint;
pub const GResourceLookupFlags_G_RESOURCE_LOOKUP_FLAGS_NONE: GResourceLookupFlags = 0;
pub type GResourceLookupFlags = ::core::ffi::c_uint;
pub const GSocketFamily_G_SOCKET_FAMILY_INVALID: GSocketFamily = 0;
pub const GSocketFamily_G_SOCKET_FAMILY_UNIX: GSocketFamily = 1;
pub const GSocketFamily_G_SOCKET_FAMILY_IPV4: GSocketFamily = 2;
pub const GSocketFamily_G_SOCKET_FAMILY_IPV6: GSocketFamily = 10;
pub type GSocketFamily = ::core::ffi::c_uint;
pub const GSocketType_G_SOCKET_TYPE_INVALID: GSocketType = 0;
pub const GSocketType_G_SOCKET_TYPE_STREAM: GSocketType = 1;
pub const GSocketType_G_SOCKET_TYPE_DATAGRAM: GSocketType = 2;
pub const GSocketType_G_SOCKET_TYPE_SEQPACKET: GSocketType = 3;
pub type GSocketType = ::core::ffi::c_uint;
pub const GSocketMsgFlags_G_SOCKET_MSG_NONE: GSocketMsgFlags = 0;
pub const GSocketMsgFlags_G_SOCKET_MSG_OOB: GSocketMsgFlags = 1;
pub const GSocketMsgFlags_G_SOCKET_MSG_PEEK: GSocketMsgFlags = 2;
pub const GSocketMsgFlags_G_SOCKET_MSG_DONTROUTE: GSocketMsgFlags = 4;
pub type GSocketMsgFlags = ::core::ffi::c_uint;
pub const GSocketProtocol_G_SOCKET_PROTOCOL_UNKNOWN: GSocketProtocol = -1;
pub const GSocketProtocol_G_SOCKET_PROTOCOL_DEFAULT: GSocketProtocol = 0;
pub const GSocketProtocol_G_SOCKET_PROTOCOL_TCP: GSocketProtocol = 6;
pub const GSocketProtocol_G_SOCKET_PROTOCOL_UDP: GSocketProtocol = 17;
pub const GSocketProtocol_G_SOCKET_PROTOCOL_SCTP: GSocketProtocol = 132;
pub type GSocketProtocol = ::core::ffi::c_int;
pub const GZlibCompressorFormat_G_ZLIB_COMPRESSOR_FORMAT_ZLIB: GZlibCompressorFormat = 0;
pub const GZlibCompressorFormat_G_ZLIB_COMPRESSOR_FORMAT_GZIP: GZlibCompressorFormat = 1;
pub const GZlibCompressorFormat_G_ZLIB_COMPRESSOR_FORMAT_RAW: GZlibCompressorFormat = 2;
pub type GZlibCompressorFormat = ::core::ffi::c_uint;
pub const GUnixSocketAddressType_G_UNIX_SOCKET_ADDRESS_INVALID: GUnixSocketAddressType = 0;
pub const GUnixSocketAddressType_G_UNIX_SOCKET_ADDRESS_ANONYMOUS: GUnixSocketAddressType = 1;
pub const GUnixSocketAddressType_G_UNIX_SOCKET_ADDRESS_PATH: GUnixSocketAddressType = 2;
pub const GUnixSocketAddressType_G_UNIX_SOCKET_ADDRESS_ABSTRACT: GUnixSocketAddressType = 3;
pub const GUnixSocketAddressType_G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED: GUnixSocketAddressType = 4;
pub type GUnixSocketAddressType = ::core::ffi::c_uint;
pub const GBusType_G_BUS_TYPE_STARTER: GBusType = -1;
pub const GBusType_G_BUS_TYPE_NONE: GBusType = 0;
pub const GBusType_G_BUS_TYPE_SYSTEM: GBusType = 1;
pub const GBusType_G_BUS_TYPE_SESSION: GBusType = 2;
pub type GBusType = ::core::ffi::c_int;
pub const GBusNameOwnerFlags_G_BUS_NAME_OWNER_FLAGS_NONE: GBusNameOwnerFlags = 0;
pub const GBusNameOwnerFlags_G_BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT: GBusNameOwnerFlags = 1;
pub const GBusNameOwnerFlags_G_BUS_NAME_OWNER_FLAGS_REPLACE: GBusNameOwnerFlags = 2;
pub const GBusNameOwnerFlags_G_BUS_NAME_OWNER_FLAGS_DO_NOT_QUEUE: GBusNameOwnerFlags = 4;
pub type GBusNameOwnerFlags = ::core::ffi::c_uint;
pub const GBusNameWatcherFlags_G_BUS_NAME_WATCHER_FLAGS_NONE: GBusNameWatcherFlags = 0;
pub const GBusNameWatcherFlags_G_BUS_NAME_WATCHER_FLAGS_AUTO_START: GBusNameWatcherFlags = 1;
pub type GBusNameWatcherFlags = ::core::ffi::c_uint;
pub const GDBusProxyFlags_G_DBUS_PROXY_FLAGS_NONE: GDBusProxyFlags = 0;
pub const GDBusProxyFlags_G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES: GDBusProxyFlags = 1;
pub const GDBusProxyFlags_G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS: GDBusProxyFlags = 2;
pub const GDBusProxyFlags_G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START: GDBusProxyFlags = 4;
pub const GDBusProxyFlags_G_DBUS_PROXY_FLAGS_GET_INVALIDATED_PROPERTIES: GDBusProxyFlags = 8;
pub const GDBusProxyFlags_G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START_AT_CONSTRUCTION: GDBusProxyFlags =
    16;
pub const GDBusProxyFlags_G_DBUS_PROXY_FLAGS_NO_MATCH_RULE: GDBusProxyFlags = 32;
pub type GDBusProxyFlags = ::core::ffi::c_uint;
pub const GDBusError_G_DBUS_ERROR_FAILED: GDBusError = 0;
pub const GDBusError_G_DBUS_ERROR_NO_MEMORY: GDBusError = 1;
pub const GDBusError_G_DBUS_ERROR_SERVICE_UNKNOWN: GDBusError = 2;
pub const GDBusError_G_DBUS_ERROR_NAME_HAS_NO_OWNER: GDBusError = 3;
pub const GDBusError_G_DBUS_ERROR_NO_REPLY: GDBusError = 4;
pub const GDBusError_G_DBUS_ERROR_IO_ERROR: GDBusError = 5;
pub const GDBusError_G_DBUS_ERROR_BAD_ADDRESS: GDBusError = 6;
pub const GDBusError_G_DBUS_ERROR_NOT_SUPPORTED: GDBusError = 7;
pub const GDBusError_G_DBUS_ERROR_LIMITS_EXCEEDED: GDBusError = 8;
pub const GDBusError_G_DBUS_ERROR_ACCESS_DENIED: GDBusError = 9;
pub const GDBusError_G_DBUS_ERROR_AUTH_FAILED: GDBusError = 10;
pub const GDBusError_G_DBUS_ERROR_NO_SERVER: GDBusError = 11;
pub const GDBusError_G_DBUS_ERROR_TIMEOUT: GDBusError = 12;
pub const GDBusError_G_DBUS_ERROR_NO_NETWORK: GDBusError = 13;
pub const GDBusError_G_DBUS_ERROR_ADDRESS_IN_USE: GDBusError = 14;
pub const GDBusError_G_DBUS_ERROR_DISCONNECTED: GDBusError = 15;
pub const GDBusError_G_DBUS_ERROR_INVALID_ARGS: GDBusError = 16;
pub const GDBusError_G_DBUS_ERROR_FILE_NOT_FOUND: GDBusError = 17;
pub const GDBusError_G_DBUS_ERROR_FILE_EXISTS: GDBusError = 18;
pub const GDBusError_G_DBUS_ERROR_UNKNOWN_METHOD: GDBusError = 19;
pub const GDBusError_G_DBUS_ERROR_TIMED_OUT: GDBusError = 20;
pub const GDBusError_G_DBUS_ERROR_MATCH_RULE_NOT_FOUND: GDBusError = 21;
pub const GDBusError_G_DBUS_ERROR_MATCH_RULE_INVALID: GDBusError = 22;
pub const GDBusError_G_DBUS_ERROR_SPAWN_EXEC_FAILED: GDBusError = 23;
pub const GDBusError_G_DBUS_ERROR_SPAWN_FORK_FAILED: GDBusError = 24;
pub const GDBusError_G_DBUS_ERROR_SPAWN_CHILD_EXITED: GDBusError = 25;
pub const GDBusError_G_DBUS_ERROR_SPAWN_CHILD_SIGNALED: GDBusError = 26;
pub const GDBusError_G_DBUS_ERROR_SPAWN_FAILED: GDBusError = 27;
pub const GDBusError_G_DBUS_ERROR_SPAWN_SETUP_FAILED: GDBusError = 28;
pub const GDBusError_G_DBUS_ERROR_SPAWN_CONFIG_INVALID: GDBusError = 29;
pub const GDBusError_G_DBUS_ERROR_SPAWN_SERVICE_INVALID: GDBusError = 30;
pub const GDBusError_G_DBUS_ERROR_SPAWN_SERVICE_NOT_FOUND: GDBusError = 31;
pub const GDBusError_G_DBUS_ERROR_SPAWN_PERMISSIONS_INVALID: GDBusError = 32;
pub const GDBusError_G_DBUS_ERROR_SPAWN_FILE_INVALID: GDBusError = 33;
pub const GDBusError_G_DBUS_ERROR_SPAWN_NO_MEMORY: GDBusError = 34;
pub const GDBusError_G_DBUS_ERROR_UNIX_PROCESS_ID_UNKNOWN: GDBusError = 35;
pub const GDBusError_G_DBUS_ERROR_INVALID_SIGNATURE: GDBusError = 36;
pub const GDBusError_G_DBUS_ERROR_INVALID_FILE_CONTENT: GDBusError = 37;
pub const GDBusError_G_DBUS_ERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN: GDBusError = 38;
pub const GDBusError_G_DBUS_ERROR_ADT_AUDIT_DATA_UNKNOWN: GDBusError = 39;
pub const GDBusError_G_DBUS_ERROR_OBJECT_PATH_IN_USE: GDBusError = 40;
pub const GDBusError_G_DBUS_ERROR_UNKNOWN_OBJECT: GDBusError = 41;
pub const GDBusError_G_DBUS_ERROR_UNKNOWN_INTERFACE: GDBusError = 42;
pub const GDBusError_G_DBUS_ERROR_UNKNOWN_PROPERTY: GDBusError = 43;
pub const GDBusError_G_DBUS_ERROR_PROPERTY_READ_ONLY: GDBusError = 44;
pub type GDBusError = ::core::ffi::c_uint;
pub const GDBusConnectionFlags_G_DBUS_CONNECTION_FLAGS_NONE: GDBusConnectionFlags = 0;
pub const GDBusConnectionFlags_G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT: GDBusConnectionFlags =
    1;
pub const GDBusConnectionFlags_G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER: GDBusConnectionFlags =
    2;
pub const GDBusConnectionFlags_G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS:
    GDBusConnectionFlags = 4;
pub const GDBusConnectionFlags_G_DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION:
    GDBusConnectionFlags = 8;
pub const GDBusConnectionFlags_G_DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING:
    GDBusConnectionFlags = 16;
pub const GDBusConnectionFlags_G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_REQUIRE_SAME_USER:
    GDBusConnectionFlags = 32;
pub const GDBusConnectionFlags_G_DBUS_CONNECTION_FLAGS_CROSS_NAMESPACE: GDBusConnectionFlags = 64;
pub type GDBusConnectionFlags = ::core::ffi::c_uint;
pub const GDBusCapabilityFlags_G_DBUS_CAPABILITY_FLAGS_NONE: GDBusCapabilityFlags = 0;
pub const GDBusCapabilityFlags_G_DBUS_CAPABILITY_FLAGS_UNIX_FD_PASSING: GDBusCapabilityFlags = 1;
pub type GDBusCapabilityFlags = ::core::ffi::c_uint;
pub const GDBusCallFlags_G_DBUS_CALL_FLAGS_NONE: GDBusCallFlags = 0;
pub const GDBusCallFlags_G_DBUS_CALL_FLAGS_NO_AUTO_START: GDBusCallFlags = 1;
pub const GDBusCallFlags_G_DBUS_CALL_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION: GDBusCallFlags = 2;
pub type GDBusCallFlags = ::core::ffi::c_uint;
pub const GDBusMessageType_G_DBUS_MESSAGE_TYPE_INVALID: GDBusMessageType = 0;
pub const GDBusMessageType_G_DBUS_MESSAGE_TYPE_METHOD_CALL: GDBusMessageType = 1;
pub const GDBusMessageType_G_DBUS_MESSAGE_TYPE_METHOD_RETURN: GDBusMessageType = 2;
pub const GDBusMessageType_G_DBUS_MESSAGE_TYPE_ERROR: GDBusMessageType = 3;
pub const GDBusMessageType_G_DBUS_MESSAGE_TYPE_SIGNAL: GDBusMessageType = 4;
pub type GDBusMessageType = ::core::ffi::c_uint;
pub const GDBusMessageFlags_G_DBUS_MESSAGE_FLAGS_NONE: GDBusMessageFlags = 0;
pub const GDBusMessageFlags_G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED: GDBusMessageFlags = 1;
pub const GDBusMessageFlags_G_DBUS_MESSAGE_FLAGS_NO_AUTO_START: GDBusMessageFlags = 2;
pub const GDBusMessageFlags_G_DBUS_MESSAGE_FLAGS_ALLOW_INTERACTIVE_AUTHORIZATION:
    GDBusMessageFlags = 4;
pub type GDBusMessageFlags = ::core::ffi::c_uint;
pub const GDBusMessageHeaderField_G_DBUS_MESSAGE_HEADER_FIELD_INVALID: GDBusMessageHeaderField = 0;
pub const GDBusMessageHeaderField_G_DBUS_MESSAGE_HEADER_FIELD_PATH: GDBusMessageHeaderField = 1;
pub const GDBusMessageHeaderField_G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE: GDBusMessageHeaderField =
    2;
pub const GDBusMessageHeaderField_G_DBUS_MESSAGE_HEADER_FIELD_MEMBER: GDBusMessageHeaderField = 3;
pub const GDBusMessageHeaderField_G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME: GDBusMessageHeaderField =
    4;
pub const GDBusMessageHeaderField_G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL:
    GDBusMessageHeaderField = 5;
pub const GDBusMessageHeaderField_G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION: GDBusMessageHeaderField =
    6;
pub const GDBusMessageHeaderField_G_DBUS_MESSAGE_HEADER_FIELD_SENDER: GDBusMessageHeaderField = 7;
pub const GDBusMessageHeaderField_G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE: GDBusMessageHeaderField =
    8;
pub const GDBusMessageHeaderField_G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS:
    GDBusMessageHeaderField = 9;
pub type GDBusMessageHeaderField = ::core::ffi::c_uint;
pub const GDBusPropertyInfoFlags_G_DBUS_PROPERTY_INFO_FLAGS_NONE: GDBusPropertyInfoFlags = 0;
pub const GDBusPropertyInfoFlags_G_DBUS_PROPERTY_INFO_FLAGS_READABLE: GDBusPropertyInfoFlags = 1;
pub const GDBusPropertyInfoFlags_G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE: GDBusPropertyInfoFlags = 2;
pub type GDBusPropertyInfoFlags = ::core::ffi::c_uint;
pub const GDBusSubtreeFlags_G_DBUS_SUBTREE_FLAGS_NONE: GDBusSubtreeFlags = 0;
pub const GDBusSubtreeFlags_G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES: GDBusSubtreeFlags =
    1;
pub type GDBusSubtreeFlags = ::core::ffi::c_uint;
pub const GDBusServerFlags_G_DBUS_SERVER_FLAGS_NONE: GDBusServerFlags = 0;
pub const GDBusServerFlags_G_DBUS_SERVER_FLAGS_RUN_IN_THREAD: GDBusServerFlags = 1;
pub const GDBusServerFlags_G_DBUS_SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS: GDBusServerFlags = 2;
pub const GDBusServerFlags_G_DBUS_SERVER_FLAGS_AUTHENTICATION_REQUIRE_SAME_USER: GDBusServerFlags =
    4;
pub type GDBusServerFlags = ::core::ffi::c_uint;
pub const GDBusSignalFlags_G_DBUS_SIGNAL_FLAGS_NONE: GDBusSignalFlags = 0;
pub const GDBusSignalFlags_G_DBUS_SIGNAL_FLAGS_NO_MATCH_RULE: GDBusSignalFlags = 1;
pub const GDBusSignalFlags_G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_NAMESPACE: GDBusSignalFlags = 2;
pub const GDBusSignalFlags_G_DBUS_SIGNAL_FLAGS_MATCH_ARG0_PATH: GDBusSignalFlags = 4;
pub type GDBusSignalFlags = ::core::ffi::c_uint;
pub const GDBusSendMessageFlags_G_DBUS_SEND_MESSAGE_FLAGS_NONE: GDBusSendMessageFlags = 0;
pub const GDBusSendMessageFlags_G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL: GDBusSendMessageFlags =
    1;
pub type GDBusSendMessageFlags = ::core::ffi::c_uint;
pub const GCredentialsType_G_CREDENTIALS_TYPE_INVALID: GCredentialsType = 0;
pub const GCredentialsType_G_CREDENTIALS_TYPE_LINUX_UCRED: GCredentialsType = 1;
pub const GCredentialsType_G_CREDENTIALS_TYPE_FREEBSD_CMSGCRED: GCredentialsType = 2;
pub const GCredentialsType_G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED: GCredentialsType = 3;
pub const GCredentialsType_G_CREDENTIALS_TYPE_SOLARIS_UCRED: GCredentialsType = 4;
pub const GCredentialsType_G_CREDENTIALS_TYPE_NETBSD_UNPCBID: GCredentialsType = 5;
pub const GCredentialsType_G_CREDENTIALS_TYPE_APPLE_XUCRED: GCredentialsType = 6;
pub const GCredentialsType_G_CREDENTIALS_TYPE_WIN32_PID: GCredentialsType = 7;
pub type GCredentialsType = ::core::ffi::c_uint;
pub const GDBusMessageByteOrder_G_DBUS_MESSAGE_BYTE_ORDER_BIG_ENDIAN: GDBusMessageByteOrder = 66;
pub const GDBusMessageByteOrder_G_DBUS_MESSAGE_BYTE_ORDER_LITTLE_ENDIAN: GDBusMessageByteOrder =
    108;
pub type GDBusMessageByteOrder = ::core::ffi::c_uint;
pub const GApplicationFlags_G_APPLICATION_FLAGS_NONE: GApplicationFlags = 0;
pub const GApplicationFlags_G_APPLICATION_DEFAULT_FLAGS: GApplicationFlags = 0;
pub const GApplicationFlags_G_APPLICATION_IS_SERVICE: GApplicationFlags = 1;
pub const GApplicationFlags_G_APPLICATION_IS_LAUNCHER: GApplicationFlags = 2;
pub const GApplicationFlags_G_APPLICATION_HANDLES_OPEN: GApplicationFlags = 4;
pub const GApplicationFlags_G_APPLICATION_HANDLES_COMMAND_LINE: GApplicationFlags = 8;
pub const GApplicationFlags_G_APPLICATION_SEND_ENVIRONMENT: GApplicationFlags = 16;
pub const GApplicationFlags_G_APPLICATION_NON_UNIQUE: GApplicationFlags = 32;
pub const GApplicationFlags_G_APPLICATION_CAN_OVERRIDE_APP_ID: GApplicationFlags = 64;
pub const GApplicationFlags_G_APPLICATION_ALLOW_REPLACEMENT: GApplicationFlags = 128;
pub const GApplicationFlags_G_APPLICATION_REPLACE: GApplicationFlags = 256;
pub type GApplicationFlags = ::core::ffi::c_uint;
pub const GTlsError_G_TLS_ERROR_UNAVAILABLE: GTlsError = 0;
pub const GTlsError_G_TLS_ERROR_MISC: GTlsError = 1;
pub const GTlsError_G_TLS_ERROR_BAD_CERTIFICATE: GTlsError = 2;
pub const GTlsError_G_TLS_ERROR_NOT_TLS: GTlsError = 3;
pub const GTlsError_G_TLS_ERROR_HANDSHAKE: GTlsError = 4;
pub const GTlsError_G_TLS_ERROR_CERTIFICATE_REQUIRED: GTlsError = 5;
pub const GTlsError_G_TLS_ERROR_EOF: GTlsError = 6;
pub const GTlsError_G_TLS_ERROR_INAPPROPRIATE_FALLBACK: GTlsError = 7;
pub const GTlsError_G_TLS_ERROR_BAD_CERTIFICATE_PASSWORD: GTlsError = 8;
pub type GTlsError = ::core::ffi::c_uint;
pub const GTlsCertificateFlags_G_TLS_CERTIFICATE_NO_FLAGS: GTlsCertificateFlags = 0;
pub const GTlsCertificateFlags_G_TLS_CERTIFICATE_UNKNOWN_CA: GTlsCertificateFlags = 1;
pub const GTlsCertificateFlags_G_TLS_CERTIFICATE_BAD_IDENTITY: GTlsCertificateFlags = 2;
pub const GTlsCertificateFlags_G_TLS_CERTIFICATE_NOT_ACTIVATED: GTlsCertificateFlags = 4;
pub const GTlsCertificateFlags_G_TLS_CERTIFICATE_EXPIRED: GTlsCertificateFlags = 8;
pub const GTlsCertificateFlags_G_TLS_CERTIFICATE_REVOKED: GTlsCertificateFlags = 16;
pub const GTlsCertificateFlags_G_TLS_CERTIFICATE_INSECURE: GTlsCertificateFlags = 32;
pub const GTlsCertificateFlags_G_TLS_CERTIFICATE_GENERIC_ERROR: GTlsCertificateFlags = 64;
pub const GTlsCertificateFlags_G_TLS_CERTIFICATE_VALIDATE_ALL: GTlsCertificateFlags = 127;
pub type GTlsCertificateFlags = ::core::ffi::c_uint;
pub const GTlsAuthenticationMode_G_TLS_AUTHENTICATION_NONE: GTlsAuthenticationMode = 0;
pub const GTlsAuthenticationMode_G_TLS_AUTHENTICATION_REQUESTED: GTlsAuthenticationMode = 1;
pub const GTlsAuthenticationMode_G_TLS_AUTHENTICATION_REQUIRED: GTlsAuthenticationMode = 2;
pub type GTlsAuthenticationMode = ::core::ffi::c_uint;
pub const GTlsChannelBindingType_G_TLS_CHANNEL_BINDING_TLS_UNIQUE: GTlsChannelBindingType = 0;
pub const GTlsChannelBindingType_G_TLS_CHANNEL_BINDING_TLS_SERVER_END_POINT:
    GTlsChannelBindingType = 1;
pub const GTlsChannelBindingType_G_TLS_CHANNEL_BINDING_TLS_EXPORTER: GTlsChannelBindingType = 2;
pub type GTlsChannelBindingType = ::core::ffi::c_uint;
pub const GTlsChannelBindingError_G_TLS_CHANNEL_BINDING_ERROR_NOT_IMPLEMENTED:
    GTlsChannelBindingError = 0;
pub const GTlsChannelBindingError_G_TLS_CHANNEL_BINDING_ERROR_INVALID_STATE:
    GTlsChannelBindingError = 1;
pub const GTlsChannelBindingError_G_TLS_CHANNEL_BINDING_ERROR_NOT_AVAILABLE:
    GTlsChannelBindingError = 2;
pub const GTlsChannelBindingError_G_TLS_CHANNEL_BINDING_ERROR_NOT_SUPPORTED:
    GTlsChannelBindingError = 3;
pub const GTlsChannelBindingError_G_TLS_CHANNEL_BINDING_ERROR_GENERAL_ERROR:
    GTlsChannelBindingError = 4;
pub type GTlsChannelBindingError = ::core::ffi::c_uint;
pub const GTlsRehandshakeMode_G_TLS_REHANDSHAKE_NEVER: GTlsRehandshakeMode = 0;
pub const GTlsRehandshakeMode_G_TLS_REHANDSHAKE_SAFELY: GTlsRehandshakeMode = 1;
pub const GTlsRehandshakeMode_G_TLS_REHANDSHAKE_UNSAFELY: GTlsRehandshakeMode = 2;
pub type GTlsRehandshakeMode = ::core::ffi::c_uint;
pub const _GTlsPasswordFlags_G_TLS_PASSWORD_NONE: _GTlsPasswordFlags = 0;
pub const _GTlsPasswordFlags_G_TLS_PASSWORD_RETRY: _GTlsPasswordFlags = 2;
pub const _GTlsPasswordFlags_G_TLS_PASSWORD_MANY_TRIES: _GTlsPasswordFlags = 4;
pub const _GTlsPasswordFlags_G_TLS_PASSWORD_FINAL_TRY: _GTlsPasswordFlags = 8;
pub const _GTlsPasswordFlags_G_TLS_PASSWORD_PKCS11_USER: _GTlsPasswordFlags = 16;
pub const _GTlsPasswordFlags_G_TLS_PASSWORD_PKCS11_SECURITY_OFFICER: _GTlsPasswordFlags = 32;
pub const _GTlsPasswordFlags_G_TLS_PASSWORD_PKCS11_CONTEXT_SPECIFIC: _GTlsPasswordFlags = 64;
pub type _GTlsPasswordFlags = ::core::ffi::c_uint;
pub use self::_GTlsPasswordFlags as GTlsPasswordFlags;
pub const GTlsInteractionResult_G_TLS_INTERACTION_UNHANDLED: GTlsInteractionResult = 0;
pub const GTlsInteractionResult_G_TLS_INTERACTION_HANDLED: GTlsInteractionResult = 1;
pub const GTlsInteractionResult_G_TLS_INTERACTION_FAILED: GTlsInteractionResult = 2;
pub type GTlsInteractionResult = ::core::ffi::c_uint;
pub const GDBusInterfaceSkeletonFlags_G_DBUS_INTERFACE_SKELETON_FLAGS_NONE:
    GDBusInterfaceSkeletonFlags = 0;
pub const GDBusInterfaceSkeletonFlags_G_DBUS_INTERFACE_SKELETON_FLAGS_HANDLE_METHOD_INVOCATIONS_IN_THREAD : GDBusInterfaceSkeletonFlags = 1 ;
pub type GDBusInterfaceSkeletonFlags = ::core::ffi::c_uint;
pub const GDBusObjectManagerClientFlags_G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE:
    GDBusObjectManagerClientFlags = 0;
pub const GDBusObjectManagerClientFlags_G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_DO_NOT_AUTO_START:
    GDBusObjectManagerClientFlags = 1;
pub type GDBusObjectManagerClientFlags = ::core::ffi::c_uint;
pub const GTlsDatabaseVerifyFlags_G_TLS_DATABASE_VERIFY_NONE: GTlsDatabaseVerifyFlags = 0;
pub type GTlsDatabaseVerifyFlags = ::core::ffi::c_uint;
pub const GTlsDatabaseLookupFlags_G_TLS_DATABASE_LOOKUP_NONE: GTlsDatabaseLookupFlags = 0;
pub const GTlsDatabaseLookupFlags_G_TLS_DATABASE_LOOKUP_KEYPAIR: GTlsDatabaseLookupFlags = 1;
pub type GTlsDatabaseLookupFlags = ::core::ffi::c_uint;
pub const GTlsCertificateRequestFlags_G_TLS_CERTIFICATE_REQUEST_NONE: GTlsCertificateRequestFlags =
    0;
pub type GTlsCertificateRequestFlags = ::core::ffi::c_uint;
pub const GTlsProtocolVersion_G_TLS_PROTOCOL_VERSION_UNKNOWN: GTlsProtocolVersion = 0;
pub const GTlsProtocolVersion_G_TLS_PROTOCOL_VERSION_SSL_3_0: GTlsProtocolVersion = 1;
pub const GTlsProtocolVersion_G_TLS_PROTOCOL_VERSION_TLS_1_0: GTlsProtocolVersion = 2;
pub const GTlsProtocolVersion_G_TLS_PROTOCOL_VERSION_TLS_1_1: GTlsProtocolVersion = 3;
pub const GTlsProtocolVersion_G_TLS_PROTOCOL_VERSION_TLS_1_2: GTlsProtocolVersion = 4;
pub const GTlsProtocolVersion_G_TLS_PROTOCOL_VERSION_TLS_1_3: GTlsProtocolVersion = 5;
pub const GTlsProtocolVersion_G_TLS_PROTOCOL_VERSION_DTLS_1_0: GTlsProtocolVersion = 201;
pub const GTlsProtocolVersion_G_TLS_PROTOCOL_VERSION_DTLS_1_2: GTlsProtocolVersion = 202;
pub type GTlsProtocolVersion = ::core::ffi::c_uint;
pub const GIOModuleScopeFlags_G_IO_MODULE_SCOPE_NONE: GIOModuleScopeFlags = 0;
pub const GIOModuleScopeFlags_G_IO_MODULE_SCOPE_BLOCK_DUPLICATES: GIOModuleScopeFlags = 1;
pub type GIOModuleScopeFlags = ::core::ffi::c_uint;
pub const GSocketClientEvent_G_SOCKET_CLIENT_RESOLVING: GSocketClientEvent = 0;
pub const GSocketClientEvent_G_SOCKET_CLIENT_RESOLVED: GSocketClientEvent = 1;
pub const GSocketClientEvent_G_SOCKET_CLIENT_CONNECTING: GSocketClientEvent = 2;
pub const GSocketClientEvent_G_SOCKET_CLIENT_CONNECTED: GSocketClientEvent = 3;
pub const GSocketClientEvent_G_SOCKET_CLIENT_PROXY_NEGOTIATING: GSocketClientEvent = 4;
pub const GSocketClientEvent_G_SOCKET_CLIENT_PROXY_NEGOTIATED: GSocketClientEvent = 5;
pub const GSocketClientEvent_G_SOCKET_CLIENT_TLS_HANDSHAKING: GSocketClientEvent = 6;
pub const GSocketClientEvent_G_SOCKET_CLIENT_TLS_HANDSHAKED: GSocketClientEvent = 7;
pub const GSocketClientEvent_G_SOCKET_CLIENT_COMPLETE: GSocketClientEvent = 8;
pub type GSocketClientEvent = ::core::ffi::c_uint;
pub const GSocketListenerEvent_G_SOCKET_LISTENER_BINDING: GSocketListenerEvent = 0;
pub const GSocketListenerEvent_G_SOCKET_LISTENER_BOUND: GSocketListenerEvent = 1;
pub const GSocketListenerEvent_G_SOCKET_LISTENER_LISTENING: GSocketListenerEvent = 2;
pub const GSocketListenerEvent_G_SOCKET_LISTENER_LISTENED: GSocketListenerEvent = 3;
pub type GSocketListenerEvent = ::core::ffi::c_uint;
pub const GTestDBusFlags_G_TEST_DBUS_NONE: GTestDBusFlags = 0;
pub type GTestDBusFlags = ::core::ffi::c_uint;
pub const GSubprocessFlags_G_SUBPROCESS_FLAGS_NONE: GSubprocessFlags = 0;
pub const GSubprocessFlags_G_SUBPROCESS_FLAGS_STDIN_PIPE: GSubprocessFlags = 1;
pub const GSubprocessFlags_G_SUBPROCESS_FLAGS_STDIN_INHERIT: GSubprocessFlags = 2;
pub const GSubprocessFlags_G_SUBPROCESS_FLAGS_STDOUT_PIPE: GSubprocessFlags = 4;
pub const GSubprocessFlags_G_SUBPROCESS_FLAGS_STDOUT_SILENCE: GSubprocessFlags = 8;
pub const GSubprocessFlags_G_SUBPROCESS_FLAGS_STDERR_PIPE: GSubprocessFlags = 16;
pub const GSubprocessFlags_G_SUBPROCESS_FLAGS_STDERR_SILENCE: GSubprocessFlags = 32;
pub const GSubprocessFlags_G_SUBPROCESS_FLAGS_STDERR_MERGE: GSubprocessFlags = 64;
pub const GSubprocessFlags_G_SUBPROCESS_FLAGS_INHERIT_FDS: GSubprocessFlags = 128;
pub const GSubprocessFlags_G_SUBPROCESS_FLAGS_SEARCH_PATH_FROM_ENVP: GSubprocessFlags = 256;
pub type GSubprocessFlags = ::core::ffi::c_uint;
pub const GNotificationPriority_G_NOTIFICATION_PRIORITY_NORMAL: GNotificationPriority = 0;
pub const GNotificationPriority_G_NOTIFICATION_PRIORITY_LOW: GNotificationPriority = 1;
pub const GNotificationPriority_G_NOTIFICATION_PRIORITY_HIGH: GNotificationPriority = 2;
pub const GNotificationPriority_G_NOTIFICATION_PRIORITY_URGENT: GNotificationPriority = 3;
pub type GNotificationPriority = ::core::ffi::c_uint;
pub const GNetworkConnectivity_G_NETWORK_CONNECTIVITY_LOCAL: GNetworkConnectivity = 1;
pub const GNetworkConnectivity_G_NETWORK_CONNECTIVITY_LIMITED: GNetworkConnectivity = 2;
pub const GNetworkConnectivity_G_NETWORK_CONNECTIVITY_PORTAL: GNetworkConnectivity = 3;
pub const GNetworkConnectivity_G_NETWORK_CONNECTIVITY_FULL: GNetworkConnectivity = 4;
pub type GNetworkConnectivity = ::core::ffi::c_uint;
pub const GPollableReturn_G_POLLABLE_RETURN_FAILED: GPollableReturn = 0;
pub const GPollableReturn_G_POLLABLE_RETURN_OK: GPollableReturn = 1;
pub const GPollableReturn_G_POLLABLE_RETURN_WOULD_BLOCK: GPollableReturn = -27;
pub type GPollableReturn = ::core::ffi::c_int;
pub const GMemoryMonitorWarningLevel_G_MEMORY_MONITOR_WARNING_LEVEL_LOW:
    GMemoryMonitorWarningLevel = 50;
pub const GMemoryMonitorWarningLevel_G_MEMORY_MONITOR_WARNING_LEVEL_MEDIUM:
    GMemoryMonitorWarningLevel = 100;
pub const GMemoryMonitorWarningLevel_G_MEMORY_MONITOR_WARNING_LEVEL_CRITICAL:
    GMemoryMonitorWarningLevel = 255;
pub type GMemoryMonitorWarningLevel = ::core::ffi::c_uint;
pub type GAppLaunchContext = _GAppLaunchContext;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GAppInfo {
    _unused: [u8; 0],
}
pub type GAppInfo = _GAppInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GAsyncResult {
    _unused: [u8; 0],
}
pub type GAsyncResult = _GAsyncResult;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GAsyncInitable {
    _unused: [u8; 0],
}
pub type GAsyncInitable = _GAsyncInitable;
pub type GBufferedInputStream = _GBufferedInputStream;
pub type GBufferedOutputStream = _GBufferedOutputStream;
pub type GCancellable = _GCancellable;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GCharsetConverter {
    _unused: [u8; 0],
}
pub type GCharsetConverter = _GCharsetConverter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GConverter {
    _unused: [u8; 0],
}
pub type GConverter = _GConverter;
pub type GConverterInputStream = _GConverterInputStream;
pub type GConverterOutputStream = _GConverterOutputStream;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDatagramBased {
    _unused: [u8; 0],
}
pub type GDatagramBased = _GDatagramBased;
pub type GDataInputStream = _GDataInputStream;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSimplePermission {
    _unused: [u8; 0],
}
pub type GSimplePermission = _GSimplePermission;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GZlibCompressor {
    _unused: [u8; 0],
}
pub type GZlibCompressor = _GZlibCompressor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GZlibDecompressor {
    _unused: [u8; 0],
}
pub type GZlibDecompressor = _GZlibDecompressor;
pub type GSimpleActionGroup = _GSimpleActionGroup;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GRemoteActionGroup {
    _unused: [u8; 0],
}
pub type GRemoteActionGroup = _GRemoteActionGroup;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDBusActionGroup {
    _unused: [u8; 0],
}
pub type GDBusActionGroup = _GDBusActionGroup;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GActionMap {
    _unused: [u8; 0],
}
pub type GActionMap = _GActionMap;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GActionGroup {
    _unused: [u8; 0],
}
pub type GActionGroup = _GActionGroup;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GPropertyAction {
    _unused: [u8; 0],
}
pub type GPropertyAction = _GPropertyAction;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSimpleAction {
    _unused: [u8; 0],
}
pub type GSimpleAction = _GSimpleAction;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GAction {
    _unused: [u8; 0],
}
pub type GAction = _GAction;
pub type GApplication = _GApplication;
pub type GApplicationCommandLine = _GApplicationCommandLine;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSettingsBackend {
    _unused: [u8; 0],
}
pub type GSettingsBackend = _GSettingsBackend;
pub type GSettings = _GSettings;
pub type GPermission = _GPermission;
pub type GMenuModel = _GMenuModel;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GNotification {
    _unused: [u8; 0],
}
pub type GNotification = _GNotification;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDrive {
    _unused: [u8; 0],
}
pub type GDrive = _GDrive;
pub type GFileEnumerator = _GFileEnumerator;
pub type GFileMonitor = _GFileMonitor;
pub type GFilterInputStream = _GFilterInputStream;
pub type GFilterOutputStream = _GFilterOutputStream;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GFile {
    _unused: [u8; 0],
}
pub type GFile = _GFile;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GFileInfo {
    _unused: [u8; 0],
}
pub type GFileInfo = _GFileInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GFileAttributeMatcher {
    _unused: [u8; 0],
}
pub type GFileAttributeMatcher = _GFileAttributeMatcher;
pub type GFileAttributeInfo = _GFileAttributeInfo;
pub type GFileAttributeInfoList = _GFileAttributeInfoList;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GFileDescriptorBased {
    _unused: [u8; 0],
}
pub type GFileDescriptorBased = _GFileDescriptorBased;
pub type GFileInputStream = _GFileInputStream;
pub type GFileOutputStream = _GFileOutputStream;
pub type GFileIOStream = _GFileIOStream;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GFileIcon {
    _unused: [u8; 0],
}
pub type GFileIcon = _GFileIcon;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GFilenameCompleter {
    _unused: [u8; 0],
}
pub type GFilenameCompleter = _GFilenameCompleter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GIcon {
    _unused: [u8; 0],
}
pub type GIcon = _GIcon;
pub type GInetAddress = _GInetAddress;
pub type GInetAddressMask = _GInetAddressMask;
pub type GInetSocketAddress = _GInetSocketAddress;
pub type GNativeSocketAddress = _GNativeSocketAddress;
pub type GInputStream = _GInputStream;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GInitable {
    _unused: [u8; 0],
}
pub type GInitable = _GInitable;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GIOModule {
    _unused: [u8; 0],
}
pub type GIOModule = _GIOModule;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GIOExtensionPoint {
    _unused: [u8; 0],
}
pub type GIOExtensionPoint = _GIOExtensionPoint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GIOExtension {
    _unused: [u8; 0],
}
pub type GIOExtension = _GIOExtension;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GIOSchedulerJob {
    _unused: [u8; 0],
}
pub type GIOSchedulerJob = _GIOSchedulerJob;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GIOStreamAdapter {
    _unused: [u8; 0],
}
pub type GIOStreamAdapter = _GIOStreamAdapter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GLoadableIcon {
    _unused: [u8; 0],
}
pub type GLoadableIcon = _GLoadableIcon;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GBytesIcon {
    _unused: [u8; 0],
}
pub type GBytesIcon = _GBytesIcon;
pub type GMemoryInputStream = _GMemoryInputStream;
pub type GMemoryOutputStream = _GMemoryOutputStream;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GMount {
    _unused: [u8; 0],
}
pub type GMount = _GMount;
pub type GMountOperation = _GMountOperation;
pub type GNetworkAddress = _GNetworkAddress;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GNetworkMonitor {
    _unused: [u8; 0],
}
pub type GNetworkMonitor = _GNetworkMonitor;
pub type GNetworkService = _GNetworkService;
pub type GOutputStream = _GOutputStream;
pub type GIOStream = _GIOStream;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSimpleIOStream {
    _unused: [u8; 0],
}
pub type GSimpleIOStream = _GSimpleIOStream;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GPollableInputStream {
    _unused: [u8; 0],
}
pub type GPollableInputStream = _GPollableInputStream;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GPollableOutputStream {
    _unused: [u8; 0],
}
pub type GPollableOutputStream = _GPollableOutputStream;
pub type GResolver = _GResolver;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GResource {
    _unused: [u8; 0],
}
pub type GResource = _GResource;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSeekable {
    _unused: [u8; 0],
}
pub type GSeekable = _GSeekable;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSimpleAsyncResult {
    _unused: [u8; 0],
}
pub type GSimpleAsyncResult = _GSimpleAsyncResult;
pub type GSocket = _GSocket;
pub type GSocketControlMessage = _GSocketControlMessage;
pub type GSocketClient = _GSocketClient;
pub type GSocketConnection = _GSocketConnection;
pub type GSocketListener = _GSocketListener;
pub type GSocketService = _GSocketService;
pub type GSocketAddress = _GSocketAddress;
pub type GSocketAddressEnumerator = _GSocketAddressEnumerator;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSocketConnectable {
    _unused: [u8; 0],
}
pub type GSocketConnectable = _GSocketConnectable;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSrvTarget {
    _unused: [u8; 0],
}
pub type GSrvTarget = _GSrvTarget;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTask {
    _unused: [u8; 0],
}
pub type GTask = _GTask;
pub type GTcpConnection = _GTcpConnection;
pub type GTcpWrapperConnection = _GTcpWrapperConnection;
pub type GThreadedSocketService = _GThreadedSocketService;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDtlsConnection {
    _unused: [u8; 0],
}
pub type GDtlsConnection = _GDtlsConnection;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDtlsClientConnection {
    _unused: [u8; 0],
}
pub type GDtlsClientConnection = _GDtlsClientConnection;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDtlsServerConnection {
    _unused: [u8; 0],
}
pub type GDtlsServerConnection = _GDtlsServerConnection;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GThemedIcon {
    _unused: [u8; 0],
}
pub type GThemedIcon = _GThemedIcon;
pub type GTlsCertificate = _GTlsCertificate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTlsClientConnection {
    _unused: [u8; 0],
}
pub type GTlsClientConnection = _GTlsClientConnection;
pub type GTlsConnection = _GTlsConnection;
pub type GTlsDatabase = _GTlsDatabase;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTlsFileDatabase {
    _unused: [u8; 0],
}
pub type GTlsFileDatabase = _GTlsFileDatabase;
pub type GTlsInteraction = _GTlsInteraction;
pub type GTlsPassword = _GTlsPassword;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTlsServerConnection {
    _unused: [u8; 0],
}
pub type GTlsServerConnection = _GTlsServerConnection;
pub type GVfs = _GVfs;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GProxyResolver {
    _unused: [u8; 0],
}
pub type GProxyResolver = _GProxyResolver;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GProxy {
    _unused: [u8; 0],
}
pub type GProxy = _GProxy;
pub type GProxyAddress = _GProxyAddress;
pub type GProxyAddressEnumerator = _GProxyAddressEnumerator;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GVolume {
    _unused: [u8; 0],
}
pub type GVolume = _GVolume;
pub type GVolumeMonitor = _GVolumeMonitor;
pub type GAsyncReadyCallback = ::core::option::Option<
    unsafe extern "C" fn(source_object: *mut GObject, res: *mut GAsyncResult, user_data: gpointer),
>;
pub type GFileProgressCallback = ::core::option::Option<
    unsafe extern "C" fn(current_num_bytes: goffset, total_num_bytes: goffset, user_data: gpointer),
>;
pub type GFileReadMoreCallback = ::core::option::Option<
    unsafe extern "C" fn(
        file_contents: *const ::core::ffi::c_char,
        file_size: goffset,
        user_data: gpointer,
    ) -> gboolean,
>;
pub type GFileMeasureProgressCallback = ::core::option::Option<
    unsafe extern "C" fn(
        reporting: gboolean,
        current_size: guint64,
        num_dirs: guint64,
        num_files: guint64,
        user_data: gpointer,
    ),
>;
pub type GIOSchedulerJobFunc = ::core::option::Option<
    unsafe extern "C" fn(
        job: *mut GIOSchedulerJob,
        cancellable: *mut GCancellable,
        user_data: gpointer,
    ) -> gboolean,
>;
pub type GSimpleAsyncThreadFunc = ::core::option::Option<
    unsafe extern "C" fn(
        res: *mut GSimpleAsyncResult,
        object: *mut GObject,
        cancellable: *mut GCancellable,
    ),
>;
pub type GSocketSourceFunc = ::core::option::Option<
    unsafe extern "C" fn(
        socket: *mut GSocket,
        condition: GIOCondition,
        user_data: gpointer,
    ) -> gboolean,
>;
pub type GDatagramBasedSourceFunc = ::core::option::Option<
    unsafe extern "C" fn(
        datagram_based: *mut GDatagramBased,
        condition: GIOCondition,
        user_data: gpointer,
    ) -> gboolean,
>;
pub type GInputVector = _GInputVector;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GInputVector {
    pub buffer: gpointer,
    pub size: gsize,
}
pub type GInputMessage = _GInputMessage;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GInputMessage {
    pub address: *mut *mut GSocketAddress,
    pub vectors: *mut GInputVector,
    pub num_vectors: guint,
    pub bytes_received: gsize,
    pub flags: gint,
    pub control_messages: *mut *mut *mut GSocketControlMessage,
    pub num_control_messages: *mut guint,
}
pub type GOutputVector = _GOutputVector;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GOutputVector {
    pub buffer: gconstpointer,
    pub size: gsize,
}
pub type GOutputMessage = _GOutputMessage;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GOutputMessage {
    pub address: *mut GSocketAddress,
    pub vectors: *mut GOutputVector,
    pub num_vectors: guint,
    pub bytes_sent: guint,
    pub control_messages: *mut *mut GSocketControlMessage,
    pub num_control_messages: guint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GCredentials {
    _unused: [u8; 0],
}
pub type GCredentials = _GCredentials;
pub type GUnixCredentialsMessage = _GUnixCredentialsMessage;
pub type GUnixFDList = _GUnixFDList;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDBusMessage {
    _unused: [u8; 0],
}
pub type GDBusMessage = _GDBusMessage;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDBusConnection {
    _unused: [u8; 0],
}
pub type GDBusConnection = _GDBusConnection;
pub type GDBusProxy = _GDBusProxy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDBusMethodInvocation {
    _unused: [u8; 0],
}
pub type GDBusMethodInvocation = _GDBusMethodInvocation;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDBusServer {
    _unused: [u8; 0],
}
pub type GDBusServer = _GDBusServer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDBusAuthObserver {
    _unused: [u8; 0],
}
pub type GDBusAuthObserver = _GDBusAuthObserver;
pub type GDBusErrorEntry = _GDBusErrorEntry;
pub type GDBusInterfaceVTable = _GDBusInterfaceVTable;
pub type GDBusSubtreeVTable = _GDBusSubtreeVTable;
pub type GDBusAnnotationInfo = _GDBusAnnotationInfo;
pub type GDBusArgInfo = _GDBusArgInfo;
pub type GDBusMethodInfo = _GDBusMethodInfo;
pub type GDBusSignalInfo = _GDBusSignalInfo;
pub type GDBusPropertyInfo = _GDBusPropertyInfo;
pub type GDBusInterfaceInfo = _GDBusInterfaceInfo;
pub type GDBusNodeInfo = _GDBusNodeInfo;
pub type GCancellableSourceFunc = ::core::option::Option<
    unsafe extern "C" fn(cancellable: *mut GCancellable, user_data: gpointer) -> gboolean,
>;
pub type GPollableSourceFunc = ::core::option::Option<
    unsafe extern "C" fn(pollable_stream: *mut GObject, user_data: gpointer) -> gboolean,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDBusInterface {
    _unused: [u8; 0],
}
pub type GDBusInterface = _GDBusInterface;
pub type GDBusInterfaceSkeleton = _GDBusInterfaceSkeleton;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDBusObject {
    _unused: [u8; 0],
}
pub type GDBusObject = _GDBusObject;
pub type GDBusObjectSkeleton = _GDBusObjectSkeleton;
pub type GDBusObjectProxy = _GDBusObjectProxy;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDBusObjectManager {
    _unused: [u8; 0],
}
pub type GDBusObjectManager = _GDBusObjectManager;
pub type GDBusObjectManagerClient = _GDBusObjectManagerClient;
pub type GDBusObjectManagerServer = _GDBusObjectManagerServer;
pub type GDBusProxyTypeFunc = ::core::option::Option<
    unsafe extern "C" fn(
        manager: *mut GDBusObjectManagerClient,
        object_path: *const gchar,
        interface_name: *const gchar,
        user_data: gpointer,
    ) -> GType,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTestDBus {
    _unused: [u8; 0],
}
pub type GTestDBus = _GTestDBus;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSubprocess {
    _unused: [u8; 0],
}
pub type GSubprocess = _GSubprocess;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSubprocessLauncher {
    _unused: [u8; 0],
}
pub type GSubprocessLauncher = _GSubprocessLauncher;
pub type GActionInterface = _GActionInterface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GActionInterface {
    pub g_iface: GTypeInterface,
    pub get_name:
        ::core::option::Option<unsafe extern "C" fn(action: *mut GAction) -> *const gchar>,
    pub get_parameter_type:
        ::core::option::Option<unsafe extern "C" fn(action: *mut GAction) -> *const GVariantType>,
    pub get_state_type:
        ::core::option::Option<unsafe extern "C" fn(action: *mut GAction) -> *const GVariantType>,
    pub get_state_hint:
        ::core::option::Option<unsafe extern "C" fn(action: *mut GAction) -> *mut GVariant>,
    pub get_enabled: ::core::option::Option<unsafe extern "C" fn(action: *mut GAction) -> gboolean>,
    pub get_state:
        ::core::option::Option<unsafe extern "C" fn(action: *mut GAction) -> *mut GVariant>,
    pub change_state:
        ::core::option::Option<unsafe extern "C" fn(action: *mut GAction, value: *mut GVariant)>,
    pub activate: ::core::option::Option<
        unsafe extern "C" fn(action: *mut GAction, parameter: *mut GVariant),
    >,
}
extern "C" {
    pub fn _frida_g_action_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_action_get_name(action: *mut GAction) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_action_get_parameter_type(action: *mut GAction) -> *const GVariantType;
}
extern "C" {
    pub fn _frida_g_action_get_state_type(action: *mut GAction) -> *const GVariantType;
}
extern "C" {
    pub fn _frida_g_action_get_state_hint(action: *mut GAction) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_action_get_enabled(action: *mut GAction) -> gboolean;
}
extern "C" {
    pub fn _frida_g_action_get_state(action: *mut GAction) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_action_change_state(action: *mut GAction, value: *mut GVariant);
}
extern "C" {
    pub fn _frida_g_action_activate(action: *mut GAction, parameter: *mut GVariant);
}
extern "C" {
    pub fn _frida_g_action_name_is_valid(action_name: *const gchar) -> gboolean;
}
extern "C" {
    pub fn _frida_g_action_parse_detailed_name(
        detailed_name: *const gchar,
        action_name: *mut *mut gchar,
        target_value: *mut *mut GVariant,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_action_print_detailed_name(
        action_name: *const gchar,
        target_value: *mut GVariant,
    ) -> *mut gchar;
}
pub type GActionGroupInterface = _GActionGroupInterface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GActionGroupInterface {
    pub g_iface: GTypeInterface,
    pub has_action: ::core::option::Option<
        unsafe extern "C" fn(
            action_group: *mut GActionGroup,
            action_name: *const gchar,
        ) -> gboolean,
    >,
    pub list_actions: ::core::option::Option<
        unsafe extern "C" fn(action_group: *mut GActionGroup) -> *mut *mut gchar,
    >,
    pub get_action_enabled: ::core::option::Option<
        unsafe extern "C" fn(
            action_group: *mut GActionGroup,
            action_name: *const gchar,
        ) -> gboolean,
    >,
    pub get_action_parameter_type: ::core::option::Option<
        unsafe extern "C" fn(
            action_group: *mut GActionGroup,
            action_name: *const gchar,
        ) -> *const GVariantType,
    >,
    pub get_action_state_type: ::core::option::Option<
        unsafe extern "C" fn(
            action_group: *mut GActionGroup,
            action_name: *const gchar,
        ) -> *const GVariantType,
    >,
    pub get_action_state_hint: ::core::option::Option<
        unsafe extern "C" fn(
            action_group: *mut GActionGroup,
            action_name: *const gchar,
        ) -> *mut GVariant,
    >,
    pub get_action_state: ::core::option::Option<
        unsafe extern "C" fn(
            action_group: *mut GActionGroup,
            action_name: *const gchar,
        ) -> *mut GVariant,
    >,
    pub change_action_state: ::core::option::Option<
        unsafe extern "C" fn(
            action_group: *mut GActionGroup,
            action_name: *const gchar,
            value: *mut GVariant,
        ),
    >,
    pub activate_action: ::core::option::Option<
        unsafe extern "C" fn(
            action_group: *mut GActionGroup,
            action_name: *const gchar,
            parameter: *mut GVariant,
        ),
    >,
    pub action_added: ::core::option::Option<
        unsafe extern "C" fn(action_group: *mut GActionGroup, action_name: *const gchar),
    >,
    pub action_removed: ::core::option::Option<
        unsafe extern "C" fn(action_group: *mut GActionGroup, action_name: *const gchar),
    >,
    pub action_enabled_changed: ::core::option::Option<
        unsafe extern "C" fn(
            action_group: *mut GActionGroup,
            action_name: *const gchar,
            enabled: gboolean,
        ),
    >,
    pub action_state_changed: ::core::option::Option<
        unsafe extern "C" fn(
            action_group: *mut GActionGroup,
            action_name: *const gchar,
            state: *mut GVariant,
        ),
    >,
    pub query_action: ::core::option::Option<
        unsafe extern "C" fn(
            action_group: *mut GActionGroup,
            action_name: *const gchar,
            enabled: *mut gboolean,
            parameter_type: *mut *const GVariantType,
            state_type: *mut *const GVariantType,
            state_hint: *mut *mut GVariant,
            state: *mut *mut GVariant,
        ) -> gboolean,
    >,
}
extern "C" {
    pub fn _frida_g_action_group_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_action_group_has_action(
        action_group: *mut GActionGroup,
        action_name: *const gchar,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_action_group_list_actions(action_group: *mut GActionGroup) -> *mut *mut gchar;
}
extern "C" {
    pub fn _frida_g_action_group_get_action_parameter_type(
        action_group: *mut GActionGroup,
        action_name: *const gchar,
    ) -> *const GVariantType;
}
extern "C" {
    pub fn _frida_g_action_group_get_action_state_type(
        action_group: *mut GActionGroup,
        action_name: *const gchar,
    ) -> *const GVariantType;
}
extern "C" {
    pub fn _frida_g_action_group_get_action_state_hint(
        action_group: *mut GActionGroup,
        action_name: *const gchar,
    ) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_action_group_get_action_enabled(
        action_group: *mut GActionGroup,
        action_name: *const gchar,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_action_group_get_action_state(
        action_group: *mut GActionGroup,
        action_name: *const gchar,
    ) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_action_group_change_action_state(
        action_group: *mut GActionGroup,
        action_name: *const gchar,
        value: *mut GVariant,
    );
}
extern "C" {
    pub fn _frida_g_action_group_activate_action(
        action_group: *mut GActionGroup,
        action_name: *const gchar,
        parameter: *mut GVariant,
    );
}
extern "C" {
    pub fn _frida_g_action_group_action_added(
        action_group: *mut GActionGroup,
        action_name: *const gchar,
    );
}
extern "C" {
    pub fn _frida_g_action_group_action_removed(
        action_group: *mut GActionGroup,
        action_name: *const gchar,
    );
}
extern "C" {
    pub fn _frida_g_action_group_action_enabled_changed(
        action_group: *mut GActionGroup,
        action_name: *const gchar,
        enabled: gboolean,
    );
}
extern "C" {
    pub fn _frida_g_action_group_action_state_changed(
        action_group: *mut GActionGroup,
        action_name: *const gchar,
        state: *mut GVariant,
    );
}
extern "C" {
    pub fn _frida_g_action_group_query_action(
        action_group: *mut GActionGroup,
        action_name: *const gchar,
        enabled: *mut gboolean,
        parameter_type: *mut *const GVariantType,
        state_type: *mut *const GVariantType,
        state_hint: *mut *mut GVariant,
        state: *mut *mut GVariant,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_dbus_connection_export_action_group(
        connection: *mut GDBusConnection,
        object_path: *const gchar,
        action_group: *mut GActionGroup,
        error: *mut *mut GError,
    ) -> guint;
}
extern "C" {
    pub fn _frida_g_dbus_connection_unexport_action_group(
        connection: *mut GDBusConnection,
        export_id: guint,
    );
}
pub type GActionMapInterface = _GActionMapInterface;
pub type GActionEntry = _GActionEntry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GActionMapInterface {
    pub g_iface: GTypeInterface,
    pub lookup_action: ::core::option::Option<
        unsafe extern "C" fn(
            action_map: *mut GActionMap,
            action_name: *const gchar,
        ) -> *mut GAction,
    >,
    pub add_action: ::core::option::Option<
        unsafe extern "C" fn(action_map: *mut GActionMap, action: *mut GAction),
    >,
    pub remove_action: ::core::option::Option<
        unsafe extern "C" fn(action_map: *mut GActionMap, action_name: *const gchar),
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GActionEntry {
    pub name: *const gchar,
    pub activate: ::core::option::Option<
        unsafe extern "C" fn(
            action: *mut GSimpleAction,
            parameter: *mut GVariant,
            user_data: gpointer,
        ),
    >,
    pub parameter_type: *const gchar,
    pub state: *const gchar,
    pub change_state: ::core::option::Option<
        unsafe extern "C" fn(action: *mut GSimpleAction, value: *mut GVariant, user_data: gpointer),
    >,
    pub padding: [gsize; 3usize],
}
extern "C" {
    pub fn _frida_g_action_map_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_action_map_lookup_action(
        action_map: *mut GActionMap,
        action_name: *const gchar,
    ) -> *mut GAction;
}
extern "C" {
    pub fn _frida_g_action_map_add_action(action_map: *mut GActionMap, action: *mut GAction);
}
extern "C" {
    pub fn _frida_g_action_map_remove_action(
        action_map: *mut GActionMap,
        action_name: *const gchar,
    );
}
extern "C" {
    pub fn _frida_g_action_map_add_action_entries(
        action_map: *mut GActionMap,
        entries: *const GActionEntry,
        n_entries: gint,
        user_data: gpointer,
    );
}
pub type GAppLaunchContextClass = _GAppLaunchContextClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GAppLaunchContextPrivate {
    _unused: [u8; 0],
}
pub type GAppLaunchContextPrivate = _GAppLaunchContextPrivate;
pub type GAppInfoIface = _GAppInfoIface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GAppInfoIface {
    pub g_iface: GTypeInterface,
    pub dup: ::core::option::Option<unsafe extern "C" fn(appinfo: *mut GAppInfo) -> *mut GAppInfo>,
    pub equal: ::core::option::Option<
        unsafe extern "C" fn(appinfo1: *mut GAppInfo, appinfo2: *mut GAppInfo) -> gboolean,
    >,
    pub get_id: ::core::option::Option<
        unsafe extern "C" fn(appinfo: *mut GAppInfo) -> *const ::core::ffi::c_char,
    >,
    pub get_name: ::core::option::Option<
        unsafe extern "C" fn(appinfo: *mut GAppInfo) -> *const ::core::ffi::c_char,
    >,
    pub get_description: ::core::option::Option<
        unsafe extern "C" fn(appinfo: *mut GAppInfo) -> *const ::core::ffi::c_char,
    >,
    pub get_executable: ::core::option::Option<
        unsafe extern "C" fn(appinfo: *mut GAppInfo) -> *const ::core::ffi::c_char,
    >,
    pub get_icon:
        ::core::option::Option<unsafe extern "C" fn(appinfo: *mut GAppInfo) -> *mut GIcon>,
    pub launch: ::core::option::Option<
        unsafe extern "C" fn(
            appinfo: *mut GAppInfo,
            files: *mut GList,
            context: *mut GAppLaunchContext,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub supports_uris:
        ::core::option::Option<unsafe extern "C" fn(appinfo: *mut GAppInfo) -> gboolean>,
    pub supports_files:
        ::core::option::Option<unsafe extern "C" fn(appinfo: *mut GAppInfo) -> gboolean>,
    pub launch_uris: ::core::option::Option<
        unsafe extern "C" fn(
            appinfo: *mut GAppInfo,
            uris: *mut GList,
            context: *mut GAppLaunchContext,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub should_show:
        ::core::option::Option<unsafe extern "C" fn(appinfo: *mut GAppInfo) -> gboolean>,
    pub set_as_default_for_type: ::core::option::Option<
        unsafe extern "C" fn(
            appinfo: *mut GAppInfo,
            content_type: *const ::core::ffi::c_char,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub set_as_default_for_extension: ::core::option::Option<
        unsafe extern "C" fn(
            appinfo: *mut GAppInfo,
            extension: *const ::core::ffi::c_char,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub add_supports_type: ::core::option::Option<
        unsafe extern "C" fn(
            appinfo: *mut GAppInfo,
            content_type: *const ::core::ffi::c_char,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub can_remove_supports_type:
        ::core::option::Option<unsafe extern "C" fn(appinfo: *mut GAppInfo) -> gboolean>,
    pub remove_supports_type: ::core::option::Option<
        unsafe extern "C" fn(
            appinfo: *mut GAppInfo,
            content_type: *const ::core::ffi::c_char,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub can_delete:
        ::core::option::Option<unsafe extern "C" fn(appinfo: *mut GAppInfo) -> gboolean>,
    pub do_delete: ::core::option::Option<unsafe extern "C" fn(appinfo: *mut GAppInfo) -> gboolean>,
    pub get_commandline: ::core::option::Option<
        unsafe extern "C" fn(appinfo: *mut GAppInfo) -> *const ::core::ffi::c_char,
    >,
    pub get_display_name: ::core::option::Option<
        unsafe extern "C" fn(appinfo: *mut GAppInfo) -> *const ::core::ffi::c_char,
    >,
    pub set_as_last_used_for_type: ::core::option::Option<
        unsafe extern "C" fn(
            appinfo: *mut GAppInfo,
            content_type: *const ::core::ffi::c_char,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub get_supported_types: ::core::option::Option<
        unsafe extern "C" fn(appinfo: *mut GAppInfo) -> *mut *const ::core::ffi::c_char,
    >,
    pub launch_uris_async: ::core::option::Option<
        unsafe extern "C" fn(
            appinfo: *mut GAppInfo,
            uris: *mut GList,
            context: *mut GAppLaunchContext,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub launch_uris_finish: ::core::option::Option<
        unsafe extern "C" fn(
            appinfo: *mut GAppInfo,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
}
extern "C" {
    pub fn _frida_g_app_info_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_app_info_create_from_commandline(
        commandline: *const ::core::ffi::c_char,
        application_name: *const ::core::ffi::c_char,
        flags: GAppInfoCreateFlags,
        error: *mut *mut GError,
    ) -> *mut GAppInfo;
}
extern "C" {
    pub fn _frida_g_app_info_dup(appinfo: *mut GAppInfo) -> *mut GAppInfo;
}
extern "C" {
    pub fn _frida_g_app_info_equal(appinfo1: *mut GAppInfo, appinfo2: *mut GAppInfo) -> gboolean;
}
extern "C" {
    pub fn _frida_g_app_info_get_id(appinfo: *mut GAppInfo) -> *const ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_app_info_get_name(appinfo: *mut GAppInfo) -> *const ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_app_info_get_display_name(appinfo: *mut GAppInfo)
        -> *const ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_app_info_get_description(appinfo: *mut GAppInfo) -> *const ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_app_info_get_executable(appinfo: *mut GAppInfo) -> *const ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_app_info_get_commandline(appinfo: *mut GAppInfo) -> *const ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_app_info_get_icon(appinfo: *mut GAppInfo) -> *mut GIcon;
}
extern "C" {
    pub fn _frida_g_app_info_launch(
        appinfo: *mut GAppInfo,
        files: *mut GList,
        context: *mut GAppLaunchContext,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_app_info_supports_uris(appinfo: *mut GAppInfo) -> gboolean;
}
extern "C" {
    pub fn _frida_g_app_info_supports_files(appinfo: *mut GAppInfo) -> gboolean;
}
extern "C" {
    pub fn _frida_g_app_info_launch_uris(
        appinfo: *mut GAppInfo,
        uris: *mut GList,
        context: *mut GAppLaunchContext,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_app_info_launch_uris_async(
        appinfo: *mut GAppInfo,
        uris: *mut GList,
        context: *mut GAppLaunchContext,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_app_info_launch_uris_finish(
        appinfo: *mut GAppInfo,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_app_info_should_show(appinfo: *mut GAppInfo) -> gboolean;
}
extern "C" {
    pub fn _frida_g_app_info_set_as_default_for_type(
        appinfo: *mut GAppInfo,
        content_type: *const ::core::ffi::c_char,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_app_info_set_as_default_for_extension(
        appinfo: *mut GAppInfo,
        extension: *const ::core::ffi::c_char,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_app_info_add_supports_type(
        appinfo: *mut GAppInfo,
        content_type: *const ::core::ffi::c_char,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_app_info_can_remove_supports_type(appinfo: *mut GAppInfo) -> gboolean;
}
extern "C" {
    pub fn _frida_g_app_info_remove_supports_type(
        appinfo: *mut GAppInfo,
        content_type: *const ::core::ffi::c_char,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_app_info_get_supported_types(
        appinfo: *mut GAppInfo,
    ) -> *mut *const ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_app_info_can_delete(appinfo: *mut GAppInfo) -> gboolean;
}
extern "C" {
    pub fn _frida_g_app_info_delete(appinfo: *mut GAppInfo) -> gboolean;
}
extern "C" {
    pub fn _frida_g_app_info_set_as_last_used_for_type(
        appinfo: *mut GAppInfo,
        content_type: *const ::core::ffi::c_char,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_app_info_get_all() -> *mut GList;
}
extern "C" {
    pub fn _frida_g_app_info_get_all_for_type(
        content_type: *const ::core::ffi::c_char,
    ) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_app_info_get_recommended_for_type(content_type: *const gchar) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_app_info_get_fallback_for_type(content_type: *const gchar) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_app_info_reset_type_associations(content_type: *const ::core::ffi::c_char);
}
extern "C" {
    pub fn _frida_g_app_info_get_default_for_type(
        content_type: *const ::core::ffi::c_char,
        must_support_uris: gboolean,
    ) -> *mut GAppInfo;
}
extern "C" {
    pub fn _frida_g_app_info_get_default_for_type_async(
        content_type: *const ::core::ffi::c_char,
        must_support_uris: gboolean,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_app_info_get_default_for_type_finish(
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GAppInfo;
}
extern "C" {
    pub fn _frida_g_app_info_get_default_for_uri_scheme(
        uri_scheme: *const ::core::ffi::c_char,
    ) -> *mut GAppInfo;
}
extern "C" {
    pub fn _frida_g_app_info_get_default_for_uri_scheme_async(
        uri_scheme: *const ::core::ffi::c_char,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_app_info_get_default_for_uri_scheme_finish(
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GAppInfo;
}
extern "C" {
    pub fn _frida_g_app_info_launch_default_for_uri(
        uri: *const ::core::ffi::c_char,
        context: *mut GAppLaunchContext,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_app_info_launch_default_for_uri_async(
        uri: *const ::core::ffi::c_char,
        context: *mut GAppLaunchContext,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_app_info_launch_default_for_uri_finish(
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gboolean;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GAppLaunchContext {
    pub parent_instance: GObject,
    pub priv_: *mut GAppLaunchContextPrivate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GAppLaunchContextClass {
    pub parent_class: GObjectClass,
    pub get_display: ::core::option::Option<
        unsafe extern "C" fn(
            context: *mut GAppLaunchContext,
            info: *mut GAppInfo,
            files: *mut GList,
        ) -> *mut ::core::ffi::c_char,
    >,
    pub get_startup_notify_id: ::core::option::Option<
        unsafe extern "C" fn(
            context: *mut GAppLaunchContext,
            info: *mut GAppInfo,
            files: *mut GList,
        ) -> *mut ::core::ffi::c_char,
    >,
    pub launch_failed: ::core::option::Option<
        unsafe extern "C" fn(
            context: *mut GAppLaunchContext,
            startup_notify_id: *const ::core::ffi::c_char,
        ),
    >,
    pub launched: ::core::option::Option<
        unsafe extern "C" fn(
            context: *mut GAppLaunchContext,
            info: *mut GAppInfo,
            platform_data: *mut GVariant,
        ),
    >,
    pub launch_started: ::core::option::Option<
        unsafe extern "C" fn(
            context: *mut GAppLaunchContext,
            info: *mut GAppInfo,
            platform_data: *mut GVariant,
        ),
    >,
    pub _g_reserved1: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved2: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved3: ::core::option::Option<unsafe extern "C" fn()>,
}
extern "C" {
    pub fn _frida_g_app_launch_context_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_app_launch_context_new() -> *mut GAppLaunchContext;
}
extern "C" {
    pub fn _frida_g_app_launch_context_setenv(
        context: *mut GAppLaunchContext,
        variable: *const ::core::ffi::c_char,
        value: *const ::core::ffi::c_char,
    );
}
extern "C" {
    pub fn _frida_g_app_launch_context_unsetenv(
        context: *mut GAppLaunchContext,
        variable: *const ::core::ffi::c_char,
    );
}
extern "C" {
    pub fn _frida_g_app_launch_context_get_environment(
        context: *mut GAppLaunchContext,
    ) -> *mut *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_app_launch_context_get_display(
        context: *mut GAppLaunchContext,
        info: *mut GAppInfo,
        files: *mut GList,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_app_launch_context_get_startup_notify_id(
        context: *mut GAppLaunchContext,
        info: *mut GAppInfo,
        files: *mut GList,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_app_launch_context_launch_failed(
        context: *mut GAppLaunchContext,
        startup_notify_id: *const ::core::ffi::c_char,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GAppInfoMonitor {
    _unused: [u8; 0],
}
pub type GAppInfoMonitor = _GAppInfoMonitor;
extern "C" {
    pub fn _frida_g_app_info_monitor_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_app_info_monitor_get() -> *mut GAppInfoMonitor;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GApplicationPrivate {
    _unused: [u8; 0],
}
pub type GApplicationPrivate = _GApplicationPrivate;
pub type GApplicationClass = _GApplicationClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GApplication {
    pub parent_instance: GObject,
    pub priv_: *mut GApplicationPrivate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GApplicationClass {
    pub parent_class: GObjectClass,
    pub startup: ::core::option::Option<unsafe extern "C" fn(application: *mut GApplication)>,
    pub activate: ::core::option::Option<unsafe extern "C" fn(application: *mut GApplication)>,
    pub open: ::core::option::Option<
        unsafe extern "C" fn(
            application: *mut GApplication,
            files: *mut *mut GFile,
            n_files: gint,
            hint: *const gchar,
        ),
    >,
    pub command_line: ::core::option::Option<
        unsafe extern "C" fn(
            application: *mut GApplication,
            command_line: *mut GApplicationCommandLine,
        ) -> ::core::ffi::c_int,
    >,
    pub local_command_line: ::core::option::Option<
        unsafe extern "C" fn(
            application: *mut GApplication,
            arguments: *mut *mut *mut gchar,
            exit_status: *mut ::core::ffi::c_int,
        ) -> gboolean,
    >,
    pub before_emit: ::core::option::Option<
        unsafe extern "C" fn(application: *mut GApplication, platform_data: *mut GVariant),
    >,
    pub after_emit: ::core::option::Option<
        unsafe extern "C" fn(application: *mut GApplication, platform_data: *mut GVariant),
    >,
    pub add_platform_data: ::core::option::Option<
        unsafe extern "C" fn(application: *mut GApplication, builder: *mut GVariantBuilder),
    >,
    pub quit_mainloop: ::core::option::Option<unsafe extern "C" fn(application: *mut GApplication)>,
    pub run_mainloop: ::core::option::Option<unsafe extern "C" fn(application: *mut GApplication)>,
    pub shutdown: ::core::option::Option<unsafe extern "C" fn(application: *mut GApplication)>,
    pub dbus_register: ::core::option::Option<
        unsafe extern "C" fn(
            application: *mut GApplication,
            connection: *mut GDBusConnection,
            object_path: *const gchar,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub dbus_unregister: ::core::option::Option<
        unsafe extern "C" fn(
            application: *mut GApplication,
            connection: *mut GDBusConnection,
            object_path: *const gchar,
        ),
    >,
    pub handle_local_options: ::core::option::Option<
        unsafe extern "C" fn(application: *mut GApplication, options: *mut GVariantDict) -> gint,
    >,
    pub name_lost:
        ::core::option::Option<unsafe extern "C" fn(application: *mut GApplication) -> gboolean>,
    pub padding: [gpointer; 7usize],
}
extern "C" {
    pub fn _frida_g_application_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_application_id_is_valid(application_id: *const gchar) -> gboolean;
}
extern "C" {
    pub fn _frida_g_application_new(
        application_id: *const gchar,
        flags: GApplicationFlags,
    ) -> *mut GApplication;
}
extern "C" {
    pub fn _frida_g_application_get_application_id(application: *mut GApplication) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_application_set_application_id(
        application: *mut GApplication,
        application_id: *const gchar,
    );
}
extern "C" {
    pub fn _frida_g_application_get_dbus_connection(
        application: *mut GApplication,
    ) -> *mut GDBusConnection;
}
extern "C" {
    pub fn _frida_g_application_get_dbus_object_path(
        application: *mut GApplication,
    ) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_application_get_inactivity_timeout(application: *mut GApplication) -> guint;
}
extern "C" {
    pub fn _frida_g_application_set_inactivity_timeout(
        application: *mut GApplication,
        inactivity_timeout: guint,
    );
}
extern "C" {
    pub fn _frida_g_application_get_flags(application: *mut GApplication) -> GApplicationFlags;
}
extern "C" {
    pub fn _frida_g_application_set_flags(application: *mut GApplication, flags: GApplicationFlags);
}
extern "C" {
    pub fn _frida_g_application_get_resource_base_path(
        application: *mut GApplication,
    ) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_application_set_resource_base_path(
        application: *mut GApplication,
        resource_path: *const gchar,
    );
}
extern "C" {
    pub fn _frida_g_application_set_action_group(
        application: *mut GApplication,
        action_group: *mut GActionGroup,
    );
}
extern "C" {
    pub fn _frida_g_application_add_main_option_entries(
        application: *mut GApplication,
        entries: *const GOptionEntry,
    );
}
extern "C" {
    pub fn _frida_g_application_add_main_option(
        application: *mut GApplication,
        long_name: *const ::core::ffi::c_char,
        short_name: ::core::ffi::c_char,
        flags: GOptionFlags,
        arg: GOptionArg,
        description: *const ::core::ffi::c_char,
        arg_description: *const ::core::ffi::c_char,
    );
}
extern "C" {
    pub fn _frida_g_application_add_option_group(
        application: *mut GApplication,
        group: *mut GOptionGroup,
    );
}
extern "C" {
    pub fn _frida_g_application_set_option_context_parameter_string(
        application: *mut GApplication,
        parameter_string: *const gchar,
    );
}
extern "C" {
    pub fn _frida_g_application_set_option_context_summary(
        application: *mut GApplication,
        summary: *const gchar,
    );
}
extern "C" {
    pub fn _frida_g_application_set_option_context_description(
        application: *mut GApplication,
        description: *const gchar,
    );
}
extern "C" {
    pub fn _frida_g_application_get_is_registered(application: *mut GApplication) -> gboolean;
}
extern "C" {
    pub fn _frida_g_application_get_is_remote(application: *mut GApplication) -> gboolean;
}
extern "C" {
    pub fn _frida_g_application_register(
        application: *mut GApplication,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_application_hold(application: *mut GApplication);
}
extern "C" {
    pub fn _frida_g_application_release(application: *mut GApplication);
}
extern "C" {
    pub fn _frida_g_application_activate(application: *mut GApplication);
}
extern "C" {
    pub fn _frida_g_application_open(
        application: *mut GApplication,
        files: *mut *mut GFile,
        n_files: gint,
        hint: *const gchar,
    );
}
extern "C" {
    pub fn _frida_g_application_run(
        application: *mut GApplication,
        argc: ::core::ffi::c_int,
        argv: *mut *mut ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _frida_g_application_quit(application: *mut GApplication);
}
extern "C" {
    pub fn _frida_g_application_get_default() -> *mut GApplication;
}
extern "C" {
    pub fn _frida_g_application_set_default(application: *mut GApplication);
}
extern "C" {
    pub fn _frida_g_application_mark_busy(application: *mut GApplication);
}
extern "C" {
    pub fn _frida_g_application_unmark_busy(application: *mut GApplication);
}
extern "C" {
    pub fn _frida_g_application_get_is_busy(application: *mut GApplication) -> gboolean;
}
extern "C" {
    pub fn _frida_g_application_send_notification(
        application: *mut GApplication,
        id: *const gchar,
        notification: *mut GNotification,
    );
}
extern "C" {
    pub fn _frida_g_application_withdraw_notification(
        application: *mut GApplication,
        id: *const gchar,
    );
}
extern "C" {
    pub fn _frida_g_application_bind_busy_property(
        application: *mut GApplication,
        object: gpointer,
        property: *const gchar,
    );
}
extern "C" {
    pub fn _frida_g_application_unbind_busy_property(
        application: *mut GApplication,
        object: gpointer,
        property: *const gchar,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GApplicationCommandLinePrivate {
    _unused: [u8; 0],
}
pub type GApplicationCommandLinePrivate = _GApplicationCommandLinePrivate;
pub type GApplicationCommandLineClass = _GApplicationCommandLineClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GApplicationCommandLine {
    pub parent_instance: GObject,
    pub priv_: *mut GApplicationCommandLinePrivate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GApplicationCommandLineClass {
    pub parent_class: GObjectClass,
    pub print_literal: ::core::option::Option<
        unsafe extern "C" fn(cmdline: *mut GApplicationCommandLine, message: *const gchar),
    >,
    pub printerr_literal: ::core::option::Option<
        unsafe extern "C" fn(cmdline: *mut GApplicationCommandLine, message: *const gchar),
    >,
    pub get_stdin: ::core::option::Option<
        unsafe extern "C" fn(cmdline: *mut GApplicationCommandLine) -> *mut GInputStream,
    >,
    pub padding: [gpointer; 11usize],
}
extern "C" {
    pub fn _frida_g_application_command_line_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_application_command_line_get_arguments(
        cmdline: *mut GApplicationCommandLine,
        argc: *mut ::core::ffi::c_int,
    ) -> *mut *mut gchar;
}
extern "C" {
    pub fn _frida_g_application_command_line_get_options_dict(
        cmdline: *mut GApplicationCommandLine,
    ) -> *mut GVariantDict;
}
extern "C" {
    pub fn _frida_g_application_command_line_get_stdin(
        cmdline: *mut GApplicationCommandLine,
    ) -> *mut GInputStream;
}
extern "C" {
    pub fn _frida_g_application_command_line_get_environ(
        cmdline: *mut GApplicationCommandLine,
    ) -> *const *const gchar;
}
extern "C" {
    pub fn _frida_g_application_command_line_getenv(
        cmdline: *mut GApplicationCommandLine,
        name: *const gchar,
    ) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_application_command_line_get_cwd(
        cmdline: *mut GApplicationCommandLine,
    ) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_application_command_line_get_is_remote(
        cmdline: *mut GApplicationCommandLine,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_application_command_line_print(
        cmdline: *mut GApplicationCommandLine,
        format: *const gchar,
        ...
    );
}
extern "C" {
    pub fn _frida_g_application_command_line_printerr(
        cmdline: *mut GApplicationCommandLine,
        format: *const gchar,
        ...
    );
}
extern "C" {
    pub fn _frida_g_application_command_line_get_exit_status(
        cmdline: *mut GApplicationCommandLine,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _frida_g_application_command_line_set_exit_status(
        cmdline: *mut GApplicationCommandLine,
        exit_status: ::core::ffi::c_int,
    );
}
extern "C" {
    pub fn _frida_g_application_command_line_get_platform_data(
        cmdline: *mut GApplicationCommandLine,
    ) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_application_command_line_create_file_for_arg(
        cmdline: *mut GApplicationCommandLine,
        arg: *const gchar,
    ) -> *mut GFile;
}
pub type GInitableIface = _GInitableIface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GInitableIface {
    pub g_iface: GTypeInterface,
    pub init: ::core::option::Option<
        unsafe extern "C" fn(
            initable: *mut GInitable,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
}
extern "C" {
    pub fn _frida_g_initable_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_initable_init(
        initable: *mut GInitable,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_initable_new(
        object_type: GType,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
        first_property_name: *const gchar,
        ...
    ) -> gpointer;
}
extern "C" {
    pub fn _frida_g_initable_newv(
        object_type: GType,
        n_parameters: guint,
        parameters: *mut GParameter,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gpointer;
}
extern "C" {
    pub fn _frida_g_initable_new_valist(
        object_type: GType,
        first_property_name: *const gchar,
        var_args: va_list,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GObject;
}
pub type GAsyncInitableIface = _GAsyncInitableIface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GAsyncInitableIface {
    pub g_iface: GTypeInterface,
    pub init_async: ::core::option::Option<
        unsafe extern "C" fn(
            initable: *mut GAsyncInitable,
            io_priority: ::core::ffi::c_int,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub init_finish: ::core::option::Option<
        unsafe extern "C" fn(
            initable: *mut GAsyncInitable,
            res: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
}
extern "C" {
    pub fn _frida_g_async_initable_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_async_initable_init_async(
        initable: *mut GAsyncInitable,
        io_priority: ::core::ffi::c_int,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_async_initable_init_finish(
        initable: *mut GAsyncInitable,
        res: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_async_initable_new_async(
        object_type: GType,
        io_priority: ::core::ffi::c_int,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
        first_property_name: *const gchar,
        ...
    );
}
extern "C" {
    pub fn _frida_g_async_initable_newv_async(
        object_type: GType,
        n_parameters: guint,
        parameters: *mut GParameter,
        io_priority: ::core::ffi::c_int,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_async_initable_new_valist_async(
        object_type: GType,
        first_property_name: *const gchar,
        var_args: va_list,
        io_priority: ::core::ffi::c_int,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_async_initable_new_finish(
        initable: *mut GAsyncInitable,
        res: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GObject;
}
pub type GAsyncResultIface = _GAsyncResultIface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GAsyncResultIface {
    pub g_iface: GTypeInterface,
    pub get_user_data:
        ::core::option::Option<unsafe extern "C" fn(res: *mut GAsyncResult) -> gpointer>,
    pub get_source_object:
        ::core::option::Option<unsafe extern "C" fn(res: *mut GAsyncResult) -> *mut GObject>,
    pub is_tagged: ::core::option::Option<
        unsafe extern "C" fn(res: *mut GAsyncResult, source_tag: gpointer) -> gboolean,
    >,
}
extern "C" {
    pub fn _frida_g_async_result_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_async_result_get_user_data(res: *mut GAsyncResult) -> gpointer;
}
extern "C" {
    pub fn _frida_g_async_result_get_source_object(res: *mut GAsyncResult) -> *mut GObject;
}
extern "C" {
    pub fn _frida_g_async_result_legacy_propagate_error(
        res: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_async_result_is_tagged(
        res: *mut GAsyncResult,
        source_tag: gpointer,
    ) -> gboolean;
}
pub type GInputStreamClass = _GInputStreamClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GInputStreamPrivate {
    _unused: [u8; 0],
}
pub type GInputStreamPrivate = _GInputStreamPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GInputStream {
    pub parent_instance: GObject,
    pub priv_: *mut GInputStreamPrivate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GInputStreamClass {
    pub parent_class: GObjectClass,
    pub read_fn: ::core::option::Option<
        unsafe extern "C" fn(
            stream: *mut GInputStream,
            buffer: *mut ::core::ffi::c_void,
            count: gsize,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> gssize,
    >,
    pub skip: ::core::option::Option<
        unsafe extern "C" fn(
            stream: *mut GInputStream,
            count: gsize,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> gssize,
    >,
    pub close_fn: ::core::option::Option<
        unsafe extern "C" fn(
            stream: *mut GInputStream,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub read_async: ::core::option::Option<
        unsafe extern "C" fn(
            stream: *mut GInputStream,
            buffer: *mut ::core::ffi::c_void,
            count: gsize,
            io_priority: ::core::ffi::c_int,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub read_finish: ::core::option::Option<
        unsafe extern "C" fn(
            stream: *mut GInputStream,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> gssize,
    >,
    pub skip_async: ::core::option::Option<
        unsafe extern "C" fn(
            stream: *mut GInputStream,
            count: gsize,
            io_priority: ::core::ffi::c_int,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub skip_finish: ::core::option::Option<
        unsafe extern "C" fn(
            stream: *mut GInputStream,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> gssize,
    >,
    pub close_async: ::core::option::Option<
        unsafe extern "C" fn(
            stream: *mut GInputStream,
            io_priority: ::core::ffi::c_int,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub close_finish: ::core::option::Option<
        unsafe extern "C" fn(
            stream: *mut GInputStream,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub _g_reserved1: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved2: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved3: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved4: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved5: ::core::option::Option<unsafe extern "C" fn()>,
}
extern "C" {
    pub fn _frida_g_input_stream_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_input_stream_read(
        stream: *mut GInputStream,
        buffer: *mut ::core::ffi::c_void,
        count: gsize,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gssize;
}
extern "C" {
    pub fn _frida_g_input_stream_read_all(
        stream: *mut GInputStream,
        buffer: *mut ::core::ffi::c_void,
        count: gsize,
        bytes_read: *mut gsize,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_input_stream_read_bytes(
        stream: *mut GInputStream,
        count: gsize,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GBytes;
}
extern "C" {
    pub fn _frida_g_input_stream_skip(
        stream: *mut GInputStream,
        count: gsize,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gssize;
}
extern "C" {
    pub fn _frida_g_input_stream_close(
        stream: *mut GInputStream,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_input_stream_read_async(
        stream: *mut GInputStream,
        buffer: *mut ::core::ffi::c_void,
        count: gsize,
        io_priority: ::core::ffi::c_int,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_input_stream_read_finish(
        stream: *mut GInputStream,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gssize;
}
extern "C" {
    pub fn _frida_g_input_stream_read_all_async(
        stream: *mut GInputStream,
        buffer: *mut ::core::ffi::c_void,
        count: gsize,
        io_priority: ::core::ffi::c_int,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_input_stream_read_all_finish(
        stream: *mut GInputStream,
        result: *mut GAsyncResult,
        bytes_read: *mut gsize,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_input_stream_read_bytes_async(
        stream: *mut GInputStream,
        count: gsize,
        io_priority: ::core::ffi::c_int,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_input_stream_read_bytes_finish(
        stream: *mut GInputStream,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GBytes;
}
extern "C" {
    pub fn _frida_g_input_stream_skip_async(
        stream: *mut GInputStream,
        count: gsize,
        io_priority: ::core::ffi::c_int,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_input_stream_skip_finish(
        stream: *mut GInputStream,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gssize;
}
extern "C" {
    pub fn _frida_g_input_stream_close_async(
        stream: *mut GInputStream,
        io_priority: ::core::ffi::c_int,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_input_stream_close_finish(
        stream: *mut GInputStream,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_input_stream_is_closed(stream: *mut GInputStream) -> gboolean;
}
extern "C" {
    pub fn _frida_g_input_stream_has_pending(stream: *mut GInputStream) -> gboolean;
}
extern "C" {
    pub fn _frida_g_input_stream_set_pending(
        stream: *mut GInputStream,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_input_stream_clear_pending(stream: *mut GInputStream);
}
pub type GFilterInputStreamClass = _GFilterInputStreamClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GFilterInputStream {
    pub parent_instance: GInputStream,
    pub base_stream: *mut GInputStream,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GFilterInputStreamClass {
    pub parent_class: GInputStreamClass,
    pub _g_reserved1: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved2: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved3: ::core::option::Option<unsafe extern "C" fn()>,
}
extern "C" {
    pub fn _frida_g_filter_input_stream_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_filter_input_stream_get_base_stream(
        stream: *mut GFilterInputStream,
    ) -> *mut GInputStream;
}
extern "C" {
    pub fn _frida_g_filter_input_stream_get_close_base_stream(
        stream: *mut GFilterInputStream,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_filter_input_stream_set_close_base_stream(
        stream: *mut GFilterInputStream,
        close_base: gboolean,
    );
}
pub type GBufferedInputStreamClass = _GBufferedInputStreamClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GBufferedInputStreamPrivate {
    _unused: [u8; 0],
}
pub type GBufferedInputStreamPrivate = _GBufferedInputStreamPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GBufferedInputStream {
    pub parent_instance: GFilterInputStream,
    pub priv_: *mut GBufferedInputStreamPrivate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GBufferedInputStreamClass {
    pub parent_class: GFilterInputStreamClass,
    pub fill: ::core::option::Option<
        unsafe extern "C" fn(
            stream: *mut GBufferedInputStream,
            count: gssize,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> gssize,
    >,
    pub fill_async: ::core::option::Option<
        unsafe extern "C" fn(
            stream: *mut GBufferedInputStream,
            count: gssize,
            io_priority: ::core::ffi::c_int,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub fill_finish: ::core::option::Option<
        unsafe extern "C" fn(
            stream: *mut GBufferedInputStream,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> gssize,
    >,
    pub _g_reserved1: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved2: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved3: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved4: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved5: ::core::option::Option<unsafe extern "C" fn()>,
}
extern "C" {
    pub fn _frida_g_buffered_input_stream_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_buffered_input_stream_new(base_stream: *mut GInputStream) -> *mut GInputStream;
}
extern "C" {
    pub fn _frida_g_buffered_input_stream_new_sized(
        base_stream: *mut GInputStream,
        size: gsize,
    ) -> *mut GInputStream;
}
extern "C" {
    pub fn _frida_g_buffered_input_stream_get_buffer_size(
        stream: *mut GBufferedInputStream,
    ) -> gsize;
}
extern "C" {
    pub fn _frida_g_buffered_input_stream_set_buffer_size(
        stream: *mut GBufferedInputStream,
        size: gsize,
    );
}
extern "C" {
    pub fn _frida_g_buffered_input_stream_get_available(stream: *mut GBufferedInputStream)
        -> gsize;
}
extern "C" {
    pub fn _frida_g_buffered_input_stream_peek(
        stream: *mut GBufferedInputStream,
        buffer: *mut ::core::ffi::c_void,
        offset: gsize,
        count: gsize,
    ) -> gsize;
}
extern "C" {
    pub fn _frida_g_buffered_input_stream_peek_buffer(
        stream: *mut GBufferedInputStream,
        count: *mut gsize,
    ) -> *const ::core::ffi::c_void;
}
extern "C" {
    pub fn _frida_g_buffered_input_stream_fill(
        stream: *mut GBufferedInputStream,
        count: gssize,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gssize;
}
extern "C" {
    pub fn _frida_g_buffered_input_stream_fill_async(
        stream: *mut GBufferedInputStream,
        count: gssize,
        io_priority: ::core::ffi::c_int,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_buffered_input_stream_fill_finish(
        stream: *mut GBufferedInputStream,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gssize;
}
extern "C" {
    pub fn _frida_g_buffered_input_stream_read_byte(
        stream: *mut GBufferedInputStream,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> ::core::ffi::c_int;
}
pub type GOutputStreamClass = _GOutputStreamClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GOutputStreamPrivate {
    _unused: [u8; 0],
}
pub type GOutputStreamPrivate = _GOutputStreamPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GOutputStream {
    pub parent_instance: GObject,
    pub priv_: *mut GOutputStreamPrivate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GOutputStreamClass {
    pub parent_class: GObjectClass,
    pub write_fn: ::core::option::Option<
        unsafe extern "C" fn(
            stream: *mut GOutputStream,
            buffer: *const ::core::ffi::c_void,
            count: gsize,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> gssize,
    >,
    pub splice: ::core::option::Option<
        unsafe extern "C" fn(
            stream: *mut GOutputStream,
            source: *mut GInputStream,
            flags: GOutputStreamSpliceFlags,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> gssize,
    >,
    pub flush: ::core::option::Option<
        unsafe extern "C" fn(
            stream: *mut GOutputStream,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub close_fn: ::core::option::Option<
        unsafe extern "C" fn(
            stream: *mut GOutputStream,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub write_async: ::core::option::Option<
        unsafe extern "C" fn(
            stream: *mut GOutputStream,
            buffer: *const ::core::ffi::c_void,
            count: gsize,
            io_priority: ::core::ffi::c_int,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub write_finish: ::core::option::Option<
        unsafe extern "C" fn(
            stream: *mut GOutputStream,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> gssize,
    >,
    pub splice_async: ::core::option::Option<
        unsafe extern "C" fn(
            stream: *mut GOutputStream,
            source: *mut GInputStream,
            flags: GOutputStreamSpliceFlags,
            io_priority: ::core::ffi::c_int,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub splice_finish: ::core::option::Option<
        unsafe extern "C" fn(
            stream: *mut GOutputStream,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> gssize,
    >,
    pub flush_async: ::core::option::Option<
        unsafe extern "C" fn(
            stream: *mut GOutputStream,
            io_priority: ::core::ffi::c_int,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub flush_finish: ::core::option::Option<
        unsafe extern "C" fn(
            stream: *mut GOutputStream,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub close_async: ::core::option::Option<
        unsafe extern "C" fn(
            stream: *mut GOutputStream,
            io_priority: ::core::ffi::c_int,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub close_finish: ::core::option::Option<
        unsafe extern "C" fn(
            stream: *mut GOutputStream,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub writev_fn: ::core::option::Option<
        unsafe extern "C" fn(
            stream: *mut GOutputStream,
            vectors: *const GOutputVector,
            n_vectors: gsize,
            bytes_written: *mut gsize,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub writev_async: ::core::option::Option<
        unsafe extern "C" fn(
            stream: *mut GOutputStream,
            vectors: *const GOutputVector,
            n_vectors: gsize,
            io_priority: ::core::ffi::c_int,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub writev_finish: ::core::option::Option<
        unsafe extern "C" fn(
            stream: *mut GOutputStream,
            result: *mut GAsyncResult,
            bytes_written: *mut gsize,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub _g_reserved4: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved5: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved6: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved7: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved8: ::core::option::Option<unsafe extern "C" fn()>,
}
extern "C" {
    pub fn _frida_g_output_stream_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_output_stream_write(
        stream: *mut GOutputStream,
        buffer: *const ::core::ffi::c_void,
        count: gsize,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gssize;
}
extern "C" {
    pub fn _frida_g_output_stream_write_all(
        stream: *mut GOutputStream,
        buffer: *const ::core::ffi::c_void,
        count: gsize,
        bytes_written: *mut gsize,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_output_stream_writev(
        stream: *mut GOutputStream,
        vectors: *const GOutputVector,
        n_vectors: gsize,
        bytes_written: *mut gsize,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_output_stream_writev_all(
        stream: *mut GOutputStream,
        vectors: *mut GOutputVector,
        n_vectors: gsize,
        bytes_written: *mut gsize,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_output_stream_printf(
        stream: *mut GOutputStream,
        bytes_written: *mut gsize,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
        format: *const gchar,
        ...
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_output_stream_vprintf(
        stream: *mut GOutputStream,
        bytes_written: *mut gsize,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
        format: *const gchar,
        args: va_list,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_output_stream_write_bytes(
        stream: *mut GOutputStream,
        bytes: *mut GBytes,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gssize;
}
extern "C" {
    pub fn _frida_g_output_stream_splice(
        stream: *mut GOutputStream,
        source: *mut GInputStream,
        flags: GOutputStreamSpliceFlags,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gssize;
}
extern "C" {
    pub fn _frida_g_output_stream_flush(
        stream: *mut GOutputStream,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_output_stream_close(
        stream: *mut GOutputStream,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_output_stream_write_async(
        stream: *mut GOutputStream,
        buffer: *const ::core::ffi::c_void,
        count: gsize,
        io_priority: ::core::ffi::c_int,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_output_stream_write_finish(
        stream: *mut GOutputStream,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gssize;
}
extern "C" {
    pub fn _frida_g_output_stream_write_all_async(
        stream: *mut GOutputStream,
        buffer: *const ::core::ffi::c_void,
        count: gsize,
        io_priority: ::core::ffi::c_int,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_output_stream_write_all_finish(
        stream: *mut GOutputStream,
        result: *mut GAsyncResult,
        bytes_written: *mut gsize,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_output_stream_writev_async(
        stream: *mut GOutputStream,
        vectors: *const GOutputVector,
        n_vectors: gsize,
        io_priority: ::core::ffi::c_int,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_output_stream_writev_finish(
        stream: *mut GOutputStream,
        result: *mut GAsyncResult,
        bytes_written: *mut gsize,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_output_stream_writev_all_async(
        stream: *mut GOutputStream,
        vectors: *mut GOutputVector,
        n_vectors: gsize,
        io_priority: ::core::ffi::c_int,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_output_stream_writev_all_finish(
        stream: *mut GOutputStream,
        result: *mut GAsyncResult,
        bytes_written: *mut gsize,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_output_stream_write_bytes_async(
        stream: *mut GOutputStream,
        bytes: *mut GBytes,
        io_priority: ::core::ffi::c_int,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_output_stream_write_bytes_finish(
        stream: *mut GOutputStream,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gssize;
}
extern "C" {
    pub fn _frida_g_output_stream_splice_async(
        stream: *mut GOutputStream,
        source: *mut GInputStream,
        flags: GOutputStreamSpliceFlags,
        io_priority: ::core::ffi::c_int,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_output_stream_splice_finish(
        stream: *mut GOutputStream,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gssize;
}
extern "C" {
    pub fn _frida_g_output_stream_flush_async(
        stream: *mut GOutputStream,
        io_priority: ::core::ffi::c_int,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_output_stream_flush_finish(
        stream: *mut GOutputStream,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_output_stream_close_async(
        stream: *mut GOutputStream,
        io_priority: ::core::ffi::c_int,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_output_stream_close_finish(
        stream: *mut GOutputStream,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_output_stream_is_closed(stream: *mut GOutputStream) -> gboolean;
}
extern "C" {
    pub fn _frida_g_output_stream_is_closing(stream: *mut GOutputStream) -> gboolean;
}
extern "C" {
    pub fn _frida_g_output_stream_has_pending(stream: *mut GOutputStream) -> gboolean;
}
extern "C" {
    pub fn _frida_g_output_stream_set_pending(
        stream: *mut GOutputStream,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_output_stream_clear_pending(stream: *mut GOutputStream);
}
pub type GFilterOutputStreamClass = _GFilterOutputStreamClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GFilterOutputStream {
    pub parent_instance: GOutputStream,
    pub base_stream: *mut GOutputStream,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GFilterOutputStreamClass {
    pub parent_class: GOutputStreamClass,
    pub _g_reserved1: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved2: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved3: ::core::option::Option<unsafe extern "C" fn()>,
}
extern "C" {
    pub fn _frida_g_filter_output_stream_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_filter_output_stream_get_base_stream(
        stream: *mut GFilterOutputStream,
    ) -> *mut GOutputStream;
}
extern "C" {
    pub fn _frida_g_filter_output_stream_get_close_base_stream(
        stream: *mut GFilterOutputStream,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_filter_output_stream_set_close_base_stream(
        stream: *mut GFilterOutputStream,
        close_base: gboolean,
    );
}
pub type GBufferedOutputStreamClass = _GBufferedOutputStreamClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GBufferedOutputStreamPrivate {
    _unused: [u8; 0],
}
pub type GBufferedOutputStreamPrivate = _GBufferedOutputStreamPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GBufferedOutputStream {
    pub parent_instance: GFilterOutputStream,
    pub priv_: *mut GBufferedOutputStreamPrivate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GBufferedOutputStreamClass {
    pub parent_class: GFilterOutputStreamClass,
    pub _g_reserved1: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved2: ::core::option::Option<unsafe extern "C" fn()>,
}
extern "C" {
    pub fn _frida_g_buffered_output_stream_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_buffered_output_stream_new(
        base_stream: *mut GOutputStream,
    ) -> *mut GOutputStream;
}
extern "C" {
    pub fn _frida_g_buffered_output_stream_new_sized(
        base_stream: *mut GOutputStream,
        size: gsize,
    ) -> *mut GOutputStream;
}
extern "C" {
    pub fn _frida_g_buffered_output_stream_get_buffer_size(
        stream: *mut GBufferedOutputStream,
    ) -> gsize;
}
extern "C" {
    pub fn _frida_g_buffered_output_stream_set_buffer_size(
        stream: *mut GBufferedOutputStream,
        size: gsize,
    );
}
extern "C" {
    pub fn _frida_g_buffered_output_stream_get_auto_grow(
        stream: *mut GBufferedOutputStream,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_buffered_output_stream_set_auto_grow(
        stream: *mut GBufferedOutputStream,
        auto_grow: gboolean,
    );
}
extern "C" {
    pub fn _frida_g_bytes_icon_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_bytes_icon_new(bytes: *mut GBytes) -> *mut GIcon;
}
extern "C" {
    pub fn _frida_g_bytes_icon_get_bytes(icon: *mut GBytesIcon) -> *mut GBytes;
}
pub type GCancellableClass = _GCancellableClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GCancellablePrivate {
    _unused: [u8; 0],
}
pub type GCancellablePrivate = _GCancellablePrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GCancellable {
    pub parent_instance: GObject,
    pub priv_: *mut GCancellablePrivate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GCancellableClass {
    pub parent_class: GObjectClass,
    pub cancelled: ::core::option::Option<unsafe extern "C" fn(cancellable: *mut GCancellable)>,
    pub _g_reserved1: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved2: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved3: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved4: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved5: ::core::option::Option<unsafe extern "C" fn()>,
}
extern "C" {
    pub fn _frida_g_cancellable_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_cancellable_new() -> *mut GCancellable;
}
extern "C" {
    pub fn _frida_g_cancellable_is_cancelled(cancellable: *mut GCancellable) -> gboolean;
}
extern "C" {
    pub fn _frida_g_cancellable_set_error_if_cancelled(
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_cancellable_get_fd(cancellable: *mut GCancellable) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _frida_g_cancellable_make_pollfd(
        cancellable: *mut GCancellable,
        pollfd: *mut GPollFD,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_cancellable_release_fd(cancellable: *mut GCancellable);
}
extern "C" {
    pub fn _frida_g_cancellable_source_new(cancellable: *mut GCancellable) -> *mut GSource;
}
extern "C" {
    pub fn _frida_g_cancellable_get_current() -> *mut GCancellable;
}
extern "C" {
    pub fn _frida_g_cancellable_push_current(cancellable: *mut GCancellable);
}
extern "C" {
    pub fn _frida_g_cancellable_pop_current(cancellable: *mut GCancellable);
}
extern "C" {
    pub fn _frida_g_cancellable_reset(cancellable: *mut GCancellable);
}
extern "C" {
    pub fn _frida_g_cancellable_connect(
        cancellable: *mut GCancellable,
        callback: GCallback,
        data: gpointer,
        data_destroy_func: GDestroyNotify,
    ) -> gulong;
}
extern "C" {
    pub fn _frida_g_cancellable_disconnect(cancellable: *mut GCancellable, handler_id: gulong);
}
extern "C" {
    pub fn _frida_g_cancellable_cancel(cancellable: *mut GCancellable);
}
pub type GConverterIface = _GConverterIface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GConverterIface {
    pub g_iface: GTypeInterface,
    pub convert: ::core::option::Option<
        unsafe extern "C" fn(
            converter: *mut GConverter,
            inbuf: *const ::core::ffi::c_void,
            inbuf_size: gsize,
            outbuf: *mut ::core::ffi::c_void,
            outbuf_size: gsize,
            flags: GConverterFlags,
            bytes_read: *mut gsize,
            bytes_written: *mut gsize,
            error: *mut *mut GError,
        ) -> GConverterResult,
    >,
    pub reset: ::core::option::Option<unsafe extern "C" fn(converter: *mut GConverter)>,
}
extern "C" {
    pub fn _frida_g_converter_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_converter_convert(
        converter: *mut GConverter,
        inbuf: *const ::core::ffi::c_void,
        inbuf_size: gsize,
        outbuf: *mut ::core::ffi::c_void,
        outbuf_size: gsize,
        flags: GConverterFlags,
        bytes_read: *mut gsize,
        bytes_written: *mut gsize,
        error: *mut *mut GError,
    ) -> GConverterResult;
}
extern "C" {
    pub fn _frida_g_converter_reset(converter: *mut GConverter);
}
pub type GCharsetConverterClass = _GCharsetConverterClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GCharsetConverterClass {
    pub parent_class: GObjectClass,
}
extern "C" {
    pub fn _frida_g_charset_converter_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_charset_converter_new(
        to_charset: *const gchar,
        from_charset: *const gchar,
        error: *mut *mut GError,
    ) -> *mut GCharsetConverter;
}
extern "C" {
    pub fn _frida_g_charset_converter_set_use_fallback(
        converter: *mut GCharsetConverter,
        use_fallback: gboolean,
    );
}
extern "C" {
    pub fn _frida_g_charset_converter_get_use_fallback(
        converter: *mut GCharsetConverter,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_charset_converter_get_num_fallbacks(converter: *mut GCharsetConverter)
        -> guint;
}
extern "C" {
    pub fn _frida_g_content_type_equals(type1: *const gchar, type2: *const gchar) -> gboolean;
}
extern "C" {
    pub fn _frida_g_content_type_is_a(type_: *const gchar, supertype: *const gchar) -> gboolean;
}
extern "C" {
    pub fn _frida_g_content_type_is_mime_type(
        type_: *const gchar,
        mime_type: *const gchar,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_content_type_is_unknown(type_: *const gchar) -> gboolean;
}
extern "C" {
    pub fn _frida_g_content_type_get_description(type_: *const gchar) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_content_type_get_mime_type(type_: *const gchar) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_content_type_get_icon(type_: *const gchar) -> *mut GIcon;
}
extern "C" {
    pub fn _frida_g_content_type_get_symbolic_icon(type_: *const gchar) -> *mut GIcon;
}
extern "C" {
    pub fn _frida_g_content_type_get_generic_icon_name(type_: *const gchar) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_content_type_can_be_executable(type_: *const gchar) -> gboolean;
}
extern "C" {
    pub fn _frida_g_content_type_from_mime_type(mime_type: *const gchar) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_content_type_guess(
        filename: *const gchar,
        data: *const guchar,
        data_size: gsize,
        result_uncertain: *mut gboolean,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_content_type_guess_for_tree(root: *mut GFile) -> *mut *mut gchar;
}
extern "C" {
    pub fn _frida_g_content_types_get_registered() -> *mut GList;
}
extern "C" {
    pub fn _frida_g_content_type_get_mime_dirs() -> *const *const gchar;
}
extern "C" {
    pub fn _frida_g_content_type_set_mime_dirs(dirs: *const *const gchar);
}
pub type GConverterInputStreamClass = _GConverterInputStreamClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GConverterInputStreamPrivate {
    _unused: [u8; 0],
}
pub type GConverterInputStreamPrivate = _GConverterInputStreamPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GConverterInputStream {
    pub parent_instance: GFilterInputStream,
    pub priv_: *mut GConverterInputStreamPrivate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GConverterInputStreamClass {
    pub parent_class: GFilterInputStreamClass,
    pub _g_reserved1: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved2: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved3: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved4: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved5: ::core::option::Option<unsafe extern "C" fn()>,
}
extern "C" {
    pub fn _frida_g_converter_input_stream_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_converter_input_stream_new(
        base_stream: *mut GInputStream,
        converter: *mut GConverter,
    ) -> *mut GInputStream;
}
extern "C" {
    pub fn _frida_g_converter_input_stream_get_converter(
        converter_stream: *mut GConverterInputStream,
    ) -> *mut GConverter;
}
pub type GConverterOutputStreamClass = _GConverterOutputStreamClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GConverterOutputStreamPrivate {
    _unused: [u8; 0],
}
pub type GConverterOutputStreamPrivate = _GConverterOutputStreamPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GConverterOutputStream {
    pub parent_instance: GFilterOutputStream,
    pub priv_: *mut GConverterOutputStreamPrivate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GConverterOutputStreamClass {
    pub parent_class: GFilterOutputStreamClass,
    pub _g_reserved1: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved2: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved3: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved4: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved5: ::core::option::Option<unsafe extern "C" fn()>,
}
extern "C" {
    pub fn _frida_g_converter_output_stream_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_converter_output_stream_new(
        base_stream: *mut GOutputStream,
        converter: *mut GConverter,
    ) -> *mut GOutputStream;
}
extern "C" {
    pub fn _frida_g_converter_output_stream_get_converter(
        converter_stream: *mut GConverterOutputStream,
    ) -> *mut GConverter;
}
extern "C" {
    pub fn fcntl(__fd: ::core::ffi::c_int, __cmd: ::core::ffi::c_int, ...) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn getopt(
        __argc: ::core::ffi::c_int,
        __argv: *const *mut ::core::ffi::c_char,
        __options: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub static mut optarg: *mut ::core::ffi::c_char;
}
extern "C" {
    pub static mut optind: ::core::ffi::c_int;
}
extern "C" {
    pub static mut opterr: ::core::ffi::c_int;
}
extern "C" {
    pub static mut optopt: ::core::ffi::c_int;
}
extern "C" {
    pub fn ioctl(
        __fd: ::core::ffi::c_int,
        __request: ::core::ffi::c_int,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn lockf(
        __fd: ::core::ffi::c_int,
        __cmd: ::core::ffi::c_int,
        __length: off_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn lockf64(
        __fd: ::core::ffi::c_int,
        __cmd: ::core::ffi::c_int,
        __length: off64_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sysconf(__name: ::core::ffi::c_int) -> ::core::ffi::c_long;
}
extern "C" {
    pub static mut environ: *mut *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _exit(__status: ::core::ffi::c_int) -> !;
}
extern "C" {
    pub fn fork() -> pid_t;
}
extern "C" {
    pub fn vfork() -> ::core::ffi::c_int;
}
extern "C" {
    pub fn getpid() -> pid_t;
}
extern "C" {
    pub fn gettid() -> pid_t;
}
extern "C" {
    pub fn getpgid(__pid: pid_t) -> pid_t;
}
extern "C" {
    pub fn setpgid(__pid: pid_t, __pgid: pid_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn getppid() -> pid_t;
}
extern "C" {
    pub fn getpgrp() -> pid_t;
}
extern "C" {
    pub fn setpgrp() -> ::core::ffi::c_int;
}
extern "C" {
    pub fn getsid(__pid: pid_t) -> pid_t;
}
extern "C" {
    pub fn setsid() -> pid_t;
}
extern "C" {
    pub fn execv(
        __path: *const ::core::ffi::c_char,
        __argv: *const *mut ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn execvp(
        __file: *const ::core::ffi::c_char,
        __argv: *const *mut ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn execvpe(
        __file: *const ::core::ffi::c_char,
        __argv: *const *mut ::core::ffi::c_char,
        __envp: *const *mut ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn execve(
        __file: *const ::core::ffi::c_char,
        __argv: *const *mut ::core::ffi::c_char,
        __envp: *const *mut ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn execl(
        __path: *const ::core::ffi::c_char,
        __arg0: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn execlp(
        __file: *const ::core::ffi::c_char,
        __arg0: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn execle(
        __path: *const ::core::ffi::c_char,
        __arg0: *const ::core::ffi::c_char,
        ...
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fexecve(
        __fd: ::core::ffi::c_int,
        __argv: *const *mut ::core::ffi::c_char,
        __envp: *const *mut ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn nice(__incr: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn setegid(__gid: gid_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn seteuid(__uid: uid_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn setgid(__gid: gid_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn setregid(__rgid: gid_t, __egid: gid_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn setresgid(__rgid: gid_t, __egid: gid_t, __sgid: gid_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn setresuid(__ruid: uid_t, __euid: uid_t, __suid: uid_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn setreuid(__ruid: uid_t, __euid: uid_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn setuid(__uid: uid_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn getuid() -> uid_t;
}
extern "C" {
    pub fn geteuid() -> uid_t;
}
extern "C" {
    pub fn getgid() -> gid_t;
}
extern "C" {
    pub fn getegid() -> gid_t;
}
extern "C" {
    pub fn getgroups(__size: ::core::ffi::c_int, __list: *mut gid_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn setgroups(__size: usize, __list: *const gid_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn getresuid(
        __ruid: *mut uid_t,
        __euid: *mut uid_t,
        __suid: *mut uid_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn getresgid(
        __rgid: *mut gid_t,
        __egid: *mut gid_t,
        __sgid: *mut gid_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn getlogin() -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn getlogin_r(
        __buffer: *mut ::core::ffi::c_char,
        __buffer_size: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fpathconf(__fd: ::core::ffi::c_int, __name: ::core::ffi::c_int) -> ::core::ffi::c_long;
}
extern "C" {
    pub fn pathconf(
        __path: *const ::core::ffi::c_char,
        __name: ::core::ffi::c_int,
    ) -> ::core::ffi::c_long;
}
extern "C" {
    pub fn access(
        __path: *const ::core::ffi::c_char,
        __mode: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn faccessat(
        __dirfd: ::core::ffi::c_int,
        __path: *const ::core::ffi::c_char,
        __mode: ::core::ffi::c_int,
        __flags: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn link(
        __old_path: *const ::core::ffi::c_char,
        __new_path: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn linkat(
        __old_dir_fd: ::core::ffi::c_int,
        __old_path: *const ::core::ffi::c_char,
        __new_dir_fd: ::core::ffi::c_int,
        __new_path: *const ::core::ffi::c_char,
        __flags: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn unlink(__path: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn unlinkat(
        __dirfd: ::core::ffi::c_int,
        __path: *const ::core::ffi::c_char,
        __flags: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn chdir(__path: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fchdir(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn rmdir(__path: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pipe(__fds: *mut ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn chroot(__path: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn symlink(
        __old_path: *const ::core::ffi::c_char,
        __new_path: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn symlinkat(
        __old_path: *const ::core::ffi::c_char,
        __new_dir_fd: ::core::ffi::c_int,
        __new_path: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn readlink(
        __path: *const ::core::ffi::c_char,
        __buf: *mut ::core::ffi::c_char,
        __buf_size: usize,
    ) -> isize;
}
extern "C" {
    pub fn readlinkat(
        __dir_fd: ::core::ffi::c_int,
        __path: *const ::core::ffi::c_char,
        __buf: *mut ::core::ffi::c_char,
        __buf_size: usize,
    ) -> isize;
}
extern "C" {
    pub fn chown(
        __path: *const ::core::ffi::c_char,
        __owner: uid_t,
        __group: gid_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fchown(__fd: ::core::ffi::c_int, __owner: uid_t, __group: gid_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fchownat(
        __dir_fd: ::core::ffi::c_int,
        __path: *const ::core::ffi::c_char,
        __owner: uid_t,
        __group: gid_t,
        __flags: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn lchown(
        __path: *const ::core::ffi::c_char,
        __owner: uid_t,
        __group: gid_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn getcwd(__buf: *mut ::core::ffi::c_char, __size: usize) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn sync();
}
extern "C" {
    pub fn close(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn read(__fd: ::core::ffi::c_int, __buf: *mut ::core::ffi::c_void, __count: usize)
        -> isize;
}
extern "C" {
    pub fn write(
        __fd: ::core::ffi::c_int,
        __buf: *const ::core::ffi::c_void,
        __count: usize,
    ) -> isize;
}
extern "C" {
    pub fn dup(__old_fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn dup2(__old_fd: ::core::ffi::c_int, __new_fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn dup3(
        __old_fd: ::core::ffi::c_int,
        __new_fd: ::core::ffi::c_int,
        __flags: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fsync(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn fdatasync(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn truncate(__path: *const ::core::ffi::c_char, __length: off_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn lseek(__fd: ::core::ffi::c_int, __offset: off_t, __whence: ::core::ffi::c_int) -> off_t;
}
extern "C" {
    pub fn pread(
        __fd: ::core::ffi::c_int,
        __buf: *mut ::core::ffi::c_void,
        __count: usize,
        __offset: off_t,
    ) -> isize;
}
extern "C" {
    pub fn pwrite(
        __fd: ::core::ffi::c_int,
        __buf: *const ::core::ffi::c_void,
        __count: usize,
        __offset: off_t,
    ) -> isize;
}
extern "C" {
    pub fn ftruncate(__fd: ::core::ffi::c_int, __length: off_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn truncate64(__path: *const ::core::ffi::c_char, __length: off64_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn lseek64(
        __fd: ::core::ffi::c_int,
        __offset: off64_t,
        __whence: ::core::ffi::c_int,
    ) -> off64_t;
}
extern "C" {
    pub fn pread64(
        __fd: ::core::ffi::c_int,
        __buf: *mut ::core::ffi::c_void,
        __count: usize,
        __offset: off64_t,
    ) -> isize;
}
extern "C" {
    pub fn pwrite64(
        __fd: ::core::ffi::c_int,
        __buf: *const ::core::ffi::c_void,
        __count: usize,
        __offset: off64_t,
    ) -> isize;
}
extern "C" {
    pub fn ftruncate64(__fd: ::core::ffi::c_int, __length: off64_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn pause() -> ::core::ffi::c_int;
}
extern "C" {
    pub fn alarm(__seconds: ::core::ffi::c_uint) -> ::core::ffi::c_uint;
}
extern "C" {
    pub fn sleep(__seconds: ::core::ffi::c_uint) -> ::core::ffi::c_uint;
}
extern "C" {
    pub fn usleep(__microseconds: useconds_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn gethostname(__buf: *mut ::core::ffi::c_char, __buf_size: usize) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sethostname(__name: *const ::core::ffi::c_char, __n: usize) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn brk(__addr: *mut ::core::ffi::c_void) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn sbrk(__increment: isize) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn isatty(__fd: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn ttyname(__fd: ::core::ffi::c_int) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn ttyname_r(
        __fd: ::core::ffi::c_int,
        __buf: *mut ::core::ffi::c_char,
        __buf_size: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn acct(__path: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn getpagesize() -> ::core::ffi::c_int;
}
extern "C" {
    pub fn syscall(__number: ::core::ffi::c_long, ...) -> ::core::ffi::c_long;
}
extern "C" {
    pub fn daemon(
        __no_chdir: ::core::ffi::c_int,
        __no_close: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn tcgetpgrp(__fd: ::core::ffi::c_int) -> pid_t;
}
extern "C" {
    pub fn tcsetpgrp(__fd: ::core::ffi::c_int, __pid: pid_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn getdomainname(__buf: *mut ::core::ffi::c_char, __buf_size: usize) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn setdomainname(__name: *const ::core::ffi::c_char, __n: usize) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn swab(
        __src: *const ::core::ffi::c_void,
        __dst: *mut ::core::ffi::c_void,
        __byte_count: isize,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GCredentialsClass {
    _unused: [u8; 0],
}
pub type GCredentialsClass = _GCredentialsClass;
extern "C" {
    pub fn _frida_g_credentials_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_credentials_new() -> *mut GCredentials;
}
extern "C" {
    pub fn _frida_g_credentials_to_string(credentials: *mut GCredentials) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_credentials_get_native(
        credentials: *mut GCredentials,
        native_type: GCredentialsType,
    ) -> gpointer;
}
extern "C" {
    pub fn _frida_g_credentials_set_native(
        credentials: *mut GCredentials,
        native_type: GCredentialsType,
        native: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_credentials_is_same_user(
        credentials: *mut GCredentials,
        other_credentials: *mut GCredentials,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_credentials_get_unix_pid(
        credentials: *mut GCredentials,
        error: *mut *mut GError,
    ) -> pid_t;
}
extern "C" {
    pub fn _frida_g_credentials_get_unix_user(
        credentials: *mut GCredentials,
        error: *mut *mut GError,
    ) -> uid_t;
}
extern "C" {
    pub fn _frida_g_credentials_set_unix_user(
        credentials: *mut GCredentials,
        uid: uid_t,
        error: *mut *mut GError,
    ) -> gboolean;
}
pub type GDatagramBasedInterface = _GDatagramBasedInterface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDatagramBasedInterface {
    pub g_iface: GTypeInterface,
    pub receive_messages: ::core::option::Option<
        unsafe extern "C" fn(
            datagram_based: *mut GDatagramBased,
            messages: *mut GInputMessage,
            num_messages: guint,
            flags: gint,
            timeout: gint64,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> gint,
    >,
    pub send_messages: ::core::option::Option<
        unsafe extern "C" fn(
            datagram_based: *mut GDatagramBased,
            messages: *mut GOutputMessage,
            num_messages: guint,
            flags: gint,
            timeout: gint64,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> gint,
    >,
    pub create_source: ::core::option::Option<
        unsafe extern "C" fn(
            datagram_based: *mut GDatagramBased,
            condition: GIOCondition,
            cancellable: *mut GCancellable,
        ) -> *mut GSource,
    >,
    pub condition_check: ::core::option::Option<
        unsafe extern "C" fn(
            datagram_based: *mut GDatagramBased,
            condition: GIOCondition,
        ) -> GIOCondition,
    >,
    pub condition_wait: ::core::option::Option<
        unsafe extern "C" fn(
            datagram_based: *mut GDatagramBased,
            condition: GIOCondition,
            timeout: gint64,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
}
extern "C" {
    pub fn _frida_g_datagram_based_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_datagram_based_receive_messages(
        datagram_based: *mut GDatagramBased,
        messages: *mut GInputMessage,
        num_messages: guint,
        flags: gint,
        timeout: gint64,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gint;
}
extern "C" {
    pub fn _frida_g_datagram_based_send_messages(
        datagram_based: *mut GDatagramBased,
        messages: *mut GOutputMessage,
        num_messages: guint,
        flags: gint,
        timeout: gint64,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gint;
}
extern "C" {
    pub fn _frida_g_datagram_based_create_source(
        datagram_based: *mut GDatagramBased,
        condition: GIOCondition,
        cancellable: *mut GCancellable,
    ) -> *mut GSource;
}
extern "C" {
    pub fn _frida_g_datagram_based_condition_check(
        datagram_based: *mut GDatagramBased,
        condition: GIOCondition,
    ) -> GIOCondition;
}
extern "C" {
    pub fn _frida_g_datagram_based_condition_wait(
        datagram_based: *mut GDatagramBased,
        condition: GIOCondition,
        timeout: gint64,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
pub type GDataInputStreamClass = _GDataInputStreamClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDataInputStreamPrivate {
    _unused: [u8; 0],
}
pub type GDataInputStreamPrivate = _GDataInputStreamPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDataInputStream {
    pub parent_instance: GBufferedInputStream,
    pub priv_: *mut GDataInputStreamPrivate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDataInputStreamClass {
    pub parent_class: GBufferedInputStreamClass,
    pub _g_reserved1: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved2: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved3: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved4: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved5: ::core::option::Option<unsafe extern "C" fn()>,
}
extern "C" {
    pub fn _frida_g_data_input_stream_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_data_input_stream_new(base_stream: *mut GInputStream) -> *mut GDataInputStream;
}
extern "C" {
    pub fn _frida_g_data_input_stream_set_byte_order(
        stream: *mut GDataInputStream,
        order: GDataStreamByteOrder,
    );
}
extern "C" {
    pub fn _frida_g_data_input_stream_get_byte_order(
        stream: *mut GDataInputStream,
    ) -> GDataStreamByteOrder;
}
extern "C" {
    pub fn _frida_g_data_input_stream_set_newline_type(
        stream: *mut GDataInputStream,
        type_: GDataStreamNewlineType,
    );
}
extern "C" {
    pub fn _frida_g_data_input_stream_get_newline_type(
        stream: *mut GDataInputStream,
    ) -> GDataStreamNewlineType;
}
extern "C" {
    pub fn _frida_g_data_input_stream_read_byte(
        stream: *mut GDataInputStream,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> guchar;
}
extern "C" {
    pub fn _frida_g_data_input_stream_read_int16(
        stream: *mut GDataInputStream,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gint16;
}
extern "C" {
    pub fn _frida_g_data_input_stream_read_uint16(
        stream: *mut GDataInputStream,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> guint16;
}
extern "C" {
    pub fn _frida_g_data_input_stream_read_int32(
        stream: *mut GDataInputStream,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gint32;
}
extern "C" {
    pub fn _frida_g_data_input_stream_read_uint32(
        stream: *mut GDataInputStream,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> guint32;
}
extern "C" {
    pub fn _frida_g_data_input_stream_read_int64(
        stream: *mut GDataInputStream,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gint64;
}
extern "C" {
    pub fn _frida_g_data_input_stream_read_uint64(
        stream: *mut GDataInputStream,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> guint64;
}
extern "C" {
    pub fn _frida_g_data_input_stream_read_line(
        stream: *mut GDataInputStream,
        length: *mut gsize,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_data_input_stream_read_line_utf8(
        stream: *mut GDataInputStream,
        length: *mut gsize,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_data_input_stream_read_line_async(
        stream: *mut GDataInputStream,
        io_priority: gint,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_data_input_stream_read_line_finish(
        stream: *mut GDataInputStream,
        result: *mut GAsyncResult,
        length: *mut gsize,
        error: *mut *mut GError,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_data_input_stream_read_line_finish_utf8(
        stream: *mut GDataInputStream,
        result: *mut GAsyncResult,
        length: *mut gsize,
        error: *mut *mut GError,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_data_input_stream_read_until(
        stream: *mut GDataInputStream,
        stop_chars: *const gchar,
        length: *mut gsize,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_data_input_stream_read_until_async(
        stream: *mut GDataInputStream,
        stop_chars: *const gchar,
        io_priority: gint,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_data_input_stream_read_until_finish(
        stream: *mut GDataInputStream,
        result: *mut GAsyncResult,
        length: *mut gsize,
        error: *mut *mut GError,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_data_input_stream_read_upto(
        stream: *mut GDataInputStream,
        stop_chars: *const gchar,
        stop_chars_len: gssize,
        length: *mut gsize,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_data_input_stream_read_upto_async(
        stream: *mut GDataInputStream,
        stop_chars: *const gchar,
        stop_chars_len: gssize,
        io_priority: gint,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_data_input_stream_read_upto_finish(
        stream: *mut GDataInputStream,
        result: *mut GAsyncResult,
        length: *mut gsize,
        error: *mut *mut GError,
    ) -> *mut ::core::ffi::c_char;
}
pub type GDataOutputStream = _GDataOutputStream;
pub type GDataOutputStreamClass = _GDataOutputStreamClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDataOutputStreamPrivate {
    _unused: [u8; 0],
}
pub type GDataOutputStreamPrivate = _GDataOutputStreamPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDataOutputStream {
    pub parent_instance: GFilterOutputStream,
    pub priv_: *mut GDataOutputStreamPrivate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDataOutputStreamClass {
    pub parent_class: GFilterOutputStreamClass,
    pub _g_reserved1: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved2: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved3: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved4: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved5: ::core::option::Option<unsafe extern "C" fn()>,
}
extern "C" {
    pub fn _frida_g_data_output_stream_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_data_output_stream_new(
        base_stream: *mut GOutputStream,
    ) -> *mut GDataOutputStream;
}
extern "C" {
    pub fn _frida_g_data_output_stream_set_byte_order(
        stream: *mut GDataOutputStream,
        order: GDataStreamByteOrder,
    );
}
extern "C" {
    pub fn _frida_g_data_output_stream_get_byte_order(
        stream: *mut GDataOutputStream,
    ) -> GDataStreamByteOrder;
}
extern "C" {
    pub fn _frida_g_data_output_stream_put_byte(
        stream: *mut GDataOutputStream,
        data: guchar,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_data_output_stream_put_int16(
        stream: *mut GDataOutputStream,
        data: gint16,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_data_output_stream_put_uint16(
        stream: *mut GDataOutputStream,
        data: guint16,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_data_output_stream_put_int32(
        stream: *mut GDataOutputStream,
        data: gint32,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_data_output_stream_put_uint32(
        stream: *mut GDataOutputStream,
        data: guint32,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_data_output_stream_put_int64(
        stream: *mut GDataOutputStream,
        data: gint64,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_data_output_stream_put_uint64(
        stream: *mut GDataOutputStream,
        data: guint64,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_data_output_stream_put_string(
        stream: *mut GDataOutputStream,
        str_: *const ::core::ffi::c_char,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_dbus_action_group_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_dbus_action_group_get(
        connection: *mut GDBusConnection,
        bus_name: *const gchar,
        object_path: *const gchar,
    ) -> *mut GDBusActionGroup;
}
extern "C" {
    pub fn _frida_g_dbus_address_escape_value(string: *const gchar) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_dbus_is_address(string: *const gchar) -> gboolean;
}
extern "C" {
    pub fn _frida_g_dbus_is_supported_address(
        string: *const gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_dbus_address_get_stream(
        address: *const gchar,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_dbus_address_get_stream_finish(
        res: *mut GAsyncResult,
        out_guid: *mut *mut gchar,
        error: *mut *mut GError,
    ) -> *mut GIOStream;
}
extern "C" {
    pub fn _frida_g_dbus_address_get_stream_sync(
        address: *const gchar,
        out_guid: *mut *mut gchar,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GIOStream;
}
extern "C" {
    pub fn _frida_g_dbus_address_get_for_bus_sync(
        bus_type: GBusType,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_dbus_auth_observer_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_dbus_auth_observer_new() -> *mut GDBusAuthObserver;
}
extern "C" {
    pub fn _frida_g_dbus_auth_observer_authorize_authenticated_peer(
        observer: *mut GDBusAuthObserver,
        stream: *mut GIOStream,
        credentials: *mut GCredentials,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_dbus_auth_observer_allow_mechanism(
        observer: *mut GDBusAuthObserver,
        mechanism: *const gchar,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_dbus_connection_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_bus_get(
        bus_type: GBusType,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_bus_get_finish(
        res: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GDBusConnection;
}
extern "C" {
    pub fn _frida_g_bus_get_sync(
        bus_type: GBusType,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GDBusConnection;
}
extern "C" {
    pub fn _frida_g_dbus_connection_new(
        stream: *mut GIOStream,
        guid: *const gchar,
        flags: GDBusConnectionFlags,
        observer: *mut GDBusAuthObserver,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_dbus_connection_new_finish(
        res: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GDBusConnection;
}
extern "C" {
    pub fn _frida_g_dbus_connection_new_sync(
        stream: *mut GIOStream,
        guid: *const gchar,
        flags: GDBusConnectionFlags,
        observer: *mut GDBusAuthObserver,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GDBusConnection;
}
extern "C" {
    pub fn _frida_g_dbus_connection_new_for_address(
        address: *const gchar,
        flags: GDBusConnectionFlags,
        observer: *mut GDBusAuthObserver,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_dbus_connection_new_for_address_finish(
        res: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GDBusConnection;
}
extern "C" {
    pub fn _frida_g_dbus_connection_new_for_address_sync(
        address: *const gchar,
        flags: GDBusConnectionFlags,
        observer: *mut GDBusAuthObserver,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GDBusConnection;
}
extern "C" {
    pub fn _frida_g_dbus_connection_start_message_processing(connection: *mut GDBusConnection);
}
extern "C" {
    pub fn _frida_g_dbus_connection_is_closed(connection: *mut GDBusConnection) -> gboolean;
}
extern "C" {
    pub fn _frida_g_dbus_connection_get_stream(connection: *mut GDBusConnection) -> *mut GIOStream;
}
extern "C" {
    pub fn _frida_g_dbus_connection_get_guid(connection: *mut GDBusConnection) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_dbus_connection_get_unique_name(
        connection: *mut GDBusConnection,
    ) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_dbus_connection_get_peer_credentials(
        connection: *mut GDBusConnection,
    ) -> *mut GCredentials;
}
extern "C" {
    pub fn _frida_g_dbus_connection_get_last_serial(connection: *mut GDBusConnection) -> guint32;
}
extern "C" {
    pub fn _frida_g_dbus_connection_get_exit_on_close(connection: *mut GDBusConnection)
        -> gboolean;
}
extern "C" {
    pub fn _frida_g_dbus_connection_set_exit_on_close(
        connection: *mut GDBusConnection,
        exit_on_close: gboolean,
    );
}
extern "C" {
    pub fn _frida_g_dbus_connection_get_capabilities(
        connection: *mut GDBusConnection,
    ) -> GDBusCapabilityFlags;
}
extern "C" {
    pub fn _frida_g_dbus_connection_get_flags(
        connection: *mut GDBusConnection,
    ) -> GDBusConnectionFlags;
}
extern "C" {
    pub fn _frida_g_dbus_connection_close(
        connection: *mut GDBusConnection,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_dbus_connection_close_finish(
        connection: *mut GDBusConnection,
        res: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_dbus_connection_close_sync(
        connection: *mut GDBusConnection,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_dbus_connection_flush(
        connection: *mut GDBusConnection,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_dbus_connection_flush_finish(
        connection: *mut GDBusConnection,
        res: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_dbus_connection_flush_sync(
        connection: *mut GDBusConnection,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_dbus_connection_send_message(
        connection: *mut GDBusConnection,
        message: *mut GDBusMessage,
        flags: GDBusSendMessageFlags,
        out_serial: *mut guint32,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_dbus_connection_send_message_with_reply(
        connection: *mut GDBusConnection,
        message: *mut GDBusMessage,
        flags: GDBusSendMessageFlags,
        timeout_msec: gint,
        out_serial: *mut guint32,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_dbus_connection_send_message_with_reply_finish(
        connection: *mut GDBusConnection,
        res: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GDBusMessage;
}
extern "C" {
    pub fn _frida_g_dbus_connection_send_message_with_reply_sync(
        connection: *mut GDBusConnection,
        message: *mut GDBusMessage,
        flags: GDBusSendMessageFlags,
        timeout_msec: gint,
        out_serial: *mut guint32,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GDBusMessage;
}
extern "C" {
    pub fn _frida_g_dbus_connection_emit_signal(
        connection: *mut GDBusConnection,
        destination_bus_name: *const gchar,
        object_path: *const gchar,
        interface_name: *const gchar,
        signal_name: *const gchar,
        parameters: *mut GVariant,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_dbus_connection_call(
        connection: *mut GDBusConnection,
        bus_name: *const gchar,
        object_path: *const gchar,
        interface_name: *const gchar,
        method_name: *const gchar,
        parameters: *mut GVariant,
        reply_type: *const GVariantType,
        flags: GDBusCallFlags,
        timeout_msec: gint,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_dbus_connection_call_finish(
        connection: *mut GDBusConnection,
        res: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_dbus_connection_call_sync(
        connection: *mut GDBusConnection,
        bus_name: *const gchar,
        object_path: *const gchar,
        interface_name: *const gchar,
        method_name: *const gchar,
        parameters: *mut GVariant,
        reply_type: *const GVariantType,
        flags: GDBusCallFlags,
        timeout_msec: gint,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_dbus_connection_call_with_unix_fd_list(
        connection: *mut GDBusConnection,
        bus_name: *const gchar,
        object_path: *const gchar,
        interface_name: *const gchar,
        method_name: *const gchar,
        parameters: *mut GVariant,
        reply_type: *const GVariantType,
        flags: GDBusCallFlags,
        timeout_msec: gint,
        fd_list: *mut GUnixFDList,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_dbus_connection_call_with_unix_fd_list_finish(
        connection: *mut GDBusConnection,
        out_fd_list: *mut *mut GUnixFDList,
        res: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_dbus_connection_call_with_unix_fd_list_sync(
        connection: *mut GDBusConnection,
        bus_name: *const gchar,
        object_path: *const gchar,
        interface_name: *const gchar,
        method_name: *const gchar,
        parameters: *mut GVariant,
        reply_type: *const GVariantType,
        flags: GDBusCallFlags,
        timeout_msec: gint,
        fd_list: *mut GUnixFDList,
        out_fd_list: *mut *mut GUnixFDList,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GVariant;
}
pub type GDBusInterfaceMethodCallFunc = ::core::option::Option<
    unsafe extern "C" fn(
        connection: *mut GDBusConnection,
        sender: *const gchar,
        object_path: *const gchar,
        interface_name: *const gchar,
        method_name: *const gchar,
        parameters: *mut GVariant,
        invocation: *mut GDBusMethodInvocation,
        user_data: gpointer,
    ),
>;
pub type GDBusInterfaceGetPropertyFunc = ::core::option::Option<
    unsafe extern "C" fn(
        connection: *mut GDBusConnection,
        sender: *const gchar,
        object_path: *const gchar,
        interface_name: *const gchar,
        property_name: *const gchar,
        error: *mut *mut GError,
        user_data: gpointer,
    ) -> *mut GVariant,
>;
pub type GDBusInterfaceSetPropertyFunc = ::core::option::Option<
    unsafe extern "C" fn(
        connection: *mut GDBusConnection,
        sender: *const gchar,
        object_path: *const gchar,
        interface_name: *const gchar,
        property_name: *const gchar,
        value: *mut GVariant,
        error: *mut *mut GError,
        user_data: gpointer,
    ) -> gboolean,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDBusInterfaceVTable {
    pub method_call: GDBusInterfaceMethodCallFunc,
    pub get_property: GDBusInterfaceGetPropertyFunc,
    pub set_property: GDBusInterfaceSetPropertyFunc,
    pub padding: [gpointer; 8usize],
}
extern "C" {
    pub fn _frida_g_dbus_connection_register_object(
        connection: *mut GDBusConnection,
        object_path: *const gchar,
        interface_info: *mut GDBusInterfaceInfo,
        vtable: *const GDBusInterfaceVTable,
        user_data: gpointer,
        user_data_free_func: GDestroyNotify,
        error: *mut *mut GError,
    ) -> guint;
}
extern "C" {
    pub fn _frida_g_dbus_connection_register_object_with_closures(
        connection: *mut GDBusConnection,
        object_path: *const gchar,
        interface_info: *mut GDBusInterfaceInfo,
        method_call_closure: *mut GClosure,
        get_property_closure: *mut GClosure,
        set_property_closure: *mut GClosure,
        error: *mut *mut GError,
    ) -> guint;
}
extern "C" {
    pub fn _frida_g_dbus_connection_unregister_object(
        connection: *mut GDBusConnection,
        registration_id: guint,
    ) -> gboolean;
}
pub type GDBusSubtreeEnumerateFunc = ::core::option::Option<
    unsafe extern "C" fn(
        connection: *mut GDBusConnection,
        sender: *const gchar,
        object_path: *const gchar,
        user_data: gpointer,
    ) -> *mut *mut gchar,
>;
pub type GDBusSubtreeIntrospectFunc = ::core::option::Option<
    unsafe extern "C" fn(
        connection: *mut GDBusConnection,
        sender: *const gchar,
        object_path: *const gchar,
        node: *const gchar,
        user_data: gpointer,
    ) -> *mut *mut GDBusInterfaceInfo,
>;
pub type GDBusSubtreeDispatchFunc = ::core::option::Option<
    unsafe extern "C" fn(
        connection: *mut GDBusConnection,
        sender: *const gchar,
        object_path: *const gchar,
        interface_name: *const gchar,
        node: *const gchar,
        out_user_data: *mut gpointer,
        user_data: gpointer,
    ) -> *const GDBusInterfaceVTable,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDBusSubtreeVTable {
    pub enumerate: GDBusSubtreeEnumerateFunc,
    pub introspect: GDBusSubtreeIntrospectFunc,
    pub dispatch: GDBusSubtreeDispatchFunc,
    pub padding: [gpointer; 8usize],
}
extern "C" {
    pub fn _frida_g_dbus_connection_register_subtree(
        connection: *mut GDBusConnection,
        object_path: *const gchar,
        vtable: *const GDBusSubtreeVTable,
        flags: GDBusSubtreeFlags,
        user_data: gpointer,
        user_data_free_func: GDestroyNotify,
        error: *mut *mut GError,
    ) -> guint;
}
extern "C" {
    pub fn _frida_g_dbus_connection_unregister_subtree(
        connection: *mut GDBusConnection,
        registration_id: guint,
    ) -> gboolean;
}
pub type GDBusSignalCallback = ::core::option::Option<
    unsafe extern "C" fn(
        connection: *mut GDBusConnection,
        sender_name: *const gchar,
        object_path: *const gchar,
        interface_name: *const gchar,
        signal_name: *const gchar,
        parameters: *mut GVariant,
        user_data: gpointer,
    ),
>;
extern "C" {
    pub fn _frida_g_dbus_connection_signal_subscribe(
        connection: *mut GDBusConnection,
        sender: *const gchar,
        interface_name: *const gchar,
        member: *const gchar,
        object_path: *const gchar,
        arg0: *const gchar,
        flags: GDBusSignalFlags,
        callback: GDBusSignalCallback,
        user_data: gpointer,
        user_data_free_func: GDestroyNotify,
    ) -> guint;
}
extern "C" {
    pub fn _frida_g_dbus_connection_signal_unsubscribe(
        connection: *mut GDBusConnection,
        subscription_id: guint,
    );
}
pub type GDBusMessageFilterFunction = ::core::option::Option<
    unsafe extern "C" fn(
        connection: *mut GDBusConnection,
        message: *mut GDBusMessage,
        incoming: gboolean,
        user_data: gpointer,
    ) -> *mut GDBusMessage,
>;
extern "C" {
    pub fn _frida_g_dbus_connection_add_filter(
        connection: *mut GDBusConnection,
        filter_function: GDBusMessageFilterFunction,
        user_data: gpointer,
        user_data_free_func: GDestroyNotify,
    ) -> guint;
}
extern "C" {
    pub fn _frida_g_dbus_connection_remove_filter(
        connection: *mut GDBusConnection,
        filter_id: guint,
    );
}
extern "C" {
    pub fn _frida_g_dbus_error_quark() -> GQuark;
}
extern "C" {
    pub fn _frida_g_dbus_error_is_remote_error(error: *const GError) -> gboolean;
}
extern "C" {
    pub fn _frida_g_dbus_error_get_remote_error(error: *const GError) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_dbus_error_strip_remote_error(error: *mut GError) -> gboolean;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDBusErrorEntry {
    pub error_code: gint,
    pub dbus_error_name: *const gchar,
}
extern "C" {
    pub fn _frida_g_dbus_error_register_error(
        error_domain: GQuark,
        error_code: gint,
        dbus_error_name: *const gchar,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_dbus_error_unregister_error(
        error_domain: GQuark,
        error_code: gint,
        dbus_error_name: *const gchar,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_dbus_error_register_error_domain(
        error_domain_quark_name: *const gchar,
        quark_volatile: *mut gsize,
        entries: *const GDBusErrorEntry,
        num_entries: guint,
    );
}
extern "C" {
    pub fn _frida_g_dbus_error_new_for_dbus_error(
        dbus_error_name: *const gchar,
        dbus_error_message: *const gchar,
    ) -> *mut GError;
}
extern "C" {
    pub fn _frida_g_dbus_error_set_dbus_error(
        error: *mut *mut GError,
        dbus_error_name: *const gchar,
        dbus_error_message: *const gchar,
        format: *const gchar,
        ...
    );
}
extern "C" {
    pub fn _frida_g_dbus_error_set_dbus_error_valist(
        error: *mut *mut GError,
        dbus_error_name: *const gchar,
        dbus_error_message: *const gchar,
        format: *const gchar,
        var_args: va_list,
    );
}
extern "C" {
    pub fn _frida_g_dbus_error_encode_gerror(error: *const GError) -> *mut gchar;
}
pub type GDBusInterfaceIface = _GDBusInterfaceIface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDBusInterfaceIface {
    pub parent_iface: GTypeInterface,
    pub get_info: ::core::option::Option<
        unsafe extern "C" fn(interface_: *mut GDBusInterface) -> *mut GDBusInterfaceInfo,
    >,
    pub get_object: ::core::option::Option<
        unsafe extern "C" fn(interface_: *mut GDBusInterface) -> *mut GDBusObject,
    >,
    pub set_object: ::core::option::Option<
        unsafe extern "C" fn(interface_: *mut GDBusInterface, object: *mut GDBusObject),
    >,
    pub dup_object: ::core::option::Option<
        unsafe extern "C" fn(interface_: *mut GDBusInterface) -> *mut GDBusObject,
    >,
}
extern "C" {
    pub fn _frida_g_dbus_interface_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_dbus_interface_get_info(
        interface_: *mut GDBusInterface,
    ) -> *mut GDBusInterfaceInfo;
}
extern "C" {
    pub fn _frida_g_dbus_interface_get_object(interface_: *mut GDBusInterface) -> *mut GDBusObject;
}
extern "C" {
    pub fn _frida_g_dbus_interface_set_object(
        interface_: *mut GDBusInterface,
        object: *mut GDBusObject,
    );
}
extern "C" {
    pub fn _frida_g_dbus_interface_dup_object(interface_: *mut GDBusInterface) -> *mut GDBusObject;
}
pub type GDBusInterfaceSkeletonClass = _GDBusInterfaceSkeletonClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDBusInterfaceSkeletonPrivate {
    _unused: [u8; 0],
}
pub type GDBusInterfaceSkeletonPrivate = _GDBusInterfaceSkeletonPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDBusInterfaceSkeleton {
    pub parent_instance: GObject,
    pub priv_: *mut GDBusInterfaceSkeletonPrivate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDBusInterfaceSkeletonClass {
    pub parent_class: GObjectClass,
    pub get_info: ::core::option::Option<
        unsafe extern "C" fn(interface_: *mut GDBusInterfaceSkeleton) -> *mut GDBusInterfaceInfo,
    >,
    pub get_vtable: ::core::option::Option<
        unsafe extern "C" fn(interface_: *mut GDBusInterfaceSkeleton) -> *mut GDBusInterfaceVTable,
    >,
    pub get_properties: ::core::option::Option<
        unsafe extern "C" fn(interface_: *mut GDBusInterfaceSkeleton) -> *mut GVariant,
    >,
    pub flush:
        ::core::option::Option<unsafe extern "C" fn(interface_: *mut GDBusInterfaceSkeleton)>,
    pub vfunc_padding: [gpointer; 8usize],
    pub g_authorize_method: ::core::option::Option<
        unsafe extern "C" fn(
            interface_: *mut GDBusInterfaceSkeleton,
            invocation: *mut GDBusMethodInvocation,
        ) -> gboolean,
    >,
    pub signal_padding: [gpointer; 8usize],
}
extern "C" {
    pub fn _frida_g_dbus_interface_skeleton_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_dbus_interface_skeleton_get_flags(
        interface_: *mut GDBusInterfaceSkeleton,
    ) -> GDBusInterfaceSkeletonFlags;
}
extern "C" {
    pub fn _frida_g_dbus_interface_skeleton_set_flags(
        interface_: *mut GDBusInterfaceSkeleton,
        flags: GDBusInterfaceSkeletonFlags,
    );
}
extern "C" {
    pub fn _frida_g_dbus_interface_skeleton_get_info(
        interface_: *mut GDBusInterfaceSkeleton,
    ) -> *mut GDBusInterfaceInfo;
}
extern "C" {
    pub fn _frida_g_dbus_interface_skeleton_get_vtable(
        interface_: *mut GDBusInterfaceSkeleton,
    ) -> *mut GDBusInterfaceVTable;
}
extern "C" {
    pub fn _frida_g_dbus_interface_skeleton_get_properties(
        interface_: *mut GDBusInterfaceSkeleton,
    ) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_dbus_interface_skeleton_flush(interface_: *mut GDBusInterfaceSkeleton);
}
extern "C" {
    pub fn _frida_g_dbus_interface_skeleton_export(
        interface_: *mut GDBusInterfaceSkeleton,
        connection: *mut GDBusConnection,
        object_path: *const gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_dbus_interface_skeleton_unexport(interface_: *mut GDBusInterfaceSkeleton);
}
extern "C" {
    pub fn _frida_g_dbus_interface_skeleton_unexport_from_connection(
        interface_: *mut GDBusInterfaceSkeleton,
        connection: *mut GDBusConnection,
    );
}
extern "C" {
    pub fn _frida_g_dbus_interface_skeleton_get_connection(
        interface_: *mut GDBusInterfaceSkeleton,
    ) -> *mut GDBusConnection;
}
extern "C" {
    pub fn _frida_g_dbus_interface_skeleton_get_connections(
        interface_: *mut GDBusInterfaceSkeleton,
    ) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_dbus_interface_skeleton_has_connection(
        interface_: *mut GDBusInterfaceSkeleton,
        connection: *mut GDBusConnection,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_dbus_interface_skeleton_get_object_path(
        interface_: *mut GDBusInterfaceSkeleton,
    ) -> *const gchar;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDBusAnnotationInfo {
    pub ref_count: gint,
    pub key: *mut gchar,
    pub value: *mut gchar,
    pub annotations: *mut *mut GDBusAnnotationInfo,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDBusArgInfo {
    pub ref_count: gint,
    pub name: *mut gchar,
    pub signature: *mut gchar,
    pub annotations: *mut *mut GDBusAnnotationInfo,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDBusMethodInfo {
    pub ref_count: gint,
    pub name: *mut gchar,
    pub in_args: *mut *mut GDBusArgInfo,
    pub out_args: *mut *mut GDBusArgInfo,
    pub annotations: *mut *mut GDBusAnnotationInfo,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDBusSignalInfo {
    pub ref_count: gint,
    pub name: *mut gchar,
    pub args: *mut *mut GDBusArgInfo,
    pub annotations: *mut *mut GDBusAnnotationInfo,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDBusPropertyInfo {
    pub ref_count: gint,
    pub name: *mut gchar,
    pub signature: *mut gchar,
    pub flags: GDBusPropertyInfoFlags,
    pub annotations: *mut *mut GDBusAnnotationInfo,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDBusInterfaceInfo {
    pub ref_count: gint,
    pub name: *mut gchar,
    pub methods: *mut *mut GDBusMethodInfo,
    pub signals: *mut *mut GDBusSignalInfo,
    pub properties: *mut *mut GDBusPropertyInfo,
    pub annotations: *mut *mut GDBusAnnotationInfo,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDBusNodeInfo {
    pub ref_count: gint,
    pub path: *mut gchar,
    pub interfaces: *mut *mut GDBusInterfaceInfo,
    pub nodes: *mut *mut GDBusNodeInfo,
    pub annotations: *mut *mut GDBusAnnotationInfo,
}
extern "C" {
    pub fn _frida_g_dbus_annotation_info_lookup(
        annotations: *mut *mut GDBusAnnotationInfo,
        name: *const gchar,
    ) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_dbus_interface_info_lookup_method(
        info: *mut GDBusInterfaceInfo,
        name: *const gchar,
    ) -> *mut GDBusMethodInfo;
}
extern "C" {
    pub fn _frida_g_dbus_interface_info_lookup_signal(
        info: *mut GDBusInterfaceInfo,
        name: *const gchar,
    ) -> *mut GDBusSignalInfo;
}
extern "C" {
    pub fn _frida_g_dbus_interface_info_lookup_property(
        info: *mut GDBusInterfaceInfo,
        name: *const gchar,
    ) -> *mut GDBusPropertyInfo;
}
extern "C" {
    pub fn _frida_g_dbus_interface_info_cache_build(info: *mut GDBusInterfaceInfo);
}
extern "C" {
    pub fn _frida_g_dbus_interface_info_cache_release(info: *mut GDBusInterfaceInfo);
}
extern "C" {
    pub fn _frida_g_dbus_interface_info_generate_xml(
        info: *mut GDBusInterfaceInfo,
        indent: guint,
        string_builder: *mut GString,
    );
}
extern "C" {
    pub fn _frida_g_dbus_node_info_new_for_xml(
        xml_data: *const gchar,
        error: *mut *mut GError,
    ) -> *mut GDBusNodeInfo;
}
extern "C" {
    pub fn _frida_g_dbus_node_info_lookup_interface(
        info: *mut GDBusNodeInfo,
        name: *const gchar,
    ) -> *mut GDBusInterfaceInfo;
}
extern "C" {
    pub fn _frida_g_dbus_node_info_generate_xml(
        info: *mut GDBusNodeInfo,
        indent: guint,
        string_builder: *mut GString,
    );
}
extern "C" {
    pub fn _frida_g_dbus_node_info_ref(info: *mut GDBusNodeInfo) -> *mut GDBusNodeInfo;
}
extern "C" {
    pub fn _frida_g_dbus_interface_info_ref(
        info: *mut GDBusInterfaceInfo,
    ) -> *mut GDBusInterfaceInfo;
}
extern "C" {
    pub fn _frida_g_dbus_method_info_ref(info: *mut GDBusMethodInfo) -> *mut GDBusMethodInfo;
}
extern "C" {
    pub fn _frida_g_dbus_signal_info_ref(info: *mut GDBusSignalInfo) -> *mut GDBusSignalInfo;
}
extern "C" {
    pub fn _frida_g_dbus_property_info_ref(info: *mut GDBusPropertyInfo) -> *mut GDBusPropertyInfo;
}
extern "C" {
    pub fn _frida_g_dbus_arg_info_ref(info: *mut GDBusArgInfo) -> *mut GDBusArgInfo;
}
extern "C" {
    pub fn _frida_g_dbus_annotation_info_ref(
        info: *mut GDBusAnnotationInfo,
    ) -> *mut GDBusAnnotationInfo;
}
extern "C" {
    pub fn _frida_g_dbus_node_info_unref(info: *mut GDBusNodeInfo);
}
extern "C" {
    pub fn _frida_g_dbus_interface_info_unref(info: *mut GDBusInterfaceInfo);
}
extern "C" {
    pub fn _frida_g_dbus_method_info_unref(info: *mut GDBusMethodInfo);
}
extern "C" {
    pub fn _frida_g_dbus_signal_info_unref(info: *mut GDBusSignalInfo);
}
extern "C" {
    pub fn _frida_g_dbus_property_info_unref(info: *mut GDBusPropertyInfo);
}
extern "C" {
    pub fn _frida_g_dbus_arg_info_unref(info: *mut GDBusArgInfo);
}
extern "C" {
    pub fn _frida_g_dbus_annotation_info_unref(info: *mut GDBusAnnotationInfo);
}
extern "C" {
    pub fn _frida_g_dbus_node_info_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_dbus_interface_info_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_dbus_method_info_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_dbus_signal_info_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_dbus_property_info_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_dbus_arg_info_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_dbus_annotation_info_get_type() -> GType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDBusMenuModel {
    _unused: [u8; 0],
}
pub type GDBusMenuModel = _GDBusMenuModel;
extern "C" {
    pub fn _frida_g_dbus_menu_model_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_dbus_menu_model_get(
        connection: *mut GDBusConnection,
        bus_name: *const gchar,
        object_path: *const gchar,
    ) -> *mut GDBusMenuModel;
}
extern "C" {
    pub fn _frida_g_dbus_message_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_dbus_message_new() -> *mut GDBusMessage;
}
extern "C" {
    pub fn _frida_g_dbus_message_new_signal(
        path: *const gchar,
        interface_: *const gchar,
        signal: *const gchar,
    ) -> *mut GDBusMessage;
}
extern "C" {
    pub fn _frida_g_dbus_message_new_method_call(
        name: *const gchar,
        path: *const gchar,
        interface_: *const gchar,
        method: *const gchar,
    ) -> *mut GDBusMessage;
}
extern "C" {
    pub fn _frida_g_dbus_message_new_method_reply(
        method_call_message: *mut GDBusMessage,
    ) -> *mut GDBusMessage;
}
extern "C" {
    pub fn _frida_g_dbus_message_new_method_error(
        method_call_message: *mut GDBusMessage,
        error_name: *const gchar,
        error_message_format: *const gchar,
        ...
    ) -> *mut GDBusMessage;
}
extern "C" {
    pub fn _frida_g_dbus_message_new_method_error_valist(
        method_call_message: *mut GDBusMessage,
        error_name: *const gchar,
        error_message_format: *const gchar,
        var_args: va_list,
    ) -> *mut GDBusMessage;
}
extern "C" {
    pub fn _frida_g_dbus_message_new_method_error_literal(
        method_call_message: *mut GDBusMessage,
        error_name: *const gchar,
        error_message: *const gchar,
    ) -> *mut GDBusMessage;
}
extern "C" {
    pub fn _frida_g_dbus_message_print(message: *mut GDBusMessage, indent: guint) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_dbus_message_get_locked(message: *mut GDBusMessage) -> gboolean;
}
extern "C" {
    pub fn _frida_g_dbus_message_lock(message: *mut GDBusMessage);
}
extern "C" {
    pub fn _frida_g_dbus_message_copy(
        message: *mut GDBusMessage,
        error: *mut *mut GError,
    ) -> *mut GDBusMessage;
}
extern "C" {
    pub fn _frida_g_dbus_message_get_byte_order(
        message: *mut GDBusMessage,
    ) -> GDBusMessageByteOrder;
}
extern "C" {
    pub fn _frida_g_dbus_message_set_byte_order(
        message: *mut GDBusMessage,
        byte_order: GDBusMessageByteOrder,
    );
}
extern "C" {
    pub fn _frida_g_dbus_message_get_message_type(message: *mut GDBusMessage) -> GDBusMessageType;
}
extern "C" {
    pub fn _frida_g_dbus_message_set_message_type(
        message: *mut GDBusMessage,
        type_: GDBusMessageType,
    );
}
extern "C" {
    pub fn _frida_g_dbus_message_get_flags(message: *mut GDBusMessage) -> GDBusMessageFlags;
}
extern "C" {
    pub fn _frida_g_dbus_message_set_flags(message: *mut GDBusMessage, flags: GDBusMessageFlags);
}
extern "C" {
    pub fn _frida_g_dbus_message_get_serial(message: *mut GDBusMessage) -> guint32;
}
extern "C" {
    pub fn _frida_g_dbus_message_set_serial(message: *mut GDBusMessage, serial: guint32);
}
extern "C" {
    pub fn _frida_g_dbus_message_get_header(
        message: *mut GDBusMessage,
        header_field: GDBusMessageHeaderField,
    ) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_dbus_message_set_header(
        message: *mut GDBusMessage,
        header_field: GDBusMessageHeaderField,
        value: *mut GVariant,
    );
}
extern "C" {
    pub fn _frida_g_dbus_message_get_header_fields(message: *mut GDBusMessage) -> *mut guchar;
}
extern "C" {
    pub fn _frida_g_dbus_message_get_body(message: *mut GDBusMessage) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_dbus_message_set_body(message: *mut GDBusMessage, body: *mut GVariant);
}
extern "C" {
    pub fn _frida_g_dbus_message_get_unix_fd_list(message: *mut GDBusMessage) -> *mut GUnixFDList;
}
extern "C" {
    pub fn _frida_g_dbus_message_set_unix_fd_list(
        message: *mut GDBusMessage,
        fd_list: *mut GUnixFDList,
    );
}
extern "C" {
    pub fn _frida_g_dbus_message_get_reply_serial(message: *mut GDBusMessage) -> guint32;
}
extern "C" {
    pub fn _frida_g_dbus_message_set_reply_serial(message: *mut GDBusMessage, value: guint32);
}
extern "C" {
    pub fn _frida_g_dbus_message_get_interface(message: *mut GDBusMessage) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_dbus_message_set_interface(message: *mut GDBusMessage, value: *const gchar);
}
extern "C" {
    pub fn _frida_g_dbus_message_get_member(message: *mut GDBusMessage) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_dbus_message_set_member(message: *mut GDBusMessage, value: *const gchar);
}
extern "C" {
    pub fn _frida_g_dbus_message_get_path(message: *mut GDBusMessage) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_dbus_message_set_path(message: *mut GDBusMessage, value: *const gchar);
}
extern "C" {
    pub fn _frida_g_dbus_message_get_sender(message: *mut GDBusMessage) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_dbus_message_set_sender(message: *mut GDBusMessage, value: *const gchar);
}
extern "C" {
    pub fn _frida_g_dbus_message_get_destination(message: *mut GDBusMessage) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_dbus_message_set_destination(message: *mut GDBusMessage, value: *const gchar);
}
extern "C" {
    pub fn _frida_g_dbus_message_get_error_name(message: *mut GDBusMessage) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_dbus_message_set_error_name(message: *mut GDBusMessage, value: *const gchar);
}
extern "C" {
    pub fn _frida_g_dbus_message_get_signature(message: *mut GDBusMessage) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_dbus_message_set_signature(message: *mut GDBusMessage, value: *const gchar);
}
extern "C" {
    pub fn _frida_g_dbus_message_get_num_unix_fds(message: *mut GDBusMessage) -> guint32;
}
extern "C" {
    pub fn _frida_g_dbus_message_set_num_unix_fds(message: *mut GDBusMessage, value: guint32);
}
extern "C" {
    pub fn _frida_g_dbus_message_get_arg0(message: *mut GDBusMessage) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_dbus_message_new_from_blob(
        blob: *mut guchar,
        blob_len: gsize,
        capabilities: GDBusCapabilityFlags,
        error: *mut *mut GError,
    ) -> *mut GDBusMessage;
}
extern "C" {
    pub fn _frida_g_dbus_message_bytes_needed(
        blob: *mut guchar,
        blob_len: gsize,
        error: *mut *mut GError,
    ) -> gssize;
}
extern "C" {
    pub fn _frida_g_dbus_message_to_blob(
        message: *mut GDBusMessage,
        out_size: *mut gsize,
        capabilities: GDBusCapabilityFlags,
        error: *mut *mut GError,
    ) -> *mut guchar;
}
extern "C" {
    pub fn _frida_g_dbus_message_to_gerror(
        message: *mut GDBusMessage,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_dbus_method_invocation_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_dbus_method_invocation_get_sender(
        invocation: *mut GDBusMethodInvocation,
    ) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_dbus_method_invocation_get_object_path(
        invocation: *mut GDBusMethodInvocation,
    ) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_dbus_method_invocation_get_interface_name(
        invocation: *mut GDBusMethodInvocation,
    ) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_dbus_method_invocation_get_method_name(
        invocation: *mut GDBusMethodInvocation,
    ) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_dbus_method_invocation_get_method_info(
        invocation: *mut GDBusMethodInvocation,
    ) -> *const GDBusMethodInfo;
}
extern "C" {
    pub fn _frida_g_dbus_method_invocation_get_property_info(
        invocation: *mut GDBusMethodInvocation,
    ) -> *const GDBusPropertyInfo;
}
extern "C" {
    pub fn _frida_g_dbus_method_invocation_get_connection(
        invocation: *mut GDBusMethodInvocation,
    ) -> *mut GDBusConnection;
}
extern "C" {
    pub fn _frida_g_dbus_method_invocation_get_message(
        invocation: *mut GDBusMethodInvocation,
    ) -> *mut GDBusMessage;
}
extern "C" {
    pub fn _frida_g_dbus_method_invocation_get_parameters(
        invocation: *mut GDBusMethodInvocation,
    ) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_dbus_method_invocation_get_user_data(
        invocation: *mut GDBusMethodInvocation,
    ) -> gpointer;
}
extern "C" {
    pub fn _frida_g_dbus_method_invocation_return_value(
        invocation: *mut GDBusMethodInvocation,
        parameters: *mut GVariant,
    );
}
extern "C" {
    pub fn _frida_g_dbus_method_invocation_return_value_with_unix_fd_list(
        invocation: *mut GDBusMethodInvocation,
        parameters: *mut GVariant,
        fd_list: *mut GUnixFDList,
    );
}
extern "C" {
    pub fn _frida_g_dbus_method_invocation_return_error(
        invocation: *mut GDBusMethodInvocation,
        domain: GQuark,
        code: gint,
        format: *const gchar,
        ...
    );
}
extern "C" {
    pub fn _frida_g_dbus_method_invocation_return_error_valist(
        invocation: *mut GDBusMethodInvocation,
        domain: GQuark,
        code: gint,
        format: *const gchar,
        var_args: va_list,
    );
}
extern "C" {
    pub fn _frida_g_dbus_method_invocation_return_error_literal(
        invocation: *mut GDBusMethodInvocation,
        domain: GQuark,
        code: gint,
        message: *const gchar,
    );
}
extern "C" {
    pub fn _frida_g_dbus_method_invocation_return_gerror(
        invocation: *mut GDBusMethodInvocation,
        error: *const GError,
    );
}
extern "C" {
    pub fn _frida_g_dbus_method_invocation_take_error(
        invocation: *mut GDBusMethodInvocation,
        error: *mut GError,
    );
}
extern "C" {
    pub fn _frida_g_dbus_method_invocation_return_dbus_error(
        invocation: *mut GDBusMethodInvocation,
        error_name: *const gchar,
        error_message: *const gchar,
    );
}
pub type GBusAcquiredCallback = ::core::option::Option<
    unsafe extern "C" fn(connection: *mut GDBusConnection, name: *const gchar, user_data: gpointer),
>;
pub type GBusNameAcquiredCallback = ::core::option::Option<
    unsafe extern "C" fn(connection: *mut GDBusConnection, name: *const gchar, user_data: gpointer),
>;
pub type GBusNameLostCallback = ::core::option::Option<
    unsafe extern "C" fn(connection: *mut GDBusConnection, name: *const gchar, user_data: gpointer),
>;
extern "C" {
    pub fn _frida_g_bus_own_name(
        bus_type: GBusType,
        name: *const gchar,
        flags: GBusNameOwnerFlags,
        bus_acquired_handler: GBusAcquiredCallback,
        name_acquired_handler: GBusNameAcquiredCallback,
        name_lost_handler: GBusNameLostCallback,
        user_data: gpointer,
        user_data_free_func: GDestroyNotify,
    ) -> guint;
}
extern "C" {
    pub fn _frida_g_bus_own_name_on_connection(
        connection: *mut GDBusConnection,
        name: *const gchar,
        flags: GBusNameOwnerFlags,
        name_acquired_handler: GBusNameAcquiredCallback,
        name_lost_handler: GBusNameLostCallback,
        user_data: gpointer,
        user_data_free_func: GDestroyNotify,
    ) -> guint;
}
extern "C" {
    pub fn _frida_g_bus_own_name_with_closures(
        bus_type: GBusType,
        name: *const gchar,
        flags: GBusNameOwnerFlags,
        bus_acquired_closure: *mut GClosure,
        name_acquired_closure: *mut GClosure,
        name_lost_closure: *mut GClosure,
    ) -> guint;
}
extern "C" {
    pub fn _frida_g_bus_own_name_on_connection_with_closures(
        connection: *mut GDBusConnection,
        name: *const gchar,
        flags: GBusNameOwnerFlags,
        name_acquired_closure: *mut GClosure,
        name_lost_closure: *mut GClosure,
    ) -> guint;
}
extern "C" {
    pub fn _frida_g_bus_unown_name(owner_id: guint);
}
pub type GBusNameAppearedCallback = ::core::option::Option<
    unsafe extern "C" fn(
        connection: *mut GDBusConnection,
        name: *const gchar,
        name_owner: *const gchar,
        user_data: gpointer,
    ),
>;
pub type GBusNameVanishedCallback = ::core::option::Option<
    unsafe extern "C" fn(connection: *mut GDBusConnection, name: *const gchar, user_data: gpointer),
>;
extern "C" {
    pub fn _frida_g_bus_watch_name(
        bus_type: GBusType,
        name: *const gchar,
        flags: GBusNameWatcherFlags,
        name_appeared_handler: GBusNameAppearedCallback,
        name_vanished_handler: GBusNameVanishedCallback,
        user_data: gpointer,
        user_data_free_func: GDestroyNotify,
    ) -> guint;
}
extern "C" {
    pub fn _frida_g_bus_watch_name_on_connection(
        connection: *mut GDBusConnection,
        name: *const gchar,
        flags: GBusNameWatcherFlags,
        name_appeared_handler: GBusNameAppearedCallback,
        name_vanished_handler: GBusNameVanishedCallback,
        user_data: gpointer,
        user_data_free_func: GDestroyNotify,
    ) -> guint;
}
extern "C" {
    pub fn _frida_g_bus_watch_name_with_closures(
        bus_type: GBusType,
        name: *const gchar,
        flags: GBusNameWatcherFlags,
        name_appeared_closure: *mut GClosure,
        name_vanished_closure: *mut GClosure,
    ) -> guint;
}
extern "C" {
    pub fn _frida_g_bus_watch_name_on_connection_with_closures(
        connection: *mut GDBusConnection,
        name: *const gchar,
        flags: GBusNameWatcherFlags,
        name_appeared_closure: *mut GClosure,
        name_vanished_closure: *mut GClosure,
    ) -> guint;
}
extern "C" {
    pub fn _frida_g_bus_unwatch_name(watcher_id: guint);
}
pub type GDBusObjectIface = _GDBusObjectIface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDBusObjectIface {
    pub parent_iface: GTypeInterface,
    pub get_object_path:
        ::core::option::Option<unsafe extern "C" fn(object: *mut GDBusObject) -> *const gchar>,
    pub get_interfaces:
        ::core::option::Option<unsafe extern "C" fn(object: *mut GDBusObject) -> *mut GList>,
    pub get_interface: ::core::option::Option<
        unsafe extern "C" fn(
            object: *mut GDBusObject,
            interface_name: *const gchar,
        ) -> *mut GDBusInterface,
    >,
    pub interface_added: ::core::option::Option<
        unsafe extern "C" fn(object: *mut GDBusObject, interface_: *mut GDBusInterface),
    >,
    pub interface_removed: ::core::option::Option<
        unsafe extern "C" fn(object: *mut GDBusObject, interface_: *mut GDBusInterface),
    >,
}
extern "C" {
    pub fn _frida_g_dbus_object_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_dbus_object_get_object_path(object: *mut GDBusObject) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_dbus_object_get_interfaces(object: *mut GDBusObject) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_dbus_object_get_interface(
        object: *mut GDBusObject,
        interface_name: *const gchar,
    ) -> *mut GDBusInterface;
}
pub type GDBusObjectManagerIface = _GDBusObjectManagerIface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDBusObjectManagerIface {
    pub parent_iface: GTypeInterface,
    pub get_object_path: ::core::option::Option<
        unsafe extern "C" fn(manager: *mut GDBusObjectManager) -> *const gchar,
    >,
    pub get_objects: ::core::option::Option<
        unsafe extern "C" fn(manager: *mut GDBusObjectManager) -> *mut GList,
    >,
    pub get_object: ::core::option::Option<
        unsafe extern "C" fn(
            manager: *mut GDBusObjectManager,
            object_path: *const gchar,
        ) -> *mut GDBusObject,
    >,
    pub get_interface: ::core::option::Option<
        unsafe extern "C" fn(
            manager: *mut GDBusObjectManager,
            object_path: *const gchar,
            interface_name: *const gchar,
        ) -> *mut GDBusInterface,
    >,
    pub object_added: ::core::option::Option<
        unsafe extern "C" fn(manager: *mut GDBusObjectManager, object: *mut GDBusObject),
    >,
    pub object_removed: ::core::option::Option<
        unsafe extern "C" fn(manager: *mut GDBusObjectManager, object: *mut GDBusObject),
    >,
    pub interface_added: ::core::option::Option<
        unsafe extern "C" fn(
            manager: *mut GDBusObjectManager,
            object: *mut GDBusObject,
            interface_: *mut GDBusInterface,
        ),
    >,
    pub interface_removed: ::core::option::Option<
        unsafe extern "C" fn(
            manager: *mut GDBusObjectManager,
            object: *mut GDBusObject,
            interface_: *mut GDBusInterface,
        ),
    >,
}
extern "C" {
    pub fn _frida_g_dbus_object_manager_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_dbus_object_manager_get_object_path(
        manager: *mut GDBusObjectManager,
    ) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_dbus_object_manager_get_objects(manager: *mut GDBusObjectManager)
        -> *mut GList;
}
extern "C" {
    pub fn _frida_g_dbus_object_manager_get_object(
        manager: *mut GDBusObjectManager,
        object_path: *const gchar,
    ) -> *mut GDBusObject;
}
extern "C" {
    pub fn _frida_g_dbus_object_manager_get_interface(
        manager: *mut GDBusObjectManager,
        object_path: *const gchar,
        interface_name: *const gchar,
    ) -> *mut GDBusInterface;
}
pub type GDBusObjectManagerClientClass = _GDBusObjectManagerClientClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDBusObjectManagerClientPrivate {
    _unused: [u8; 0],
}
pub type GDBusObjectManagerClientPrivate = _GDBusObjectManagerClientPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDBusObjectManagerClient {
    pub parent_instance: GObject,
    pub priv_: *mut GDBusObjectManagerClientPrivate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDBusObjectManagerClientClass {
    pub parent_class: GObjectClass,
    pub interface_proxy_signal: ::core::option::Option<
        unsafe extern "C" fn(
            manager: *mut GDBusObjectManagerClient,
            object_proxy: *mut GDBusObjectProxy,
            interface_proxy: *mut GDBusProxy,
            sender_name: *const gchar,
            signal_name: *const gchar,
            parameters: *mut GVariant,
        ),
    >,
    pub interface_proxy_properties_changed: ::core::option::Option<
        unsafe extern "C" fn(
            manager: *mut GDBusObjectManagerClient,
            object_proxy: *mut GDBusObjectProxy,
            interface_proxy: *mut GDBusProxy,
            changed_properties: *mut GVariant,
            invalidated_properties: *const *const gchar,
        ),
    >,
    pub padding: [gpointer; 8usize],
}
extern "C" {
    pub fn _frida_g_dbus_object_manager_client_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_dbus_object_manager_client_new(
        connection: *mut GDBusConnection,
        flags: GDBusObjectManagerClientFlags,
        name: *const gchar,
        object_path: *const gchar,
        get_proxy_type_func: GDBusProxyTypeFunc,
        get_proxy_type_user_data: gpointer,
        get_proxy_type_destroy_notify: GDestroyNotify,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_dbus_object_manager_client_new_finish(
        res: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GDBusObjectManager;
}
extern "C" {
    pub fn _frida_g_dbus_object_manager_client_new_sync(
        connection: *mut GDBusConnection,
        flags: GDBusObjectManagerClientFlags,
        name: *const gchar,
        object_path: *const gchar,
        get_proxy_type_func: GDBusProxyTypeFunc,
        get_proxy_type_user_data: gpointer,
        get_proxy_type_destroy_notify: GDestroyNotify,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GDBusObjectManager;
}
extern "C" {
    pub fn _frida_g_dbus_object_manager_client_new_for_bus(
        bus_type: GBusType,
        flags: GDBusObjectManagerClientFlags,
        name: *const gchar,
        object_path: *const gchar,
        get_proxy_type_func: GDBusProxyTypeFunc,
        get_proxy_type_user_data: gpointer,
        get_proxy_type_destroy_notify: GDestroyNotify,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_dbus_object_manager_client_new_for_bus_finish(
        res: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GDBusObjectManager;
}
extern "C" {
    pub fn _frida_g_dbus_object_manager_client_new_for_bus_sync(
        bus_type: GBusType,
        flags: GDBusObjectManagerClientFlags,
        name: *const gchar,
        object_path: *const gchar,
        get_proxy_type_func: GDBusProxyTypeFunc,
        get_proxy_type_user_data: gpointer,
        get_proxy_type_destroy_notify: GDestroyNotify,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GDBusObjectManager;
}
extern "C" {
    pub fn _frida_g_dbus_object_manager_client_get_connection(
        manager: *mut GDBusObjectManagerClient,
    ) -> *mut GDBusConnection;
}
extern "C" {
    pub fn _frida_g_dbus_object_manager_client_get_flags(
        manager: *mut GDBusObjectManagerClient,
    ) -> GDBusObjectManagerClientFlags;
}
extern "C" {
    pub fn _frida_g_dbus_object_manager_client_get_name(
        manager: *mut GDBusObjectManagerClient,
    ) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_dbus_object_manager_client_get_name_owner(
        manager: *mut GDBusObjectManagerClient,
    ) -> *mut gchar;
}
pub type GDBusObjectManagerServerClass = _GDBusObjectManagerServerClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDBusObjectManagerServerPrivate {
    _unused: [u8; 0],
}
pub type GDBusObjectManagerServerPrivate = _GDBusObjectManagerServerPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDBusObjectManagerServer {
    pub parent_instance: GObject,
    pub priv_: *mut GDBusObjectManagerServerPrivate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDBusObjectManagerServerClass {
    pub parent_class: GObjectClass,
    pub padding: [gpointer; 8usize],
}
extern "C" {
    pub fn _frida_g_dbus_object_manager_server_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_dbus_object_manager_server_new(
        object_path: *const gchar,
    ) -> *mut GDBusObjectManagerServer;
}
extern "C" {
    pub fn _frida_g_dbus_object_manager_server_get_connection(
        manager: *mut GDBusObjectManagerServer,
    ) -> *mut GDBusConnection;
}
extern "C" {
    pub fn _frida_g_dbus_object_manager_server_set_connection(
        manager: *mut GDBusObjectManagerServer,
        connection: *mut GDBusConnection,
    );
}
extern "C" {
    pub fn _frida_g_dbus_object_manager_server_export(
        manager: *mut GDBusObjectManagerServer,
        object: *mut GDBusObjectSkeleton,
    );
}
extern "C" {
    pub fn _frida_g_dbus_object_manager_server_export_uniquely(
        manager: *mut GDBusObjectManagerServer,
        object: *mut GDBusObjectSkeleton,
    );
}
extern "C" {
    pub fn _frida_g_dbus_object_manager_server_is_exported(
        manager: *mut GDBusObjectManagerServer,
        object: *mut GDBusObjectSkeleton,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_dbus_object_manager_server_unexport(
        manager: *mut GDBusObjectManagerServer,
        object_path: *const gchar,
    ) -> gboolean;
}
pub type GDBusObjectProxyClass = _GDBusObjectProxyClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDBusObjectProxyPrivate {
    _unused: [u8; 0],
}
pub type GDBusObjectProxyPrivate = _GDBusObjectProxyPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDBusObjectProxy {
    pub parent_instance: GObject,
    pub priv_: *mut GDBusObjectProxyPrivate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDBusObjectProxyClass {
    pub parent_class: GObjectClass,
    pub padding: [gpointer; 8usize],
}
extern "C" {
    pub fn _frida_g_dbus_object_proxy_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_dbus_object_proxy_new(
        connection: *mut GDBusConnection,
        object_path: *const gchar,
    ) -> *mut GDBusObjectProxy;
}
extern "C" {
    pub fn _frida_g_dbus_object_proxy_get_connection(
        proxy: *mut GDBusObjectProxy,
    ) -> *mut GDBusConnection;
}
pub type GDBusObjectSkeletonClass = _GDBusObjectSkeletonClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDBusObjectSkeletonPrivate {
    _unused: [u8; 0],
}
pub type GDBusObjectSkeletonPrivate = _GDBusObjectSkeletonPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDBusObjectSkeleton {
    pub parent_instance: GObject,
    pub priv_: *mut GDBusObjectSkeletonPrivate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDBusObjectSkeletonClass {
    pub parent_class: GObjectClass,
    pub authorize_method: ::core::option::Option<
        unsafe extern "C" fn(
            object: *mut GDBusObjectSkeleton,
            interface_: *mut GDBusInterfaceSkeleton,
            invocation: *mut GDBusMethodInvocation,
        ) -> gboolean,
    >,
    pub padding: [gpointer; 8usize],
}
extern "C" {
    pub fn _frida_g_dbus_object_skeleton_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_dbus_object_skeleton_new(object_path: *const gchar)
        -> *mut GDBusObjectSkeleton;
}
extern "C" {
    pub fn _frida_g_dbus_object_skeleton_flush(object: *mut GDBusObjectSkeleton);
}
extern "C" {
    pub fn _frida_g_dbus_object_skeleton_add_interface(
        object: *mut GDBusObjectSkeleton,
        interface_: *mut GDBusInterfaceSkeleton,
    );
}
extern "C" {
    pub fn _frida_g_dbus_object_skeleton_remove_interface(
        object: *mut GDBusObjectSkeleton,
        interface_: *mut GDBusInterfaceSkeleton,
    );
}
extern "C" {
    pub fn _frida_g_dbus_object_skeleton_remove_interface_by_name(
        object: *mut GDBusObjectSkeleton,
        interface_name: *const gchar,
    );
}
extern "C" {
    pub fn _frida_g_dbus_object_skeleton_set_object_path(
        object: *mut GDBusObjectSkeleton,
        object_path: *const gchar,
    );
}
pub type GDBusProxyClass = _GDBusProxyClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDBusProxyPrivate {
    _unused: [u8; 0],
}
pub type GDBusProxyPrivate = _GDBusProxyPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDBusProxy {
    pub parent_instance: GObject,
    pub priv_: *mut GDBusProxyPrivate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDBusProxyClass {
    pub parent_class: GObjectClass,
    pub g_properties_changed: ::core::option::Option<
        unsafe extern "C" fn(
            proxy: *mut GDBusProxy,
            changed_properties: *mut GVariant,
            invalidated_properties: *const *const gchar,
        ),
    >,
    pub g_signal: ::core::option::Option<
        unsafe extern "C" fn(
            proxy: *mut GDBusProxy,
            sender_name: *const gchar,
            signal_name: *const gchar,
            parameters: *mut GVariant,
        ),
    >,
    pub padding: [gpointer; 32usize],
}
extern "C" {
    pub fn _frida_g_dbus_proxy_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_dbus_proxy_new(
        connection: *mut GDBusConnection,
        flags: GDBusProxyFlags,
        info: *mut GDBusInterfaceInfo,
        name: *const gchar,
        object_path: *const gchar,
        interface_name: *const gchar,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_dbus_proxy_new_finish(
        res: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GDBusProxy;
}
extern "C" {
    pub fn _frida_g_dbus_proxy_new_sync(
        connection: *mut GDBusConnection,
        flags: GDBusProxyFlags,
        info: *mut GDBusInterfaceInfo,
        name: *const gchar,
        object_path: *const gchar,
        interface_name: *const gchar,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GDBusProxy;
}
extern "C" {
    pub fn _frida_g_dbus_proxy_new_for_bus(
        bus_type: GBusType,
        flags: GDBusProxyFlags,
        info: *mut GDBusInterfaceInfo,
        name: *const gchar,
        object_path: *const gchar,
        interface_name: *const gchar,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_dbus_proxy_new_for_bus_finish(
        res: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GDBusProxy;
}
extern "C" {
    pub fn _frida_g_dbus_proxy_new_for_bus_sync(
        bus_type: GBusType,
        flags: GDBusProxyFlags,
        info: *mut GDBusInterfaceInfo,
        name: *const gchar,
        object_path: *const gchar,
        interface_name: *const gchar,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GDBusProxy;
}
extern "C" {
    pub fn _frida_g_dbus_proxy_get_connection(proxy: *mut GDBusProxy) -> *mut GDBusConnection;
}
extern "C" {
    pub fn _frida_g_dbus_proxy_get_flags(proxy: *mut GDBusProxy) -> GDBusProxyFlags;
}
extern "C" {
    pub fn _frida_g_dbus_proxy_get_name(proxy: *mut GDBusProxy) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_dbus_proxy_get_name_owner(proxy: *mut GDBusProxy) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_dbus_proxy_get_object_path(proxy: *mut GDBusProxy) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_dbus_proxy_get_interface_name(proxy: *mut GDBusProxy) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_dbus_proxy_get_default_timeout(proxy: *mut GDBusProxy) -> gint;
}
extern "C" {
    pub fn _frida_g_dbus_proxy_set_default_timeout(proxy: *mut GDBusProxy, timeout_msec: gint);
}
extern "C" {
    pub fn _frida_g_dbus_proxy_get_interface_info(
        proxy: *mut GDBusProxy,
    ) -> *mut GDBusInterfaceInfo;
}
extern "C" {
    pub fn _frida_g_dbus_proxy_set_interface_info(
        proxy: *mut GDBusProxy,
        info: *mut GDBusInterfaceInfo,
    );
}
extern "C" {
    pub fn _frida_g_dbus_proxy_get_cached_property(
        proxy: *mut GDBusProxy,
        property_name: *const gchar,
    ) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_dbus_proxy_set_cached_property(
        proxy: *mut GDBusProxy,
        property_name: *const gchar,
        value: *mut GVariant,
    );
}
extern "C" {
    pub fn _frida_g_dbus_proxy_get_cached_property_names(proxy: *mut GDBusProxy)
        -> *mut *mut gchar;
}
extern "C" {
    pub fn _frida_g_dbus_proxy_call(
        proxy: *mut GDBusProxy,
        method_name: *const gchar,
        parameters: *mut GVariant,
        flags: GDBusCallFlags,
        timeout_msec: gint,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_dbus_proxy_call_finish(
        proxy: *mut GDBusProxy,
        res: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_dbus_proxy_call_sync(
        proxy: *mut GDBusProxy,
        method_name: *const gchar,
        parameters: *mut GVariant,
        flags: GDBusCallFlags,
        timeout_msec: gint,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_dbus_proxy_call_with_unix_fd_list(
        proxy: *mut GDBusProxy,
        method_name: *const gchar,
        parameters: *mut GVariant,
        flags: GDBusCallFlags,
        timeout_msec: gint,
        fd_list: *mut GUnixFDList,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_dbus_proxy_call_with_unix_fd_list_finish(
        proxy: *mut GDBusProxy,
        out_fd_list: *mut *mut GUnixFDList,
        res: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_dbus_proxy_call_with_unix_fd_list_sync(
        proxy: *mut GDBusProxy,
        method_name: *const gchar,
        parameters: *mut GVariant,
        flags: GDBusCallFlags,
        timeout_msec: gint,
        fd_list: *mut GUnixFDList,
        out_fd_list: *mut *mut GUnixFDList,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_dbus_server_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_dbus_server_new_sync(
        address: *const gchar,
        flags: GDBusServerFlags,
        guid: *const gchar,
        observer: *mut GDBusAuthObserver,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GDBusServer;
}
extern "C" {
    pub fn _frida_g_dbus_server_get_client_address(server: *mut GDBusServer) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_dbus_server_get_guid(server: *mut GDBusServer) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_dbus_server_get_flags(server: *mut GDBusServer) -> GDBusServerFlags;
}
extern "C" {
    pub fn _frida_g_dbus_server_start(server: *mut GDBusServer);
}
extern "C" {
    pub fn _frida_g_dbus_server_stop(server: *mut GDBusServer);
}
extern "C" {
    pub fn _frida_g_dbus_server_is_active(server: *mut GDBusServer) -> gboolean;
}
extern "C" {
    pub fn _frida_g_dbus_is_guid(string: *const gchar) -> gboolean;
}
extern "C" {
    pub fn _frida_g_dbus_generate_guid() -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_dbus_is_name(string: *const gchar) -> gboolean;
}
extern "C" {
    pub fn _frida_g_dbus_is_unique_name(string: *const gchar) -> gboolean;
}
extern "C" {
    pub fn _frida_g_dbus_is_member_name(string: *const gchar) -> gboolean;
}
extern "C" {
    pub fn _frida_g_dbus_is_interface_name(string: *const gchar) -> gboolean;
}
extern "C" {
    pub fn _frida_g_dbus_is_error_name(string: *const gchar) -> gboolean;
}
extern "C" {
    pub fn _frida_g_dbus_gvariant_to_gvalue(value: *mut GVariant, out_gvalue: *mut GValue);
}
extern "C" {
    pub fn _frida_g_dbus_gvalue_to_gvariant(
        gvalue: *const GValue,
        type_: *const GVariantType,
    ) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_dbus_escape_object_path_bytestring(bytes: *const guint8) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_dbus_escape_object_path(s: *const gchar) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_dbus_unescape_object_path(s: *const gchar) -> *mut guint8;
}
extern "C" {
    pub fn _frida_g_debug_controller_get_type() -> GType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDebugController {
    _unused: [u8; 0],
}
pub type GDebugController = _GDebugController;
pub type GDebugControllerInterface = _GDebugControllerInterface;
pub type GDebugController_autoptr = *mut GDebugController;
pub type GDebugController_listautoptr = *mut GList;
pub type GDebugController_slistautoptr = *mut GSList;
pub type GDebugController_queueautoptr = *mut GQueue;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDebugControllerInterface {
    pub g_iface: GTypeInterface,
}
extern "C" {
    pub fn _frida_g_debug_controller_get_debug_enabled(self_: *mut GDebugController) -> gboolean;
}
extern "C" {
    pub fn _frida_g_debug_controller_set_debug_enabled(
        self_: *mut GDebugController,
        debug_enabled: gboolean,
    );
}
extern "C" {
    pub fn _frida_g_debug_controller_dbus_get_type() -> GType;
}
pub type GDebugControllerDBus = _GDebugControllerDBus;
pub type GDebugControllerDBusClass = _GDebugControllerDBusClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDebugControllerDBus {
    pub parent_instance: GObject,
}
pub type GDebugControllerDBus_autoptr = *mut GDebugControllerDBus;
pub type GDebugControllerDBus_listautoptr = *mut GList;
pub type GDebugControllerDBus_slistautoptr = *mut GSList;
pub type GDebugControllerDBus_queueautoptr = *mut GQueue;
pub type GDebugControllerDBusClass_autoptr = *mut GDebugControllerDBusClass;
pub type GDebugControllerDBusClass_listautoptr = *mut GList;
pub type GDebugControllerDBusClass_slistautoptr = *mut GSList;
pub type GDebugControllerDBusClass_queueautoptr = *mut GQueue;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDebugControllerDBusClass {
    pub parent_class: GObjectClass,
    pub authorize: ::core::option::Option<
        unsafe extern "C" fn(
            controller: *mut GDebugControllerDBus,
            invocation: *mut GDBusMethodInvocation,
        ) -> gboolean,
    >,
    pub padding: [gpointer; 12usize],
}
extern "C" {
    pub fn _frida_g_debug_controller_dbus_new(
        connection: *mut GDBusConnection,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GDebugControllerDBus;
}
extern "C" {
    pub fn _frida_g_debug_controller_dbus_stop(self_: *mut GDebugControllerDBus);
}
pub type GDriveIface = _GDriveIface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDriveIface {
    pub g_iface: GTypeInterface,
    pub changed: ::core::option::Option<unsafe extern "C" fn(drive: *mut GDrive)>,
    pub disconnected: ::core::option::Option<unsafe extern "C" fn(drive: *mut GDrive)>,
    pub eject_button: ::core::option::Option<unsafe extern "C" fn(drive: *mut GDrive)>,
    pub get_name: ::core::option::Option<
        unsafe extern "C" fn(drive: *mut GDrive) -> *mut ::core::ffi::c_char,
    >,
    pub get_icon: ::core::option::Option<unsafe extern "C" fn(drive: *mut GDrive) -> *mut GIcon>,
    pub has_volumes: ::core::option::Option<unsafe extern "C" fn(drive: *mut GDrive) -> gboolean>,
    pub get_volumes: ::core::option::Option<unsafe extern "C" fn(drive: *mut GDrive) -> *mut GList>,
    pub is_media_removable:
        ::core::option::Option<unsafe extern "C" fn(drive: *mut GDrive) -> gboolean>,
    pub has_media: ::core::option::Option<unsafe extern "C" fn(drive: *mut GDrive) -> gboolean>,
    pub is_media_check_automatic:
        ::core::option::Option<unsafe extern "C" fn(drive: *mut GDrive) -> gboolean>,
    pub can_eject: ::core::option::Option<unsafe extern "C" fn(drive: *mut GDrive) -> gboolean>,
    pub can_poll_for_media:
        ::core::option::Option<unsafe extern "C" fn(drive: *mut GDrive) -> gboolean>,
    pub eject: ::core::option::Option<
        unsafe extern "C" fn(
            drive: *mut GDrive,
            flags: GMountUnmountFlags,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub eject_finish: ::core::option::Option<
        unsafe extern "C" fn(
            drive: *mut GDrive,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub poll_for_media: ::core::option::Option<
        unsafe extern "C" fn(
            drive: *mut GDrive,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub poll_for_media_finish: ::core::option::Option<
        unsafe extern "C" fn(
            drive: *mut GDrive,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub get_identifier: ::core::option::Option<
        unsafe extern "C" fn(
            drive: *mut GDrive,
            kind: *const ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_char,
    >,
    pub enumerate_identifiers: ::core::option::Option<
        unsafe extern "C" fn(drive: *mut GDrive) -> *mut *mut ::core::ffi::c_char,
    >,
    pub get_start_stop_type:
        ::core::option::Option<unsafe extern "C" fn(drive: *mut GDrive) -> GDriveStartStopType>,
    pub can_start: ::core::option::Option<unsafe extern "C" fn(drive: *mut GDrive) -> gboolean>,
    pub can_start_degraded:
        ::core::option::Option<unsafe extern "C" fn(drive: *mut GDrive) -> gboolean>,
    pub start: ::core::option::Option<
        unsafe extern "C" fn(
            drive: *mut GDrive,
            flags: GDriveStartFlags,
            mount_operation: *mut GMountOperation,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub start_finish: ::core::option::Option<
        unsafe extern "C" fn(
            drive: *mut GDrive,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub can_stop: ::core::option::Option<unsafe extern "C" fn(drive: *mut GDrive) -> gboolean>,
    pub stop: ::core::option::Option<
        unsafe extern "C" fn(
            drive: *mut GDrive,
            flags: GMountUnmountFlags,
            mount_operation: *mut GMountOperation,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub stop_finish: ::core::option::Option<
        unsafe extern "C" fn(
            drive: *mut GDrive,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub stop_button: ::core::option::Option<unsafe extern "C" fn(drive: *mut GDrive)>,
    pub eject_with_operation: ::core::option::Option<
        unsafe extern "C" fn(
            drive: *mut GDrive,
            flags: GMountUnmountFlags,
            mount_operation: *mut GMountOperation,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub eject_with_operation_finish: ::core::option::Option<
        unsafe extern "C" fn(
            drive: *mut GDrive,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub get_sort_key:
        ::core::option::Option<unsafe extern "C" fn(drive: *mut GDrive) -> *const gchar>,
    pub get_symbolic_icon:
        ::core::option::Option<unsafe extern "C" fn(drive: *mut GDrive) -> *mut GIcon>,
    pub is_removable: ::core::option::Option<unsafe extern "C" fn(drive: *mut GDrive) -> gboolean>,
}
extern "C" {
    pub fn _frida_g_drive_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_drive_get_name(drive: *mut GDrive) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_drive_get_icon(drive: *mut GDrive) -> *mut GIcon;
}
extern "C" {
    pub fn _frida_g_drive_get_symbolic_icon(drive: *mut GDrive) -> *mut GIcon;
}
extern "C" {
    pub fn _frida_g_drive_has_volumes(drive: *mut GDrive) -> gboolean;
}
extern "C" {
    pub fn _frida_g_drive_get_volumes(drive: *mut GDrive) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_drive_is_removable(drive: *mut GDrive) -> gboolean;
}
extern "C" {
    pub fn _frida_g_drive_is_media_removable(drive: *mut GDrive) -> gboolean;
}
extern "C" {
    pub fn _frida_g_drive_has_media(drive: *mut GDrive) -> gboolean;
}
extern "C" {
    pub fn _frida_g_drive_is_media_check_automatic(drive: *mut GDrive) -> gboolean;
}
extern "C" {
    pub fn _frida_g_drive_can_poll_for_media(drive: *mut GDrive) -> gboolean;
}
extern "C" {
    pub fn _frida_g_drive_can_eject(drive: *mut GDrive) -> gboolean;
}
extern "C" {
    pub fn _frida_g_drive_eject(
        drive: *mut GDrive,
        flags: GMountUnmountFlags,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_drive_eject_finish(
        drive: *mut GDrive,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_drive_poll_for_media(
        drive: *mut GDrive,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_drive_poll_for_media_finish(
        drive: *mut GDrive,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_drive_get_identifier(
        drive: *mut GDrive,
        kind: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_drive_enumerate_identifiers(
        drive: *mut GDrive,
    ) -> *mut *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_drive_get_start_stop_type(drive: *mut GDrive) -> GDriveStartStopType;
}
extern "C" {
    pub fn _frida_g_drive_can_start(drive: *mut GDrive) -> gboolean;
}
extern "C" {
    pub fn _frida_g_drive_can_start_degraded(drive: *mut GDrive) -> gboolean;
}
extern "C" {
    pub fn _frida_g_drive_start(
        drive: *mut GDrive,
        flags: GDriveStartFlags,
        mount_operation: *mut GMountOperation,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_drive_start_finish(
        drive: *mut GDrive,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_drive_can_stop(drive: *mut GDrive) -> gboolean;
}
extern "C" {
    pub fn _frida_g_drive_stop(
        drive: *mut GDrive,
        flags: GMountUnmountFlags,
        mount_operation: *mut GMountOperation,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_drive_stop_finish(
        drive: *mut GDrive,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_drive_eject_with_operation(
        drive: *mut GDrive,
        flags: GMountUnmountFlags,
        mount_operation: *mut GMountOperation,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_drive_eject_with_operation_finish(
        drive: *mut GDrive,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_drive_get_sort_key(drive: *mut GDrive) -> *const gchar;
}
pub type GDtlsConnectionInterface = _GDtlsConnectionInterface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDtlsConnectionInterface {
    pub g_iface: GTypeInterface,
    pub accept_certificate: ::core::option::Option<
        unsafe extern "C" fn(
            connection: *mut GDtlsConnection,
            peer_cert: *mut GTlsCertificate,
            errors: GTlsCertificateFlags,
        ) -> gboolean,
    >,
    pub handshake: ::core::option::Option<
        unsafe extern "C" fn(
            conn: *mut GDtlsConnection,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub handshake_async: ::core::option::Option<
        unsafe extern "C" fn(
            conn: *mut GDtlsConnection,
            io_priority: ::core::ffi::c_int,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub handshake_finish: ::core::option::Option<
        unsafe extern "C" fn(
            conn: *mut GDtlsConnection,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub shutdown: ::core::option::Option<
        unsafe extern "C" fn(
            conn: *mut GDtlsConnection,
            shutdown_read: gboolean,
            shutdown_write: gboolean,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub shutdown_async: ::core::option::Option<
        unsafe extern "C" fn(
            conn: *mut GDtlsConnection,
            shutdown_read: gboolean,
            shutdown_write: gboolean,
            io_priority: ::core::ffi::c_int,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub shutdown_finish: ::core::option::Option<
        unsafe extern "C" fn(
            conn: *mut GDtlsConnection,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub set_advertised_protocols: ::core::option::Option<
        unsafe extern "C" fn(conn: *mut GDtlsConnection, protocols: *const *const gchar),
    >,
    pub get_negotiated_protocol:
        ::core::option::Option<unsafe extern "C" fn(conn: *mut GDtlsConnection) -> *const gchar>,
    pub get_binding_data: ::core::option::Option<
        unsafe extern "C" fn(
            conn: *mut GDtlsConnection,
            type_: GTlsChannelBindingType,
            data: *mut GByteArray,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
}
extern "C" {
    pub fn _frida_g_dtls_connection_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_dtls_connection_set_database(
        conn: *mut GDtlsConnection,
        database: *mut GTlsDatabase,
    );
}
extern "C" {
    pub fn _frida_g_dtls_connection_get_database(conn: *mut GDtlsConnection) -> *mut GTlsDatabase;
}
extern "C" {
    pub fn _frida_g_dtls_connection_set_certificate(
        conn: *mut GDtlsConnection,
        certificate: *mut GTlsCertificate,
    );
}
extern "C" {
    pub fn _frida_g_dtls_connection_get_certificate(
        conn: *mut GDtlsConnection,
    ) -> *mut GTlsCertificate;
}
extern "C" {
    pub fn _frida_g_dtls_connection_set_interaction(
        conn: *mut GDtlsConnection,
        interaction: *mut GTlsInteraction,
    );
}
extern "C" {
    pub fn _frida_g_dtls_connection_get_interaction(
        conn: *mut GDtlsConnection,
    ) -> *mut GTlsInteraction;
}
extern "C" {
    pub fn _frida_g_dtls_connection_get_peer_certificate(
        conn: *mut GDtlsConnection,
    ) -> *mut GTlsCertificate;
}
extern "C" {
    pub fn _frida_g_dtls_connection_get_peer_certificate_errors(
        conn: *mut GDtlsConnection,
    ) -> GTlsCertificateFlags;
}
extern "C" {
    pub fn _frida_g_dtls_connection_set_require_close_notify(
        conn: *mut GDtlsConnection,
        require_close_notify: gboolean,
    );
}
extern "C" {
    pub fn _frida_g_dtls_connection_get_require_close_notify(
        conn: *mut GDtlsConnection,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_dtls_connection_set_rehandshake_mode(
        conn: *mut GDtlsConnection,
        mode: GTlsRehandshakeMode,
    );
}
extern "C" {
    pub fn _frida_g_dtls_connection_get_rehandshake_mode(
        conn: *mut GDtlsConnection,
    ) -> GTlsRehandshakeMode;
}
extern "C" {
    pub fn _frida_g_dtls_connection_handshake(
        conn: *mut GDtlsConnection,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_dtls_connection_handshake_async(
        conn: *mut GDtlsConnection,
        io_priority: ::core::ffi::c_int,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_dtls_connection_handshake_finish(
        conn: *mut GDtlsConnection,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_dtls_connection_shutdown(
        conn: *mut GDtlsConnection,
        shutdown_read: gboolean,
        shutdown_write: gboolean,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_dtls_connection_shutdown_async(
        conn: *mut GDtlsConnection,
        shutdown_read: gboolean,
        shutdown_write: gboolean,
        io_priority: ::core::ffi::c_int,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_dtls_connection_shutdown_finish(
        conn: *mut GDtlsConnection,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_dtls_connection_close(
        conn: *mut GDtlsConnection,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_dtls_connection_close_async(
        conn: *mut GDtlsConnection,
        io_priority: ::core::ffi::c_int,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_dtls_connection_close_finish(
        conn: *mut GDtlsConnection,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_dtls_connection_emit_accept_certificate(
        conn: *mut GDtlsConnection,
        peer_cert: *mut GTlsCertificate,
        errors: GTlsCertificateFlags,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_dtls_connection_set_advertised_protocols(
        conn: *mut GDtlsConnection,
        protocols: *const *const gchar,
    );
}
extern "C" {
    pub fn _frida_g_dtls_connection_get_negotiated_protocol(
        conn: *mut GDtlsConnection,
    ) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_dtls_connection_get_channel_binding_data(
        conn: *mut GDtlsConnection,
        type_: GTlsChannelBindingType,
        data: *mut GByteArray,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_dtls_connection_get_protocol_version(
        conn: *mut GDtlsConnection,
    ) -> GTlsProtocolVersion;
}
extern "C" {
    pub fn _frida_g_dtls_connection_get_ciphersuite_name(conn: *mut GDtlsConnection) -> *mut gchar;
}
pub type GDtlsClientConnectionInterface = _GDtlsClientConnectionInterface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDtlsClientConnectionInterface {
    pub g_iface: GTypeInterface,
}
extern "C" {
    pub fn _frida_g_dtls_client_connection_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_dtls_client_connection_new(
        base_socket: *mut GDatagramBased,
        server_identity: *mut GSocketConnectable,
        error: *mut *mut GError,
    ) -> *mut GDatagramBased;
}
extern "C" {
    pub fn _frida_g_dtls_client_connection_get_validation_flags(
        conn: *mut GDtlsClientConnection,
    ) -> GTlsCertificateFlags;
}
extern "C" {
    pub fn _frida_g_dtls_client_connection_set_validation_flags(
        conn: *mut GDtlsClientConnection,
        flags: GTlsCertificateFlags,
    );
}
extern "C" {
    pub fn _frida_g_dtls_client_connection_get_server_identity(
        conn: *mut GDtlsClientConnection,
    ) -> *mut GSocketConnectable;
}
extern "C" {
    pub fn _frida_g_dtls_client_connection_set_server_identity(
        conn: *mut GDtlsClientConnection,
        identity: *mut GSocketConnectable,
    );
}
extern "C" {
    pub fn _frida_g_dtls_client_connection_get_accepted_cas(
        conn: *mut GDtlsClientConnection,
    ) -> *mut GList;
}
pub type GDtlsServerConnectionInterface = _GDtlsServerConnectionInterface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDtlsServerConnectionInterface {
    pub g_iface: GTypeInterface,
}
extern "C" {
    pub fn _frida_g_dtls_server_connection_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_dtls_server_connection_new(
        base_socket: *mut GDatagramBased,
        certificate: *mut GTlsCertificate,
        error: *mut *mut GError,
    ) -> *mut GDatagramBased;
}
pub type GIconIface = _GIconIface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GIconIface {
    pub g_iface: GTypeInterface,
    pub hash: ::core::option::Option<unsafe extern "C" fn(icon: *mut GIcon) -> guint>,
    pub equal: ::core::option::Option<
        unsafe extern "C" fn(icon1: *mut GIcon, icon2: *mut GIcon) -> gboolean,
    >,
    pub to_tokens: ::core::option::Option<
        unsafe extern "C" fn(
            icon: *mut GIcon,
            tokens: *mut GPtrArray,
            out_version: *mut gint,
        ) -> gboolean,
    >,
    pub from_tokens: ::core::option::Option<
        unsafe extern "C" fn(
            tokens: *mut *mut gchar,
            num_tokens: gint,
            version: gint,
            error: *mut *mut GError,
        ) -> *mut GIcon,
    >,
    pub serialize: ::core::option::Option<unsafe extern "C" fn(icon: *mut GIcon) -> *mut GVariant>,
}
extern "C" {
    pub fn _frida_g_icon_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_icon_hash(icon: gconstpointer) -> guint;
}
extern "C" {
    pub fn _frida_g_icon_equal(icon1: *mut GIcon, icon2: *mut GIcon) -> gboolean;
}
extern "C" {
    pub fn _frida_g_icon_to_string(icon: *mut GIcon) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_icon_new_for_string(str_: *const gchar, error: *mut *mut GError) -> *mut GIcon;
}
extern "C" {
    pub fn _frida_g_icon_serialize(icon: *mut GIcon) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_icon_deserialize(value: *mut GVariant) -> *mut GIcon;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GEmblem {
    _unused: [u8; 0],
}
pub type GEmblem = _GEmblem;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GEmblemClass {
    _unused: [u8; 0],
}
pub type GEmblemClass = _GEmblemClass;
extern "C" {
    pub fn _frida_g_emblem_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_emblem_new(icon: *mut GIcon) -> *mut GEmblem;
}
extern "C" {
    pub fn _frida_g_emblem_new_with_origin(icon: *mut GIcon, origin: GEmblemOrigin)
        -> *mut GEmblem;
}
extern "C" {
    pub fn _frida_g_emblem_get_icon(emblem: *mut GEmblem) -> *mut GIcon;
}
extern "C" {
    pub fn _frida_g_emblem_get_origin(emblem: *mut GEmblem) -> GEmblemOrigin;
}
pub type GEmblemedIcon = _GEmblemedIcon;
pub type GEmblemedIconClass = _GEmblemedIconClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GEmblemedIconPrivate {
    _unused: [u8; 0],
}
pub type GEmblemedIconPrivate = _GEmblemedIconPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GEmblemedIcon {
    pub parent_instance: GObject,
    pub priv_: *mut GEmblemedIconPrivate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GEmblemedIconClass {
    pub parent_class: GObjectClass,
}
extern "C" {
    pub fn _frida_g_emblemed_icon_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_emblemed_icon_new(icon: *mut GIcon, emblem: *mut GEmblem) -> *mut GIcon;
}
extern "C" {
    pub fn _frida_g_emblemed_icon_get_icon(emblemed: *mut GEmblemedIcon) -> *mut GIcon;
}
extern "C" {
    pub fn _frida_g_emblemed_icon_get_emblems(emblemed: *mut GEmblemedIcon) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_emblemed_icon_add_emblem(emblemed: *mut GEmblemedIcon, emblem: *mut GEmblem);
}
extern "C" {
    pub fn _frida_g_emblemed_icon_clear_emblems(emblemed: *mut GEmblemedIcon);
}
pub type GFileIface = _GFileIface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GFileIface {
    pub g_iface: GTypeInterface,
    pub dup: ::core::option::Option<unsafe extern "C" fn(file: *mut GFile) -> *mut GFile>,
    pub hash: ::core::option::Option<unsafe extern "C" fn(file: *mut GFile) -> guint>,
    pub equal: ::core::option::Option<
        unsafe extern "C" fn(file1: *mut GFile, file2: *mut GFile) -> gboolean,
    >,
    pub is_native: ::core::option::Option<unsafe extern "C" fn(file: *mut GFile) -> gboolean>,
    pub has_uri_scheme: ::core::option::Option<
        unsafe extern "C" fn(file: *mut GFile, uri_scheme: *const ::core::ffi::c_char) -> gboolean,
    >,
    pub get_uri_scheme:
        ::core::option::Option<unsafe extern "C" fn(file: *mut GFile) -> *mut ::core::ffi::c_char>,
    pub get_basename:
        ::core::option::Option<unsafe extern "C" fn(file: *mut GFile) -> *mut ::core::ffi::c_char>,
    pub get_path:
        ::core::option::Option<unsafe extern "C" fn(file: *mut GFile) -> *mut ::core::ffi::c_char>,
    pub get_uri:
        ::core::option::Option<unsafe extern "C" fn(file: *mut GFile) -> *mut ::core::ffi::c_char>,
    pub get_parse_name:
        ::core::option::Option<unsafe extern "C" fn(file: *mut GFile) -> *mut ::core::ffi::c_char>,
    pub get_parent: ::core::option::Option<unsafe extern "C" fn(file: *mut GFile) -> *mut GFile>,
    pub prefix_matches: ::core::option::Option<
        unsafe extern "C" fn(prefix: *mut GFile, file: *mut GFile) -> gboolean,
    >,
    pub get_relative_path: ::core::option::Option<
        unsafe extern "C" fn(
            parent: *mut GFile,
            descendant: *mut GFile,
        ) -> *mut ::core::ffi::c_char,
    >,
    pub resolve_relative_path: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            relative_path: *const ::core::ffi::c_char,
        ) -> *mut GFile,
    >,
    pub get_child_for_display_name: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            display_name: *const ::core::ffi::c_char,
            error: *mut *mut GError,
        ) -> *mut GFile,
    >,
    pub enumerate_children: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            attributes: *const ::core::ffi::c_char,
            flags: GFileQueryInfoFlags,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> *mut GFileEnumerator,
    >,
    pub enumerate_children_async: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            attributes: *const ::core::ffi::c_char,
            flags: GFileQueryInfoFlags,
            io_priority: ::core::ffi::c_int,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub enumerate_children_finish: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            res: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> *mut GFileEnumerator,
    >,
    pub query_info: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            attributes: *const ::core::ffi::c_char,
            flags: GFileQueryInfoFlags,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> *mut GFileInfo,
    >,
    pub query_info_async: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            attributes: *const ::core::ffi::c_char,
            flags: GFileQueryInfoFlags,
            io_priority: ::core::ffi::c_int,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub query_info_finish: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            res: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> *mut GFileInfo,
    >,
    pub query_filesystem_info: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            attributes: *const ::core::ffi::c_char,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> *mut GFileInfo,
    >,
    pub query_filesystem_info_async: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            attributes: *const ::core::ffi::c_char,
            io_priority: ::core::ffi::c_int,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub query_filesystem_info_finish: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            res: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> *mut GFileInfo,
    >,
    pub find_enclosing_mount: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> *mut GMount,
    >,
    pub find_enclosing_mount_async: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            io_priority: ::core::ffi::c_int,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub find_enclosing_mount_finish: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            res: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> *mut GMount,
    >,
    pub set_display_name: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            display_name: *const ::core::ffi::c_char,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> *mut GFile,
    >,
    pub set_display_name_async: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            display_name: *const ::core::ffi::c_char,
            io_priority: ::core::ffi::c_int,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub set_display_name_finish: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            res: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> *mut GFile,
    >,
    pub query_settable_attributes: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> *mut GFileAttributeInfoList,
    >,
    pub _query_settable_attributes_async: ::core::option::Option<unsafe extern "C" fn()>,
    pub _query_settable_attributes_finish: ::core::option::Option<unsafe extern "C" fn()>,
    pub query_writable_namespaces: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> *mut GFileAttributeInfoList,
    >,
    pub _query_writable_namespaces_async: ::core::option::Option<unsafe extern "C" fn()>,
    pub _query_writable_namespaces_finish: ::core::option::Option<unsafe extern "C" fn()>,
    pub set_attribute: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            attribute: *const ::core::ffi::c_char,
            type_: GFileAttributeType,
            value_p: gpointer,
            flags: GFileQueryInfoFlags,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub set_attributes_from_info: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            info: *mut GFileInfo,
            flags: GFileQueryInfoFlags,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub set_attributes_async: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            info: *mut GFileInfo,
            flags: GFileQueryInfoFlags,
            io_priority: ::core::ffi::c_int,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub set_attributes_finish: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            result: *mut GAsyncResult,
            info: *mut *mut GFileInfo,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub read_fn: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> *mut GFileInputStream,
    >,
    pub read_async: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            io_priority: ::core::ffi::c_int,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub read_finish: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            res: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> *mut GFileInputStream,
    >,
    pub append_to: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            flags: GFileCreateFlags,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> *mut GFileOutputStream,
    >,
    pub append_to_async: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            flags: GFileCreateFlags,
            io_priority: ::core::ffi::c_int,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub append_to_finish: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            res: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> *mut GFileOutputStream,
    >,
    pub create: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            flags: GFileCreateFlags,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> *mut GFileOutputStream,
    >,
    pub create_async: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            flags: GFileCreateFlags,
            io_priority: ::core::ffi::c_int,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub create_finish: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            res: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> *mut GFileOutputStream,
    >,
    pub replace: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            etag: *const ::core::ffi::c_char,
            make_backup: gboolean,
            flags: GFileCreateFlags,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> *mut GFileOutputStream,
    >,
    pub replace_async: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            etag: *const ::core::ffi::c_char,
            make_backup: gboolean,
            flags: GFileCreateFlags,
            io_priority: ::core::ffi::c_int,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub replace_finish: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            res: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> *mut GFileOutputStream,
    >,
    pub delete_file: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub delete_file_async: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            io_priority: ::core::ffi::c_int,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub delete_file_finish: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub trash: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub trash_async: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            io_priority: ::core::ffi::c_int,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub trash_finish: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub make_directory: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub make_directory_async: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            io_priority: ::core::ffi::c_int,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub make_directory_finish: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub make_symbolic_link: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            symlink_value: *const ::core::ffi::c_char,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub make_symbolic_link_async: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            symlink_value: *const ::core::ffi::c_char,
            io_priority: ::core::ffi::c_int,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub make_symbolic_link_finish: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub copy: ::core::option::Option<
        unsafe extern "C" fn(
            source: *mut GFile,
            destination: *mut GFile,
            flags: GFileCopyFlags,
            cancellable: *mut GCancellable,
            progress_callback: GFileProgressCallback,
            progress_callback_data: gpointer,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub copy_async: ::core::option::Option<
        unsafe extern "C" fn(
            source: *mut GFile,
            destination: *mut GFile,
            flags: GFileCopyFlags,
            io_priority: ::core::ffi::c_int,
            cancellable: *mut GCancellable,
            progress_callback: GFileProgressCallback,
            progress_callback_data: gpointer,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub copy_finish: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            res: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub move_: ::core::option::Option<
        unsafe extern "C" fn(
            source: *mut GFile,
            destination: *mut GFile,
            flags: GFileCopyFlags,
            cancellable: *mut GCancellable,
            progress_callback: GFileProgressCallback,
            progress_callback_data: gpointer,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub move_async: ::core::option::Option<
        unsafe extern "C" fn(
            source: *mut GFile,
            destination: *mut GFile,
            flags: GFileCopyFlags,
            io_priority: ::core::ffi::c_int,
            cancellable: *mut GCancellable,
            progress_callback: GFileProgressCallback,
            progress_callback_data: gpointer,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub move_finish: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub mount_mountable: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            flags: GMountMountFlags,
            mount_operation: *mut GMountOperation,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub mount_mountable_finish: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> *mut GFile,
    >,
    pub unmount_mountable: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            flags: GMountUnmountFlags,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub unmount_mountable_finish: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub eject_mountable: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            flags: GMountUnmountFlags,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub eject_mountable_finish: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub mount_enclosing_volume: ::core::option::Option<
        unsafe extern "C" fn(
            location: *mut GFile,
            flags: GMountMountFlags,
            mount_operation: *mut GMountOperation,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub mount_enclosing_volume_finish: ::core::option::Option<
        unsafe extern "C" fn(
            location: *mut GFile,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub monitor_dir: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            flags: GFileMonitorFlags,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> *mut GFileMonitor,
    >,
    pub monitor_file: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            flags: GFileMonitorFlags,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> *mut GFileMonitor,
    >,
    pub open_readwrite: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> *mut GFileIOStream,
    >,
    pub open_readwrite_async: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            io_priority: ::core::ffi::c_int,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub open_readwrite_finish: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            res: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> *mut GFileIOStream,
    >,
    pub create_readwrite: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            flags: GFileCreateFlags,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> *mut GFileIOStream,
    >,
    pub create_readwrite_async: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            flags: GFileCreateFlags,
            io_priority: ::core::ffi::c_int,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub create_readwrite_finish: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            res: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> *mut GFileIOStream,
    >,
    pub replace_readwrite: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            etag: *const ::core::ffi::c_char,
            make_backup: gboolean,
            flags: GFileCreateFlags,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> *mut GFileIOStream,
    >,
    pub replace_readwrite_async: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            etag: *const ::core::ffi::c_char,
            make_backup: gboolean,
            flags: GFileCreateFlags,
            io_priority: ::core::ffi::c_int,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub replace_readwrite_finish: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            res: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> *mut GFileIOStream,
    >,
    pub start_mountable: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            flags: GDriveStartFlags,
            start_operation: *mut GMountOperation,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub start_mountable_finish: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub stop_mountable: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            flags: GMountUnmountFlags,
            mount_operation: *mut GMountOperation,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub stop_mountable_finish: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub supports_thread_contexts: gboolean,
    pub unmount_mountable_with_operation: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            flags: GMountUnmountFlags,
            mount_operation: *mut GMountOperation,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub unmount_mountable_with_operation_finish: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub eject_mountable_with_operation: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            flags: GMountUnmountFlags,
            mount_operation: *mut GMountOperation,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub eject_mountable_with_operation_finish: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub poll_mountable: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub poll_mountable_finish: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub measure_disk_usage: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            flags: GFileMeasureFlags,
            cancellable: *mut GCancellable,
            progress_callback: GFileMeasureProgressCallback,
            progress_data: gpointer,
            disk_usage: *mut guint64,
            num_dirs: *mut guint64,
            num_files: *mut guint64,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub measure_disk_usage_async: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            flags: GFileMeasureFlags,
            io_priority: gint,
            cancellable: *mut GCancellable,
            progress_callback: GFileMeasureProgressCallback,
            progress_data: gpointer,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub measure_disk_usage_finish: ::core::option::Option<
        unsafe extern "C" fn(
            file: *mut GFile,
            result: *mut GAsyncResult,
            disk_usage: *mut guint64,
            num_dirs: *mut guint64,
            num_files: *mut guint64,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
}
extern "C" {
    pub fn _frida_g_file_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_file_new_for_path(path: *const ::core::ffi::c_char) -> *mut GFile;
}
extern "C" {
    pub fn _frida_g_file_new_for_uri(uri: *const ::core::ffi::c_char) -> *mut GFile;
}
extern "C" {
    pub fn _frida_g_file_new_for_commandline_arg(arg: *const ::core::ffi::c_char) -> *mut GFile;
}
extern "C" {
    pub fn _frida_g_file_new_for_commandline_arg_and_cwd(
        arg: *const gchar,
        cwd: *const gchar,
    ) -> *mut GFile;
}
extern "C" {
    pub fn _frida_g_file_new_tmp(
        tmpl: *const ::core::ffi::c_char,
        iostream: *mut *mut GFileIOStream,
        error: *mut *mut GError,
    ) -> *mut GFile;
}
extern "C" {
    pub fn _frida_g_file_new_tmp_async(
        tmpl: *const ::core::ffi::c_char,
        io_priority: ::core::ffi::c_int,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_file_new_tmp_finish(
        result: *mut GAsyncResult,
        iostream: *mut *mut GFileIOStream,
        error: *mut *mut GError,
    ) -> *mut GFile;
}
extern "C" {
    pub fn _frida_g_file_new_tmp_dir_async(
        tmpl: *const ::core::ffi::c_char,
        io_priority: ::core::ffi::c_int,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_file_new_tmp_dir_finish(
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GFile;
}
extern "C" {
    pub fn _frida_g_file_parse_name(parse_name: *const ::core::ffi::c_char) -> *mut GFile;
}
extern "C" {
    pub fn _frida_g_file_new_build_filename(first_element: *const gchar, ...) -> *mut GFile;
}
extern "C" {
    pub fn _frida_g_file_dup(file: *mut GFile) -> *mut GFile;
}
extern "C" {
    pub fn _frida_g_file_hash(file: gconstpointer) -> guint;
}
extern "C" {
    pub fn _frida_g_file_equal(file1: *mut GFile, file2: *mut GFile) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_get_basename(file: *mut GFile) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_file_get_path(file: *mut GFile) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_file_peek_path(file: *mut GFile) -> *const ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_file_get_uri(file: *mut GFile) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_file_get_parse_name(file: *mut GFile) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_file_get_parent(file: *mut GFile) -> *mut GFile;
}
extern "C" {
    pub fn _frida_g_file_has_parent(file: *mut GFile, parent: *mut GFile) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_get_child(
        file: *mut GFile,
        name: *const ::core::ffi::c_char,
    ) -> *mut GFile;
}
extern "C" {
    pub fn _frida_g_file_get_child_for_display_name(
        file: *mut GFile,
        display_name: *const ::core::ffi::c_char,
        error: *mut *mut GError,
    ) -> *mut GFile;
}
extern "C" {
    pub fn _frida_g_file_has_prefix(file: *mut GFile, prefix: *mut GFile) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_get_relative_path(
        parent: *mut GFile,
        descendant: *mut GFile,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_file_resolve_relative_path(
        file: *mut GFile,
        relative_path: *const ::core::ffi::c_char,
    ) -> *mut GFile;
}
extern "C" {
    pub fn _frida_g_file_is_native(file: *mut GFile) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_has_uri_scheme(
        file: *mut GFile,
        uri_scheme: *const ::core::ffi::c_char,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_get_uri_scheme(file: *mut GFile) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_file_read(
        file: *mut GFile,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GFileInputStream;
}
extern "C" {
    pub fn _frida_g_file_read_async(
        file: *mut GFile,
        io_priority: ::core::ffi::c_int,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_file_read_finish(
        file: *mut GFile,
        res: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GFileInputStream;
}
extern "C" {
    pub fn _frida_g_file_append_to(
        file: *mut GFile,
        flags: GFileCreateFlags,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GFileOutputStream;
}
extern "C" {
    pub fn _frida_g_file_create(
        file: *mut GFile,
        flags: GFileCreateFlags,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GFileOutputStream;
}
extern "C" {
    pub fn _frida_g_file_replace(
        file: *mut GFile,
        etag: *const ::core::ffi::c_char,
        make_backup: gboolean,
        flags: GFileCreateFlags,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GFileOutputStream;
}
extern "C" {
    pub fn _frida_g_file_append_to_async(
        file: *mut GFile,
        flags: GFileCreateFlags,
        io_priority: ::core::ffi::c_int,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_file_append_to_finish(
        file: *mut GFile,
        res: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GFileOutputStream;
}
extern "C" {
    pub fn _frida_g_file_create_async(
        file: *mut GFile,
        flags: GFileCreateFlags,
        io_priority: ::core::ffi::c_int,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_file_create_finish(
        file: *mut GFile,
        res: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GFileOutputStream;
}
extern "C" {
    pub fn _frida_g_file_replace_async(
        file: *mut GFile,
        etag: *const ::core::ffi::c_char,
        make_backup: gboolean,
        flags: GFileCreateFlags,
        io_priority: ::core::ffi::c_int,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_file_replace_finish(
        file: *mut GFile,
        res: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GFileOutputStream;
}
extern "C" {
    pub fn _frida_g_file_open_readwrite(
        file: *mut GFile,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GFileIOStream;
}
extern "C" {
    pub fn _frida_g_file_open_readwrite_async(
        file: *mut GFile,
        io_priority: ::core::ffi::c_int,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_file_open_readwrite_finish(
        file: *mut GFile,
        res: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GFileIOStream;
}
extern "C" {
    pub fn _frida_g_file_create_readwrite(
        file: *mut GFile,
        flags: GFileCreateFlags,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GFileIOStream;
}
extern "C" {
    pub fn _frida_g_file_create_readwrite_async(
        file: *mut GFile,
        flags: GFileCreateFlags,
        io_priority: ::core::ffi::c_int,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_file_create_readwrite_finish(
        file: *mut GFile,
        res: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GFileIOStream;
}
extern "C" {
    pub fn _frida_g_file_replace_readwrite(
        file: *mut GFile,
        etag: *const ::core::ffi::c_char,
        make_backup: gboolean,
        flags: GFileCreateFlags,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GFileIOStream;
}
extern "C" {
    pub fn _frida_g_file_replace_readwrite_async(
        file: *mut GFile,
        etag: *const ::core::ffi::c_char,
        make_backup: gboolean,
        flags: GFileCreateFlags,
        io_priority: ::core::ffi::c_int,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_file_replace_readwrite_finish(
        file: *mut GFile,
        res: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GFileIOStream;
}
extern "C" {
    pub fn _frida_g_file_query_exists(file: *mut GFile, cancellable: *mut GCancellable)
        -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_query_file_type(
        file: *mut GFile,
        flags: GFileQueryInfoFlags,
        cancellable: *mut GCancellable,
    ) -> GFileType;
}
extern "C" {
    pub fn _frida_g_file_query_info(
        file: *mut GFile,
        attributes: *const ::core::ffi::c_char,
        flags: GFileQueryInfoFlags,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GFileInfo;
}
extern "C" {
    pub fn _frida_g_file_query_info_async(
        file: *mut GFile,
        attributes: *const ::core::ffi::c_char,
        flags: GFileQueryInfoFlags,
        io_priority: ::core::ffi::c_int,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_file_query_info_finish(
        file: *mut GFile,
        res: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GFileInfo;
}
extern "C" {
    pub fn _frida_g_file_query_filesystem_info(
        file: *mut GFile,
        attributes: *const ::core::ffi::c_char,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GFileInfo;
}
extern "C" {
    pub fn _frida_g_file_query_filesystem_info_async(
        file: *mut GFile,
        attributes: *const ::core::ffi::c_char,
        io_priority: ::core::ffi::c_int,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_file_query_filesystem_info_finish(
        file: *mut GFile,
        res: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GFileInfo;
}
extern "C" {
    pub fn _frida_g_file_find_enclosing_mount(
        file: *mut GFile,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GMount;
}
extern "C" {
    pub fn _frida_g_file_find_enclosing_mount_async(
        file: *mut GFile,
        io_priority: ::core::ffi::c_int,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_file_find_enclosing_mount_finish(
        file: *mut GFile,
        res: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GMount;
}
extern "C" {
    pub fn _frida_g_file_enumerate_children(
        file: *mut GFile,
        attributes: *const ::core::ffi::c_char,
        flags: GFileQueryInfoFlags,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GFileEnumerator;
}
extern "C" {
    pub fn _frida_g_file_enumerate_children_async(
        file: *mut GFile,
        attributes: *const ::core::ffi::c_char,
        flags: GFileQueryInfoFlags,
        io_priority: ::core::ffi::c_int,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_file_enumerate_children_finish(
        file: *mut GFile,
        res: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GFileEnumerator;
}
extern "C" {
    pub fn _frida_g_file_set_display_name(
        file: *mut GFile,
        display_name: *const ::core::ffi::c_char,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GFile;
}
extern "C" {
    pub fn _frida_g_file_set_display_name_async(
        file: *mut GFile,
        display_name: *const ::core::ffi::c_char,
        io_priority: ::core::ffi::c_int,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_file_set_display_name_finish(
        file: *mut GFile,
        res: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GFile;
}
extern "C" {
    pub fn _frida_g_file_delete(
        file: *mut GFile,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_delete_async(
        file: *mut GFile,
        io_priority: ::core::ffi::c_int,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_file_delete_finish(
        file: *mut GFile,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_trash(
        file: *mut GFile,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_trash_async(
        file: *mut GFile,
        io_priority: ::core::ffi::c_int,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_file_trash_finish(
        file: *mut GFile,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_copy(
        source: *mut GFile,
        destination: *mut GFile,
        flags: GFileCopyFlags,
        cancellable: *mut GCancellable,
        progress_callback: GFileProgressCallback,
        progress_callback_data: gpointer,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_copy_async(
        source: *mut GFile,
        destination: *mut GFile,
        flags: GFileCopyFlags,
        io_priority: ::core::ffi::c_int,
        cancellable: *mut GCancellable,
        progress_callback: GFileProgressCallback,
        progress_callback_data: gpointer,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_file_copy_finish(
        file: *mut GFile,
        res: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_move(
        source: *mut GFile,
        destination: *mut GFile,
        flags: GFileCopyFlags,
        cancellable: *mut GCancellable,
        progress_callback: GFileProgressCallback,
        progress_callback_data: gpointer,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_move_async(
        source: *mut GFile,
        destination: *mut GFile,
        flags: GFileCopyFlags,
        io_priority: ::core::ffi::c_int,
        cancellable: *mut GCancellable,
        progress_callback: GFileProgressCallback,
        progress_callback_data: gpointer,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_file_move_finish(
        file: *mut GFile,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_make_directory(
        file: *mut GFile,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_make_directory_async(
        file: *mut GFile,
        io_priority: ::core::ffi::c_int,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_file_make_directory_finish(
        file: *mut GFile,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_make_directory_with_parents(
        file: *mut GFile,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_make_symbolic_link(
        file: *mut GFile,
        symlink_value: *const ::core::ffi::c_char,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_make_symbolic_link_async(
        file: *mut GFile,
        symlink_value: *const ::core::ffi::c_char,
        io_priority: ::core::ffi::c_int,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_file_make_symbolic_link_finish(
        file: *mut GFile,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_query_settable_attributes(
        file: *mut GFile,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GFileAttributeInfoList;
}
extern "C" {
    pub fn _frida_g_file_query_writable_namespaces(
        file: *mut GFile,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GFileAttributeInfoList;
}
extern "C" {
    pub fn _frida_g_file_set_attribute(
        file: *mut GFile,
        attribute: *const ::core::ffi::c_char,
        type_: GFileAttributeType,
        value_p: gpointer,
        flags: GFileQueryInfoFlags,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_set_attributes_from_info(
        file: *mut GFile,
        info: *mut GFileInfo,
        flags: GFileQueryInfoFlags,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_set_attributes_async(
        file: *mut GFile,
        info: *mut GFileInfo,
        flags: GFileQueryInfoFlags,
        io_priority: ::core::ffi::c_int,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_file_set_attributes_finish(
        file: *mut GFile,
        result: *mut GAsyncResult,
        info: *mut *mut GFileInfo,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_set_attribute_string(
        file: *mut GFile,
        attribute: *const ::core::ffi::c_char,
        value: *const ::core::ffi::c_char,
        flags: GFileQueryInfoFlags,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_set_attribute_byte_string(
        file: *mut GFile,
        attribute: *const ::core::ffi::c_char,
        value: *const ::core::ffi::c_char,
        flags: GFileQueryInfoFlags,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_set_attribute_uint32(
        file: *mut GFile,
        attribute: *const ::core::ffi::c_char,
        value: guint32,
        flags: GFileQueryInfoFlags,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_set_attribute_int32(
        file: *mut GFile,
        attribute: *const ::core::ffi::c_char,
        value: gint32,
        flags: GFileQueryInfoFlags,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_set_attribute_uint64(
        file: *mut GFile,
        attribute: *const ::core::ffi::c_char,
        value: guint64,
        flags: GFileQueryInfoFlags,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_set_attribute_int64(
        file: *mut GFile,
        attribute: *const ::core::ffi::c_char,
        value: gint64,
        flags: GFileQueryInfoFlags,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_mount_enclosing_volume(
        location: *mut GFile,
        flags: GMountMountFlags,
        mount_operation: *mut GMountOperation,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_file_mount_enclosing_volume_finish(
        location: *mut GFile,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_mount_mountable(
        file: *mut GFile,
        flags: GMountMountFlags,
        mount_operation: *mut GMountOperation,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_file_mount_mountable_finish(
        file: *mut GFile,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GFile;
}
extern "C" {
    pub fn _frida_g_file_unmount_mountable(
        file: *mut GFile,
        flags: GMountUnmountFlags,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_file_unmount_mountable_finish(
        file: *mut GFile,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_unmount_mountable_with_operation(
        file: *mut GFile,
        flags: GMountUnmountFlags,
        mount_operation: *mut GMountOperation,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_file_unmount_mountable_with_operation_finish(
        file: *mut GFile,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_eject_mountable(
        file: *mut GFile,
        flags: GMountUnmountFlags,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_file_eject_mountable_finish(
        file: *mut GFile,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_eject_mountable_with_operation(
        file: *mut GFile,
        flags: GMountUnmountFlags,
        mount_operation: *mut GMountOperation,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_file_eject_mountable_with_operation_finish(
        file: *mut GFile,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_build_attribute_list_for_copy(
        file: *mut GFile,
        flags: GFileCopyFlags,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_file_copy_attributes(
        source: *mut GFile,
        destination: *mut GFile,
        flags: GFileCopyFlags,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_monitor_directory(
        file: *mut GFile,
        flags: GFileMonitorFlags,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GFileMonitor;
}
extern "C" {
    pub fn _frida_g_file_monitor_file(
        file: *mut GFile,
        flags: GFileMonitorFlags,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GFileMonitor;
}
extern "C" {
    pub fn _frida_g_file_monitor(
        file: *mut GFile,
        flags: GFileMonitorFlags,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GFileMonitor;
}
extern "C" {
    pub fn _frida_g_file_measure_disk_usage(
        file: *mut GFile,
        flags: GFileMeasureFlags,
        cancellable: *mut GCancellable,
        progress_callback: GFileMeasureProgressCallback,
        progress_data: gpointer,
        disk_usage: *mut guint64,
        num_dirs: *mut guint64,
        num_files: *mut guint64,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_measure_disk_usage_async(
        file: *mut GFile,
        flags: GFileMeasureFlags,
        io_priority: gint,
        cancellable: *mut GCancellable,
        progress_callback: GFileMeasureProgressCallback,
        progress_data: gpointer,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_file_measure_disk_usage_finish(
        file: *mut GFile,
        result: *mut GAsyncResult,
        disk_usage: *mut guint64,
        num_dirs: *mut guint64,
        num_files: *mut guint64,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_start_mountable(
        file: *mut GFile,
        flags: GDriveStartFlags,
        start_operation: *mut GMountOperation,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_file_start_mountable_finish(
        file: *mut GFile,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_stop_mountable(
        file: *mut GFile,
        flags: GMountUnmountFlags,
        mount_operation: *mut GMountOperation,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_file_stop_mountable_finish(
        file: *mut GFile,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_poll_mountable(
        file: *mut GFile,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_file_poll_mountable_finish(
        file: *mut GFile,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_query_default_handler(
        file: *mut GFile,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GAppInfo;
}
extern "C" {
    pub fn _frida_g_file_query_default_handler_async(
        file: *mut GFile,
        io_priority: ::core::ffi::c_int,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_file_query_default_handler_finish(
        file: *mut GFile,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GAppInfo;
}
extern "C" {
    pub fn _frida_g_file_load_contents(
        file: *mut GFile,
        cancellable: *mut GCancellable,
        contents: *mut *mut ::core::ffi::c_char,
        length: *mut gsize,
        etag_out: *mut *mut ::core::ffi::c_char,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_load_contents_async(
        file: *mut GFile,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_file_load_contents_finish(
        file: *mut GFile,
        res: *mut GAsyncResult,
        contents: *mut *mut ::core::ffi::c_char,
        length: *mut gsize,
        etag_out: *mut *mut ::core::ffi::c_char,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_load_partial_contents_async(
        file: *mut GFile,
        cancellable: *mut GCancellable,
        read_more_callback: GFileReadMoreCallback,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_file_load_partial_contents_finish(
        file: *mut GFile,
        res: *mut GAsyncResult,
        contents: *mut *mut ::core::ffi::c_char,
        length: *mut gsize,
        etag_out: *mut *mut ::core::ffi::c_char,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_replace_contents(
        file: *mut GFile,
        contents: *const ::core::ffi::c_char,
        length: gsize,
        etag: *const ::core::ffi::c_char,
        make_backup: gboolean,
        flags: GFileCreateFlags,
        new_etag: *mut *mut ::core::ffi::c_char,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_replace_contents_async(
        file: *mut GFile,
        contents: *const ::core::ffi::c_char,
        length: gsize,
        etag: *const ::core::ffi::c_char,
        make_backup: gboolean,
        flags: GFileCreateFlags,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_file_replace_contents_bytes_async(
        file: *mut GFile,
        contents: *mut GBytes,
        etag: *const ::core::ffi::c_char,
        make_backup: gboolean,
        flags: GFileCreateFlags,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_file_replace_contents_finish(
        file: *mut GFile,
        res: *mut GAsyncResult,
        new_etag: *mut *mut ::core::ffi::c_char,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_supports_thread_contexts(file: *mut GFile) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_load_bytes(
        file: *mut GFile,
        cancellable: *mut GCancellable,
        etag_out: *mut *mut gchar,
        error: *mut *mut GError,
    ) -> *mut GBytes;
}
extern "C" {
    pub fn _frida_g_file_load_bytes_async(
        file: *mut GFile,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_file_load_bytes_finish(
        file: *mut GFile,
        result: *mut GAsyncResult,
        etag_out: *mut *mut gchar,
        error: *mut *mut GError,
    ) -> *mut GBytes;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GFileAttributeInfo {
    pub name: *mut ::core::ffi::c_char,
    pub type_: GFileAttributeType,
    pub flags: GFileAttributeInfoFlags,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GFileAttributeInfoList {
    pub infos: *mut GFileAttributeInfo,
    pub n_infos: ::core::ffi::c_int,
}
extern "C" {
    pub fn _frida_g_file_attribute_info_list_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_file_attribute_info_list_new() -> *mut GFileAttributeInfoList;
}
extern "C" {
    pub fn _frida_g_file_attribute_info_list_ref(
        list: *mut GFileAttributeInfoList,
    ) -> *mut GFileAttributeInfoList;
}
extern "C" {
    pub fn _frida_g_file_attribute_info_list_unref(list: *mut GFileAttributeInfoList);
}
extern "C" {
    pub fn _frida_g_file_attribute_info_list_dup(
        list: *mut GFileAttributeInfoList,
    ) -> *mut GFileAttributeInfoList;
}
extern "C" {
    pub fn _frida_g_file_attribute_info_list_lookup(
        list: *mut GFileAttributeInfoList,
        name: *const ::core::ffi::c_char,
    ) -> *const GFileAttributeInfo;
}
extern "C" {
    pub fn _frida_g_file_attribute_info_list_add(
        list: *mut GFileAttributeInfoList,
        name: *const ::core::ffi::c_char,
        type_: GFileAttributeType,
        flags: GFileAttributeInfoFlags,
    );
}
pub type GFileEnumeratorClass = _GFileEnumeratorClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GFileEnumeratorPrivate {
    _unused: [u8; 0],
}
pub type GFileEnumeratorPrivate = _GFileEnumeratorPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GFileEnumerator {
    pub parent_instance: GObject,
    pub priv_: *mut GFileEnumeratorPrivate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GFileEnumeratorClass {
    pub parent_class: GObjectClass,
    pub next_file: ::core::option::Option<
        unsafe extern "C" fn(
            enumerator: *mut GFileEnumerator,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> *mut GFileInfo,
    >,
    pub close_fn: ::core::option::Option<
        unsafe extern "C" fn(
            enumerator: *mut GFileEnumerator,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub next_files_async: ::core::option::Option<
        unsafe extern "C" fn(
            enumerator: *mut GFileEnumerator,
            num_files: ::core::ffi::c_int,
            io_priority: ::core::ffi::c_int,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub next_files_finish: ::core::option::Option<
        unsafe extern "C" fn(
            enumerator: *mut GFileEnumerator,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> *mut GList,
    >,
    pub close_async: ::core::option::Option<
        unsafe extern "C" fn(
            enumerator: *mut GFileEnumerator,
            io_priority: ::core::ffi::c_int,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub close_finish: ::core::option::Option<
        unsafe extern "C" fn(
            enumerator: *mut GFileEnumerator,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub _g_reserved1: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved2: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved3: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved4: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved5: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved6: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved7: ::core::option::Option<unsafe extern "C" fn()>,
}
extern "C" {
    pub fn _frida_g_file_enumerator_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_file_enumerator_next_file(
        enumerator: *mut GFileEnumerator,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GFileInfo;
}
extern "C" {
    pub fn _frida_g_file_enumerator_close(
        enumerator: *mut GFileEnumerator,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_enumerator_next_files_async(
        enumerator: *mut GFileEnumerator,
        num_files: ::core::ffi::c_int,
        io_priority: ::core::ffi::c_int,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_file_enumerator_next_files_finish(
        enumerator: *mut GFileEnumerator,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_file_enumerator_close_async(
        enumerator: *mut GFileEnumerator,
        io_priority: ::core::ffi::c_int,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_file_enumerator_close_finish(
        enumerator: *mut GFileEnumerator,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_enumerator_is_closed(enumerator: *mut GFileEnumerator) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_enumerator_has_pending(enumerator: *mut GFileEnumerator) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_enumerator_set_pending(
        enumerator: *mut GFileEnumerator,
        pending: gboolean,
    );
}
extern "C" {
    pub fn _frida_g_file_enumerator_get_container(enumerator: *mut GFileEnumerator) -> *mut GFile;
}
extern "C" {
    pub fn _frida_g_file_enumerator_get_child(
        enumerator: *mut GFileEnumerator,
        info: *mut GFileInfo,
    ) -> *mut GFile;
}
extern "C" {
    pub fn _frida_g_file_enumerator_iterate(
        direnum: *mut GFileEnumerator,
        out_info: *mut *mut GFileInfo,
        out_child: *mut *mut GFile,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GFileIconClass {
    _unused: [u8; 0],
}
pub type GFileIconClass = _GFileIconClass;
extern "C" {
    pub fn _frida_g_file_icon_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_file_icon_new(file: *mut GFile) -> *mut GIcon;
}
extern "C" {
    pub fn _frida_g_file_icon_get_file(icon: *mut GFileIcon) -> *mut GFile;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GFileInfoClass {
    _unused: [u8; 0],
}
pub type GFileInfoClass = _GFileInfoClass;
extern "C" {
    pub fn _frida_g_file_info_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_file_info_new() -> *mut GFileInfo;
}
extern "C" {
    pub fn _frida_g_file_info_dup(other: *mut GFileInfo) -> *mut GFileInfo;
}
extern "C" {
    pub fn _frida_g_file_info_copy_into(src_info: *mut GFileInfo, dest_info: *mut GFileInfo);
}
extern "C" {
    pub fn _frida_g_file_info_has_attribute(
        info: *mut GFileInfo,
        attribute: *const ::core::ffi::c_char,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_info_has_namespace(
        info: *mut GFileInfo,
        name_space: *const ::core::ffi::c_char,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_info_list_attributes(
        info: *mut GFileInfo,
        name_space: *const ::core::ffi::c_char,
    ) -> *mut *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_file_info_get_attribute_data(
        info: *mut GFileInfo,
        attribute: *const ::core::ffi::c_char,
        type_: *mut GFileAttributeType,
        value_pp: *mut gpointer,
        status: *mut GFileAttributeStatus,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_info_get_attribute_type(
        info: *mut GFileInfo,
        attribute: *const ::core::ffi::c_char,
    ) -> GFileAttributeType;
}
extern "C" {
    pub fn _frida_g_file_info_remove_attribute(
        info: *mut GFileInfo,
        attribute: *const ::core::ffi::c_char,
    );
}
extern "C" {
    pub fn _frida_g_file_info_get_attribute_status(
        info: *mut GFileInfo,
        attribute: *const ::core::ffi::c_char,
    ) -> GFileAttributeStatus;
}
extern "C" {
    pub fn _frida_g_file_info_set_attribute_status(
        info: *mut GFileInfo,
        attribute: *const ::core::ffi::c_char,
        status: GFileAttributeStatus,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_info_get_attribute_as_string(
        info: *mut GFileInfo,
        attribute: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_file_info_get_attribute_string(
        info: *mut GFileInfo,
        attribute: *const ::core::ffi::c_char,
    ) -> *const ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_file_info_get_attribute_byte_string(
        info: *mut GFileInfo,
        attribute: *const ::core::ffi::c_char,
    ) -> *const ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_file_info_get_attribute_boolean(
        info: *mut GFileInfo,
        attribute: *const ::core::ffi::c_char,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_info_get_attribute_uint32(
        info: *mut GFileInfo,
        attribute: *const ::core::ffi::c_char,
    ) -> guint32;
}
extern "C" {
    pub fn _frida_g_file_info_get_attribute_int32(
        info: *mut GFileInfo,
        attribute: *const ::core::ffi::c_char,
    ) -> gint32;
}
extern "C" {
    pub fn _frida_g_file_info_get_attribute_uint64(
        info: *mut GFileInfo,
        attribute: *const ::core::ffi::c_char,
    ) -> guint64;
}
extern "C" {
    pub fn _frida_g_file_info_get_attribute_int64(
        info: *mut GFileInfo,
        attribute: *const ::core::ffi::c_char,
    ) -> gint64;
}
extern "C" {
    pub fn _frida_g_file_info_get_attribute_object(
        info: *mut GFileInfo,
        attribute: *const ::core::ffi::c_char,
    ) -> *mut GObject;
}
extern "C" {
    pub fn _frida_g_file_info_get_attribute_stringv(
        info: *mut GFileInfo,
        attribute: *const ::core::ffi::c_char,
    ) -> *mut *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_file_info_set_attribute(
        info: *mut GFileInfo,
        attribute: *const ::core::ffi::c_char,
        type_: GFileAttributeType,
        value_p: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_file_info_set_attribute_string(
        info: *mut GFileInfo,
        attribute: *const ::core::ffi::c_char,
        attr_value: *const ::core::ffi::c_char,
    );
}
extern "C" {
    pub fn _frida_g_file_info_set_attribute_byte_string(
        info: *mut GFileInfo,
        attribute: *const ::core::ffi::c_char,
        attr_value: *const ::core::ffi::c_char,
    );
}
extern "C" {
    pub fn _frida_g_file_info_set_attribute_boolean(
        info: *mut GFileInfo,
        attribute: *const ::core::ffi::c_char,
        attr_value: gboolean,
    );
}
extern "C" {
    pub fn _frida_g_file_info_set_attribute_uint32(
        info: *mut GFileInfo,
        attribute: *const ::core::ffi::c_char,
        attr_value: guint32,
    );
}
extern "C" {
    pub fn _frida_g_file_info_set_attribute_int32(
        info: *mut GFileInfo,
        attribute: *const ::core::ffi::c_char,
        attr_value: gint32,
    );
}
extern "C" {
    pub fn _frida_g_file_info_set_attribute_uint64(
        info: *mut GFileInfo,
        attribute: *const ::core::ffi::c_char,
        attr_value: guint64,
    );
}
extern "C" {
    pub fn _frida_g_file_info_set_attribute_int64(
        info: *mut GFileInfo,
        attribute: *const ::core::ffi::c_char,
        attr_value: gint64,
    );
}
extern "C" {
    pub fn _frida_g_file_info_set_attribute_object(
        info: *mut GFileInfo,
        attribute: *const ::core::ffi::c_char,
        attr_value: *mut GObject,
    );
}
extern "C" {
    pub fn _frida_g_file_info_set_attribute_stringv(
        info: *mut GFileInfo,
        attribute: *const ::core::ffi::c_char,
        attr_value: *mut *mut ::core::ffi::c_char,
    );
}
extern "C" {
    pub fn _frida_g_file_info_clear_status(info: *mut GFileInfo);
}
extern "C" {
    pub fn _frida_g_file_info_get_deletion_date(info: *mut GFileInfo) -> *mut GDateTime;
}
extern "C" {
    pub fn _frida_g_file_info_get_file_type(info: *mut GFileInfo) -> GFileType;
}
extern "C" {
    pub fn _frida_g_file_info_get_is_hidden(info: *mut GFileInfo) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_info_get_is_backup(info: *mut GFileInfo) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_info_get_is_symlink(info: *mut GFileInfo) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_info_get_name(info: *mut GFileInfo) -> *const ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_file_info_get_display_name(info: *mut GFileInfo) -> *const ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_file_info_get_edit_name(info: *mut GFileInfo) -> *const ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_file_info_get_icon(info: *mut GFileInfo) -> *mut GIcon;
}
extern "C" {
    pub fn _frida_g_file_info_get_symbolic_icon(info: *mut GFileInfo) -> *mut GIcon;
}
extern "C" {
    pub fn _frida_g_file_info_get_content_type(info: *mut GFileInfo) -> *const ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_file_info_get_size(info: *mut GFileInfo) -> goffset;
}
extern "C" {
    pub fn _frida_g_file_info_get_modification_time(info: *mut GFileInfo, result: *mut GTimeVal);
}
extern "C" {
    pub fn _frida_g_file_info_get_modification_date_time(info: *mut GFileInfo) -> *mut GDateTime;
}
extern "C" {
    pub fn _frida_g_file_info_get_access_date_time(info: *mut GFileInfo) -> *mut GDateTime;
}
extern "C" {
    pub fn _frida_g_file_info_get_creation_date_time(info: *mut GFileInfo) -> *mut GDateTime;
}
extern "C" {
    pub fn _frida_g_file_info_get_symlink_target(
        info: *mut GFileInfo,
    ) -> *const ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_file_info_get_etag(info: *mut GFileInfo) -> *const ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_file_info_get_sort_order(info: *mut GFileInfo) -> gint32;
}
extern "C" {
    pub fn _frida_g_file_info_set_attribute_mask(
        info: *mut GFileInfo,
        mask: *mut GFileAttributeMatcher,
    );
}
extern "C" {
    pub fn _frida_g_file_info_unset_attribute_mask(info: *mut GFileInfo);
}
extern "C" {
    pub fn _frida_g_file_info_set_file_type(info: *mut GFileInfo, type_: GFileType);
}
extern "C" {
    pub fn _frida_g_file_info_set_is_hidden(info: *mut GFileInfo, is_hidden: gboolean);
}
extern "C" {
    pub fn _frida_g_file_info_set_is_symlink(info: *mut GFileInfo, is_symlink: gboolean);
}
extern "C" {
    pub fn _frida_g_file_info_set_name(info: *mut GFileInfo, name: *const ::core::ffi::c_char);
}
extern "C" {
    pub fn _frida_g_file_info_set_display_name(
        info: *mut GFileInfo,
        display_name: *const ::core::ffi::c_char,
    );
}
extern "C" {
    pub fn _frida_g_file_info_set_edit_name(
        info: *mut GFileInfo,
        edit_name: *const ::core::ffi::c_char,
    );
}
extern "C" {
    pub fn _frida_g_file_info_set_icon(info: *mut GFileInfo, icon: *mut GIcon);
}
extern "C" {
    pub fn _frida_g_file_info_set_symbolic_icon(info: *mut GFileInfo, icon: *mut GIcon);
}
extern "C" {
    pub fn _frida_g_file_info_set_content_type(
        info: *mut GFileInfo,
        content_type: *const ::core::ffi::c_char,
    );
}
extern "C" {
    pub fn _frida_g_file_info_set_size(info: *mut GFileInfo, size: goffset);
}
extern "C" {
    pub fn _frida_g_file_info_set_modification_time(info: *mut GFileInfo, mtime: *mut GTimeVal);
}
extern "C" {
    pub fn _frida_g_file_info_set_modification_date_time(
        info: *mut GFileInfo,
        mtime: *mut GDateTime,
    );
}
extern "C" {
    pub fn _frida_g_file_info_set_access_date_time(info: *mut GFileInfo, atime: *mut GDateTime);
}
extern "C" {
    pub fn _frida_g_file_info_set_creation_date_time(
        info: *mut GFileInfo,
        creation_time: *mut GDateTime,
    );
}
extern "C" {
    pub fn _frida_g_file_info_set_symlink_target(
        info: *mut GFileInfo,
        symlink_target: *const ::core::ffi::c_char,
    );
}
extern "C" {
    pub fn _frida_g_file_info_set_sort_order(info: *mut GFileInfo, sort_order: gint32);
}
extern "C" {
    pub fn _frida_g_file_attribute_matcher_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_file_attribute_matcher_new(
        attributes: *const ::core::ffi::c_char,
    ) -> *mut GFileAttributeMatcher;
}
extern "C" {
    pub fn _frida_g_file_attribute_matcher_ref(
        matcher: *mut GFileAttributeMatcher,
    ) -> *mut GFileAttributeMatcher;
}
extern "C" {
    pub fn _frida_g_file_attribute_matcher_unref(matcher: *mut GFileAttributeMatcher);
}
extern "C" {
    pub fn _frida_g_file_attribute_matcher_subtract(
        matcher: *mut GFileAttributeMatcher,
        subtract: *mut GFileAttributeMatcher,
    ) -> *mut GFileAttributeMatcher;
}
extern "C" {
    pub fn _frida_g_file_attribute_matcher_matches(
        matcher: *mut GFileAttributeMatcher,
        attribute: *const ::core::ffi::c_char,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_attribute_matcher_matches_only(
        matcher: *mut GFileAttributeMatcher,
        attribute: *const ::core::ffi::c_char,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_attribute_matcher_enumerate_namespace(
        matcher: *mut GFileAttributeMatcher,
        ns: *const ::core::ffi::c_char,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_attribute_matcher_enumerate_next(
        matcher: *mut GFileAttributeMatcher,
    ) -> *const ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_file_attribute_matcher_to_string(
        matcher: *mut GFileAttributeMatcher,
    ) -> *mut ::core::ffi::c_char;
}
pub type GFileInputStreamClass = _GFileInputStreamClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GFileInputStreamPrivate {
    _unused: [u8; 0],
}
pub type GFileInputStreamPrivate = _GFileInputStreamPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GFileInputStream {
    pub parent_instance: GInputStream,
    pub priv_: *mut GFileInputStreamPrivate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GFileInputStreamClass {
    pub parent_class: GInputStreamClass,
    pub tell:
        ::core::option::Option<unsafe extern "C" fn(stream: *mut GFileInputStream) -> goffset>,
    pub can_seek:
        ::core::option::Option<unsafe extern "C" fn(stream: *mut GFileInputStream) -> gboolean>,
    pub seek: ::core::option::Option<
        unsafe extern "C" fn(
            stream: *mut GFileInputStream,
            offset: goffset,
            type_: GSeekType,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub query_info: ::core::option::Option<
        unsafe extern "C" fn(
            stream: *mut GFileInputStream,
            attributes: *const ::core::ffi::c_char,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> *mut GFileInfo,
    >,
    pub query_info_async: ::core::option::Option<
        unsafe extern "C" fn(
            stream: *mut GFileInputStream,
            attributes: *const ::core::ffi::c_char,
            io_priority: ::core::ffi::c_int,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub query_info_finish: ::core::option::Option<
        unsafe extern "C" fn(
            stream: *mut GFileInputStream,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> *mut GFileInfo,
    >,
    pub _g_reserved1: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved2: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved3: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved4: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved5: ::core::option::Option<unsafe extern "C" fn()>,
}
extern "C" {
    pub fn _frida_g_file_input_stream_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_file_input_stream_query_info(
        stream: *mut GFileInputStream,
        attributes: *const ::core::ffi::c_char,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GFileInfo;
}
extern "C" {
    pub fn _frida_g_file_input_stream_query_info_async(
        stream: *mut GFileInputStream,
        attributes: *const ::core::ffi::c_char,
        io_priority: ::core::ffi::c_int,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_file_input_stream_query_info_finish(
        stream: *mut GFileInputStream,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GFileInfo;
}
extern "C" {
    pub fn _frida_g_io_error_quark() -> GQuark;
}
extern "C" {
    pub fn _frida_g_io_error_from_errno(err_no: gint) -> GIOErrorEnum;
}
extern "C" {
    pub fn _frida_g_io_error_from_file_error(file_error: GFileError) -> GIOErrorEnum;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GIOStreamPrivate {
    _unused: [u8; 0],
}
pub type GIOStreamPrivate = _GIOStreamPrivate;
pub type GIOStreamClass = _GIOStreamClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GIOStream {
    pub parent_instance: GObject,
    pub priv_: *mut GIOStreamPrivate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GIOStreamClass {
    pub parent_class: GObjectClass,
    pub get_input_stream:
        ::core::option::Option<unsafe extern "C" fn(stream: *mut GIOStream) -> *mut GInputStream>,
    pub get_output_stream:
        ::core::option::Option<unsafe extern "C" fn(stream: *mut GIOStream) -> *mut GOutputStream>,
    pub close_fn: ::core::option::Option<
        unsafe extern "C" fn(
            stream: *mut GIOStream,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub close_async: ::core::option::Option<
        unsafe extern "C" fn(
            stream: *mut GIOStream,
            io_priority: ::core::ffi::c_int,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub close_finish: ::core::option::Option<
        unsafe extern "C" fn(
            stream: *mut GIOStream,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub _g_reserved1: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved2: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved3: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved4: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved5: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved6: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved7: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved8: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved9: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved10: ::core::option::Option<unsafe extern "C" fn()>,
}
extern "C" {
    pub fn _frida_g_io_stream_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_io_stream_get_input_stream(stream: *mut GIOStream) -> *mut GInputStream;
}
extern "C" {
    pub fn _frida_g_io_stream_get_output_stream(stream: *mut GIOStream) -> *mut GOutputStream;
}
extern "C" {
    pub fn _frida_g_io_stream_splice_async(
        stream1: *mut GIOStream,
        stream2: *mut GIOStream,
        flags: GIOStreamSpliceFlags,
        io_priority: ::core::ffi::c_int,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_io_stream_splice_finish(
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_io_stream_close(
        stream: *mut GIOStream,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_io_stream_close_async(
        stream: *mut GIOStream,
        io_priority: ::core::ffi::c_int,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_io_stream_close_finish(
        stream: *mut GIOStream,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_io_stream_is_closed(stream: *mut GIOStream) -> gboolean;
}
extern "C" {
    pub fn _frida_g_io_stream_has_pending(stream: *mut GIOStream) -> gboolean;
}
extern "C" {
    pub fn _frida_g_io_stream_set_pending(
        stream: *mut GIOStream,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_io_stream_clear_pending(stream: *mut GIOStream);
}
pub type GFileIOStreamClass = _GFileIOStreamClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GFileIOStreamPrivate {
    _unused: [u8; 0],
}
pub type GFileIOStreamPrivate = _GFileIOStreamPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GFileIOStream {
    pub parent_instance: GIOStream,
    pub priv_: *mut GFileIOStreamPrivate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GFileIOStreamClass {
    pub parent_class: GIOStreamClass,
    pub tell: ::core::option::Option<unsafe extern "C" fn(stream: *mut GFileIOStream) -> goffset>,
    pub can_seek:
        ::core::option::Option<unsafe extern "C" fn(stream: *mut GFileIOStream) -> gboolean>,
    pub seek: ::core::option::Option<
        unsafe extern "C" fn(
            stream: *mut GFileIOStream,
            offset: goffset,
            type_: GSeekType,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub can_truncate:
        ::core::option::Option<unsafe extern "C" fn(stream: *mut GFileIOStream) -> gboolean>,
    pub truncate_fn: ::core::option::Option<
        unsafe extern "C" fn(
            stream: *mut GFileIOStream,
            size: goffset,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub query_info: ::core::option::Option<
        unsafe extern "C" fn(
            stream: *mut GFileIOStream,
            attributes: *const ::core::ffi::c_char,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> *mut GFileInfo,
    >,
    pub query_info_async: ::core::option::Option<
        unsafe extern "C" fn(
            stream: *mut GFileIOStream,
            attributes: *const ::core::ffi::c_char,
            io_priority: ::core::ffi::c_int,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub query_info_finish: ::core::option::Option<
        unsafe extern "C" fn(
            stream: *mut GFileIOStream,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> *mut GFileInfo,
    >,
    pub get_etag: ::core::option::Option<
        unsafe extern "C" fn(stream: *mut GFileIOStream) -> *mut ::core::ffi::c_char,
    >,
    pub _g_reserved1: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved2: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved3: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved4: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved5: ::core::option::Option<unsafe extern "C" fn()>,
}
extern "C" {
    pub fn _frida_g_file_io_stream_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_file_io_stream_query_info(
        stream: *mut GFileIOStream,
        attributes: *const ::core::ffi::c_char,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GFileInfo;
}
extern "C" {
    pub fn _frida_g_file_io_stream_query_info_async(
        stream: *mut GFileIOStream,
        attributes: *const ::core::ffi::c_char,
        io_priority: ::core::ffi::c_int,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_file_io_stream_query_info_finish(
        stream: *mut GFileIOStream,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GFileInfo;
}
extern "C" {
    pub fn _frida_g_file_io_stream_get_etag(stream: *mut GFileIOStream)
        -> *mut ::core::ffi::c_char;
}
pub type GFileMonitorClass = _GFileMonitorClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GFileMonitorPrivate {
    _unused: [u8; 0],
}
pub type GFileMonitorPrivate = _GFileMonitorPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GFileMonitor {
    pub parent_instance: GObject,
    pub priv_: *mut GFileMonitorPrivate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GFileMonitorClass {
    pub parent_class: GObjectClass,
    pub changed: ::core::option::Option<
        unsafe extern "C" fn(
            monitor: *mut GFileMonitor,
            file: *mut GFile,
            other_file: *mut GFile,
            event_type: GFileMonitorEvent,
        ),
    >,
    pub cancel:
        ::core::option::Option<unsafe extern "C" fn(monitor: *mut GFileMonitor) -> gboolean>,
    pub _g_reserved1: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved2: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved3: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved4: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved5: ::core::option::Option<unsafe extern "C" fn()>,
}
extern "C" {
    pub fn _frida_g_file_monitor_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_file_monitor_cancel(monitor: *mut GFileMonitor) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_monitor_is_cancelled(monitor: *mut GFileMonitor) -> gboolean;
}
extern "C" {
    pub fn _frida_g_file_monitor_set_rate_limit(monitor: *mut GFileMonitor, limit_msecs: gint);
}
extern "C" {
    pub fn _frida_g_file_monitor_emit_event(
        monitor: *mut GFileMonitor,
        child: *mut GFile,
        other_file: *mut GFile,
        event_type: GFileMonitorEvent,
    );
}
pub type GFilenameCompleterClass = _GFilenameCompleterClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GFilenameCompleterClass {
    pub parent_class: GObjectClass,
    pub got_completion_data:
        ::core::option::Option<unsafe extern "C" fn(filename_completer: *mut GFilenameCompleter)>,
    pub _g_reserved1: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved2: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved3: ::core::option::Option<unsafe extern "C" fn()>,
}
extern "C" {
    pub fn _frida_g_filename_completer_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_filename_completer_new() -> *mut GFilenameCompleter;
}
extern "C" {
    pub fn _frida_g_filename_completer_get_completion_suffix(
        completer: *mut GFilenameCompleter,
        initial_text: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_filename_completer_get_completions(
        completer: *mut GFilenameCompleter,
        initial_text: *const ::core::ffi::c_char,
    ) -> *mut *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_filename_completer_set_dirs_only(
        completer: *mut GFilenameCompleter,
        dirs_only: gboolean,
    );
}
pub type GFileOutputStreamClass = _GFileOutputStreamClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GFileOutputStreamPrivate {
    _unused: [u8; 0],
}
pub type GFileOutputStreamPrivate = _GFileOutputStreamPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GFileOutputStream {
    pub parent_instance: GOutputStream,
    pub priv_: *mut GFileOutputStreamPrivate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GFileOutputStreamClass {
    pub parent_class: GOutputStreamClass,
    pub tell:
        ::core::option::Option<unsafe extern "C" fn(stream: *mut GFileOutputStream) -> goffset>,
    pub can_seek:
        ::core::option::Option<unsafe extern "C" fn(stream: *mut GFileOutputStream) -> gboolean>,
    pub seek: ::core::option::Option<
        unsafe extern "C" fn(
            stream: *mut GFileOutputStream,
            offset: goffset,
            type_: GSeekType,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub can_truncate:
        ::core::option::Option<unsafe extern "C" fn(stream: *mut GFileOutputStream) -> gboolean>,
    pub truncate_fn: ::core::option::Option<
        unsafe extern "C" fn(
            stream: *mut GFileOutputStream,
            size: goffset,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub query_info: ::core::option::Option<
        unsafe extern "C" fn(
            stream: *mut GFileOutputStream,
            attributes: *const ::core::ffi::c_char,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> *mut GFileInfo,
    >,
    pub query_info_async: ::core::option::Option<
        unsafe extern "C" fn(
            stream: *mut GFileOutputStream,
            attributes: *const ::core::ffi::c_char,
            io_priority: ::core::ffi::c_int,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub query_info_finish: ::core::option::Option<
        unsafe extern "C" fn(
            stream: *mut GFileOutputStream,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> *mut GFileInfo,
    >,
    pub get_etag: ::core::option::Option<
        unsafe extern "C" fn(stream: *mut GFileOutputStream) -> *mut ::core::ffi::c_char,
    >,
    pub _g_reserved1: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved2: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved3: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved4: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved5: ::core::option::Option<unsafe extern "C" fn()>,
}
extern "C" {
    pub fn _frida_g_file_output_stream_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_file_output_stream_query_info(
        stream: *mut GFileOutputStream,
        attributes: *const ::core::ffi::c_char,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GFileInfo;
}
extern "C" {
    pub fn _frida_g_file_output_stream_query_info_async(
        stream: *mut GFileOutputStream,
        attributes: *const ::core::ffi::c_char,
        io_priority: ::core::ffi::c_int,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_file_output_stream_query_info_finish(
        stream: *mut GFileOutputStream,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GFileInfo;
}
extern "C" {
    pub fn _frida_g_file_output_stream_get_etag(
        stream: *mut GFileOutputStream,
    ) -> *mut ::core::ffi::c_char;
}
pub type GInetAddressClass = _GInetAddressClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GInetAddressPrivate {
    _unused: [u8; 0],
}
pub type GInetAddressPrivate = _GInetAddressPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GInetAddress {
    pub parent_instance: GObject,
    pub priv_: *mut GInetAddressPrivate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GInetAddressClass {
    pub parent_class: GObjectClass,
    pub to_string:
        ::core::option::Option<unsafe extern "C" fn(address: *mut GInetAddress) -> *mut gchar>,
    pub to_bytes:
        ::core::option::Option<unsafe extern "C" fn(address: *mut GInetAddress) -> *const guint8>,
}
extern "C" {
    pub fn _frida_g_inet_address_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_inet_address_new_from_string(string: *const gchar) -> *mut GInetAddress;
}
extern "C" {
    pub fn _frida_g_inet_address_new_from_bytes(
        bytes: *const guint8,
        family: GSocketFamily,
    ) -> *mut GInetAddress;
}
extern "C" {
    pub fn _frida_g_inet_address_new_loopback(family: GSocketFamily) -> *mut GInetAddress;
}
extern "C" {
    pub fn _frida_g_inet_address_new_any(family: GSocketFamily) -> *mut GInetAddress;
}
extern "C" {
    pub fn _frida_g_inet_address_equal(
        address: *mut GInetAddress,
        other_address: *mut GInetAddress,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_inet_address_to_string(address: *mut GInetAddress) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_inet_address_to_bytes(address: *mut GInetAddress) -> *const guint8;
}
extern "C" {
    pub fn _frida_g_inet_address_get_native_size(address: *mut GInetAddress) -> gsize;
}
extern "C" {
    pub fn _frida_g_inet_address_get_family(address: *mut GInetAddress) -> GSocketFamily;
}
extern "C" {
    pub fn _frida_g_inet_address_get_is_any(address: *mut GInetAddress) -> gboolean;
}
extern "C" {
    pub fn _frida_g_inet_address_get_is_loopback(address: *mut GInetAddress) -> gboolean;
}
extern "C" {
    pub fn _frida_g_inet_address_get_is_link_local(address: *mut GInetAddress) -> gboolean;
}
extern "C" {
    pub fn _frida_g_inet_address_get_is_site_local(address: *mut GInetAddress) -> gboolean;
}
extern "C" {
    pub fn _frida_g_inet_address_get_is_multicast(address: *mut GInetAddress) -> gboolean;
}
extern "C" {
    pub fn _frida_g_inet_address_get_is_mc_global(address: *mut GInetAddress) -> gboolean;
}
extern "C" {
    pub fn _frida_g_inet_address_get_is_mc_link_local(address: *mut GInetAddress) -> gboolean;
}
extern "C" {
    pub fn _frida_g_inet_address_get_is_mc_node_local(address: *mut GInetAddress) -> gboolean;
}
extern "C" {
    pub fn _frida_g_inet_address_get_is_mc_org_local(address: *mut GInetAddress) -> gboolean;
}
extern "C" {
    pub fn _frida_g_inet_address_get_is_mc_site_local(address: *mut GInetAddress) -> gboolean;
}
pub type GInetAddressMaskClass = _GInetAddressMaskClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GInetAddressMaskPrivate {
    _unused: [u8; 0],
}
pub type GInetAddressMaskPrivate = _GInetAddressMaskPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GInetAddressMask {
    pub parent_instance: GObject,
    pub priv_: *mut GInetAddressMaskPrivate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GInetAddressMaskClass {
    pub parent_class: GObjectClass,
}
extern "C" {
    pub fn _frida_g_inet_address_mask_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_inet_address_mask_new(
        addr: *mut GInetAddress,
        length: guint,
        error: *mut *mut GError,
    ) -> *mut GInetAddressMask;
}
extern "C" {
    pub fn _frida_g_inet_address_mask_new_from_string(
        mask_string: *const gchar,
        error: *mut *mut GError,
    ) -> *mut GInetAddressMask;
}
extern "C" {
    pub fn _frida_g_inet_address_mask_to_string(mask: *mut GInetAddressMask) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_inet_address_mask_get_family(mask: *mut GInetAddressMask) -> GSocketFamily;
}
extern "C" {
    pub fn _frida_g_inet_address_mask_get_address(mask: *mut GInetAddressMask)
        -> *mut GInetAddress;
}
extern "C" {
    pub fn _frida_g_inet_address_mask_get_length(mask: *mut GInetAddressMask) -> guint;
}
extern "C" {
    pub fn _frida_g_inet_address_mask_matches(
        mask: *mut GInetAddressMask,
        address: *mut GInetAddress,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_inet_address_mask_equal(
        mask: *mut GInetAddressMask,
        mask2: *mut GInetAddressMask,
    ) -> gboolean;
}
pub type GSocketAddressClass = _GSocketAddressClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSocketAddress {
    pub parent_instance: GObject,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSocketAddressClass {
    pub parent_class: GObjectClass,
    pub get_family:
        ::core::option::Option<unsafe extern "C" fn(address: *mut GSocketAddress) -> GSocketFamily>,
    pub get_native_size:
        ::core::option::Option<unsafe extern "C" fn(address: *mut GSocketAddress) -> gssize>,
    pub to_native: ::core::option::Option<
        unsafe extern "C" fn(
            address: *mut GSocketAddress,
            dest: gpointer,
            destlen: gsize,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
}
extern "C" {
    pub fn _frida_g_socket_address_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_socket_address_get_family(address: *mut GSocketAddress) -> GSocketFamily;
}
extern "C" {
    pub fn _frida_g_socket_address_new_from_native(
        native: gpointer,
        len: gsize,
    ) -> *mut GSocketAddress;
}
extern "C" {
    pub fn _frida_g_socket_address_to_native(
        address: *mut GSocketAddress,
        dest: gpointer,
        destlen: gsize,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_socket_address_get_native_size(address: *mut GSocketAddress) -> gssize;
}
pub type GInetSocketAddressClass = _GInetSocketAddressClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GInetSocketAddressPrivate {
    _unused: [u8; 0],
}
pub type GInetSocketAddressPrivate = _GInetSocketAddressPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GInetSocketAddress {
    pub parent_instance: GSocketAddress,
    pub priv_: *mut GInetSocketAddressPrivate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GInetSocketAddressClass {
    pub parent_class: GSocketAddressClass,
}
extern "C" {
    pub fn _frida_g_inet_socket_address_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_inet_socket_address_new(
        address: *mut GInetAddress,
        port: guint16,
    ) -> *mut GSocketAddress;
}
extern "C" {
    pub fn _frida_g_inet_socket_address_new_from_string(
        address: *const ::core::ffi::c_char,
        port: guint,
    ) -> *mut GSocketAddress;
}
extern "C" {
    pub fn _frida_g_inet_socket_address_get_address(
        address: *mut GInetSocketAddress,
    ) -> *mut GInetAddress;
}
extern "C" {
    pub fn _frida_g_inet_socket_address_get_port(address: *mut GInetSocketAddress) -> guint16;
}
extern "C" {
    pub fn _frida_g_inet_socket_address_get_flowinfo(address: *mut GInetSocketAddress) -> guint32;
}
extern "C" {
    pub fn _frida_g_inet_socket_address_get_scope_id(address: *mut GInetSocketAddress) -> guint32;
}
extern "C" {
    pub fn _frida_g_app_info_create_flags_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_converter_flags_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_converter_result_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_data_stream_byte_order_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_data_stream_newline_type_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_file_attribute_type_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_file_attribute_info_flags_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_file_attribute_status_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_file_query_info_flags_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_file_create_flags_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_file_measure_flags_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_mount_mount_flags_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_mount_unmount_flags_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_drive_start_flags_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_drive_start_stop_type_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_file_copy_flags_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_file_monitor_flags_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_file_type_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_filesystem_preview_type_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_file_monitor_event_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_io_error_enum_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_ask_password_flags_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_password_save_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_mount_operation_result_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_output_stream_splice_flags_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_io_stream_splice_flags_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_emblem_origin_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_resolver_error_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_resolver_record_type_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_resource_error_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_resource_flags_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_resource_lookup_flags_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_socket_family_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_socket_type_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_socket_msg_flags_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_socket_protocol_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_zlib_compressor_format_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_unix_socket_address_type_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_bus_type_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_bus_name_owner_flags_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_bus_name_watcher_flags_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_dbus_proxy_flags_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_dbus_error_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_dbus_connection_flags_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_dbus_capability_flags_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_dbus_call_flags_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_dbus_message_type_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_dbus_message_flags_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_dbus_message_header_field_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_dbus_property_info_flags_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_dbus_subtree_flags_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_dbus_server_flags_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_dbus_signal_flags_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_dbus_send_message_flags_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_credentials_type_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_dbus_message_byte_order_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_application_flags_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_tls_error_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_tls_certificate_flags_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_tls_authentication_mode_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_tls_channel_binding_type_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_tls_channel_binding_error_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_tls_rehandshake_mode_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_tls_password_flags_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_tls_interaction_result_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_dbus_interface_skeleton_flags_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_dbus_object_manager_client_flags_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_tls_database_verify_flags_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_tls_database_lookup_flags_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_tls_certificate_request_flags_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_tls_protocol_version_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_io_module_scope_flags_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_socket_client_event_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_socket_listener_event_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_test_dbus_flags_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_subprocess_flags_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_notification_priority_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_network_connectivity_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_pollable_return_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_memory_monitor_warning_level_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_resolver_name_lookup_flags_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_settings_bind_flags_get_type() -> GType;
}
pub const GModuleFlags_G_MODULE_BIND_LAZY: GModuleFlags = 1;
pub const GModuleFlags_G_MODULE_BIND_LOCAL: GModuleFlags = 2;
pub const GModuleFlags_G_MODULE_BIND_MASK: GModuleFlags = 3;
pub type GModuleFlags = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GModule {
    _unused: [u8; 0],
}
pub type GModule = _GModule;
pub type GModuleCheckInit =
    ::core::option::Option<unsafe extern "C" fn(module: *mut GModule) -> *const gchar>;
pub type GModuleUnload = ::core::option::Option<unsafe extern "C" fn(module: *mut GModule)>;
extern "C" {
    pub fn _frida_g_module_error_quark() -> GQuark;
}
pub const GModuleError_G_MODULE_ERROR_FAILED: GModuleError = 0;
pub const GModuleError_G_MODULE_ERROR_CHECK_FAILED: GModuleError = 1;
pub type GModuleError = ::core::ffi::c_uint;
extern "C" {
    pub fn _frida_g_module_supported() -> gboolean;
}
extern "C" {
    pub fn _frida_g_module_open(file_name: *const gchar, flags: GModuleFlags) -> *mut GModule;
}
extern "C" {
    pub fn _frida_g_module_open_full(
        file_name: *const gchar,
        flags: GModuleFlags,
        error: *mut *mut GError,
    ) -> *mut GModule;
}
extern "C" {
    pub fn _frida_g_module_close(module: *mut GModule) -> gboolean;
}
extern "C" {
    pub fn _frida_g_module_make_resident(module: *mut GModule);
}
extern "C" {
    pub fn _frida_g_module_error() -> *const gchar;
}
extern "C" {
    pub fn _frida_g_module_symbol(
        module: *mut GModule,
        symbol_name: *const gchar,
        symbol: *mut gpointer,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_module_name(module: *mut GModule) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_module_build_path(
        directory: *const gchar,
        module_name: *const gchar,
    ) -> *mut gchar;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GIOModuleScope {
    _unused: [u8; 0],
}
pub type GIOModuleScope = _GIOModuleScope;
extern "C" {
    pub fn _frida_g_io_module_scope_new(flags: GIOModuleScopeFlags) -> *mut GIOModuleScope;
}
extern "C" {
    pub fn _frida_g_io_module_scope_free(scope: *mut GIOModuleScope);
}
extern "C" {
    pub fn _frida_g_io_module_scope_block(scope: *mut GIOModuleScope, basename: *const gchar);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GIOModuleClass {
    _unused: [u8; 0],
}
pub type GIOModuleClass = _GIOModuleClass;
extern "C" {
    pub fn _frida_g_io_module_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_io_module_new(filename: *const gchar) -> *mut GIOModule;
}
extern "C" {
    pub fn _frida_g_io_modules_scan_all_in_directory(dirname: *const ::core::ffi::c_char);
}
extern "C" {
    pub fn _frida_g_io_modules_load_all_in_directory(dirname: *const gchar) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_io_modules_scan_all_in_directory_with_scope(
        dirname: *const gchar,
        scope: *mut GIOModuleScope,
    );
}
extern "C" {
    pub fn _frida_g_io_modules_load_all_in_directory_with_scope(
        dirname: *const gchar,
        scope: *mut GIOModuleScope,
    ) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_io_extension_point_register(
        name: *const ::core::ffi::c_char,
    ) -> *mut GIOExtensionPoint;
}
extern "C" {
    pub fn _frida_g_io_extension_point_lookup(
        name: *const ::core::ffi::c_char,
    ) -> *mut GIOExtensionPoint;
}
extern "C" {
    pub fn _frida_g_io_extension_point_set_required_type(
        extension_point: *mut GIOExtensionPoint,
        type_: GType,
    );
}
extern "C" {
    pub fn _frida_g_io_extension_point_get_required_type(
        extension_point: *mut GIOExtensionPoint,
    ) -> GType;
}
extern "C" {
    pub fn _frida_g_io_extension_point_get_extensions(
        extension_point: *mut GIOExtensionPoint,
    ) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_io_extension_point_get_extension_by_name(
        extension_point: *mut GIOExtensionPoint,
        name: *const ::core::ffi::c_char,
    ) -> *mut GIOExtension;
}
extern "C" {
    pub fn _frida_g_io_extension_point_implement(
        extension_point_name: *const ::core::ffi::c_char,
        type_: GType,
        extension_name: *const ::core::ffi::c_char,
        priority: gint,
    ) -> *mut GIOExtension;
}
extern "C" {
    pub fn _frida_g_io_extension_get_type(extension: *mut GIOExtension) -> GType;
}
extern "C" {
    pub fn _frida_g_io_extension_get_name(
        extension: *mut GIOExtension,
    ) -> *const ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_io_extension_get_priority(extension: *mut GIOExtension) -> gint;
}
extern "C" {
    pub fn _frida_g_io_extension_ref_class(extension: *mut GIOExtension) -> *mut GTypeClass;
}
extern "C" {
    pub fn g_io_module_load(module: *mut GIOModule);
}
extern "C" {
    pub fn g_io_module_unload(module: *mut GIOModule);
}
extern "C" {
    pub fn g_io_module_query() -> *mut *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_io_scheduler_push_job(
        job_func: GIOSchedulerJobFunc,
        user_data: gpointer,
        notify: GDestroyNotify,
        io_priority: gint,
        cancellable: *mut GCancellable,
    );
}
extern "C" {
    pub fn _frida_g_io_scheduler_cancel_all_jobs();
}
extern "C" {
    pub fn _frida_g_io_scheduler_job_send_to_mainloop(
        job: *mut GIOSchedulerJob,
        func: GSourceFunc,
        user_data: gpointer,
        notify: GDestroyNotify,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_io_scheduler_job_send_to_mainloop_async(
        job: *mut GIOSchedulerJob,
        func: GSourceFunc,
        user_data: gpointer,
        notify: GDestroyNotify,
    );
}
extern "C" {
    pub fn _frida_g_list_model_get_type() -> GType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GListModel {
    _unused: [u8; 0],
}
pub type GListModel = _GListModel;
pub type GListModelInterface = _GListModelInterface;
pub type GListModel_autoptr = *mut GListModel;
pub type GListModel_listautoptr = *mut GList;
pub type GListModel_slistautoptr = *mut GSList;
pub type GListModel_queueautoptr = *mut GQueue;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GListModelInterface {
    pub g_iface: GTypeInterface,
    pub get_item_type: ::core::option::Option<unsafe extern "C" fn(list: *mut GListModel) -> GType>,
    pub get_n_items: ::core::option::Option<unsafe extern "C" fn(list: *mut GListModel) -> guint>,
    pub get_item: ::core::option::Option<
        unsafe extern "C" fn(list: *mut GListModel, position: guint) -> gpointer,
    >,
}
extern "C" {
    pub fn _frida_g_list_model_get_item_type(list: *mut GListModel) -> GType;
}
extern "C" {
    pub fn _frida_g_list_model_get_n_items(list: *mut GListModel) -> guint;
}
extern "C" {
    pub fn _frida_g_list_model_get_item(list: *mut GListModel, position: guint) -> gpointer;
}
extern "C" {
    pub fn _frida_g_list_model_get_object(list: *mut GListModel, position: guint) -> *mut GObject;
}
extern "C" {
    pub fn _frida_g_list_model_items_changed(
        list: *mut GListModel,
        position: guint,
        removed: guint,
        added: guint,
    );
}
extern "C" {
    pub fn _frida_g_list_store_get_type() -> GType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GListStore {
    _unused: [u8; 0],
}
pub type GListStore = _GListStore;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GListStoreClass {
    pub parent_class: GObjectClass,
}
pub type GListStore_autoptr = *mut GListStore;
pub type GListStore_listautoptr = *mut GList;
pub type GListStore_slistautoptr = *mut GSList;
pub type GListStore_queueautoptr = *mut GQueue;
pub type GListStoreClass_autoptr = *mut GListStoreClass;
pub type GListStoreClass_listautoptr = *mut GList;
pub type GListStoreClass_slistautoptr = *mut GSList;
pub type GListStoreClass_queueautoptr = *mut GQueue;
extern "C" {
    pub fn _frida_g_list_store_new(item_type: GType) -> *mut GListStore;
}
extern "C" {
    pub fn _frida_g_list_store_insert(store: *mut GListStore, position: guint, item: gpointer);
}
extern "C" {
    pub fn _frida_g_list_store_insert_sorted(
        store: *mut GListStore,
        item: gpointer,
        compare_func: GCompareDataFunc,
        user_data: gpointer,
    ) -> guint;
}
extern "C" {
    pub fn _frida_g_list_store_sort(
        store: *mut GListStore,
        compare_func: GCompareDataFunc,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_list_store_append(store: *mut GListStore, item: gpointer);
}
extern "C" {
    pub fn _frida_g_list_store_remove(store: *mut GListStore, position: guint);
}
extern "C" {
    pub fn _frida_g_list_store_remove_all(store: *mut GListStore);
}
extern "C" {
    pub fn _frida_g_list_store_splice(
        store: *mut GListStore,
        position: guint,
        n_removals: guint,
        additions: *mut gpointer,
        n_additions: guint,
    );
}
extern "C" {
    pub fn _frida_g_list_store_find(
        store: *mut GListStore,
        item: gpointer,
        position: *mut guint,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_list_store_find_with_equal_func(
        store: *mut GListStore,
        item: gpointer,
        equal_func: GEqualFunc,
        position: *mut guint,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_list_store_find_with_equal_func_full(
        store: *mut GListStore,
        item: gpointer,
        equal_func: GEqualFuncFull,
        user_data: gpointer,
        position: *mut guint,
    ) -> gboolean;
}
pub type GLoadableIconIface = _GLoadableIconIface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GLoadableIconIface {
    pub g_iface: GTypeInterface,
    pub load: ::core::option::Option<
        unsafe extern "C" fn(
            icon: *mut GLoadableIcon,
            size: ::core::ffi::c_int,
            type_: *mut *mut ::core::ffi::c_char,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> *mut GInputStream,
    >,
    pub load_async: ::core::option::Option<
        unsafe extern "C" fn(
            icon: *mut GLoadableIcon,
            size: ::core::ffi::c_int,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub load_finish: ::core::option::Option<
        unsafe extern "C" fn(
            icon: *mut GLoadableIcon,
            res: *mut GAsyncResult,
            type_: *mut *mut ::core::ffi::c_char,
            error: *mut *mut GError,
        ) -> *mut GInputStream,
    >,
}
extern "C" {
    pub fn _frida_g_loadable_icon_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_loadable_icon_load(
        icon: *mut GLoadableIcon,
        size: ::core::ffi::c_int,
        type_: *mut *mut ::core::ffi::c_char,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GInputStream;
}
extern "C" {
    pub fn _frida_g_loadable_icon_load_async(
        icon: *mut GLoadableIcon,
        size: ::core::ffi::c_int,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_loadable_icon_load_finish(
        icon: *mut GLoadableIcon,
        res: *mut GAsyncResult,
        type_: *mut *mut ::core::ffi::c_char,
        error: *mut *mut GError,
    ) -> *mut GInputStream;
}
pub type GMemoryInputStreamClass = _GMemoryInputStreamClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GMemoryInputStreamPrivate {
    _unused: [u8; 0],
}
pub type GMemoryInputStreamPrivate = _GMemoryInputStreamPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GMemoryInputStream {
    pub parent_instance: GInputStream,
    pub priv_: *mut GMemoryInputStreamPrivate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GMemoryInputStreamClass {
    pub parent_class: GInputStreamClass,
    pub _g_reserved1: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved2: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved3: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved4: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved5: ::core::option::Option<unsafe extern "C" fn()>,
}
extern "C" {
    pub fn _frida_g_memory_input_stream_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_memory_input_stream_new() -> *mut GInputStream;
}
extern "C" {
    pub fn _frida_g_memory_input_stream_new_from_data(
        data: *const ::core::ffi::c_void,
        len: gssize,
        destroy: GDestroyNotify,
    ) -> *mut GInputStream;
}
extern "C" {
    pub fn _frida_g_memory_input_stream_new_from_bytes(bytes: *mut GBytes) -> *mut GInputStream;
}
extern "C" {
    pub fn _frida_g_memory_input_stream_add_data(
        stream: *mut GMemoryInputStream,
        data: *const ::core::ffi::c_void,
        len: gssize,
        destroy: GDestroyNotify,
    );
}
extern "C" {
    pub fn _frida_g_memory_input_stream_add_bytes(
        stream: *mut GMemoryInputStream,
        bytes: *mut GBytes,
    );
}
extern "C" {
    pub fn _frida_g_memory_monitor_get_type() -> GType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GMemoryMonitor {
    _unused: [u8; 0],
}
pub type GMemoryMonitor = _GMemoryMonitor;
pub type GMemoryMonitorInterface = _GMemoryMonitorInterface;
pub type GMemoryMonitor_autoptr = *mut GMemoryMonitor;
pub type GMemoryMonitor_listautoptr = *mut GList;
pub type GMemoryMonitor_slistautoptr = *mut GSList;
pub type GMemoryMonitor_queueautoptr = *mut GQueue;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GMemoryMonitorInterface {
    pub g_iface: GTypeInterface,
    pub low_memory_warning: ::core::option::Option<
        unsafe extern "C" fn(monitor: *mut GMemoryMonitor, level: GMemoryMonitorWarningLevel),
    >,
}
extern "C" {
    pub fn _frida_g_memory_monitor_dup_default() -> *mut GMemoryMonitor;
}
pub type GMemoryOutputStreamClass = _GMemoryOutputStreamClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GMemoryOutputStreamPrivate {
    _unused: [u8; 0],
}
pub type GMemoryOutputStreamPrivate = _GMemoryOutputStreamPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GMemoryOutputStream {
    pub parent_instance: GOutputStream,
    pub priv_: *mut GMemoryOutputStreamPrivate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GMemoryOutputStreamClass {
    pub parent_class: GOutputStreamClass,
    pub _g_reserved1: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved2: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved3: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved4: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved5: ::core::option::Option<unsafe extern "C" fn()>,
}
pub type GReallocFunc =
    ::core::option::Option<unsafe extern "C" fn(data: gpointer, size: gsize) -> gpointer>;
extern "C" {
    pub fn _frida_g_memory_output_stream_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_memory_output_stream_new(
        data: gpointer,
        size: gsize,
        realloc_function: GReallocFunc,
        destroy_function: GDestroyNotify,
    ) -> *mut GOutputStream;
}
extern "C" {
    pub fn _frida_g_memory_output_stream_new_resizable() -> *mut GOutputStream;
}
extern "C" {
    pub fn _frida_g_memory_output_stream_get_data(ostream: *mut GMemoryOutputStream) -> gpointer;
}
extern "C" {
    pub fn _frida_g_memory_output_stream_get_size(ostream: *mut GMemoryOutputStream) -> gsize;
}
extern "C" {
    pub fn _frida_g_memory_output_stream_get_data_size(ostream: *mut GMemoryOutputStream) -> gsize;
}
extern "C" {
    pub fn _frida_g_memory_output_stream_steal_data(ostream: *mut GMemoryOutputStream) -> gpointer;
}
extern "C" {
    pub fn _frida_g_memory_output_stream_steal_as_bytes(
        ostream: *mut GMemoryOutputStream,
    ) -> *mut GBytes;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GMenuModelPrivate {
    _unused: [u8; 0],
}
pub type GMenuModelPrivate = _GMenuModelPrivate;
pub type GMenuModelClass = _GMenuModelClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GMenuAttributeIterPrivate {
    _unused: [u8; 0],
}
pub type GMenuAttributeIterPrivate = _GMenuAttributeIterPrivate;
pub type GMenuAttributeIterClass = _GMenuAttributeIterClass;
pub type GMenuAttributeIter = _GMenuAttributeIter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GMenuLinkIterPrivate {
    _unused: [u8; 0],
}
pub type GMenuLinkIterPrivate = _GMenuLinkIterPrivate;
pub type GMenuLinkIterClass = _GMenuLinkIterClass;
pub type GMenuLinkIter = _GMenuLinkIter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GMenuModel {
    pub parent_instance: GObject,
    pub priv_: *mut GMenuModelPrivate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GMenuModelClass {
    pub parent_class: GObjectClass,
    pub is_mutable:
        ::core::option::Option<unsafe extern "C" fn(model: *mut GMenuModel) -> gboolean>,
    pub get_n_items: ::core::option::Option<unsafe extern "C" fn(model: *mut GMenuModel) -> gint>,
    pub get_item_attributes: ::core::option::Option<
        unsafe extern "C" fn(
            model: *mut GMenuModel,
            item_index: gint,
            attributes: *mut *mut GHashTable,
        ),
    >,
    pub iterate_item_attributes: ::core::option::Option<
        unsafe extern "C" fn(model: *mut GMenuModel, item_index: gint) -> *mut GMenuAttributeIter,
    >,
    pub get_item_attribute_value: ::core::option::Option<
        unsafe extern "C" fn(
            model: *mut GMenuModel,
            item_index: gint,
            attribute: *const gchar,
            expected_type: *const GVariantType,
        ) -> *mut GVariant,
    >,
    pub get_item_links: ::core::option::Option<
        unsafe extern "C" fn(model: *mut GMenuModel, item_index: gint, links: *mut *mut GHashTable),
    >,
    pub iterate_item_links: ::core::option::Option<
        unsafe extern "C" fn(model: *mut GMenuModel, item_index: gint) -> *mut GMenuLinkIter,
    >,
    pub get_item_link: ::core::option::Option<
        unsafe extern "C" fn(
            model: *mut GMenuModel,
            item_index: gint,
            link: *const gchar,
        ) -> *mut GMenuModel,
    >,
}
extern "C" {
    pub fn _frida_g_menu_model_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_menu_model_is_mutable(model: *mut GMenuModel) -> gboolean;
}
extern "C" {
    pub fn _frida_g_menu_model_get_n_items(model: *mut GMenuModel) -> gint;
}
extern "C" {
    pub fn _frida_g_menu_model_iterate_item_attributes(
        model: *mut GMenuModel,
        item_index: gint,
    ) -> *mut GMenuAttributeIter;
}
extern "C" {
    pub fn _frida_g_menu_model_get_item_attribute_value(
        model: *mut GMenuModel,
        item_index: gint,
        attribute: *const gchar,
        expected_type: *const GVariantType,
    ) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_menu_model_get_item_attribute(
        model: *mut GMenuModel,
        item_index: gint,
        attribute: *const gchar,
        format_string: *const gchar,
        ...
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_menu_model_iterate_item_links(
        model: *mut GMenuModel,
        item_index: gint,
    ) -> *mut GMenuLinkIter;
}
extern "C" {
    pub fn _frida_g_menu_model_get_item_link(
        model: *mut GMenuModel,
        item_index: gint,
        link: *const gchar,
    ) -> *mut GMenuModel;
}
extern "C" {
    pub fn _frida_g_menu_model_items_changed(
        model: *mut GMenuModel,
        position: gint,
        removed: gint,
        added: gint,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GMenuAttributeIter {
    pub parent_instance: GObject,
    pub priv_: *mut GMenuAttributeIterPrivate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GMenuAttributeIterClass {
    pub parent_class: GObjectClass,
    pub get_next: ::core::option::Option<
        unsafe extern "C" fn(
            iter: *mut GMenuAttributeIter,
            out_name: *mut *const gchar,
            value: *mut *mut GVariant,
        ) -> gboolean,
    >,
}
extern "C" {
    pub fn _frida_g_menu_attribute_iter_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_menu_attribute_iter_get_next(
        iter: *mut GMenuAttributeIter,
        out_name: *mut *const gchar,
        value: *mut *mut GVariant,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_menu_attribute_iter_next(iter: *mut GMenuAttributeIter) -> gboolean;
}
extern "C" {
    pub fn _frida_g_menu_attribute_iter_get_name(iter: *mut GMenuAttributeIter) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_menu_attribute_iter_get_value(iter: *mut GMenuAttributeIter) -> *mut GVariant;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GMenuLinkIter {
    pub parent_instance: GObject,
    pub priv_: *mut GMenuLinkIterPrivate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GMenuLinkIterClass {
    pub parent_class: GObjectClass,
    pub get_next: ::core::option::Option<
        unsafe extern "C" fn(
            iter: *mut GMenuLinkIter,
            out_link: *mut *const gchar,
            value: *mut *mut GMenuModel,
        ) -> gboolean,
    >,
}
extern "C" {
    pub fn _frida_g_menu_link_iter_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_menu_link_iter_get_next(
        iter: *mut GMenuLinkIter,
        out_link: *mut *const gchar,
        value: *mut *mut GMenuModel,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_menu_link_iter_next(iter: *mut GMenuLinkIter) -> gboolean;
}
extern "C" {
    pub fn _frida_g_menu_link_iter_get_name(iter: *mut GMenuLinkIter) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_menu_link_iter_get_value(iter: *mut GMenuLinkIter) -> *mut GMenuModel;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GMenuItem {
    _unused: [u8; 0],
}
pub type GMenuItem = _GMenuItem;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GMenu {
    _unused: [u8; 0],
}
pub type GMenu = _GMenu;
extern "C" {
    pub fn _frida_g_menu_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_menu_new() -> *mut GMenu;
}
extern "C" {
    pub fn _frida_g_menu_freeze(menu: *mut GMenu);
}
extern "C" {
    pub fn _frida_g_menu_insert_item(menu: *mut GMenu, position: gint, item: *mut GMenuItem);
}
extern "C" {
    pub fn _frida_g_menu_prepend_item(menu: *mut GMenu, item: *mut GMenuItem);
}
extern "C" {
    pub fn _frida_g_menu_append_item(menu: *mut GMenu, item: *mut GMenuItem);
}
extern "C" {
    pub fn _frida_g_menu_remove(menu: *mut GMenu, position: gint);
}
extern "C" {
    pub fn _frida_g_menu_remove_all(menu: *mut GMenu);
}
extern "C" {
    pub fn _frida_g_menu_insert(
        menu: *mut GMenu,
        position: gint,
        label: *const gchar,
        detailed_action: *const gchar,
    );
}
extern "C" {
    pub fn _frida_g_menu_prepend(
        menu: *mut GMenu,
        label: *const gchar,
        detailed_action: *const gchar,
    );
}
extern "C" {
    pub fn _frida_g_menu_append(
        menu: *mut GMenu,
        label: *const gchar,
        detailed_action: *const gchar,
    );
}
extern "C" {
    pub fn _frida_g_menu_insert_section(
        menu: *mut GMenu,
        position: gint,
        label: *const gchar,
        section: *mut GMenuModel,
    );
}
extern "C" {
    pub fn _frida_g_menu_prepend_section(
        menu: *mut GMenu,
        label: *const gchar,
        section: *mut GMenuModel,
    );
}
extern "C" {
    pub fn _frida_g_menu_append_section(
        menu: *mut GMenu,
        label: *const gchar,
        section: *mut GMenuModel,
    );
}
extern "C" {
    pub fn _frida_g_menu_insert_submenu(
        menu: *mut GMenu,
        position: gint,
        label: *const gchar,
        submenu: *mut GMenuModel,
    );
}
extern "C" {
    pub fn _frida_g_menu_prepend_submenu(
        menu: *mut GMenu,
        label: *const gchar,
        submenu: *mut GMenuModel,
    );
}
extern "C" {
    pub fn _frida_g_menu_append_submenu(
        menu: *mut GMenu,
        label: *const gchar,
        submenu: *mut GMenuModel,
    );
}
extern "C" {
    pub fn _frida_g_menu_item_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_menu_item_new(
        label: *const gchar,
        detailed_action: *const gchar,
    ) -> *mut GMenuItem;
}
extern "C" {
    pub fn _frida_g_menu_item_new_from_model(
        model: *mut GMenuModel,
        item_index: gint,
    ) -> *mut GMenuItem;
}
extern "C" {
    pub fn _frida_g_menu_item_new_submenu(
        label: *const gchar,
        submenu: *mut GMenuModel,
    ) -> *mut GMenuItem;
}
extern "C" {
    pub fn _frida_g_menu_item_new_section(
        label: *const gchar,
        section: *mut GMenuModel,
    ) -> *mut GMenuItem;
}
extern "C" {
    pub fn _frida_g_menu_item_get_attribute_value(
        menu_item: *mut GMenuItem,
        attribute: *const gchar,
        expected_type: *const GVariantType,
    ) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_menu_item_get_attribute(
        menu_item: *mut GMenuItem,
        attribute: *const gchar,
        format_string: *const gchar,
        ...
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_menu_item_get_link(
        menu_item: *mut GMenuItem,
        link: *const gchar,
    ) -> *mut GMenuModel;
}
extern "C" {
    pub fn _frida_g_menu_item_set_attribute_value(
        menu_item: *mut GMenuItem,
        attribute: *const gchar,
        value: *mut GVariant,
    );
}
extern "C" {
    pub fn _frida_g_menu_item_set_attribute(
        menu_item: *mut GMenuItem,
        attribute: *const gchar,
        format_string: *const gchar,
        ...
    );
}
extern "C" {
    pub fn _frida_g_menu_item_set_link(
        menu_item: *mut GMenuItem,
        link: *const gchar,
        model: *mut GMenuModel,
    );
}
extern "C" {
    pub fn _frida_g_menu_item_set_label(menu_item: *mut GMenuItem, label: *const gchar);
}
extern "C" {
    pub fn _frida_g_menu_item_set_submenu(menu_item: *mut GMenuItem, submenu: *mut GMenuModel);
}
extern "C" {
    pub fn _frida_g_menu_item_set_section(menu_item: *mut GMenuItem, section: *mut GMenuModel);
}
extern "C" {
    pub fn _frida_g_menu_item_set_action_and_target_value(
        menu_item: *mut GMenuItem,
        action: *const gchar,
        target_value: *mut GVariant,
    );
}
extern "C" {
    pub fn _frida_g_menu_item_set_action_and_target(
        menu_item: *mut GMenuItem,
        action: *const gchar,
        format_string: *const gchar,
        ...
    );
}
extern "C" {
    pub fn _frida_g_menu_item_set_detailed_action(
        menu_item: *mut GMenuItem,
        detailed_action: *const gchar,
    );
}
extern "C" {
    pub fn _frida_g_menu_item_set_icon(menu_item: *mut GMenuItem, icon: *mut GIcon);
}
extern "C" {
    pub fn _frida_g_dbus_connection_export_menu_model(
        connection: *mut GDBusConnection,
        object_path: *const gchar,
        menu: *mut GMenuModel,
        error: *mut *mut GError,
    ) -> guint;
}
extern "C" {
    pub fn _frida_g_dbus_connection_unexport_menu_model(
        connection: *mut GDBusConnection,
        export_id: guint,
    );
}
pub type GMountIface = _GMountIface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GMountIface {
    pub g_iface: GTypeInterface,
    pub changed: ::core::option::Option<unsafe extern "C" fn(mount: *mut GMount)>,
    pub unmounted: ::core::option::Option<unsafe extern "C" fn(mount: *mut GMount)>,
    pub get_root: ::core::option::Option<unsafe extern "C" fn(mount: *mut GMount) -> *mut GFile>,
    pub get_name: ::core::option::Option<
        unsafe extern "C" fn(mount: *mut GMount) -> *mut ::core::ffi::c_char,
    >,
    pub get_icon: ::core::option::Option<unsafe extern "C" fn(mount: *mut GMount) -> *mut GIcon>,
    pub get_uuid: ::core::option::Option<
        unsafe extern "C" fn(mount: *mut GMount) -> *mut ::core::ffi::c_char,
    >,
    pub get_volume:
        ::core::option::Option<unsafe extern "C" fn(mount: *mut GMount) -> *mut GVolume>,
    pub get_drive: ::core::option::Option<unsafe extern "C" fn(mount: *mut GMount) -> *mut GDrive>,
    pub can_unmount: ::core::option::Option<unsafe extern "C" fn(mount: *mut GMount) -> gboolean>,
    pub can_eject: ::core::option::Option<unsafe extern "C" fn(mount: *mut GMount) -> gboolean>,
    pub unmount: ::core::option::Option<
        unsafe extern "C" fn(
            mount: *mut GMount,
            flags: GMountUnmountFlags,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub unmount_finish: ::core::option::Option<
        unsafe extern "C" fn(
            mount: *mut GMount,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub eject: ::core::option::Option<
        unsafe extern "C" fn(
            mount: *mut GMount,
            flags: GMountUnmountFlags,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub eject_finish: ::core::option::Option<
        unsafe extern "C" fn(
            mount: *mut GMount,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub remount: ::core::option::Option<
        unsafe extern "C" fn(
            mount: *mut GMount,
            flags: GMountMountFlags,
            mount_operation: *mut GMountOperation,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub remount_finish: ::core::option::Option<
        unsafe extern "C" fn(
            mount: *mut GMount,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub guess_content_type: ::core::option::Option<
        unsafe extern "C" fn(
            mount: *mut GMount,
            force_rescan: gboolean,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub guess_content_type_finish: ::core::option::Option<
        unsafe extern "C" fn(
            mount: *mut GMount,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> *mut *mut gchar,
    >,
    pub guess_content_type_sync: ::core::option::Option<
        unsafe extern "C" fn(
            mount: *mut GMount,
            force_rescan: gboolean,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> *mut *mut gchar,
    >,
    pub pre_unmount: ::core::option::Option<unsafe extern "C" fn(mount: *mut GMount)>,
    pub unmount_with_operation: ::core::option::Option<
        unsafe extern "C" fn(
            mount: *mut GMount,
            flags: GMountUnmountFlags,
            mount_operation: *mut GMountOperation,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub unmount_with_operation_finish: ::core::option::Option<
        unsafe extern "C" fn(
            mount: *mut GMount,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub eject_with_operation: ::core::option::Option<
        unsafe extern "C" fn(
            mount: *mut GMount,
            flags: GMountUnmountFlags,
            mount_operation: *mut GMountOperation,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub eject_with_operation_finish: ::core::option::Option<
        unsafe extern "C" fn(
            mount: *mut GMount,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub get_default_location:
        ::core::option::Option<unsafe extern "C" fn(mount: *mut GMount) -> *mut GFile>,
    pub get_sort_key:
        ::core::option::Option<unsafe extern "C" fn(mount: *mut GMount) -> *const gchar>,
    pub get_symbolic_icon:
        ::core::option::Option<unsafe extern "C" fn(mount: *mut GMount) -> *mut GIcon>,
}
extern "C" {
    pub fn _frida_g_mount_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_mount_get_root(mount: *mut GMount) -> *mut GFile;
}
extern "C" {
    pub fn _frida_g_mount_get_default_location(mount: *mut GMount) -> *mut GFile;
}
extern "C" {
    pub fn _frida_g_mount_get_name(mount: *mut GMount) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_mount_get_icon(mount: *mut GMount) -> *mut GIcon;
}
extern "C" {
    pub fn _frida_g_mount_get_symbolic_icon(mount: *mut GMount) -> *mut GIcon;
}
extern "C" {
    pub fn _frida_g_mount_get_uuid(mount: *mut GMount) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_mount_get_volume(mount: *mut GMount) -> *mut GVolume;
}
extern "C" {
    pub fn _frida_g_mount_get_drive(mount: *mut GMount) -> *mut GDrive;
}
extern "C" {
    pub fn _frida_g_mount_can_unmount(mount: *mut GMount) -> gboolean;
}
extern "C" {
    pub fn _frida_g_mount_can_eject(mount: *mut GMount) -> gboolean;
}
extern "C" {
    pub fn _frida_g_mount_unmount(
        mount: *mut GMount,
        flags: GMountUnmountFlags,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_mount_unmount_finish(
        mount: *mut GMount,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_mount_eject(
        mount: *mut GMount,
        flags: GMountUnmountFlags,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_mount_eject_finish(
        mount: *mut GMount,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_mount_remount(
        mount: *mut GMount,
        flags: GMountMountFlags,
        mount_operation: *mut GMountOperation,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_mount_remount_finish(
        mount: *mut GMount,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_mount_guess_content_type(
        mount: *mut GMount,
        force_rescan: gboolean,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_mount_guess_content_type_finish(
        mount: *mut GMount,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut *mut gchar;
}
extern "C" {
    pub fn _frida_g_mount_guess_content_type_sync(
        mount: *mut GMount,
        force_rescan: gboolean,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut *mut gchar;
}
extern "C" {
    pub fn _frida_g_mount_is_shadowed(mount: *mut GMount) -> gboolean;
}
extern "C" {
    pub fn _frida_g_mount_shadow(mount: *mut GMount);
}
extern "C" {
    pub fn _frida_g_mount_unshadow(mount: *mut GMount);
}
extern "C" {
    pub fn _frida_g_mount_unmount_with_operation(
        mount: *mut GMount,
        flags: GMountUnmountFlags,
        mount_operation: *mut GMountOperation,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_mount_unmount_with_operation_finish(
        mount: *mut GMount,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_mount_eject_with_operation(
        mount: *mut GMount,
        flags: GMountUnmountFlags,
        mount_operation: *mut GMountOperation,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_mount_eject_with_operation_finish(
        mount: *mut GMount,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_mount_get_sort_key(mount: *mut GMount) -> *const gchar;
}
pub type GMountOperationClass = _GMountOperationClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GMountOperationPrivate {
    _unused: [u8; 0],
}
pub type GMountOperationPrivate = _GMountOperationPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GMountOperation {
    pub parent_instance: GObject,
    pub priv_: *mut GMountOperationPrivate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GMountOperationClass {
    pub parent_class: GObjectClass,
    pub ask_password: ::core::option::Option<
        unsafe extern "C" fn(
            op: *mut GMountOperation,
            message: *const ::core::ffi::c_char,
            default_user: *const ::core::ffi::c_char,
            default_domain: *const ::core::ffi::c_char,
            flags: GAskPasswordFlags,
        ),
    >,
    pub ask_question: ::core::option::Option<
        unsafe extern "C" fn(
            op: *mut GMountOperation,
            message: *const ::core::ffi::c_char,
            choices: *mut *const ::core::ffi::c_char,
        ),
    >,
    pub reply: ::core::option::Option<
        unsafe extern "C" fn(op: *mut GMountOperation, result: GMountOperationResult),
    >,
    pub aborted: ::core::option::Option<unsafe extern "C" fn(op: *mut GMountOperation)>,
    pub show_processes: ::core::option::Option<
        unsafe extern "C" fn(
            op: *mut GMountOperation,
            message: *const gchar,
            processes: *mut GArray,
            choices: *mut *const gchar,
        ),
    >,
    pub show_unmount_progress: ::core::option::Option<
        unsafe extern "C" fn(
            op: *mut GMountOperation,
            message: *const gchar,
            time_left: gint64,
            bytes_left: gint64,
        ),
    >,
    pub _g_reserved1: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved2: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved3: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved4: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved5: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved6: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved7: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved8: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved9: ::core::option::Option<unsafe extern "C" fn()>,
}
extern "C" {
    pub fn _frida_g_mount_operation_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_mount_operation_new() -> *mut GMountOperation;
}
extern "C" {
    pub fn _frida_g_mount_operation_get_username(
        op: *mut GMountOperation,
    ) -> *const ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_mount_operation_set_username(
        op: *mut GMountOperation,
        username: *const ::core::ffi::c_char,
    );
}
extern "C" {
    pub fn _frida_g_mount_operation_get_password(
        op: *mut GMountOperation,
    ) -> *const ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_mount_operation_set_password(
        op: *mut GMountOperation,
        password: *const ::core::ffi::c_char,
    );
}
extern "C" {
    pub fn _frida_g_mount_operation_get_anonymous(op: *mut GMountOperation) -> gboolean;
}
extern "C" {
    pub fn _frida_g_mount_operation_set_anonymous(op: *mut GMountOperation, anonymous: gboolean);
}
extern "C" {
    pub fn _frida_g_mount_operation_get_domain(
        op: *mut GMountOperation,
    ) -> *const ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_mount_operation_set_domain(
        op: *mut GMountOperation,
        domain: *const ::core::ffi::c_char,
    );
}
extern "C" {
    pub fn _frida_g_mount_operation_get_password_save(op: *mut GMountOperation) -> GPasswordSave;
}
extern "C" {
    pub fn _frida_g_mount_operation_set_password_save(
        op: *mut GMountOperation,
        save: GPasswordSave,
    );
}
extern "C" {
    pub fn _frida_g_mount_operation_get_choice(op: *mut GMountOperation) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _frida_g_mount_operation_set_choice(
        op: *mut GMountOperation,
        choice: ::core::ffi::c_int,
    );
}
extern "C" {
    pub fn _frida_g_mount_operation_reply(op: *mut GMountOperation, result: GMountOperationResult);
}
extern "C" {
    pub fn _frida_g_mount_operation_get_is_tcrypt_hidden_volume(
        op: *mut GMountOperation,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_mount_operation_set_is_tcrypt_hidden_volume(
        op: *mut GMountOperation,
        hidden_volume: gboolean,
    );
}
extern "C" {
    pub fn _frida_g_mount_operation_get_is_tcrypt_system_volume(
        op: *mut GMountOperation,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_mount_operation_set_is_tcrypt_system_volume(
        op: *mut GMountOperation,
        system_volume: gboolean,
    );
}
extern "C" {
    pub fn _frida_g_mount_operation_get_pim(op: *mut GMountOperation) -> guint;
}
extern "C" {
    pub fn _frida_g_mount_operation_set_pim(op: *mut GMountOperation, pim: guint);
}
pub type GNativeSocketAddressClass = _GNativeSocketAddressClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GNativeSocketAddressPrivate {
    _unused: [u8; 0],
}
pub type GNativeSocketAddressPrivate = _GNativeSocketAddressPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GNativeSocketAddress {
    pub parent_instance: GSocketAddress,
    pub priv_: *mut GNativeSocketAddressPrivate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GNativeSocketAddressClass {
    pub parent_class: GSocketAddressClass,
}
extern "C" {
    pub fn _frida_g_native_socket_address_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_native_socket_address_new(native: gpointer, len: gsize) -> *mut GSocketAddress;
}
pub type GVolumeMonitorClass = _GVolumeMonitorClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GVolumeMonitor {
    pub parent_instance: GObject,
    pub priv_: gpointer,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GVolumeMonitorClass {
    pub parent_class: GObjectClass,
    pub volume_added: ::core::option::Option<
        unsafe extern "C" fn(volume_monitor: *mut GVolumeMonitor, volume: *mut GVolume),
    >,
    pub volume_removed: ::core::option::Option<
        unsafe extern "C" fn(volume_monitor: *mut GVolumeMonitor, volume: *mut GVolume),
    >,
    pub volume_changed: ::core::option::Option<
        unsafe extern "C" fn(volume_monitor: *mut GVolumeMonitor, volume: *mut GVolume),
    >,
    pub mount_added: ::core::option::Option<
        unsafe extern "C" fn(volume_monitor: *mut GVolumeMonitor, mount: *mut GMount),
    >,
    pub mount_removed: ::core::option::Option<
        unsafe extern "C" fn(volume_monitor: *mut GVolumeMonitor, mount: *mut GMount),
    >,
    pub mount_pre_unmount: ::core::option::Option<
        unsafe extern "C" fn(volume_monitor: *mut GVolumeMonitor, mount: *mut GMount),
    >,
    pub mount_changed: ::core::option::Option<
        unsafe extern "C" fn(volume_monitor: *mut GVolumeMonitor, mount: *mut GMount),
    >,
    pub drive_connected: ::core::option::Option<
        unsafe extern "C" fn(volume_monitor: *mut GVolumeMonitor, drive: *mut GDrive),
    >,
    pub drive_disconnected: ::core::option::Option<
        unsafe extern "C" fn(volume_monitor: *mut GVolumeMonitor, drive: *mut GDrive),
    >,
    pub drive_changed: ::core::option::Option<
        unsafe extern "C" fn(volume_monitor: *mut GVolumeMonitor, drive: *mut GDrive),
    >,
    pub is_supported: ::core::option::Option<unsafe extern "C" fn() -> gboolean>,
    pub get_connected_drives: ::core::option::Option<
        unsafe extern "C" fn(volume_monitor: *mut GVolumeMonitor) -> *mut GList,
    >,
    pub get_volumes: ::core::option::Option<
        unsafe extern "C" fn(volume_monitor: *mut GVolumeMonitor) -> *mut GList,
    >,
    pub get_mounts: ::core::option::Option<
        unsafe extern "C" fn(volume_monitor: *mut GVolumeMonitor) -> *mut GList,
    >,
    pub get_volume_for_uuid: ::core::option::Option<
        unsafe extern "C" fn(
            volume_monitor: *mut GVolumeMonitor,
            uuid: *const ::core::ffi::c_char,
        ) -> *mut GVolume,
    >,
    pub get_mount_for_uuid: ::core::option::Option<
        unsafe extern "C" fn(
            volume_monitor: *mut GVolumeMonitor,
            uuid: *const ::core::ffi::c_char,
        ) -> *mut GMount,
    >,
    pub adopt_orphan_mount: ::core::option::Option<
        unsafe extern "C" fn(
            mount: *mut GMount,
            volume_monitor: *mut GVolumeMonitor,
        ) -> *mut GVolume,
    >,
    pub drive_eject_button: ::core::option::Option<
        unsafe extern "C" fn(volume_monitor: *mut GVolumeMonitor, drive: *mut GDrive),
    >,
    pub drive_stop_button: ::core::option::Option<
        unsafe extern "C" fn(volume_monitor: *mut GVolumeMonitor, drive: *mut GDrive),
    >,
    pub _g_reserved1: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved2: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved3: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved4: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved5: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved6: ::core::option::Option<unsafe extern "C" fn()>,
}
extern "C" {
    pub fn _frida_g_volume_monitor_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_volume_monitor_get() -> *mut GVolumeMonitor;
}
extern "C" {
    pub fn _frida_g_volume_monitor_get_connected_drives(
        volume_monitor: *mut GVolumeMonitor,
    ) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_volume_monitor_get_volumes(volume_monitor: *mut GVolumeMonitor) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_volume_monitor_get_mounts(volume_monitor: *mut GVolumeMonitor) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_volume_monitor_get_volume_for_uuid(
        volume_monitor: *mut GVolumeMonitor,
        uuid: *const ::core::ffi::c_char,
    ) -> *mut GVolume;
}
extern "C" {
    pub fn _frida_g_volume_monitor_get_mount_for_uuid(
        volume_monitor: *mut GVolumeMonitor,
        uuid: *const ::core::ffi::c_char,
    ) -> *mut GMount;
}
extern "C" {
    pub fn _frida_g_volume_monitor_adopt_orphan_mount(mount: *mut GMount) -> *mut GVolume;
}
pub type GNativeVolumeMonitor = _GNativeVolumeMonitor;
pub type GNativeVolumeMonitorClass = _GNativeVolumeMonitorClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GNativeVolumeMonitor {
    pub parent_instance: GVolumeMonitor,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GNativeVolumeMonitorClass {
    pub parent_class: GVolumeMonitorClass,
    pub get_mount_for_mount_path: ::core::option::Option<
        unsafe extern "C" fn(
            mount_path: *const ::core::ffi::c_char,
            cancellable: *mut GCancellable,
        ) -> *mut GMount,
    >,
}
extern "C" {
    pub fn _frida_g_native_volume_monitor_get_type() -> GType;
}
pub type GNetworkAddressClass = _GNetworkAddressClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GNetworkAddressPrivate {
    _unused: [u8; 0],
}
pub type GNetworkAddressPrivate = _GNetworkAddressPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GNetworkAddress {
    pub parent_instance: GObject,
    pub priv_: *mut GNetworkAddressPrivate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GNetworkAddressClass {
    pub parent_class: GObjectClass,
}
extern "C" {
    pub fn _frida_g_network_address_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_network_address_new(
        hostname: *const gchar,
        port: guint16,
    ) -> *mut GSocketConnectable;
}
extern "C" {
    pub fn _frida_g_network_address_new_loopback(port: guint16) -> *mut GSocketConnectable;
}
extern "C" {
    pub fn _frida_g_network_address_parse(
        host_and_port: *const gchar,
        default_port: guint16,
        error: *mut *mut GError,
    ) -> *mut GSocketConnectable;
}
extern "C" {
    pub fn _frida_g_network_address_parse_uri(
        uri: *const gchar,
        default_port: guint16,
        error: *mut *mut GError,
    ) -> *mut GSocketConnectable;
}
extern "C" {
    pub fn _frida_g_network_address_get_hostname(addr: *mut GNetworkAddress) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_network_address_get_port(addr: *mut GNetworkAddress) -> guint16;
}
extern "C" {
    pub fn _frida_g_network_address_get_scheme(addr: *mut GNetworkAddress) -> *const gchar;
}
pub type GNetworkMonitorInterface = _GNetworkMonitorInterface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GNetworkMonitorInterface {
    pub g_iface: GTypeInterface,
    pub network_changed: ::core::option::Option<
        unsafe extern "C" fn(monitor: *mut GNetworkMonitor, network_available: gboolean),
    >,
    pub can_reach: ::core::option::Option<
        unsafe extern "C" fn(
            monitor: *mut GNetworkMonitor,
            connectable: *mut GSocketConnectable,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub can_reach_async: ::core::option::Option<
        unsafe extern "C" fn(
            monitor: *mut GNetworkMonitor,
            connectable: *mut GSocketConnectable,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub can_reach_finish: ::core::option::Option<
        unsafe extern "C" fn(
            monitor: *mut GNetworkMonitor,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
}
extern "C" {
    pub fn _frida_g_network_monitor_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_network_monitor_get_default() -> *mut GNetworkMonitor;
}
extern "C" {
    pub fn _frida_g_network_monitor_get_network_available(
        monitor: *mut GNetworkMonitor,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_network_monitor_get_network_metered(monitor: *mut GNetworkMonitor) -> gboolean;
}
extern "C" {
    pub fn _frida_g_network_monitor_get_connectivity(
        monitor: *mut GNetworkMonitor,
    ) -> GNetworkConnectivity;
}
extern "C" {
    pub fn _frida_g_network_monitor_can_reach(
        monitor: *mut GNetworkMonitor,
        connectable: *mut GSocketConnectable,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_network_monitor_can_reach_async(
        monitor: *mut GNetworkMonitor,
        connectable: *mut GSocketConnectable,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_network_monitor_can_reach_finish(
        monitor: *mut GNetworkMonitor,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gboolean;
}
pub type GNetworkServiceClass = _GNetworkServiceClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GNetworkServicePrivate {
    _unused: [u8; 0],
}
pub type GNetworkServicePrivate = _GNetworkServicePrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GNetworkService {
    pub parent_instance: GObject,
    pub priv_: *mut GNetworkServicePrivate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GNetworkServiceClass {
    pub parent_class: GObjectClass,
}
extern "C" {
    pub fn _frida_g_network_service_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_network_service_new(
        service: *const gchar,
        protocol: *const gchar,
        domain: *const gchar,
    ) -> *mut GSocketConnectable;
}
extern "C" {
    pub fn _frida_g_network_service_get_service(srv: *mut GNetworkService) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_network_service_get_protocol(srv: *mut GNetworkService) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_network_service_get_domain(srv: *mut GNetworkService) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_network_service_get_scheme(srv: *mut GNetworkService) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_network_service_set_scheme(srv: *mut GNetworkService, scheme: *const gchar);
}
extern "C" {
    pub fn _frida_g_notification_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_notification_new(title: *const gchar) -> *mut GNotification;
}
extern "C" {
    pub fn _frida_g_notification_set_title(notification: *mut GNotification, title: *const gchar);
}
extern "C" {
    pub fn _frida_g_notification_set_body(notification: *mut GNotification, body: *const gchar);
}
extern "C" {
    pub fn _frida_g_notification_set_icon(notification: *mut GNotification, icon: *mut GIcon);
}
extern "C" {
    pub fn _frida_g_notification_set_urgent(notification: *mut GNotification, urgent: gboolean);
}
extern "C" {
    pub fn _frida_g_notification_set_priority(
        notification: *mut GNotification,
        priority: GNotificationPriority,
    );
}
extern "C" {
    pub fn _frida_g_notification_set_category(
        notification: *mut GNotification,
        category: *const gchar,
    );
}
extern "C" {
    pub fn _frida_g_notification_add_button(
        notification: *mut GNotification,
        label: *const gchar,
        detailed_action: *const gchar,
    );
}
extern "C" {
    pub fn _frida_g_notification_add_button_with_target(
        notification: *mut GNotification,
        label: *const gchar,
        action: *const gchar,
        target_format: *const gchar,
        ...
    );
}
extern "C" {
    pub fn _frida_g_notification_add_button_with_target_value(
        notification: *mut GNotification,
        label: *const gchar,
        action: *const gchar,
        target: *mut GVariant,
    );
}
extern "C" {
    pub fn _frida_g_notification_set_default_action(
        notification: *mut GNotification,
        detailed_action: *const gchar,
    );
}
extern "C" {
    pub fn _frida_g_notification_set_default_action_and_target(
        notification: *mut GNotification,
        action: *const gchar,
        target_format: *const gchar,
        ...
    );
}
extern "C" {
    pub fn _frida_g_notification_set_default_action_and_target_value(
        notification: *mut GNotification,
        action: *const gchar,
        target: *mut GVariant,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GPermissionPrivate {
    _unused: [u8; 0],
}
pub type GPermissionPrivate = _GPermissionPrivate;
pub type GPermissionClass = _GPermissionClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GPermission {
    pub parent_instance: GObject,
    pub priv_: *mut GPermissionPrivate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GPermissionClass {
    pub parent_class: GObjectClass,
    pub acquire: ::core::option::Option<
        unsafe extern "C" fn(
            permission: *mut GPermission,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub acquire_async: ::core::option::Option<
        unsafe extern "C" fn(
            permission: *mut GPermission,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub acquire_finish: ::core::option::Option<
        unsafe extern "C" fn(
            permission: *mut GPermission,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub release: ::core::option::Option<
        unsafe extern "C" fn(
            permission: *mut GPermission,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub release_async: ::core::option::Option<
        unsafe extern "C" fn(
            permission: *mut GPermission,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub release_finish: ::core::option::Option<
        unsafe extern "C" fn(
            permission: *mut GPermission,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub reserved: [gpointer; 16usize],
}
extern "C" {
    pub fn _frida_g_permission_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_permission_acquire(
        permission: *mut GPermission,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_permission_acquire_async(
        permission: *mut GPermission,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_permission_acquire_finish(
        permission: *mut GPermission,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_permission_release(
        permission: *mut GPermission,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_permission_release_async(
        permission: *mut GPermission,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_permission_release_finish(
        permission: *mut GPermission,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_permission_get_allowed(permission: *mut GPermission) -> gboolean;
}
extern "C" {
    pub fn _frida_g_permission_get_can_acquire(permission: *mut GPermission) -> gboolean;
}
extern "C" {
    pub fn _frida_g_permission_get_can_release(permission: *mut GPermission) -> gboolean;
}
extern "C" {
    pub fn _frida_g_permission_impl_update(
        permission: *mut GPermission,
        allowed: gboolean,
        can_acquire: gboolean,
        can_release: gboolean,
    );
}
pub type GPollableInputStreamInterface = _GPollableInputStreamInterface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GPollableInputStreamInterface {
    pub g_iface: GTypeInterface,
    pub can_poll:
        ::core::option::Option<unsafe extern "C" fn(stream: *mut GPollableInputStream) -> gboolean>,
    pub is_readable:
        ::core::option::Option<unsafe extern "C" fn(stream: *mut GPollableInputStream) -> gboolean>,
    pub create_source: ::core::option::Option<
        unsafe extern "C" fn(
            stream: *mut GPollableInputStream,
            cancellable: *mut GCancellable,
        ) -> *mut GSource,
    >,
    pub read_nonblocking: ::core::option::Option<
        unsafe extern "C" fn(
            stream: *mut GPollableInputStream,
            buffer: *mut ::core::ffi::c_void,
            count: gsize,
            error: *mut *mut GError,
        ) -> gssize,
    >,
}
extern "C" {
    pub fn _frida_g_pollable_input_stream_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_pollable_input_stream_can_poll(stream: *mut GPollableInputStream) -> gboolean;
}
extern "C" {
    pub fn _frida_g_pollable_input_stream_is_readable(
        stream: *mut GPollableInputStream,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_pollable_input_stream_create_source(
        stream: *mut GPollableInputStream,
        cancellable: *mut GCancellable,
    ) -> *mut GSource;
}
extern "C" {
    pub fn _frida_g_pollable_input_stream_read_nonblocking(
        stream: *mut GPollableInputStream,
        buffer: *mut ::core::ffi::c_void,
        count: gsize,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gssize;
}
pub type GPollableOutputStreamInterface = _GPollableOutputStreamInterface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GPollableOutputStreamInterface {
    pub g_iface: GTypeInterface,
    pub can_poll: ::core::option::Option<
        unsafe extern "C" fn(stream: *mut GPollableOutputStream) -> gboolean,
    >,
    pub is_writable: ::core::option::Option<
        unsafe extern "C" fn(stream: *mut GPollableOutputStream) -> gboolean,
    >,
    pub create_source: ::core::option::Option<
        unsafe extern "C" fn(
            stream: *mut GPollableOutputStream,
            cancellable: *mut GCancellable,
        ) -> *mut GSource,
    >,
    pub write_nonblocking: ::core::option::Option<
        unsafe extern "C" fn(
            stream: *mut GPollableOutputStream,
            buffer: *const ::core::ffi::c_void,
            count: gsize,
            error: *mut *mut GError,
        ) -> gssize,
    >,
    pub writev_nonblocking: ::core::option::Option<
        unsafe extern "C" fn(
            stream: *mut GPollableOutputStream,
            vectors: *const GOutputVector,
            n_vectors: gsize,
            bytes_written: *mut gsize,
            error: *mut *mut GError,
        ) -> GPollableReturn,
    >,
}
extern "C" {
    pub fn _frida_g_pollable_output_stream_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_pollable_output_stream_can_poll(stream: *mut GPollableOutputStream)
        -> gboolean;
}
extern "C" {
    pub fn _frida_g_pollable_output_stream_is_writable(
        stream: *mut GPollableOutputStream,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_pollable_output_stream_create_source(
        stream: *mut GPollableOutputStream,
        cancellable: *mut GCancellable,
    ) -> *mut GSource;
}
extern "C" {
    pub fn _frida_g_pollable_output_stream_write_nonblocking(
        stream: *mut GPollableOutputStream,
        buffer: *const ::core::ffi::c_void,
        count: gsize,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gssize;
}
extern "C" {
    pub fn _frida_g_pollable_output_stream_writev_nonblocking(
        stream: *mut GPollableOutputStream,
        vectors: *const GOutputVector,
        n_vectors: gsize,
        bytes_written: *mut gsize,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> GPollableReturn;
}
extern "C" {
    pub fn _frida_g_pollable_source_new(pollable_stream: *mut GObject) -> *mut GSource;
}
extern "C" {
    pub fn _frida_g_pollable_source_new_full(
        pollable_stream: gpointer,
        child_source: *mut GSource,
        cancellable: *mut GCancellable,
    ) -> *mut GSource;
}
extern "C" {
    pub fn _frida_g_pollable_stream_read(
        stream: *mut GInputStream,
        buffer: *mut ::core::ffi::c_void,
        count: gsize,
        blocking: gboolean,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gssize;
}
extern "C" {
    pub fn _frida_g_pollable_stream_write(
        stream: *mut GOutputStream,
        buffer: *const ::core::ffi::c_void,
        count: gsize,
        blocking: gboolean,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gssize;
}
extern "C" {
    pub fn _frida_g_pollable_stream_write_all(
        stream: *mut GOutputStream,
        buffer: *const ::core::ffi::c_void,
        count: gsize,
        blocking: gboolean,
        bytes_written: *mut gsize,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_power_profile_monitor_get_type() -> GType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GPowerProfileMonitor {
    _unused: [u8; 0],
}
pub type GPowerProfileMonitor = _GPowerProfileMonitor;
pub type GPowerProfileMonitorInterface = _GPowerProfileMonitorInterface;
pub type GPowerProfileMonitor_autoptr = *mut GPowerProfileMonitor;
pub type GPowerProfileMonitor_listautoptr = *mut GList;
pub type GPowerProfileMonitor_slistautoptr = *mut GSList;
pub type GPowerProfileMonitor_queueautoptr = *mut GQueue;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GPowerProfileMonitorInterface {
    pub g_iface: GTypeInterface,
}
extern "C" {
    pub fn _frida_g_power_profile_monitor_dup_default() -> *mut GPowerProfileMonitor;
}
extern "C" {
    pub fn _frida_g_power_profile_monitor_get_power_saver_enabled(
        monitor: *mut GPowerProfileMonitor,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_property_action_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_property_action_new(
        name: *const gchar,
        object: gpointer,
        property_name: *const gchar,
    ) -> *mut GPropertyAction;
}
pub type GProxyInterface = _GProxyInterface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GProxyInterface {
    pub g_iface: GTypeInterface,
    pub connect: ::core::option::Option<
        unsafe extern "C" fn(
            proxy: *mut GProxy,
            connection: *mut GIOStream,
            proxy_address: *mut GProxyAddress,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> *mut GIOStream,
    >,
    pub connect_async: ::core::option::Option<
        unsafe extern "C" fn(
            proxy: *mut GProxy,
            connection: *mut GIOStream,
            proxy_address: *mut GProxyAddress,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub connect_finish: ::core::option::Option<
        unsafe extern "C" fn(
            proxy: *mut GProxy,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> *mut GIOStream,
    >,
    pub supports_hostname:
        ::core::option::Option<unsafe extern "C" fn(proxy: *mut GProxy) -> gboolean>,
}
extern "C" {
    pub fn _frida_g_proxy_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_proxy_get_default_for_protocol(protocol: *const gchar) -> *mut GProxy;
}
extern "C" {
    pub fn _frida_g_proxy_connect(
        proxy: *mut GProxy,
        connection: *mut GIOStream,
        proxy_address: *mut GProxyAddress,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GIOStream;
}
extern "C" {
    pub fn _frida_g_proxy_connect_async(
        proxy: *mut GProxy,
        connection: *mut GIOStream,
        proxy_address: *mut GProxyAddress,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_proxy_connect_finish(
        proxy: *mut GProxy,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GIOStream;
}
extern "C" {
    pub fn _frida_g_proxy_supports_hostname(proxy: *mut GProxy) -> gboolean;
}
pub type GProxyAddressClass = _GProxyAddressClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GProxyAddressPrivate {
    _unused: [u8; 0],
}
pub type GProxyAddressPrivate = _GProxyAddressPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GProxyAddress {
    pub parent_instance: GInetSocketAddress,
    pub priv_: *mut GProxyAddressPrivate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GProxyAddressClass {
    pub parent_class: GInetSocketAddressClass,
}
extern "C" {
    pub fn _frida_g_proxy_address_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_proxy_address_new(
        inetaddr: *mut GInetAddress,
        port: guint16,
        protocol: *const gchar,
        dest_hostname: *const gchar,
        dest_port: guint16,
        username: *const gchar,
        password: *const gchar,
    ) -> *mut GSocketAddress;
}
extern "C" {
    pub fn _frida_g_proxy_address_get_protocol(proxy: *mut GProxyAddress) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_proxy_address_get_destination_protocol(
        proxy: *mut GProxyAddress,
    ) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_proxy_address_get_destination_hostname(
        proxy: *mut GProxyAddress,
    ) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_proxy_address_get_destination_port(proxy: *mut GProxyAddress) -> guint16;
}
extern "C" {
    pub fn _frida_g_proxy_address_get_username(proxy: *mut GProxyAddress) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_proxy_address_get_password(proxy: *mut GProxyAddress) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_proxy_address_get_uri(proxy: *mut GProxyAddress) -> *const gchar;
}
pub type GSocketAddressEnumeratorClass = _GSocketAddressEnumeratorClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSocketAddressEnumerator {
    pub parent_instance: GObject,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSocketAddressEnumeratorClass {
    pub parent_class: GObjectClass,
    pub next: ::core::option::Option<
        unsafe extern "C" fn(
            enumerator: *mut GSocketAddressEnumerator,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> *mut GSocketAddress,
    >,
    pub next_async: ::core::option::Option<
        unsafe extern "C" fn(
            enumerator: *mut GSocketAddressEnumerator,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub next_finish: ::core::option::Option<
        unsafe extern "C" fn(
            enumerator: *mut GSocketAddressEnumerator,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> *mut GSocketAddress,
    >,
}
extern "C" {
    pub fn _frida_g_socket_address_enumerator_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_socket_address_enumerator_next(
        enumerator: *mut GSocketAddressEnumerator,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GSocketAddress;
}
extern "C" {
    pub fn _frida_g_socket_address_enumerator_next_async(
        enumerator: *mut GSocketAddressEnumerator,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_socket_address_enumerator_next_finish(
        enumerator: *mut GSocketAddressEnumerator,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GSocketAddress;
}
pub type GProxyAddressEnumeratorClass = _GProxyAddressEnumeratorClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GProxyAddressEnumeratorPrivate {
    _unused: [u8; 0],
}
pub type GProxyAddressEnumeratorPrivate = _GProxyAddressEnumeratorPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GProxyAddressEnumerator {
    pub parent_instance: GSocketAddressEnumerator,
    pub priv_: *mut GProxyAddressEnumeratorPrivate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GProxyAddressEnumeratorClass {
    pub parent_class: GSocketAddressEnumeratorClass,
    pub _g_reserved1: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved2: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved3: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved4: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved5: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved6: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved7: ::core::option::Option<unsafe extern "C" fn()>,
}
extern "C" {
    pub fn _frida_g_proxy_address_enumerator_get_type() -> GType;
}
pub type GProxyResolverInterface = _GProxyResolverInterface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GProxyResolverInterface {
    pub g_iface: GTypeInterface,
    pub is_supported:
        ::core::option::Option<unsafe extern "C" fn(resolver: *mut GProxyResolver) -> gboolean>,
    pub lookup: ::core::option::Option<
        unsafe extern "C" fn(
            resolver: *mut GProxyResolver,
            uri: *const gchar,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> *mut *mut gchar,
    >,
    pub lookup_async: ::core::option::Option<
        unsafe extern "C" fn(
            resolver: *mut GProxyResolver,
            uri: *const gchar,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub lookup_finish: ::core::option::Option<
        unsafe extern "C" fn(
            resolver: *mut GProxyResolver,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> *mut *mut gchar,
    >,
}
extern "C" {
    pub fn _frida_g_proxy_resolver_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_proxy_resolver_get_default() -> *mut GProxyResolver;
}
extern "C" {
    pub fn _frida_g_proxy_resolver_is_supported(resolver: *mut GProxyResolver) -> gboolean;
}
extern "C" {
    pub fn _frida_g_proxy_resolver_lookup(
        resolver: *mut GProxyResolver,
        uri: *const gchar,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut *mut gchar;
}
extern "C" {
    pub fn _frida_g_proxy_resolver_lookup_async(
        resolver: *mut GProxyResolver,
        uri: *const gchar,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_proxy_resolver_lookup_finish(
        resolver: *mut GProxyResolver,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut *mut gchar;
}
pub type GRemoteActionGroupInterface = _GRemoteActionGroupInterface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GRemoteActionGroupInterface {
    pub g_iface: GTypeInterface,
    pub activate_action_full: ::core::option::Option<
        unsafe extern "C" fn(
            remote: *mut GRemoteActionGroup,
            action_name: *const gchar,
            parameter: *mut GVariant,
            platform_data: *mut GVariant,
        ),
    >,
    pub change_action_state_full: ::core::option::Option<
        unsafe extern "C" fn(
            remote: *mut GRemoteActionGroup,
            action_name: *const gchar,
            value: *mut GVariant,
            platform_data: *mut GVariant,
        ),
    >,
}
extern "C" {
    pub fn _frida_g_remote_action_group_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_remote_action_group_activate_action_full(
        remote: *mut GRemoteActionGroup,
        action_name: *const gchar,
        parameter: *mut GVariant,
        platform_data: *mut GVariant,
    );
}
extern "C" {
    pub fn _frida_g_remote_action_group_change_action_state_full(
        remote: *mut GRemoteActionGroup,
        action_name: *const gchar,
        value: *mut GVariant,
        platform_data: *mut GVariant,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GResolverPrivate {
    _unused: [u8; 0],
}
pub type GResolverPrivate = _GResolverPrivate;
pub type GResolverClass = _GResolverClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GResolver {
    pub parent_instance: GObject,
    pub priv_: *mut GResolverPrivate,
}
pub const GResolverNameLookupFlags_G_RESOLVER_NAME_LOOKUP_FLAGS_DEFAULT: GResolverNameLookupFlags =
    0;
pub const GResolverNameLookupFlags_G_RESOLVER_NAME_LOOKUP_FLAGS_IPV4_ONLY:
    GResolverNameLookupFlags = 1;
pub const GResolverNameLookupFlags_G_RESOLVER_NAME_LOOKUP_FLAGS_IPV6_ONLY:
    GResolverNameLookupFlags = 2;
pub type GResolverNameLookupFlags = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GResolverClass {
    pub parent_class: GObjectClass,
    pub reload: ::core::option::Option<unsafe extern "C" fn(resolver: *mut GResolver)>,
    pub lookup_by_name: ::core::option::Option<
        unsafe extern "C" fn(
            resolver: *mut GResolver,
            hostname: *const gchar,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> *mut GList,
    >,
    pub lookup_by_name_async: ::core::option::Option<
        unsafe extern "C" fn(
            resolver: *mut GResolver,
            hostname: *const gchar,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub lookup_by_name_finish: ::core::option::Option<
        unsafe extern "C" fn(
            resolver: *mut GResolver,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> *mut GList,
    >,
    pub lookup_by_address: ::core::option::Option<
        unsafe extern "C" fn(
            resolver: *mut GResolver,
            address: *mut GInetAddress,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> *mut gchar,
    >,
    pub lookup_by_address_async: ::core::option::Option<
        unsafe extern "C" fn(
            resolver: *mut GResolver,
            address: *mut GInetAddress,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub lookup_by_address_finish: ::core::option::Option<
        unsafe extern "C" fn(
            resolver: *mut GResolver,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> *mut gchar,
    >,
    pub lookup_service: ::core::option::Option<
        unsafe extern "C" fn(
            resolver: *mut GResolver,
            rrname: *const gchar,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> *mut GList,
    >,
    pub lookup_service_async: ::core::option::Option<
        unsafe extern "C" fn(
            resolver: *mut GResolver,
            rrname: *const gchar,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub lookup_service_finish: ::core::option::Option<
        unsafe extern "C" fn(
            resolver: *mut GResolver,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> *mut GList,
    >,
    pub lookup_records: ::core::option::Option<
        unsafe extern "C" fn(
            resolver: *mut GResolver,
            rrname: *const gchar,
            record_type: GResolverRecordType,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> *mut GList,
    >,
    pub lookup_records_async: ::core::option::Option<
        unsafe extern "C" fn(
            resolver: *mut GResolver,
            rrname: *const gchar,
            record_type: GResolverRecordType,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub lookup_records_finish: ::core::option::Option<
        unsafe extern "C" fn(
            resolver: *mut GResolver,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> *mut GList,
    >,
    pub lookup_by_name_with_flags_async: ::core::option::Option<
        unsafe extern "C" fn(
            resolver: *mut GResolver,
            hostname: *const gchar,
            flags: GResolverNameLookupFlags,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub lookup_by_name_with_flags_finish: ::core::option::Option<
        unsafe extern "C" fn(
            resolver: *mut GResolver,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> *mut GList,
    >,
    pub lookup_by_name_with_flags: ::core::option::Option<
        unsafe extern "C" fn(
            resolver: *mut GResolver,
            hostname: *const gchar,
            flags: GResolverNameLookupFlags,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> *mut GList,
    >,
}
extern "C" {
    pub fn _frida_g_resolver_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_resolver_get_default() -> *mut GResolver;
}
extern "C" {
    pub fn _frida_g_resolver_set_default(resolver: *mut GResolver);
}
extern "C" {
    pub fn _frida_g_resolver_lookup_by_name(
        resolver: *mut GResolver,
        hostname: *const gchar,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_resolver_lookup_by_name_async(
        resolver: *mut GResolver,
        hostname: *const gchar,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_resolver_lookup_by_name_finish(
        resolver: *mut GResolver,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_resolver_lookup_by_name_with_flags_async(
        resolver: *mut GResolver,
        hostname: *const gchar,
        flags: GResolverNameLookupFlags,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_resolver_lookup_by_name_with_flags_finish(
        resolver: *mut GResolver,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_resolver_lookup_by_name_with_flags(
        resolver: *mut GResolver,
        hostname: *const gchar,
        flags: GResolverNameLookupFlags,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_resolver_free_addresses(addresses: *mut GList);
}
extern "C" {
    pub fn _frida_g_resolver_lookup_by_address(
        resolver: *mut GResolver,
        address: *mut GInetAddress,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_resolver_lookup_by_address_async(
        resolver: *mut GResolver,
        address: *mut GInetAddress,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_resolver_lookup_by_address_finish(
        resolver: *mut GResolver,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_resolver_lookup_service(
        resolver: *mut GResolver,
        service: *const gchar,
        protocol: *const gchar,
        domain: *const gchar,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_resolver_lookup_service_async(
        resolver: *mut GResolver,
        service: *const gchar,
        protocol: *const gchar,
        domain: *const gchar,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_resolver_lookup_service_finish(
        resolver: *mut GResolver,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_resolver_lookup_records(
        resolver: *mut GResolver,
        rrname: *const gchar,
        record_type: GResolverRecordType,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_resolver_lookup_records_async(
        resolver: *mut GResolver,
        rrname: *const gchar,
        record_type: GResolverRecordType,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_resolver_lookup_records_finish(
        resolver: *mut GResolver,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_resolver_free_targets(targets: *mut GList);
}
extern "C" {
    pub fn _frida_g_resolver_error_quark() -> GQuark;
}
extern "C" {
    pub fn _frida_g_resource_error_quark() -> GQuark;
}
pub type GStaticResource = _GStaticResource;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GStaticResource {
    pub data: *const guint8,
    pub data_len: gsize,
    pub resource: *mut GResource,
    pub next: *mut GStaticResource,
    pub padding: gpointer,
}
extern "C" {
    pub fn _frida_g_resource_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_resource_new_from_data(
        data: *mut GBytes,
        error: *mut *mut GError,
    ) -> *mut GResource;
}
extern "C" {
    pub fn _frida_g_resource_ref(resource: *mut GResource) -> *mut GResource;
}
extern "C" {
    pub fn _frida_g_resource_unref(resource: *mut GResource);
}
extern "C" {
    pub fn _frida_g_resource_load(
        filename: *const gchar,
        error: *mut *mut GError,
    ) -> *mut GResource;
}
extern "C" {
    pub fn _frida_g_resource_open_stream(
        resource: *mut GResource,
        path: *const ::core::ffi::c_char,
        lookup_flags: GResourceLookupFlags,
        error: *mut *mut GError,
    ) -> *mut GInputStream;
}
extern "C" {
    pub fn _frida_g_resource_lookup_data(
        resource: *mut GResource,
        path: *const ::core::ffi::c_char,
        lookup_flags: GResourceLookupFlags,
        error: *mut *mut GError,
    ) -> *mut GBytes;
}
extern "C" {
    pub fn _frida_g_resource_enumerate_children(
        resource: *mut GResource,
        path: *const ::core::ffi::c_char,
        lookup_flags: GResourceLookupFlags,
        error: *mut *mut GError,
    ) -> *mut *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_resource_get_info(
        resource: *mut GResource,
        path: *const ::core::ffi::c_char,
        lookup_flags: GResourceLookupFlags,
        size: *mut gsize,
        flags: *mut guint32,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_resources_register(resource: *mut GResource);
}
extern "C" {
    pub fn _frida_g_resources_unregister(resource: *mut GResource);
}
extern "C" {
    pub fn _frida_g_resources_open_stream(
        path: *const ::core::ffi::c_char,
        lookup_flags: GResourceLookupFlags,
        error: *mut *mut GError,
    ) -> *mut GInputStream;
}
extern "C" {
    pub fn _frida_g_resources_lookup_data(
        path: *const ::core::ffi::c_char,
        lookup_flags: GResourceLookupFlags,
        error: *mut *mut GError,
    ) -> *mut GBytes;
}
extern "C" {
    pub fn _frida_g_resources_enumerate_children(
        path: *const ::core::ffi::c_char,
        lookup_flags: GResourceLookupFlags,
        error: *mut *mut GError,
    ) -> *mut *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_resources_get_info(
        path: *const ::core::ffi::c_char,
        lookup_flags: GResourceLookupFlags,
        size: *mut gsize,
        flags: *mut guint32,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_static_resource_init(static_resource: *mut GStaticResource);
}
extern "C" {
    pub fn _frida_g_static_resource_fini(static_resource: *mut GStaticResource);
}
extern "C" {
    pub fn _frida_g_static_resource_get_resource(
        static_resource: *mut GStaticResource,
    ) -> *mut GResource;
}
pub type GSeekableIface = _GSeekableIface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSeekableIface {
    pub g_iface: GTypeInterface,
    pub tell: ::core::option::Option<unsafe extern "C" fn(seekable: *mut GSeekable) -> goffset>,
    pub can_seek:
        ::core::option::Option<unsafe extern "C" fn(seekable: *mut GSeekable) -> gboolean>,
    pub seek: ::core::option::Option<
        unsafe extern "C" fn(
            seekable: *mut GSeekable,
            offset: goffset,
            type_: GSeekType,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub can_truncate:
        ::core::option::Option<unsafe extern "C" fn(seekable: *mut GSeekable) -> gboolean>,
    pub truncate_fn: ::core::option::Option<
        unsafe extern "C" fn(
            seekable: *mut GSeekable,
            offset: goffset,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
}
extern "C" {
    pub fn _frida_g_seekable_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_seekable_tell(seekable: *mut GSeekable) -> goffset;
}
extern "C" {
    pub fn _frida_g_seekable_can_seek(seekable: *mut GSeekable) -> gboolean;
}
extern "C" {
    pub fn _frida_g_seekable_seek(
        seekable: *mut GSeekable,
        offset: goffset,
        type_: GSeekType,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_seekable_can_truncate(seekable: *mut GSeekable) -> gboolean;
}
extern "C" {
    pub fn _frida_g_seekable_truncate(
        seekable: *mut GSeekable,
        offset: goffset,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSettingsSchemaSource {
    _unused: [u8; 0],
}
pub type GSettingsSchemaSource = _GSettingsSchemaSource;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSettingsSchema {
    _unused: [u8; 0],
}
pub type GSettingsSchema = _GSettingsSchema;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSettingsSchemaKey {
    _unused: [u8; 0],
}
pub type GSettingsSchemaKey = _GSettingsSchemaKey;
extern "C" {
    pub fn _frida_g_settings_schema_source_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_settings_schema_source_get_default() -> *mut GSettingsSchemaSource;
}
extern "C" {
    pub fn _frida_g_settings_schema_source_ref(
        source: *mut GSettingsSchemaSource,
    ) -> *mut GSettingsSchemaSource;
}
extern "C" {
    pub fn _frida_g_settings_schema_source_unref(source: *mut GSettingsSchemaSource);
}
extern "C" {
    pub fn _frida_g_settings_schema_source_new_from_directory(
        directory: *const gchar,
        parent: *mut GSettingsSchemaSource,
        trusted: gboolean,
        error: *mut *mut GError,
    ) -> *mut GSettingsSchemaSource;
}
extern "C" {
    pub fn _frida_g_settings_schema_source_lookup(
        source: *mut GSettingsSchemaSource,
        schema_id: *const gchar,
        recursive: gboolean,
    ) -> *mut GSettingsSchema;
}
extern "C" {
    pub fn _frida_g_settings_schema_source_list_schemas(
        source: *mut GSettingsSchemaSource,
        recursive: gboolean,
        non_relocatable: *mut *mut *mut gchar,
        relocatable: *mut *mut *mut gchar,
    );
}
extern "C" {
    pub fn _frida_g_settings_schema_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_settings_schema_ref(schema: *mut GSettingsSchema) -> *mut GSettingsSchema;
}
extern "C" {
    pub fn _frida_g_settings_schema_unref(schema: *mut GSettingsSchema);
}
extern "C" {
    pub fn _frida_g_settings_schema_get_id(schema: *mut GSettingsSchema) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_settings_schema_get_path(schema: *mut GSettingsSchema) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_settings_schema_get_key(
        schema: *mut GSettingsSchema,
        name: *const gchar,
    ) -> *mut GSettingsSchemaKey;
}
extern "C" {
    pub fn _frida_g_settings_schema_has_key(
        schema: *mut GSettingsSchema,
        name: *const gchar,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_settings_schema_list_keys(schema: *mut GSettingsSchema) -> *mut *mut gchar;
}
extern "C" {
    pub fn _frida_g_settings_schema_list_children(schema: *mut GSettingsSchema) -> *mut *mut gchar;
}
extern "C" {
    pub fn _frida_g_settings_schema_key_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_settings_schema_key_ref(
        key: *mut GSettingsSchemaKey,
    ) -> *mut GSettingsSchemaKey;
}
extern "C" {
    pub fn _frida_g_settings_schema_key_unref(key: *mut GSettingsSchemaKey);
}
extern "C" {
    pub fn _frida_g_settings_schema_key_get_value_type(
        key: *mut GSettingsSchemaKey,
    ) -> *const GVariantType;
}
extern "C" {
    pub fn _frida_g_settings_schema_key_get_default_value(
        key: *mut GSettingsSchemaKey,
    ) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_settings_schema_key_get_range(key: *mut GSettingsSchemaKey) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_settings_schema_key_range_check(
        key: *mut GSettingsSchemaKey,
        value: *mut GVariant,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_settings_schema_key_get_name(key: *mut GSettingsSchemaKey) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_settings_schema_key_get_summary(key: *mut GSettingsSchemaKey) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_settings_schema_key_get_description(
        key: *mut GSettingsSchemaKey,
    ) -> *const gchar;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSettingsPrivate {
    _unused: [u8; 0],
}
pub type GSettingsPrivate = _GSettingsPrivate;
pub type GSettingsClass = _GSettingsClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSettingsClass {
    pub parent_class: GObjectClass,
    pub writable_changed:
        ::core::option::Option<unsafe extern "C" fn(settings: *mut GSettings, key: *const gchar)>,
    pub changed:
        ::core::option::Option<unsafe extern "C" fn(settings: *mut GSettings, key: *const gchar)>,
    pub writable_change_event: ::core::option::Option<
        unsafe extern "C" fn(settings: *mut GSettings, key: GQuark) -> gboolean,
    >,
    pub change_event: ::core::option::Option<
        unsafe extern "C" fn(
            settings: *mut GSettings,
            keys: *const GQuark,
            n_keys: gint,
        ) -> gboolean,
    >,
    pub padding: [gpointer; 20usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSettings {
    pub parent_instance: GObject,
    pub priv_: *mut GSettingsPrivate,
}
extern "C" {
    pub fn _frida_g_settings_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_settings_list_schemas() -> *const *const gchar;
}
extern "C" {
    pub fn _frida_g_settings_list_relocatable_schemas() -> *const *const gchar;
}
extern "C" {
    pub fn _frida_g_settings_new(schema_id: *const gchar) -> *mut GSettings;
}
extern "C" {
    pub fn _frida_g_settings_new_with_path(
        schema_id: *const gchar,
        path: *const gchar,
    ) -> *mut GSettings;
}
extern "C" {
    pub fn _frida_g_settings_new_with_backend(
        schema_id: *const gchar,
        backend: *mut GSettingsBackend,
    ) -> *mut GSettings;
}
extern "C" {
    pub fn _frida_g_settings_new_with_backend_and_path(
        schema_id: *const gchar,
        backend: *mut GSettingsBackend,
        path: *const gchar,
    ) -> *mut GSettings;
}
extern "C" {
    pub fn _frida_g_settings_new_full(
        schema: *mut GSettingsSchema,
        backend: *mut GSettingsBackend,
        path: *const gchar,
    ) -> *mut GSettings;
}
extern "C" {
    pub fn _frida_g_settings_list_children(settings: *mut GSettings) -> *mut *mut gchar;
}
extern "C" {
    pub fn _frida_g_settings_list_keys(settings: *mut GSettings) -> *mut *mut gchar;
}
extern "C" {
    pub fn _frida_g_settings_get_range(
        settings: *mut GSettings,
        key: *const gchar,
    ) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_settings_range_check(
        settings: *mut GSettings,
        key: *const gchar,
        value: *mut GVariant,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_settings_set_value(
        settings: *mut GSettings,
        key: *const gchar,
        value: *mut GVariant,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_settings_get_value(
        settings: *mut GSettings,
        key: *const gchar,
    ) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_settings_get_user_value(
        settings: *mut GSettings,
        key: *const gchar,
    ) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_settings_get_default_value(
        settings: *mut GSettings,
        key: *const gchar,
    ) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_g_settings_set(
        settings: *mut GSettings,
        key: *const gchar,
        format: *const gchar,
        ...
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_settings_get(
        settings: *mut GSettings,
        key: *const gchar,
        format: *const gchar,
        ...
    );
}
extern "C" {
    pub fn _frida_g_settings_reset(settings: *mut GSettings, key: *const gchar);
}
extern "C" {
    pub fn _frida_g_settings_get_int(settings: *mut GSettings, key: *const gchar) -> gint;
}
extern "C" {
    pub fn _frida_g_settings_set_int(
        settings: *mut GSettings,
        key: *const gchar,
        value: gint,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_settings_get_int64(settings: *mut GSettings, key: *const gchar) -> gint64;
}
extern "C" {
    pub fn _frida_g_settings_set_int64(
        settings: *mut GSettings,
        key: *const gchar,
        value: gint64,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_settings_get_uint(settings: *mut GSettings, key: *const gchar) -> guint;
}
extern "C" {
    pub fn _frida_g_settings_set_uint(
        settings: *mut GSettings,
        key: *const gchar,
        value: guint,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_settings_get_uint64(settings: *mut GSettings, key: *const gchar) -> guint64;
}
extern "C" {
    pub fn _frida_g_settings_set_uint64(
        settings: *mut GSettings,
        key: *const gchar,
        value: guint64,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_settings_get_string(settings: *mut GSettings, key: *const gchar) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_settings_set_string(
        settings: *mut GSettings,
        key: *const gchar,
        value: *const gchar,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_settings_get_boolean(settings: *mut GSettings, key: *const gchar) -> gboolean;
}
extern "C" {
    pub fn _frida_g_settings_set_boolean(
        settings: *mut GSettings,
        key: *const gchar,
        value: gboolean,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_settings_get_double(settings: *mut GSettings, key: *const gchar) -> gdouble;
}
extern "C" {
    pub fn _frida_g_settings_set_double(
        settings: *mut GSettings,
        key: *const gchar,
        value: gdouble,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_settings_get_strv(
        settings: *mut GSettings,
        key: *const gchar,
    ) -> *mut *mut gchar;
}
extern "C" {
    pub fn _frida_g_settings_set_strv(
        settings: *mut GSettings,
        key: *const gchar,
        value: *const *const gchar,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_settings_get_enum(settings: *mut GSettings, key: *const gchar) -> gint;
}
extern "C" {
    pub fn _frida_g_settings_set_enum(
        settings: *mut GSettings,
        key: *const gchar,
        value: gint,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_settings_get_flags(settings: *mut GSettings, key: *const gchar) -> guint;
}
extern "C" {
    pub fn _frida_g_settings_set_flags(
        settings: *mut GSettings,
        key: *const gchar,
        value: guint,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_settings_get_child(
        settings: *mut GSettings,
        name: *const gchar,
    ) -> *mut GSettings;
}
extern "C" {
    pub fn _frida_g_settings_is_writable(settings: *mut GSettings, name: *const gchar) -> gboolean;
}
extern "C" {
    pub fn _frida_g_settings_delay(settings: *mut GSettings);
}
extern "C" {
    pub fn _frida_g_settings_apply(settings: *mut GSettings);
}
extern "C" {
    pub fn _frida_g_settings_revert(settings: *mut GSettings);
}
extern "C" {
    pub fn _frida_g_settings_get_has_unapplied(settings: *mut GSettings) -> gboolean;
}
extern "C" {
    pub fn _frida_g_settings_sync();
}
pub type GSettingsBindSetMapping = ::core::option::Option<
    unsafe extern "C" fn(
        value: *const GValue,
        expected_type: *const GVariantType,
        user_data: gpointer,
    ) -> *mut GVariant,
>;
pub type GSettingsBindGetMapping = ::core::option::Option<
    unsafe extern "C" fn(
        value: *mut GValue,
        variant: *mut GVariant,
        user_data: gpointer,
    ) -> gboolean,
>;
pub type GSettingsGetMapping = ::core::option::Option<
    unsafe extern "C" fn(
        value: *mut GVariant,
        result: *mut gpointer,
        user_data: gpointer,
    ) -> gboolean,
>;
pub const GSettingsBindFlags_G_SETTINGS_BIND_DEFAULT: GSettingsBindFlags = 0;
pub const GSettingsBindFlags_G_SETTINGS_BIND_GET: GSettingsBindFlags = 1;
pub const GSettingsBindFlags_G_SETTINGS_BIND_SET: GSettingsBindFlags = 2;
pub const GSettingsBindFlags_G_SETTINGS_BIND_NO_SENSITIVITY: GSettingsBindFlags = 4;
pub const GSettingsBindFlags_G_SETTINGS_BIND_GET_NO_CHANGES: GSettingsBindFlags = 8;
pub const GSettingsBindFlags_G_SETTINGS_BIND_INVERT_BOOLEAN: GSettingsBindFlags = 16;
pub type GSettingsBindFlags = ::core::ffi::c_uint;
extern "C" {
    pub fn _frida_g_settings_bind(
        settings: *mut GSettings,
        key: *const gchar,
        object: gpointer,
        property: *const gchar,
        flags: GSettingsBindFlags,
    );
}
extern "C" {
    pub fn _frida_g_settings_bind_with_mapping(
        settings: *mut GSettings,
        key: *const gchar,
        object: gpointer,
        property: *const gchar,
        flags: GSettingsBindFlags,
        get_mapping: GSettingsBindGetMapping,
        set_mapping: GSettingsBindSetMapping,
        user_data: gpointer,
        destroy: GDestroyNotify,
    );
}
extern "C" {
    pub fn _frida_g_settings_bind_writable(
        settings: *mut GSettings,
        key: *const gchar,
        object: gpointer,
        property: *const gchar,
        inverted: gboolean,
    );
}
extern "C" {
    pub fn _frida_g_settings_unbind(object: gpointer, property: *const gchar);
}
extern "C" {
    pub fn _frida_g_settings_create_action(
        settings: *mut GSettings,
        key: *const gchar,
    ) -> *mut GAction;
}
extern "C" {
    pub fn _frida_g_settings_get_mapped(
        settings: *mut GSettings,
        key: *const gchar,
        mapping: GSettingsGetMapping,
        user_data: gpointer,
    ) -> gpointer;
}
extern "C" {
    pub fn _frida_g_simple_action_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_simple_action_new(
        name: *const gchar,
        parameter_type: *const GVariantType,
    ) -> *mut GSimpleAction;
}
extern "C" {
    pub fn _frida_g_simple_action_new_stateful(
        name: *const gchar,
        parameter_type: *const GVariantType,
        state: *mut GVariant,
    ) -> *mut GSimpleAction;
}
extern "C" {
    pub fn _frida_g_simple_action_set_enabled(simple: *mut GSimpleAction, enabled: gboolean);
}
extern "C" {
    pub fn _frida_g_simple_action_set_state(simple: *mut GSimpleAction, value: *mut GVariant);
}
extern "C" {
    pub fn _frida_g_simple_action_set_state_hint(
        simple: *mut GSimpleAction,
        state_hint: *mut GVariant,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSimpleActionGroupPrivate {
    _unused: [u8; 0],
}
pub type GSimpleActionGroupPrivate = _GSimpleActionGroupPrivate;
pub type GSimpleActionGroupClass = _GSimpleActionGroupClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSimpleActionGroup {
    pub parent_instance: GObject,
    pub priv_: *mut GSimpleActionGroupPrivate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSimpleActionGroupClass {
    pub parent_class: GObjectClass,
    pub padding: [gpointer; 12usize],
}
extern "C" {
    pub fn _frida_g_simple_action_group_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_simple_action_group_new() -> *mut GSimpleActionGroup;
}
extern "C" {
    pub fn _frida_g_simple_action_group_lookup(
        simple: *mut GSimpleActionGroup,
        action_name: *const gchar,
    ) -> *mut GAction;
}
extern "C" {
    pub fn _frida_g_simple_action_group_insert(
        simple: *mut GSimpleActionGroup,
        action: *mut GAction,
    );
}
extern "C" {
    pub fn _frida_g_simple_action_group_remove(
        simple: *mut GSimpleActionGroup,
        action_name: *const gchar,
    );
}
extern "C" {
    pub fn _frida_g_simple_action_group_add_entries(
        simple: *mut GSimpleActionGroup,
        entries: *const GActionEntry,
        n_entries: gint,
        user_data: gpointer,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSimpleAsyncResultClass {
    _unused: [u8; 0],
}
pub type GSimpleAsyncResultClass = _GSimpleAsyncResultClass;
extern "C" {
    pub fn _frida_g_simple_async_result_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_simple_async_result_new(
        source_object: *mut GObject,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
        source_tag: gpointer,
    ) -> *mut GSimpleAsyncResult;
}
extern "C" {
    pub fn _frida_g_simple_async_result_new_error(
        source_object: *mut GObject,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
        domain: GQuark,
        code: gint,
        format: *const ::core::ffi::c_char,
        ...
    ) -> *mut GSimpleAsyncResult;
}
extern "C" {
    pub fn _frida_g_simple_async_result_new_from_error(
        source_object: *mut GObject,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
        error: *const GError,
    ) -> *mut GSimpleAsyncResult;
}
extern "C" {
    pub fn _frida_g_simple_async_result_new_take_error(
        source_object: *mut GObject,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
        error: *mut GError,
    ) -> *mut GSimpleAsyncResult;
}
extern "C" {
    pub fn _frida_g_simple_async_result_set_op_res_gpointer(
        simple: *mut GSimpleAsyncResult,
        op_res: gpointer,
        destroy_op_res: GDestroyNotify,
    );
}
extern "C" {
    pub fn _frida_g_simple_async_result_get_op_res_gpointer(
        simple: *mut GSimpleAsyncResult,
    ) -> gpointer;
}
extern "C" {
    pub fn _frida_g_simple_async_result_set_op_res_gssize(
        simple: *mut GSimpleAsyncResult,
        op_res: gssize,
    );
}
extern "C" {
    pub fn _frida_g_simple_async_result_get_op_res_gssize(
        simple: *mut GSimpleAsyncResult,
    ) -> gssize;
}
extern "C" {
    pub fn _frida_g_simple_async_result_set_op_res_gboolean(
        simple: *mut GSimpleAsyncResult,
        op_res: gboolean,
    );
}
extern "C" {
    pub fn _frida_g_simple_async_result_get_op_res_gboolean(
        simple: *mut GSimpleAsyncResult,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_simple_async_result_set_check_cancellable(
        simple: *mut GSimpleAsyncResult,
        check_cancellable: *mut GCancellable,
    );
}
extern "C" {
    pub fn _frida_g_simple_async_result_get_source_tag(simple: *mut GSimpleAsyncResult)
        -> gpointer;
}
extern "C" {
    pub fn _frida_g_simple_async_result_set_handle_cancellation(
        simple: *mut GSimpleAsyncResult,
        handle_cancellation: gboolean,
    );
}
extern "C" {
    pub fn _frida_g_simple_async_result_complete(simple: *mut GSimpleAsyncResult);
}
extern "C" {
    pub fn _frida_g_simple_async_result_complete_in_idle(simple: *mut GSimpleAsyncResult);
}
extern "C" {
    pub fn _frida_g_simple_async_result_run_in_thread(
        simple: *mut GSimpleAsyncResult,
        func: GSimpleAsyncThreadFunc,
        io_priority: ::core::ffi::c_int,
        cancellable: *mut GCancellable,
    );
}
extern "C" {
    pub fn _frida_g_simple_async_result_set_from_error(
        simple: *mut GSimpleAsyncResult,
        error: *const GError,
    );
}
extern "C" {
    pub fn _frida_g_simple_async_result_take_error(
        simple: *mut GSimpleAsyncResult,
        error: *mut GError,
    );
}
extern "C" {
    pub fn _frida_g_simple_async_result_propagate_error(
        simple: *mut GSimpleAsyncResult,
        dest: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_simple_async_result_set_error(
        simple: *mut GSimpleAsyncResult,
        domain: GQuark,
        code: gint,
        format: *const ::core::ffi::c_char,
        ...
    );
}
extern "C" {
    pub fn _frida_g_simple_async_result_set_error_va(
        simple: *mut GSimpleAsyncResult,
        domain: GQuark,
        code: gint,
        format: *const ::core::ffi::c_char,
        args: va_list,
    );
}
extern "C" {
    pub fn _frida_g_simple_async_result_is_valid(
        result: *mut GAsyncResult,
        source: *mut GObject,
        source_tag: gpointer,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_simple_async_report_error_in_idle(
        object: *mut GObject,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
        domain: GQuark,
        code: gint,
        format: *const ::core::ffi::c_char,
        ...
    );
}
extern "C" {
    pub fn _frida_g_simple_async_report_gerror_in_idle(
        object: *mut GObject,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
        error: *const GError,
    );
}
extern "C" {
    pub fn _frida_g_simple_async_report_take_gerror_in_idle(
        object: *mut GObject,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
        error: *mut GError,
    );
}
extern "C" {
    pub fn _frida_g_simple_io_stream_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_simple_io_stream_new(
        input_stream: *mut GInputStream,
        output_stream: *mut GOutputStream,
    ) -> *mut GIOStream;
}
extern "C" {
    pub fn _frida_g_simple_permission_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_simple_permission_new(allowed: gboolean) -> *mut GPermission;
}
pub type GSimpleProxyResolver = _GSimpleProxyResolver;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSimpleProxyResolverPrivate {
    _unused: [u8; 0],
}
pub type GSimpleProxyResolverPrivate = _GSimpleProxyResolverPrivate;
pub type GSimpleProxyResolverClass = _GSimpleProxyResolverClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSimpleProxyResolver {
    pub parent_instance: GObject,
    pub priv_: *mut GSimpleProxyResolverPrivate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSimpleProxyResolverClass {
    pub parent_class: GObjectClass,
    pub _g_reserved1: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved2: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved3: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved4: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved5: ::core::option::Option<unsafe extern "C" fn()>,
}
extern "C" {
    pub fn _frida_g_simple_proxy_resolver_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_simple_proxy_resolver_new(
        default_proxy: *const gchar,
        ignore_hosts: *mut *mut gchar,
    ) -> *mut GProxyResolver;
}
extern "C" {
    pub fn _frida_g_simple_proxy_resolver_set_default_proxy(
        resolver: *mut GSimpleProxyResolver,
        default_proxy: *const gchar,
    );
}
extern "C" {
    pub fn _frida_g_simple_proxy_resolver_set_ignore_hosts(
        resolver: *mut GSimpleProxyResolver,
        ignore_hosts: *mut *mut gchar,
    );
}
extern "C" {
    pub fn _frida_g_simple_proxy_resolver_set_uri_proxy(
        resolver: *mut GSimpleProxyResolver,
        uri_scheme: *const gchar,
        proxy: *const gchar,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSocketPrivate {
    _unused: [u8; 0],
}
pub type GSocketPrivate = _GSocketPrivate;
pub type GSocketClass = _GSocketClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSocketClass {
    pub parent_class: GObjectClass,
    pub _g_reserved1: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved2: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved3: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved4: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved5: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved6: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved7: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved8: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved9: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved10: ::core::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSocket {
    pub parent_instance: GObject,
    pub priv_: *mut GSocketPrivate,
}
extern "C" {
    pub fn _frida_g_socket_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_socket_new(
        family: GSocketFamily,
        type_: GSocketType,
        protocol: GSocketProtocol,
        error: *mut *mut GError,
    ) -> *mut GSocket;
}
extern "C" {
    pub fn _frida_g_socket_new_from_fd(fd: gint, error: *mut *mut GError) -> *mut GSocket;
}
extern "C" {
    pub fn _frida_g_socket_get_fd(socket: *mut GSocket) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _frida_g_socket_get_family(socket: *mut GSocket) -> GSocketFamily;
}
extern "C" {
    pub fn _frida_g_socket_get_socket_type(socket: *mut GSocket) -> GSocketType;
}
extern "C" {
    pub fn _frida_g_socket_get_protocol(socket: *mut GSocket) -> GSocketProtocol;
}
extern "C" {
    pub fn _frida_g_socket_get_local_address(
        socket: *mut GSocket,
        error: *mut *mut GError,
    ) -> *mut GSocketAddress;
}
extern "C" {
    pub fn _frida_g_socket_get_remote_address(
        socket: *mut GSocket,
        error: *mut *mut GError,
    ) -> *mut GSocketAddress;
}
extern "C" {
    pub fn _frida_g_socket_set_blocking(socket: *mut GSocket, blocking: gboolean);
}
extern "C" {
    pub fn _frida_g_socket_get_blocking(socket: *mut GSocket) -> gboolean;
}
extern "C" {
    pub fn _frida_g_socket_set_keepalive(socket: *mut GSocket, keepalive: gboolean);
}
extern "C" {
    pub fn _frida_g_socket_get_keepalive(socket: *mut GSocket) -> gboolean;
}
extern "C" {
    pub fn _frida_g_socket_get_listen_backlog(socket: *mut GSocket) -> gint;
}
extern "C" {
    pub fn _frida_g_socket_set_listen_backlog(socket: *mut GSocket, backlog: gint);
}
extern "C" {
    pub fn _frida_g_socket_get_timeout(socket: *mut GSocket) -> guint;
}
extern "C" {
    pub fn _frida_g_socket_set_timeout(socket: *mut GSocket, timeout: guint);
}
extern "C" {
    pub fn _frida_g_socket_get_ttl(socket: *mut GSocket) -> guint;
}
extern "C" {
    pub fn _frida_g_socket_set_ttl(socket: *mut GSocket, ttl: guint);
}
extern "C" {
    pub fn _frida_g_socket_get_broadcast(socket: *mut GSocket) -> gboolean;
}
extern "C" {
    pub fn _frida_g_socket_set_broadcast(socket: *mut GSocket, broadcast: gboolean);
}
extern "C" {
    pub fn _frida_g_socket_get_multicast_loopback(socket: *mut GSocket) -> gboolean;
}
extern "C" {
    pub fn _frida_g_socket_set_multicast_loopback(socket: *mut GSocket, loopback: gboolean);
}
extern "C" {
    pub fn _frida_g_socket_get_multicast_ttl(socket: *mut GSocket) -> guint;
}
extern "C" {
    pub fn _frida_g_socket_set_multicast_ttl(socket: *mut GSocket, ttl: guint);
}
extern "C" {
    pub fn _frida_g_socket_is_connected(socket: *mut GSocket) -> gboolean;
}
extern "C" {
    pub fn _frida_g_socket_bind(
        socket: *mut GSocket,
        address: *mut GSocketAddress,
        allow_reuse: gboolean,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_socket_join_multicast_group(
        socket: *mut GSocket,
        group: *mut GInetAddress,
        source_specific: gboolean,
        iface: *const gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_socket_leave_multicast_group(
        socket: *mut GSocket,
        group: *mut GInetAddress,
        source_specific: gboolean,
        iface: *const gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_socket_join_multicast_group_ssm(
        socket: *mut GSocket,
        group: *mut GInetAddress,
        source_specific: *mut GInetAddress,
        iface: *const gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_socket_leave_multicast_group_ssm(
        socket: *mut GSocket,
        group: *mut GInetAddress,
        source_specific: *mut GInetAddress,
        iface: *const gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_socket_connect(
        socket: *mut GSocket,
        address: *mut GSocketAddress,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_socket_check_connect_result(
        socket: *mut GSocket,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_socket_get_available_bytes(socket: *mut GSocket) -> gssize;
}
extern "C" {
    pub fn _frida_g_socket_condition_check(
        socket: *mut GSocket,
        condition: GIOCondition,
    ) -> GIOCondition;
}
extern "C" {
    pub fn _frida_g_socket_condition_wait(
        socket: *mut GSocket,
        condition: GIOCondition,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_socket_condition_timed_wait(
        socket: *mut GSocket,
        condition: GIOCondition,
        timeout_us: gint64,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_socket_accept(
        socket: *mut GSocket,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GSocket;
}
extern "C" {
    pub fn _frida_g_socket_listen(socket: *mut GSocket, error: *mut *mut GError) -> gboolean;
}
extern "C" {
    pub fn _frida_g_socket_receive(
        socket: *mut GSocket,
        buffer: *mut gchar,
        size: gsize,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gssize;
}
extern "C" {
    pub fn _frida_g_socket_receive_from(
        socket: *mut GSocket,
        address: *mut *mut GSocketAddress,
        buffer: *mut gchar,
        size: gsize,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gssize;
}
extern "C" {
    pub fn _frida_g_socket_send(
        socket: *mut GSocket,
        buffer: *const gchar,
        size: gsize,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gssize;
}
extern "C" {
    pub fn _frida_g_socket_send_to(
        socket: *mut GSocket,
        address: *mut GSocketAddress,
        buffer: *const gchar,
        size: gsize,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gssize;
}
extern "C" {
    pub fn _frida_g_socket_receive_message(
        socket: *mut GSocket,
        address: *mut *mut GSocketAddress,
        vectors: *mut GInputVector,
        num_vectors: gint,
        messages: *mut *mut *mut GSocketControlMessage,
        num_messages: *mut gint,
        flags: *mut gint,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gssize;
}
extern "C" {
    pub fn _frida_g_socket_send_message(
        socket: *mut GSocket,
        address: *mut GSocketAddress,
        vectors: *mut GOutputVector,
        num_vectors: gint,
        messages: *mut *mut GSocketControlMessage,
        num_messages: gint,
        flags: gint,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gssize;
}
extern "C" {
    pub fn _frida_g_socket_receive_messages(
        socket: *mut GSocket,
        messages: *mut GInputMessage,
        num_messages: guint,
        flags: gint,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gint;
}
extern "C" {
    pub fn _frida_g_socket_send_messages(
        socket: *mut GSocket,
        messages: *mut GOutputMessage,
        num_messages: guint,
        flags: gint,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gint;
}
extern "C" {
    pub fn _frida_g_socket_close(socket: *mut GSocket, error: *mut *mut GError) -> gboolean;
}
extern "C" {
    pub fn _frida_g_socket_shutdown(
        socket: *mut GSocket,
        shutdown_read: gboolean,
        shutdown_write: gboolean,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_socket_is_closed(socket: *mut GSocket) -> gboolean;
}
extern "C" {
    pub fn _frida_g_socket_create_source(
        socket: *mut GSocket,
        condition: GIOCondition,
        cancellable: *mut GCancellable,
    ) -> *mut GSource;
}
extern "C" {
    pub fn _frida_g_socket_speaks_ipv4(socket: *mut GSocket) -> gboolean;
}
extern "C" {
    pub fn _frida_g_socket_get_credentials(
        socket: *mut GSocket,
        error: *mut *mut GError,
    ) -> *mut GCredentials;
}
extern "C" {
    pub fn _frida_g_socket_receive_with_blocking(
        socket: *mut GSocket,
        buffer: *mut gchar,
        size: gsize,
        blocking: gboolean,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gssize;
}
extern "C" {
    pub fn _frida_g_socket_send_with_blocking(
        socket: *mut GSocket,
        buffer: *const gchar,
        size: gsize,
        blocking: gboolean,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gssize;
}
extern "C" {
    pub fn _frida_g_socket_send_message_with_timeout(
        socket: *mut GSocket,
        address: *mut GSocketAddress,
        vectors: *const GOutputVector,
        num_vectors: gint,
        messages: *mut *mut GSocketControlMessage,
        num_messages: gint,
        flags: gint,
        timeout_us: gint64,
        bytes_written: *mut gsize,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> GPollableReturn;
}
extern "C" {
    pub fn _frida_g_socket_get_option(
        socket: *mut GSocket,
        level: gint,
        optname: gint,
        value: *mut gint,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_socket_set_option(
        socket: *mut GSocket,
        level: gint,
        optname: gint,
        value: gint,
        error: *mut *mut GError,
    ) -> gboolean;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSocketClientPrivate {
    _unused: [u8; 0],
}
pub type GSocketClientPrivate = _GSocketClientPrivate;
pub type GSocketClientClass = _GSocketClientClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSocketClientClass {
    pub parent_class: GObjectClass,
    pub event: ::core::option::Option<
        unsafe extern "C" fn(
            client: *mut GSocketClient,
            event: GSocketClientEvent,
            connectable: *mut GSocketConnectable,
            connection: *mut GIOStream,
        ),
    >,
    pub _g_reserved1: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved2: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved3: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved4: ::core::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSocketClient {
    pub parent_instance: GObject,
    pub priv_: *mut GSocketClientPrivate,
}
extern "C" {
    pub fn _frida_g_socket_client_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_socket_client_new() -> *mut GSocketClient;
}
extern "C" {
    pub fn _frida_g_socket_client_get_family(client: *mut GSocketClient) -> GSocketFamily;
}
extern "C" {
    pub fn _frida_g_socket_client_set_family(client: *mut GSocketClient, family: GSocketFamily);
}
extern "C" {
    pub fn _frida_g_socket_client_get_socket_type(client: *mut GSocketClient) -> GSocketType;
}
extern "C" {
    pub fn _frida_g_socket_client_set_socket_type(client: *mut GSocketClient, type_: GSocketType);
}
extern "C" {
    pub fn _frida_g_socket_client_get_protocol(client: *mut GSocketClient) -> GSocketProtocol;
}
extern "C" {
    pub fn _frida_g_socket_client_set_protocol(
        client: *mut GSocketClient,
        protocol: GSocketProtocol,
    );
}
extern "C" {
    pub fn _frida_g_socket_client_get_local_address(
        client: *mut GSocketClient,
    ) -> *mut GSocketAddress;
}
extern "C" {
    pub fn _frida_g_socket_client_set_local_address(
        client: *mut GSocketClient,
        address: *mut GSocketAddress,
    );
}
extern "C" {
    pub fn _frida_g_socket_client_get_timeout(client: *mut GSocketClient) -> guint;
}
extern "C" {
    pub fn _frida_g_socket_client_set_timeout(client: *mut GSocketClient, timeout: guint);
}
extern "C" {
    pub fn _frida_g_socket_client_get_enable_proxy(client: *mut GSocketClient) -> gboolean;
}
extern "C" {
    pub fn _frida_g_socket_client_set_enable_proxy(client: *mut GSocketClient, enable: gboolean);
}
extern "C" {
    pub fn _frida_g_socket_client_get_tls(client: *mut GSocketClient) -> gboolean;
}
extern "C" {
    pub fn _frida_g_socket_client_set_tls(client: *mut GSocketClient, tls: gboolean);
}
extern "C" {
    pub fn _frida_g_socket_client_get_tls_validation_flags(
        client: *mut GSocketClient,
    ) -> GTlsCertificateFlags;
}
extern "C" {
    pub fn _frida_g_socket_client_set_tls_validation_flags(
        client: *mut GSocketClient,
        flags: GTlsCertificateFlags,
    );
}
extern "C" {
    pub fn _frida_g_socket_client_get_proxy_resolver(
        client: *mut GSocketClient,
    ) -> *mut GProxyResolver;
}
extern "C" {
    pub fn _frida_g_socket_client_set_proxy_resolver(
        client: *mut GSocketClient,
        proxy_resolver: *mut GProxyResolver,
    );
}
extern "C" {
    pub fn _frida_g_socket_client_connect(
        client: *mut GSocketClient,
        connectable: *mut GSocketConnectable,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GSocketConnection;
}
extern "C" {
    pub fn _frida_g_socket_client_connect_to_host(
        client: *mut GSocketClient,
        host_and_port: *const gchar,
        default_port: guint16,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GSocketConnection;
}
extern "C" {
    pub fn _frida_g_socket_client_connect_to_service(
        client: *mut GSocketClient,
        domain: *const gchar,
        service: *const gchar,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GSocketConnection;
}
extern "C" {
    pub fn _frida_g_socket_client_connect_to_uri(
        client: *mut GSocketClient,
        uri: *const gchar,
        default_port: guint16,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GSocketConnection;
}
extern "C" {
    pub fn _frida_g_socket_client_connect_async(
        client: *mut GSocketClient,
        connectable: *mut GSocketConnectable,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_socket_client_connect_finish(
        client: *mut GSocketClient,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GSocketConnection;
}
extern "C" {
    pub fn _frida_g_socket_client_connect_to_host_async(
        client: *mut GSocketClient,
        host_and_port: *const gchar,
        default_port: guint16,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_socket_client_connect_to_host_finish(
        client: *mut GSocketClient,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GSocketConnection;
}
extern "C" {
    pub fn _frida_g_socket_client_connect_to_service_async(
        client: *mut GSocketClient,
        domain: *const gchar,
        service: *const gchar,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_socket_client_connect_to_service_finish(
        client: *mut GSocketClient,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GSocketConnection;
}
extern "C" {
    pub fn _frida_g_socket_client_connect_to_uri_async(
        client: *mut GSocketClient,
        uri: *const gchar,
        default_port: guint16,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_socket_client_connect_to_uri_finish(
        client: *mut GSocketClient,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GSocketConnection;
}
extern "C" {
    pub fn _frida_g_socket_client_add_application_proxy(
        client: *mut GSocketClient,
        protocol: *const gchar,
    );
}
pub type GSocketConnectableIface = _GSocketConnectableIface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSocketConnectableIface {
    pub g_iface: GTypeInterface,
    pub enumerate: ::core::option::Option<
        unsafe extern "C" fn(connectable: *mut GSocketConnectable) -> *mut GSocketAddressEnumerator,
    >,
    pub proxy_enumerate: ::core::option::Option<
        unsafe extern "C" fn(connectable: *mut GSocketConnectable) -> *mut GSocketAddressEnumerator,
    >,
    pub to_string: ::core::option::Option<
        unsafe extern "C" fn(connectable: *mut GSocketConnectable) -> *mut gchar,
    >,
}
extern "C" {
    pub fn _frida_g_socket_connectable_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_socket_connectable_enumerate(
        connectable: *mut GSocketConnectable,
    ) -> *mut GSocketAddressEnumerator;
}
extern "C" {
    pub fn _frida_g_socket_connectable_proxy_enumerate(
        connectable: *mut GSocketConnectable,
    ) -> *mut GSocketAddressEnumerator;
}
extern "C" {
    pub fn _frida_g_socket_connectable_to_string(
        connectable: *mut GSocketConnectable,
    ) -> *mut gchar;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSocketConnectionPrivate {
    _unused: [u8; 0],
}
pub type GSocketConnectionPrivate = _GSocketConnectionPrivate;
pub type GSocketConnectionClass = _GSocketConnectionClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSocketConnectionClass {
    pub parent_class: GIOStreamClass,
    pub _g_reserved1: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved2: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved3: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved4: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved5: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved6: ::core::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSocketConnection {
    pub parent_instance: GIOStream,
    pub priv_: *mut GSocketConnectionPrivate,
}
extern "C" {
    pub fn _frida_g_socket_connection_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_socket_connection_is_connected(connection: *mut GSocketConnection) -> gboolean;
}
extern "C" {
    pub fn _frida_g_socket_connection_connect(
        connection: *mut GSocketConnection,
        address: *mut GSocketAddress,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_socket_connection_connect_async(
        connection: *mut GSocketConnection,
        address: *mut GSocketAddress,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_socket_connection_connect_finish(
        connection: *mut GSocketConnection,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_socket_connection_get_socket(
        connection: *mut GSocketConnection,
    ) -> *mut GSocket;
}
extern "C" {
    pub fn _frida_g_socket_connection_get_local_address(
        connection: *mut GSocketConnection,
        error: *mut *mut GError,
    ) -> *mut GSocketAddress;
}
extern "C" {
    pub fn _frida_g_socket_connection_get_remote_address(
        connection: *mut GSocketConnection,
        error: *mut *mut GError,
    ) -> *mut GSocketAddress;
}
extern "C" {
    pub fn _frida_g_socket_connection_factory_register_type(
        g_type: GType,
        family: GSocketFamily,
        type_: GSocketType,
        protocol: gint,
    );
}
extern "C" {
    pub fn _frida_g_socket_connection_factory_lookup_type(
        family: GSocketFamily,
        type_: GSocketType,
        protocol_id: gint,
    ) -> GType;
}
extern "C" {
    pub fn _frida_g_socket_connection_factory_create_connection(
        socket: *mut GSocket,
    ) -> *mut GSocketConnection;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSocketControlMessagePrivate {
    _unused: [u8; 0],
}
pub type GSocketControlMessagePrivate = _GSocketControlMessagePrivate;
pub type GSocketControlMessageClass = _GSocketControlMessageClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSocketControlMessageClass {
    pub parent_class: GObjectClass,
    pub get_size:
        ::core::option::Option<unsafe extern "C" fn(message: *mut GSocketControlMessage) -> gsize>,
    pub get_level: ::core::option::Option<
        unsafe extern "C" fn(message: *mut GSocketControlMessage) -> ::core::ffi::c_int,
    >,
    pub get_type: ::core::option::Option<
        unsafe extern "C" fn(message: *mut GSocketControlMessage) -> ::core::ffi::c_int,
    >,
    pub serialize: ::core::option::Option<
        unsafe extern "C" fn(message: *mut GSocketControlMessage, data: gpointer),
    >,
    pub deserialize: ::core::option::Option<
        unsafe extern "C" fn(
            level: ::core::ffi::c_int,
            type_: ::core::ffi::c_int,
            size: gsize,
            data: gpointer,
        ) -> *mut GSocketControlMessage,
    >,
    pub _g_reserved1: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved2: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved3: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved4: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved5: ::core::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSocketControlMessage {
    pub parent_instance: GObject,
    pub priv_: *mut GSocketControlMessagePrivate,
}
extern "C" {
    pub fn _frida_g_socket_control_message_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_socket_control_message_get_size(message: *mut GSocketControlMessage) -> gsize;
}
extern "C" {
    pub fn _frida_g_socket_control_message_get_level(
        message: *mut GSocketControlMessage,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _frida_g_socket_control_message_get_msg_type(
        message: *mut GSocketControlMessage,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _frida_g_socket_control_message_serialize(
        message: *mut GSocketControlMessage,
        data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_socket_control_message_deserialize(
        level: ::core::ffi::c_int,
        type_: ::core::ffi::c_int,
        size: gsize,
        data: gpointer,
    ) -> *mut GSocketControlMessage;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSocketListenerPrivate {
    _unused: [u8; 0],
}
pub type GSocketListenerPrivate = _GSocketListenerPrivate;
pub type GSocketListenerClass = _GSocketListenerClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSocketListenerClass {
    pub parent_class: GObjectClass,
    pub changed: ::core::option::Option<unsafe extern "C" fn(listener: *mut GSocketListener)>,
    pub event: ::core::option::Option<
        unsafe extern "C" fn(
            listener: *mut GSocketListener,
            event: GSocketListenerEvent,
            socket: *mut GSocket,
        ),
    >,
    pub _g_reserved2: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved3: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved4: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved5: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved6: ::core::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSocketListener {
    pub parent_instance: GObject,
    pub priv_: *mut GSocketListenerPrivate,
}
extern "C" {
    pub fn _frida_g_socket_listener_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_socket_listener_new() -> *mut GSocketListener;
}
extern "C" {
    pub fn _frida_g_socket_listener_set_backlog(
        listener: *mut GSocketListener,
        listen_backlog: ::core::ffi::c_int,
    );
}
extern "C" {
    pub fn _frida_g_socket_listener_add_socket(
        listener: *mut GSocketListener,
        socket: *mut GSocket,
        source_object: *mut GObject,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_socket_listener_add_address(
        listener: *mut GSocketListener,
        address: *mut GSocketAddress,
        type_: GSocketType,
        protocol: GSocketProtocol,
        source_object: *mut GObject,
        effective_address: *mut *mut GSocketAddress,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_socket_listener_add_inet_port(
        listener: *mut GSocketListener,
        port: guint16,
        source_object: *mut GObject,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_socket_listener_add_any_inet_port(
        listener: *mut GSocketListener,
        source_object: *mut GObject,
        error: *mut *mut GError,
    ) -> guint16;
}
extern "C" {
    pub fn _frida_g_socket_listener_accept_socket(
        listener: *mut GSocketListener,
        source_object: *mut *mut GObject,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GSocket;
}
extern "C" {
    pub fn _frida_g_socket_listener_accept_socket_async(
        listener: *mut GSocketListener,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_socket_listener_accept_socket_finish(
        listener: *mut GSocketListener,
        result: *mut GAsyncResult,
        source_object: *mut *mut GObject,
        error: *mut *mut GError,
    ) -> *mut GSocket;
}
extern "C" {
    pub fn _frida_g_socket_listener_accept(
        listener: *mut GSocketListener,
        source_object: *mut *mut GObject,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GSocketConnection;
}
extern "C" {
    pub fn _frida_g_socket_listener_accept_async(
        listener: *mut GSocketListener,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_socket_listener_accept_finish(
        listener: *mut GSocketListener,
        result: *mut GAsyncResult,
        source_object: *mut *mut GObject,
        error: *mut *mut GError,
    ) -> *mut GSocketConnection;
}
extern "C" {
    pub fn _frida_g_socket_listener_close(listener: *mut GSocketListener);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSocketServicePrivate {
    _unused: [u8; 0],
}
pub type GSocketServicePrivate = _GSocketServicePrivate;
pub type GSocketServiceClass = _GSocketServiceClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSocketServiceClass {
    pub parent_class: GSocketListenerClass,
    pub incoming: ::core::option::Option<
        unsafe extern "C" fn(
            service: *mut GSocketService,
            connection: *mut GSocketConnection,
            source_object: *mut GObject,
        ) -> gboolean,
    >,
    pub _g_reserved1: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved2: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved3: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved4: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved5: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved6: ::core::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GSocketService {
    pub parent_instance: GSocketListener,
    pub priv_: *mut GSocketServicePrivate,
}
extern "C" {
    pub fn _frida_g_socket_service_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_socket_service_new() -> *mut GSocketService;
}
extern "C" {
    pub fn _frida_g_socket_service_start(service: *mut GSocketService);
}
extern "C" {
    pub fn _frida_g_socket_service_stop(service: *mut GSocketService);
}
extern "C" {
    pub fn _frida_g_socket_service_is_active(service: *mut GSocketService) -> gboolean;
}
extern "C" {
    pub fn _frida_g_srv_target_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_srv_target_new(
        hostname: *const gchar,
        port: guint16,
        priority: guint16,
        weight: guint16,
    ) -> *mut GSrvTarget;
}
extern "C" {
    pub fn _frida_g_srv_target_copy(target: *mut GSrvTarget) -> *mut GSrvTarget;
}
extern "C" {
    pub fn _frida_g_srv_target_free(target: *mut GSrvTarget);
}
extern "C" {
    pub fn _frida_g_srv_target_get_hostname(target: *mut GSrvTarget) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_srv_target_get_port(target: *mut GSrvTarget) -> guint16;
}
extern "C" {
    pub fn _frida_g_srv_target_get_priority(target: *mut GSrvTarget) -> guint16;
}
extern "C" {
    pub fn _frida_g_srv_target_get_weight(target: *mut GSrvTarget) -> guint16;
}
extern "C" {
    pub fn _frida_g_srv_target_list_sort(targets: *mut GList) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_subprocess_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_subprocess_new(
        flags: GSubprocessFlags,
        error: *mut *mut GError,
        argv0: *const gchar,
        ...
    ) -> *mut GSubprocess;
}
extern "C" {
    pub fn _frida_g_subprocess_newv(
        argv: *const *const gchar,
        flags: GSubprocessFlags,
        error: *mut *mut GError,
    ) -> *mut GSubprocess;
}
extern "C" {
    pub fn _frida_g_subprocess_get_stdin_pipe(subprocess: *mut GSubprocess) -> *mut GOutputStream;
}
extern "C" {
    pub fn _frida_g_subprocess_get_stdout_pipe(subprocess: *mut GSubprocess) -> *mut GInputStream;
}
extern "C" {
    pub fn _frida_g_subprocess_get_stderr_pipe(subprocess: *mut GSubprocess) -> *mut GInputStream;
}
extern "C" {
    pub fn _frida_g_subprocess_get_identifier(subprocess: *mut GSubprocess) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_subprocess_send_signal(subprocess: *mut GSubprocess, signal_num: gint);
}
extern "C" {
    pub fn _frida_g_subprocess_force_exit(subprocess: *mut GSubprocess);
}
extern "C" {
    pub fn _frida_g_subprocess_wait(
        subprocess: *mut GSubprocess,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_subprocess_wait_async(
        subprocess: *mut GSubprocess,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_subprocess_wait_finish(
        subprocess: *mut GSubprocess,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_subprocess_wait_check(
        subprocess: *mut GSubprocess,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_subprocess_wait_check_async(
        subprocess: *mut GSubprocess,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_subprocess_wait_check_finish(
        subprocess: *mut GSubprocess,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_subprocess_get_status(subprocess: *mut GSubprocess) -> gint;
}
extern "C" {
    pub fn _frida_g_subprocess_get_successful(subprocess: *mut GSubprocess) -> gboolean;
}
extern "C" {
    pub fn _frida_g_subprocess_get_if_exited(subprocess: *mut GSubprocess) -> gboolean;
}
extern "C" {
    pub fn _frida_g_subprocess_get_exit_status(subprocess: *mut GSubprocess) -> gint;
}
extern "C" {
    pub fn _frida_g_subprocess_get_if_signaled(subprocess: *mut GSubprocess) -> gboolean;
}
extern "C" {
    pub fn _frida_g_subprocess_get_term_sig(subprocess: *mut GSubprocess) -> gint;
}
extern "C" {
    pub fn _frida_g_subprocess_communicate(
        subprocess: *mut GSubprocess,
        stdin_buf: *mut GBytes,
        cancellable: *mut GCancellable,
        stdout_buf: *mut *mut GBytes,
        stderr_buf: *mut *mut GBytes,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_subprocess_communicate_async(
        subprocess: *mut GSubprocess,
        stdin_buf: *mut GBytes,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_subprocess_communicate_finish(
        subprocess: *mut GSubprocess,
        result: *mut GAsyncResult,
        stdout_buf: *mut *mut GBytes,
        stderr_buf: *mut *mut GBytes,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_subprocess_communicate_utf8(
        subprocess: *mut GSubprocess,
        stdin_buf: *const ::core::ffi::c_char,
        cancellable: *mut GCancellable,
        stdout_buf: *mut *mut ::core::ffi::c_char,
        stderr_buf: *mut *mut ::core::ffi::c_char,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_subprocess_communicate_utf8_async(
        subprocess: *mut GSubprocess,
        stdin_buf: *const ::core::ffi::c_char,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_subprocess_communicate_utf8_finish(
        subprocess: *mut GSubprocess,
        result: *mut GAsyncResult,
        stdout_buf: *mut *mut ::core::ffi::c_char,
        stderr_buf: *mut *mut ::core::ffi::c_char,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_subprocess_launcher_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_subprocess_launcher_new(flags: GSubprocessFlags) -> *mut GSubprocessLauncher;
}
extern "C" {
    pub fn _frida_g_subprocess_launcher_spawn(
        self_: *mut GSubprocessLauncher,
        error: *mut *mut GError,
        argv0: *const gchar,
        ...
    ) -> *mut GSubprocess;
}
extern "C" {
    pub fn _frida_g_subprocess_launcher_spawnv(
        self_: *mut GSubprocessLauncher,
        argv: *const *const gchar,
        error: *mut *mut GError,
    ) -> *mut GSubprocess;
}
extern "C" {
    pub fn _frida_g_subprocess_launcher_set_environ(
        self_: *mut GSubprocessLauncher,
        env: *mut *mut gchar,
    );
}
extern "C" {
    pub fn _frida_g_subprocess_launcher_setenv(
        self_: *mut GSubprocessLauncher,
        variable: *const gchar,
        value: *const gchar,
        overwrite: gboolean,
    );
}
extern "C" {
    pub fn _frida_g_subprocess_launcher_unsetenv(
        self_: *mut GSubprocessLauncher,
        variable: *const gchar,
    );
}
extern "C" {
    pub fn _frida_g_subprocess_launcher_getenv(
        self_: *mut GSubprocessLauncher,
        variable: *const gchar,
    ) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_subprocess_launcher_set_cwd(self_: *mut GSubprocessLauncher, cwd: *const gchar);
}
extern "C" {
    pub fn _frida_g_subprocess_launcher_set_flags(
        self_: *mut GSubprocessLauncher,
        flags: GSubprocessFlags,
    );
}
extern "C" {
    pub fn _frida_g_subprocess_launcher_set_stdin_file_path(
        self_: *mut GSubprocessLauncher,
        path: *const gchar,
    );
}
extern "C" {
    pub fn _frida_g_subprocess_launcher_take_stdin_fd(self_: *mut GSubprocessLauncher, fd: gint);
}
extern "C" {
    pub fn _frida_g_subprocess_launcher_set_stdout_file_path(
        self_: *mut GSubprocessLauncher,
        path: *const gchar,
    );
}
extern "C" {
    pub fn _frida_g_subprocess_launcher_take_stdout_fd(self_: *mut GSubprocessLauncher, fd: gint);
}
extern "C" {
    pub fn _frida_g_subprocess_launcher_set_stderr_file_path(
        self_: *mut GSubprocessLauncher,
        path: *const gchar,
    );
}
extern "C" {
    pub fn _frida_g_subprocess_launcher_take_stderr_fd(self_: *mut GSubprocessLauncher, fd: gint);
}
extern "C" {
    pub fn _frida_g_subprocess_launcher_take_fd(
        self_: *mut GSubprocessLauncher,
        source_fd: gint,
        target_fd: gint,
    );
}
extern "C" {
    pub fn _frida_g_subprocess_launcher_close(self_: *mut GSubprocessLauncher);
}
extern "C" {
    pub fn _frida_g_subprocess_launcher_set_child_setup(
        self_: *mut GSubprocessLauncher,
        child_setup: GSpawnChildSetupFunc,
        user_data: gpointer,
        destroy_notify: GDestroyNotify,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTaskClass {
    _unused: [u8; 0],
}
pub type GTaskClass = _GTaskClass;
extern "C" {
    pub fn _frida_g_task_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_task_new(
        source_object: gpointer,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        callback_data: gpointer,
    ) -> *mut GTask;
}
extern "C" {
    pub fn _frida_g_task_report_error(
        source_object: gpointer,
        callback: GAsyncReadyCallback,
        callback_data: gpointer,
        source_tag: gpointer,
        error: *mut GError,
    );
}
extern "C" {
    pub fn _frida_g_task_report_new_error(
        source_object: gpointer,
        callback: GAsyncReadyCallback,
        callback_data: gpointer,
        source_tag: gpointer,
        domain: GQuark,
        code: gint,
        format: *const ::core::ffi::c_char,
        ...
    );
}
extern "C" {
    pub fn _frida_g_task_set_task_data(
        task: *mut GTask,
        task_data: gpointer,
        task_data_destroy: GDestroyNotify,
    );
}
extern "C" {
    pub fn _frida_g_task_set_priority(task: *mut GTask, priority: gint);
}
extern "C" {
    pub fn _frida_g_task_set_check_cancellable(task: *mut GTask, check_cancellable: gboolean);
}
extern "C" {
    pub fn _frida_g_task_set_source_tag(task: *mut GTask, source_tag: gpointer);
}
extern "C" {
    pub fn _frida_g_task_set_name(task: *mut GTask, name: *const gchar);
}
extern "C" {
    pub fn _frida_g_task_set_static_name(task: *mut GTask, name: *const gchar);
}
extern "C" {
    pub fn _frida_g_task_get_source_object(task: *mut GTask) -> gpointer;
}
extern "C" {
    pub fn _frida_g_task_get_task_data(task: *mut GTask) -> gpointer;
}
extern "C" {
    pub fn _frida_g_task_get_priority(task: *mut GTask) -> gint;
}
extern "C" {
    pub fn _frida_g_task_get_context(task: *mut GTask) -> *mut GMainContext;
}
extern "C" {
    pub fn _frida_g_task_get_cancellable(task: *mut GTask) -> *mut GCancellable;
}
extern "C" {
    pub fn _frida_g_task_get_check_cancellable(task: *mut GTask) -> gboolean;
}
extern "C" {
    pub fn _frida_g_task_get_source_tag(task: *mut GTask) -> gpointer;
}
extern "C" {
    pub fn _frida_g_task_get_name(task: *mut GTask) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_task_is_valid(result: gpointer, source_object: gpointer) -> gboolean;
}
pub type GTaskThreadFunc = ::core::option::Option<
    unsafe extern "C" fn(
        task: *mut GTask,
        source_object: gpointer,
        task_data: gpointer,
        cancellable: *mut GCancellable,
    ),
>;
extern "C" {
    pub fn _frida_g_task_run_in_thread(task: *mut GTask, task_func: GTaskThreadFunc);
}
extern "C" {
    pub fn _frida_g_task_run_in_thread_sync(task: *mut GTask, task_func: GTaskThreadFunc);
}
extern "C" {
    pub fn _frida_g_task_set_return_on_cancel(
        task: *mut GTask,
        return_on_cancel: gboolean,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_task_get_return_on_cancel(task: *mut GTask) -> gboolean;
}
extern "C" {
    pub fn _frida_g_task_attach_source(
        task: *mut GTask,
        source: *mut GSource,
        callback: GSourceFunc,
    );
}
extern "C" {
    pub fn _frida_g_task_return_pointer(
        task: *mut GTask,
        result: gpointer,
        result_destroy: GDestroyNotify,
    );
}
extern "C" {
    pub fn _frida_g_task_return_boolean(task: *mut GTask, result: gboolean);
}
extern "C" {
    pub fn _frida_g_task_return_int(task: *mut GTask, result: gssize);
}
extern "C" {
    pub fn _frida_g_task_return_error(task: *mut GTask, error: *mut GError);
}
extern "C" {
    pub fn _frida_g_task_return_new_error(
        task: *mut GTask,
        domain: GQuark,
        code: gint,
        format: *const ::core::ffi::c_char,
        ...
    );
}
extern "C" {
    pub fn _frida_g_task_return_value(task: *mut GTask, result: *mut GValue);
}
extern "C" {
    pub fn _frida_g_task_return_error_if_cancelled(task: *mut GTask) -> gboolean;
}
extern "C" {
    pub fn _frida_g_task_propagate_pointer(task: *mut GTask, error: *mut *mut GError) -> gpointer;
}
extern "C" {
    pub fn _frida_g_task_propagate_boolean(task: *mut GTask, error: *mut *mut GError) -> gboolean;
}
extern "C" {
    pub fn _frida_g_task_propagate_int(task: *mut GTask, error: *mut *mut GError) -> gssize;
}
extern "C" {
    pub fn _frida_g_task_propagate_value(
        task: *mut GTask,
        value: *mut GValue,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_task_had_error(task: *mut GTask) -> gboolean;
}
extern "C" {
    pub fn _frida_g_task_get_completed(task: *mut GTask) -> gboolean;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTcpConnectionPrivate {
    _unused: [u8; 0],
}
pub type GTcpConnectionPrivate = _GTcpConnectionPrivate;
pub type GTcpConnectionClass = _GTcpConnectionClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTcpConnectionClass {
    pub parent_class: GSocketConnectionClass,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTcpConnection {
    pub parent_instance: GSocketConnection,
    pub priv_: *mut GTcpConnectionPrivate,
}
extern "C" {
    pub fn _frida_g_tcp_connection_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_tcp_connection_set_graceful_disconnect(
        connection: *mut GTcpConnection,
        graceful_disconnect: gboolean,
    );
}
extern "C" {
    pub fn _frida_g_tcp_connection_get_graceful_disconnect(
        connection: *mut GTcpConnection,
    ) -> gboolean;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTcpWrapperConnectionPrivate {
    _unused: [u8; 0],
}
pub type GTcpWrapperConnectionPrivate = _GTcpWrapperConnectionPrivate;
pub type GTcpWrapperConnectionClass = _GTcpWrapperConnectionClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTcpWrapperConnectionClass {
    pub parent_class: GTcpConnectionClass,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTcpWrapperConnection {
    pub parent_instance: GTcpConnection,
    pub priv_: *mut GTcpWrapperConnectionPrivate,
}
extern "C" {
    pub fn _frida_g_tcp_wrapper_connection_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_tcp_wrapper_connection_new(
        base_io_stream: *mut GIOStream,
        socket: *mut GSocket,
    ) -> *mut GSocketConnection;
}
extern "C" {
    pub fn _frida_g_tcp_wrapper_connection_get_base_io_stream(
        conn: *mut GTcpWrapperConnection,
    ) -> *mut GIOStream;
}
extern "C" {
    pub fn _frida_g_test_dbus_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_test_dbus_new(flags: GTestDBusFlags) -> *mut GTestDBus;
}
extern "C" {
    pub fn _frida_g_test_dbus_get_flags(self_: *mut GTestDBus) -> GTestDBusFlags;
}
extern "C" {
    pub fn _frida_g_test_dbus_get_bus_address(self_: *mut GTestDBus) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_test_dbus_add_service_dir(self_: *mut GTestDBus, path: *const gchar);
}
extern "C" {
    pub fn _frida_g_test_dbus_up(self_: *mut GTestDBus);
}
extern "C" {
    pub fn _frida_g_test_dbus_stop(self_: *mut GTestDBus);
}
extern "C" {
    pub fn _frida_g_test_dbus_down(self_: *mut GTestDBus);
}
extern "C" {
    pub fn _frida_g_test_dbus_unset();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GThemedIconClass {
    _unused: [u8; 0],
}
pub type GThemedIconClass = _GThemedIconClass;
extern "C" {
    pub fn _frida_g_themed_icon_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_themed_icon_new(iconname: *const ::core::ffi::c_char) -> *mut GIcon;
}
extern "C" {
    pub fn _frida_g_themed_icon_new_with_default_fallbacks(
        iconname: *const ::core::ffi::c_char,
    ) -> *mut GIcon;
}
extern "C" {
    pub fn _frida_g_themed_icon_new_from_names(
        iconnames: *mut *mut ::core::ffi::c_char,
        len: ::core::ffi::c_int,
    ) -> *mut GIcon;
}
extern "C" {
    pub fn _frida_g_themed_icon_prepend_name(
        icon: *mut GThemedIcon,
        iconname: *const ::core::ffi::c_char,
    );
}
extern "C" {
    pub fn _frida_g_themed_icon_append_name(
        icon: *mut GThemedIcon,
        iconname: *const ::core::ffi::c_char,
    );
}
extern "C" {
    pub fn _frida_g_themed_icon_get_names(icon: *mut GThemedIcon) -> *const *const gchar;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GThreadedSocketServicePrivate {
    _unused: [u8; 0],
}
pub type GThreadedSocketServicePrivate = _GThreadedSocketServicePrivate;
pub type GThreadedSocketServiceClass = _GThreadedSocketServiceClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GThreadedSocketServiceClass {
    pub parent_class: GSocketServiceClass,
    pub run: ::core::option::Option<
        unsafe extern "C" fn(
            service: *mut GThreadedSocketService,
            connection: *mut GSocketConnection,
            source_object: *mut GObject,
        ) -> gboolean,
    >,
    pub _g_reserved1: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved2: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved3: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved4: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved5: ::core::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GThreadedSocketService {
    pub parent_instance: GSocketService,
    pub priv_: *mut GThreadedSocketServicePrivate,
}
extern "C" {
    pub fn _frida_g_threaded_socket_service_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_threaded_socket_service_new(
        max_threads: ::core::ffi::c_int,
    ) -> *mut GSocketService;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTlsBackend {
    _unused: [u8; 0],
}
pub type GTlsBackend = _GTlsBackend;
pub type GTlsBackendInterface = _GTlsBackendInterface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTlsBackendInterface {
    pub g_iface: GTypeInterface,
    pub supports_tls:
        ::core::option::Option<unsafe extern "C" fn(backend: *mut GTlsBackend) -> gboolean>,
    pub get_certificate_type: ::core::option::Option<unsafe extern "C" fn() -> GType>,
    pub get_client_connection_type: ::core::option::Option<unsafe extern "C" fn() -> GType>,
    pub get_server_connection_type: ::core::option::Option<unsafe extern "C" fn() -> GType>,
    pub get_file_database_type: ::core::option::Option<unsafe extern "C" fn() -> GType>,
    pub get_default_database: ::core::option::Option<
        unsafe extern "C" fn(backend: *mut GTlsBackend) -> *mut GTlsDatabase,
    >,
    pub supports_dtls:
        ::core::option::Option<unsafe extern "C" fn(backend: *mut GTlsBackend) -> gboolean>,
    pub get_dtls_client_connection_type: ::core::option::Option<unsafe extern "C" fn() -> GType>,
    pub get_dtls_server_connection_type: ::core::option::Option<unsafe extern "C" fn() -> GType>,
}
extern "C" {
    pub fn _frida_g_tls_backend_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_tls_backend_get_default() -> *mut GTlsBackend;
}
extern "C" {
    pub fn _frida_g_tls_backend_get_default_database(
        backend: *mut GTlsBackend,
    ) -> *mut GTlsDatabase;
}
extern "C" {
    pub fn _frida_g_tls_backend_set_default_database(
        backend: *mut GTlsBackend,
        database: *mut GTlsDatabase,
    );
}
extern "C" {
    pub fn _frida_g_tls_backend_supports_tls(backend: *mut GTlsBackend) -> gboolean;
}
extern "C" {
    pub fn _frida_g_tls_backend_supports_dtls(backend: *mut GTlsBackend) -> gboolean;
}
extern "C" {
    pub fn _frida_g_tls_backend_get_certificate_type(backend: *mut GTlsBackend) -> GType;
}
extern "C" {
    pub fn _frida_g_tls_backend_get_client_connection_type(backend: *mut GTlsBackend) -> GType;
}
extern "C" {
    pub fn _frida_g_tls_backend_get_server_connection_type(backend: *mut GTlsBackend) -> GType;
}
extern "C" {
    pub fn _frida_g_tls_backend_get_file_database_type(backend: *mut GTlsBackend) -> GType;
}
extern "C" {
    pub fn _frida_g_tls_backend_get_dtls_client_connection_type(backend: *mut GTlsBackend)
        -> GType;
}
extern "C" {
    pub fn _frida_g_tls_backend_get_dtls_server_connection_type(backend: *mut GTlsBackend)
        -> GType;
}
pub type GTlsCertificateClass = _GTlsCertificateClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTlsCertificatePrivate {
    _unused: [u8; 0],
}
pub type GTlsCertificatePrivate = _GTlsCertificatePrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTlsCertificate {
    pub parent_instance: GObject,
    pub priv_: *mut GTlsCertificatePrivate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTlsCertificateClass {
    pub parent_class: GObjectClass,
    pub verify: ::core::option::Option<
        unsafe extern "C" fn(
            cert: *mut GTlsCertificate,
            identity: *mut GSocketConnectable,
            trusted_ca: *mut GTlsCertificate,
        ) -> GTlsCertificateFlags,
    >,
    pub padding: [gpointer; 8usize],
}
extern "C" {
    pub fn _frida_g_tls_certificate_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_tls_certificate_new_from_pem(
        data: *const gchar,
        length: gssize,
        error: *mut *mut GError,
    ) -> *mut GTlsCertificate;
}
extern "C" {
    pub fn _frida_g_tls_certificate_new_from_pkcs12(
        data: *const guint8,
        length: gsize,
        password: *const gchar,
        error: *mut *mut GError,
    ) -> *mut GTlsCertificate;
}
extern "C" {
    pub fn _frida_g_tls_certificate_new_from_file_with_password(
        file: *const gchar,
        password: *const gchar,
        error: *mut *mut GError,
    ) -> *mut GTlsCertificate;
}
extern "C" {
    pub fn _frida_g_tls_certificate_new_from_file(
        file: *const gchar,
        error: *mut *mut GError,
    ) -> *mut GTlsCertificate;
}
extern "C" {
    pub fn _frida_g_tls_certificate_new_from_files(
        cert_file: *const gchar,
        key_file: *const gchar,
        error: *mut *mut GError,
    ) -> *mut GTlsCertificate;
}
extern "C" {
    pub fn _frida_g_tls_certificate_new_from_pkcs11_uris(
        pkcs11_uri: *const gchar,
        private_key_pkcs11_uri: *const gchar,
        error: *mut *mut GError,
    ) -> *mut GTlsCertificate;
}
extern "C" {
    pub fn _frida_g_tls_certificate_list_new_from_file(
        file: *const gchar,
        error: *mut *mut GError,
    ) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_tls_certificate_get_issuer(cert: *mut GTlsCertificate) -> *mut GTlsCertificate;
}
extern "C" {
    pub fn _frida_g_tls_certificate_verify(
        cert: *mut GTlsCertificate,
        identity: *mut GSocketConnectable,
        trusted_ca: *mut GTlsCertificate,
    ) -> GTlsCertificateFlags;
}
extern "C" {
    pub fn _frida_g_tls_certificate_is_same(
        cert_one: *mut GTlsCertificate,
        cert_two: *mut GTlsCertificate,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_tls_certificate_get_not_valid_before(
        cert: *mut GTlsCertificate,
    ) -> *mut GDateTime;
}
extern "C" {
    pub fn _frida_g_tls_certificate_get_not_valid_after(
        cert: *mut GTlsCertificate,
    ) -> *mut GDateTime;
}
extern "C" {
    pub fn _frida_g_tls_certificate_get_subject_name(cert: *mut GTlsCertificate) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_tls_certificate_get_issuer_name(cert: *mut GTlsCertificate) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_tls_certificate_get_dns_names(cert: *mut GTlsCertificate) -> *mut GPtrArray;
}
extern "C" {
    pub fn _frida_g_tls_certificate_get_ip_addresses(cert: *mut GTlsCertificate) -> *mut GPtrArray;
}
pub type GTlsConnectionClass = _GTlsConnectionClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTlsConnectionPrivate {
    _unused: [u8; 0],
}
pub type GTlsConnectionPrivate = _GTlsConnectionPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTlsConnection {
    pub parent_instance: GIOStream,
    pub priv_: *mut GTlsConnectionPrivate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTlsConnectionClass {
    pub parent_class: GIOStreamClass,
    pub accept_certificate: ::core::option::Option<
        unsafe extern "C" fn(
            connection: *mut GTlsConnection,
            peer_cert: *mut GTlsCertificate,
            errors: GTlsCertificateFlags,
        ) -> gboolean,
    >,
    pub handshake: ::core::option::Option<
        unsafe extern "C" fn(
            conn: *mut GTlsConnection,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub handshake_async: ::core::option::Option<
        unsafe extern "C" fn(
            conn: *mut GTlsConnection,
            io_priority: ::core::ffi::c_int,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub handshake_finish: ::core::option::Option<
        unsafe extern "C" fn(
            conn: *mut GTlsConnection,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub get_binding_data: ::core::option::Option<
        unsafe extern "C" fn(
            conn: *mut GTlsConnection,
            type_: GTlsChannelBindingType,
            data: *mut GByteArray,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub get_negotiated_protocol:
        ::core::option::Option<unsafe extern "C" fn(conn: *mut GTlsConnection) -> *const gchar>,
    pub padding: [gpointer; 6usize],
}
extern "C" {
    pub fn _frida_g_tls_connection_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_tls_connection_set_use_system_certdb(
        conn: *mut GTlsConnection,
        use_system_certdb: gboolean,
    );
}
extern "C" {
    pub fn _frida_g_tls_connection_get_use_system_certdb(conn: *mut GTlsConnection) -> gboolean;
}
extern "C" {
    pub fn _frida_g_tls_connection_set_database(
        conn: *mut GTlsConnection,
        database: *mut GTlsDatabase,
    );
}
extern "C" {
    pub fn _frida_g_tls_connection_get_database(conn: *mut GTlsConnection) -> *mut GTlsDatabase;
}
extern "C" {
    pub fn _frida_g_tls_connection_set_certificate(
        conn: *mut GTlsConnection,
        certificate: *mut GTlsCertificate,
    );
}
extern "C" {
    pub fn _frida_g_tls_connection_get_certificate(
        conn: *mut GTlsConnection,
    ) -> *mut GTlsCertificate;
}
extern "C" {
    pub fn _frida_g_tls_connection_set_interaction(
        conn: *mut GTlsConnection,
        interaction: *mut GTlsInteraction,
    );
}
extern "C" {
    pub fn _frida_g_tls_connection_get_interaction(
        conn: *mut GTlsConnection,
    ) -> *mut GTlsInteraction;
}
extern "C" {
    pub fn _frida_g_tls_connection_get_peer_certificate(
        conn: *mut GTlsConnection,
    ) -> *mut GTlsCertificate;
}
extern "C" {
    pub fn _frida_g_tls_connection_get_peer_certificate_errors(
        conn: *mut GTlsConnection,
    ) -> GTlsCertificateFlags;
}
extern "C" {
    pub fn _frida_g_tls_connection_set_require_close_notify(
        conn: *mut GTlsConnection,
        require_close_notify: gboolean,
    );
}
extern "C" {
    pub fn _frida_g_tls_connection_get_require_close_notify(conn: *mut GTlsConnection) -> gboolean;
}
extern "C" {
    pub fn _frida_g_tls_connection_set_rehandshake_mode(
        conn: *mut GTlsConnection,
        mode: GTlsRehandshakeMode,
    );
}
extern "C" {
    pub fn _frida_g_tls_connection_get_rehandshake_mode(
        conn: *mut GTlsConnection,
    ) -> GTlsRehandshakeMode;
}
extern "C" {
    pub fn _frida_g_tls_connection_set_advertised_protocols(
        conn: *mut GTlsConnection,
        protocols: *const *const gchar,
    );
}
extern "C" {
    pub fn _frida_g_tls_connection_get_negotiated_protocol(
        conn: *mut GTlsConnection,
    ) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_tls_connection_get_channel_binding_data(
        conn: *mut GTlsConnection,
        type_: GTlsChannelBindingType,
        data: *mut GByteArray,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_tls_connection_handshake(
        conn: *mut GTlsConnection,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_tls_connection_handshake_async(
        conn: *mut GTlsConnection,
        io_priority: ::core::ffi::c_int,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_tls_connection_handshake_finish(
        conn: *mut GTlsConnection,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_tls_connection_get_protocol_version(
        conn: *mut GTlsConnection,
    ) -> GTlsProtocolVersion;
}
extern "C" {
    pub fn _frida_g_tls_connection_get_ciphersuite_name(conn: *mut GTlsConnection) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_tls_error_quark() -> GQuark;
}
extern "C" {
    pub fn _frida_g_tls_channel_binding_error_quark() -> GQuark;
}
extern "C" {
    pub fn _frida_g_tls_connection_emit_accept_certificate(
        conn: *mut GTlsConnection,
        peer_cert: *mut GTlsCertificate,
        errors: GTlsCertificateFlags,
    ) -> gboolean;
}
pub type GTlsClientConnectionInterface = _GTlsClientConnectionInterface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTlsClientConnectionInterface {
    pub g_iface: GTypeInterface,
    pub copy_session_state: ::core::option::Option<
        unsafe extern "C" fn(conn: *mut GTlsClientConnection, source: *mut GTlsClientConnection),
    >,
}
extern "C" {
    pub fn _frida_g_tls_client_connection_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_tls_client_connection_new(
        base_io_stream: *mut GIOStream,
        server_identity: *mut GSocketConnectable,
        error: *mut *mut GError,
    ) -> *mut GIOStream;
}
extern "C" {
    pub fn _frida_g_tls_client_connection_get_validation_flags(
        conn: *mut GTlsClientConnection,
    ) -> GTlsCertificateFlags;
}
extern "C" {
    pub fn _frida_g_tls_client_connection_set_validation_flags(
        conn: *mut GTlsClientConnection,
        flags: GTlsCertificateFlags,
    );
}
extern "C" {
    pub fn _frida_g_tls_client_connection_get_server_identity(
        conn: *mut GTlsClientConnection,
    ) -> *mut GSocketConnectable;
}
extern "C" {
    pub fn _frida_g_tls_client_connection_set_server_identity(
        conn: *mut GTlsClientConnection,
        identity: *mut GSocketConnectable,
    );
}
extern "C" {
    pub fn _frida_g_tls_client_connection_get_use_ssl3(conn: *mut GTlsClientConnection)
        -> gboolean;
}
extern "C" {
    pub fn _frida_g_tls_client_connection_set_use_ssl3(
        conn: *mut GTlsClientConnection,
        use_ssl3: gboolean,
    );
}
extern "C" {
    pub fn _frida_g_tls_client_connection_get_accepted_cas(
        conn: *mut GTlsClientConnection,
    ) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_tls_client_connection_copy_session_state(
        conn: *mut GTlsClientConnection,
        source: *mut GTlsClientConnection,
    );
}
pub type GTlsDatabaseClass = _GTlsDatabaseClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTlsDatabasePrivate {
    _unused: [u8; 0],
}
pub type GTlsDatabasePrivate = _GTlsDatabasePrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTlsDatabase {
    pub parent_instance: GObject,
    pub priv_: *mut GTlsDatabasePrivate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTlsDatabaseClass {
    pub parent_class: GObjectClass,
    pub verify_chain: ::core::option::Option<
        unsafe extern "C" fn(
            self_: *mut GTlsDatabase,
            chain: *mut GTlsCertificate,
            purpose: *const gchar,
            identity: *mut GSocketConnectable,
            interaction: *mut GTlsInteraction,
            flags: GTlsDatabaseVerifyFlags,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> GTlsCertificateFlags,
    >,
    pub verify_chain_async: ::core::option::Option<
        unsafe extern "C" fn(
            self_: *mut GTlsDatabase,
            chain: *mut GTlsCertificate,
            purpose: *const gchar,
            identity: *mut GSocketConnectable,
            interaction: *mut GTlsInteraction,
            flags: GTlsDatabaseVerifyFlags,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub verify_chain_finish: ::core::option::Option<
        unsafe extern "C" fn(
            self_: *mut GTlsDatabase,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> GTlsCertificateFlags,
    >,
    pub create_certificate_handle: ::core::option::Option<
        unsafe extern "C" fn(
            self_: *mut GTlsDatabase,
            certificate: *mut GTlsCertificate,
        ) -> *mut gchar,
    >,
    pub lookup_certificate_for_handle: ::core::option::Option<
        unsafe extern "C" fn(
            self_: *mut GTlsDatabase,
            handle: *const gchar,
            interaction: *mut GTlsInteraction,
            flags: GTlsDatabaseLookupFlags,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> *mut GTlsCertificate,
    >,
    pub lookup_certificate_for_handle_async: ::core::option::Option<
        unsafe extern "C" fn(
            self_: *mut GTlsDatabase,
            handle: *const gchar,
            interaction: *mut GTlsInteraction,
            flags: GTlsDatabaseLookupFlags,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub lookup_certificate_for_handle_finish: ::core::option::Option<
        unsafe extern "C" fn(
            self_: *mut GTlsDatabase,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> *mut GTlsCertificate,
    >,
    pub lookup_certificate_issuer: ::core::option::Option<
        unsafe extern "C" fn(
            self_: *mut GTlsDatabase,
            certificate: *mut GTlsCertificate,
            interaction: *mut GTlsInteraction,
            flags: GTlsDatabaseLookupFlags,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> *mut GTlsCertificate,
    >,
    pub lookup_certificate_issuer_async: ::core::option::Option<
        unsafe extern "C" fn(
            self_: *mut GTlsDatabase,
            certificate: *mut GTlsCertificate,
            interaction: *mut GTlsInteraction,
            flags: GTlsDatabaseLookupFlags,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub lookup_certificate_issuer_finish: ::core::option::Option<
        unsafe extern "C" fn(
            self_: *mut GTlsDatabase,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> *mut GTlsCertificate,
    >,
    pub lookup_certificates_issued_by: ::core::option::Option<
        unsafe extern "C" fn(
            self_: *mut GTlsDatabase,
            issuer_raw_dn: *mut GByteArray,
            interaction: *mut GTlsInteraction,
            flags: GTlsDatabaseLookupFlags,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> *mut GList,
    >,
    pub lookup_certificates_issued_by_async: ::core::option::Option<
        unsafe extern "C" fn(
            self_: *mut GTlsDatabase,
            issuer_raw_dn: *mut GByteArray,
            interaction: *mut GTlsInteraction,
            flags: GTlsDatabaseLookupFlags,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub lookup_certificates_issued_by_finish: ::core::option::Option<
        unsafe extern "C" fn(
            self_: *mut GTlsDatabase,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> *mut GList,
    >,
    pub padding: [gpointer; 16usize],
}
extern "C" {
    pub fn _frida_g_tls_database_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_tls_database_verify_chain(
        self_: *mut GTlsDatabase,
        chain: *mut GTlsCertificate,
        purpose: *const gchar,
        identity: *mut GSocketConnectable,
        interaction: *mut GTlsInteraction,
        flags: GTlsDatabaseVerifyFlags,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> GTlsCertificateFlags;
}
extern "C" {
    pub fn _frida_g_tls_database_verify_chain_async(
        self_: *mut GTlsDatabase,
        chain: *mut GTlsCertificate,
        purpose: *const gchar,
        identity: *mut GSocketConnectable,
        interaction: *mut GTlsInteraction,
        flags: GTlsDatabaseVerifyFlags,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_tls_database_verify_chain_finish(
        self_: *mut GTlsDatabase,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> GTlsCertificateFlags;
}
extern "C" {
    pub fn _frida_g_tls_database_create_certificate_handle(
        self_: *mut GTlsDatabase,
        certificate: *mut GTlsCertificate,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_g_tls_database_lookup_certificate_for_handle(
        self_: *mut GTlsDatabase,
        handle: *const gchar,
        interaction: *mut GTlsInteraction,
        flags: GTlsDatabaseLookupFlags,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GTlsCertificate;
}
extern "C" {
    pub fn _frida_g_tls_database_lookup_certificate_for_handle_async(
        self_: *mut GTlsDatabase,
        handle: *const gchar,
        interaction: *mut GTlsInteraction,
        flags: GTlsDatabaseLookupFlags,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_tls_database_lookup_certificate_for_handle_finish(
        self_: *mut GTlsDatabase,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GTlsCertificate;
}
extern "C" {
    pub fn _frida_g_tls_database_lookup_certificate_issuer(
        self_: *mut GTlsDatabase,
        certificate: *mut GTlsCertificate,
        interaction: *mut GTlsInteraction,
        flags: GTlsDatabaseLookupFlags,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GTlsCertificate;
}
extern "C" {
    pub fn _frida_g_tls_database_lookup_certificate_issuer_async(
        self_: *mut GTlsDatabase,
        certificate: *mut GTlsCertificate,
        interaction: *mut GTlsInteraction,
        flags: GTlsDatabaseLookupFlags,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_tls_database_lookup_certificate_issuer_finish(
        self_: *mut GTlsDatabase,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GTlsCertificate;
}
extern "C" {
    pub fn _frida_g_tls_database_lookup_certificates_issued_by(
        self_: *mut GTlsDatabase,
        issuer_raw_dn: *mut GByteArray,
        interaction: *mut GTlsInteraction,
        flags: GTlsDatabaseLookupFlags,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GList;
}
extern "C" {
    pub fn _frida_g_tls_database_lookup_certificates_issued_by_async(
        self_: *mut GTlsDatabase,
        issuer_raw_dn: *mut GByteArray,
        interaction: *mut GTlsInteraction,
        flags: GTlsDatabaseLookupFlags,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_tls_database_lookup_certificates_issued_by_finish(
        self_: *mut GTlsDatabase,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GList;
}
pub type GTlsFileDatabaseInterface = _GTlsFileDatabaseInterface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTlsFileDatabaseInterface {
    pub g_iface: GTypeInterface,
    pub padding: [gpointer; 8usize],
}
extern "C" {
    pub fn _frida_g_tls_file_database_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_tls_file_database_new(
        anchors: *const gchar,
        error: *mut *mut GError,
    ) -> *mut GTlsDatabase;
}
pub type GTlsInteractionClass = _GTlsInteractionClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTlsInteractionPrivate {
    _unused: [u8; 0],
}
pub type GTlsInteractionPrivate = _GTlsInteractionPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTlsInteraction {
    pub parent_instance: GObject,
    pub priv_: *mut GTlsInteractionPrivate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTlsInteractionClass {
    pub parent_class: GObjectClass,
    pub ask_password: ::core::option::Option<
        unsafe extern "C" fn(
            interaction: *mut GTlsInteraction,
            password: *mut GTlsPassword,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> GTlsInteractionResult,
    >,
    pub ask_password_async: ::core::option::Option<
        unsafe extern "C" fn(
            interaction: *mut GTlsInteraction,
            password: *mut GTlsPassword,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub ask_password_finish: ::core::option::Option<
        unsafe extern "C" fn(
            interaction: *mut GTlsInteraction,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> GTlsInteractionResult,
    >,
    pub request_certificate: ::core::option::Option<
        unsafe extern "C" fn(
            interaction: *mut GTlsInteraction,
            connection: *mut GTlsConnection,
            flags: GTlsCertificateRequestFlags,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> GTlsInteractionResult,
    >,
    pub request_certificate_async: ::core::option::Option<
        unsafe extern "C" fn(
            interaction: *mut GTlsInteraction,
            connection: *mut GTlsConnection,
            flags: GTlsCertificateRequestFlags,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub request_certificate_finish: ::core::option::Option<
        unsafe extern "C" fn(
            interaction: *mut GTlsInteraction,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> GTlsInteractionResult,
    >,
    pub padding: [gpointer; 21usize],
}
extern "C" {
    pub fn _frida_g_tls_interaction_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_tls_interaction_invoke_ask_password(
        interaction: *mut GTlsInteraction,
        password: *mut GTlsPassword,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> GTlsInteractionResult;
}
extern "C" {
    pub fn _frida_g_tls_interaction_ask_password(
        interaction: *mut GTlsInteraction,
        password: *mut GTlsPassword,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> GTlsInteractionResult;
}
extern "C" {
    pub fn _frida_g_tls_interaction_ask_password_async(
        interaction: *mut GTlsInteraction,
        password: *mut GTlsPassword,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_tls_interaction_ask_password_finish(
        interaction: *mut GTlsInteraction,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> GTlsInteractionResult;
}
extern "C" {
    pub fn _frida_g_tls_interaction_invoke_request_certificate(
        interaction: *mut GTlsInteraction,
        connection: *mut GTlsConnection,
        flags: GTlsCertificateRequestFlags,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> GTlsInteractionResult;
}
extern "C" {
    pub fn _frida_g_tls_interaction_request_certificate(
        interaction: *mut GTlsInteraction,
        connection: *mut GTlsConnection,
        flags: GTlsCertificateRequestFlags,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> GTlsInteractionResult;
}
extern "C" {
    pub fn _frida_g_tls_interaction_request_certificate_async(
        interaction: *mut GTlsInteraction,
        connection: *mut GTlsConnection,
        flags: GTlsCertificateRequestFlags,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_tls_interaction_request_certificate_finish(
        interaction: *mut GTlsInteraction,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> GTlsInteractionResult;
}
pub type GTlsPasswordClass = _GTlsPasswordClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTlsPasswordPrivate {
    _unused: [u8; 0],
}
pub type GTlsPasswordPrivate = _GTlsPasswordPrivate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTlsPassword {
    pub parent_instance: GObject,
    pub priv_: *mut GTlsPasswordPrivate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTlsPasswordClass {
    pub parent_class: GObjectClass,
    pub get_value: ::core::option::Option<
        unsafe extern "C" fn(password: *mut GTlsPassword, length: *mut gsize) -> *const guchar,
    >,
    pub set_value: ::core::option::Option<
        unsafe extern "C" fn(
            password: *mut GTlsPassword,
            value: *mut guchar,
            length: gssize,
            destroy: GDestroyNotify,
        ),
    >,
    pub get_default_warning:
        ::core::option::Option<unsafe extern "C" fn(password: *mut GTlsPassword) -> *const gchar>,
    pub padding: [gpointer; 4usize],
}
extern "C" {
    pub fn _frida_g_tls_password_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_tls_password_new(
        flags: GTlsPasswordFlags,
        description: *const gchar,
    ) -> *mut GTlsPassword;
}
extern "C" {
    pub fn _frida_g_tls_password_get_value(
        password: *mut GTlsPassword,
        length: *mut gsize,
    ) -> *const guchar;
}
extern "C" {
    pub fn _frida_g_tls_password_set_value(
        password: *mut GTlsPassword,
        value: *const guchar,
        length: gssize,
    );
}
extern "C" {
    pub fn _frida_g_tls_password_set_value_full(
        password: *mut GTlsPassword,
        value: *mut guchar,
        length: gssize,
        destroy: GDestroyNotify,
    );
}
extern "C" {
    pub fn _frida_g_tls_password_get_flags(password: *mut GTlsPassword) -> GTlsPasswordFlags;
}
extern "C" {
    pub fn _frida_g_tls_password_set_flags(password: *mut GTlsPassword, flags: GTlsPasswordFlags);
}
extern "C" {
    pub fn _frida_g_tls_password_get_description(password: *mut GTlsPassword) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_tls_password_set_description(
        password: *mut GTlsPassword,
        description: *const gchar,
    );
}
extern "C" {
    pub fn _frida_g_tls_password_get_warning(password: *mut GTlsPassword) -> *const gchar;
}
extern "C" {
    pub fn _frida_g_tls_password_set_warning(password: *mut GTlsPassword, warning: *const gchar);
}
pub type GTlsServerConnectionInterface = _GTlsServerConnectionInterface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GTlsServerConnectionInterface {
    pub g_iface: GTypeInterface,
}
extern "C" {
    pub fn _frida_g_tls_server_connection_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_tls_server_connection_new(
        base_io_stream: *mut GIOStream,
        certificate: *mut GTlsCertificate,
        error: *mut *mut GError,
    ) -> *mut GIOStream;
}
pub type GUnixConnection = _GUnixConnection;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GUnixConnectionPrivate {
    _unused: [u8; 0],
}
pub type GUnixConnectionPrivate = _GUnixConnectionPrivate;
pub type GUnixConnectionClass = _GUnixConnectionClass;
pub type GUnixConnection_autoptr = *mut GUnixConnection;
pub type GUnixConnection_listautoptr = *mut GList;
pub type GUnixConnection_slistautoptr = *mut GSList;
pub type GUnixConnection_queueautoptr = *mut GQueue;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GUnixConnectionClass {
    pub parent_class: GSocketConnectionClass,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GUnixConnection {
    pub parent_instance: GSocketConnection,
    pub priv_: *mut GUnixConnectionPrivate,
}
extern "C" {
    pub fn _frida_g_unix_connection_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_unix_connection_send_fd(
        connection: *mut GUnixConnection,
        fd: gint,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_unix_connection_receive_fd(
        connection: *mut GUnixConnection,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gint;
}
extern "C" {
    pub fn _frida_g_unix_connection_send_credentials(
        connection: *mut GUnixConnection,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_unix_connection_send_credentials_async(
        connection: *mut GUnixConnection,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_unix_connection_send_credentials_finish(
        connection: *mut GUnixConnection,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_unix_connection_receive_credentials(
        connection: *mut GUnixConnection,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GCredentials;
}
extern "C" {
    pub fn _frida_g_unix_connection_receive_credentials_async(
        connection: *mut GUnixConnection,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_unix_connection_receive_credentials_finish(
        connection: *mut GUnixConnection,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GCredentials;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GUnixCredentialsMessagePrivate {
    _unused: [u8; 0],
}
pub type GUnixCredentialsMessagePrivate = _GUnixCredentialsMessagePrivate;
pub type GUnixCredentialsMessageClass = _GUnixCredentialsMessageClass;
pub type GUnixCredentialsMessage_autoptr = *mut GUnixCredentialsMessage;
pub type GUnixCredentialsMessage_listautoptr = *mut GList;
pub type GUnixCredentialsMessage_slistautoptr = *mut GSList;
pub type GUnixCredentialsMessage_queueautoptr = *mut GQueue;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GUnixCredentialsMessageClass {
    pub parent_class: GSocketControlMessageClass,
    pub _g_reserved1: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved2: ::core::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GUnixCredentialsMessage {
    pub parent_instance: GSocketControlMessage,
    pub priv_: *mut GUnixCredentialsMessagePrivate,
}
extern "C" {
    pub fn _frida_g_unix_credentials_message_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_unix_credentials_message_new() -> *mut GSocketControlMessage;
}
extern "C" {
    pub fn _frida_g_unix_credentials_message_new_with_credentials(
        credentials: *mut GCredentials,
    ) -> *mut GSocketControlMessage;
}
extern "C" {
    pub fn _frida_g_unix_credentials_message_get_credentials(
        message: *mut GUnixCredentialsMessage,
    ) -> *mut GCredentials;
}
extern "C" {
    pub fn _frida_g_unix_credentials_message_is_supported() -> gboolean;
}
pub type GUnixFDList_autoptr = *mut GUnixFDList;
pub type GUnixFDList_listautoptr = *mut GList;
pub type GUnixFDList_slistautoptr = *mut GSList;
pub type GUnixFDList_queueautoptr = *mut GQueue;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GUnixFDListPrivate {
    _unused: [u8; 0],
}
pub type GUnixFDListPrivate = _GUnixFDListPrivate;
pub type GUnixFDListClass = _GUnixFDListClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GUnixFDListClass {
    pub parent_class: GObjectClass,
    pub _g_reserved1: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved2: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved3: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved4: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved5: ::core::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GUnixFDList {
    pub parent_instance: GObject,
    pub priv_: *mut GUnixFDListPrivate,
}
extern "C" {
    pub fn _frida_g_unix_fd_list_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_unix_fd_list_new() -> *mut GUnixFDList;
}
extern "C" {
    pub fn _frida_g_unix_fd_list_new_from_array(fds: *const gint, n_fds: gint) -> *mut GUnixFDList;
}
extern "C" {
    pub fn _frida_g_unix_fd_list_append(
        list: *mut GUnixFDList,
        fd: gint,
        error: *mut *mut GError,
    ) -> gint;
}
extern "C" {
    pub fn _frida_g_unix_fd_list_get_length(list: *mut GUnixFDList) -> gint;
}
extern "C" {
    pub fn _frida_g_unix_fd_list_get(
        list: *mut GUnixFDList,
        index_: gint,
        error: *mut *mut GError,
    ) -> gint;
}
extern "C" {
    pub fn _frida_g_unix_fd_list_peek_fds(list: *mut GUnixFDList, length: *mut gint)
        -> *const gint;
}
extern "C" {
    pub fn _frida_g_unix_fd_list_steal_fds(list: *mut GUnixFDList, length: *mut gint) -> *mut gint;
}
pub type GUnixSocketAddress = _GUnixSocketAddress;
pub type GUnixSocketAddressClass = _GUnixSocketAddressClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GUnixSocketAddressPrivate {
    _unused: [u8; 0],
}
pub type GUnixSocketAddressPrivate = _GUnixSocketAddressPrivate;
pub type GUnixSocketAddress_autoptr = *mut GUnixSocketAddress;
pub type GUnixSocketAddress_listautoptr = *mut GList;
pub type GUnixSocketAddress_slistautoptr = *mut GSList;
pub type GUnixSocketAddress_queueautoptr = *mut GQueue;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GUnixSocketAddress {
    pub parent_instance: GSocketAddress,
    pub priv_: *mut GUnixSocketAddressPrivate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GUnixSocketAddressClass {
    pub parent_class: GSocketAddressClass,
}
extern "C" {
    pub fn _frida_g_unix_socket_address_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_unix_socket_address_new(path: *const gchar) -> *mut GSocketAddress;
}
extern "C" {
    pub fn _frida_g_unix_socket_address_new_abstract(
        path: *const gchar,
        path_len: gint,
    ) -> *mut GSocketAddress;
}
extern "C" {
    pub fn _frida_g_unix_socket_address_new_with_type(
        path: *const gchar,
        path_len: gint,
        type_: GUnixSocketAddressType,
    ) -> *mut GSocketAddress;
}
extern "C" {
    pub fn _frida_g_unix_socket_address_get_path(
        address: *mut GUnixSocketAddress,
    ) -> *const ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_unix_socket_address_get_path_len(address: *mut GUnixSocketAddress) -> gsize;
}
extern "C" {
    pub fn _frida_g_unix_socket_address_get_address_type(
        address: *mut GUnixSocketAddress,
    ) -> GUnixSocketAddressType;
}
extern "C" {
    pub fn _frida_g_unix_socket_address_get_is_abstract(
        address: *mut GUnixSocketAddress,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_unix_socket_address_abstract_names_supported() -> gboolean;
}
pub type GVfsFileLookupFunc = ::core::option::Option<
    unsafe extern "C" fn(
        vfs: *mut GVfs,
        identifier: *const ::core::ffi::c_char,
        user_data: gpointer,
    ) -> *mut GFile,
>;
pub type GVfsClass = _GVfsClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GVfs {
    pub parent_instance: GObject,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GVfsClass {
    pub parent_class: GObjectClass,
    pub is_active: ::core::option::Option<unsafe extern "C" fn(vfs: *mut GVfs) -> gboolean>,
    pub get_file_for_path: ::core::option::Option<
        unsafe extern "C" fn(vfs: *mut GVfs, path: *const ::core::ffi::c_char) -> *mut GFile,
    >,
    pub get_file_for_uri: ::core::option::Option<
        unsafe extern "C" fn(vfs: *mut GVfs, uri: *const ::core::ffi::c_char) -> *mut GFile,
    >,
    pub get_supported_uri_schemes:
        ::core::option::Option<unsafe extern "C" fn(vfs: *mut GVfs) -> *const *const gchar>,
    pub parse_name: ::core::option::Option<
        unsafe extern "C" fn(vfs: *mut GVfs, parse_name: *const ::core::ffi::c_char) -> *mut GFile,
    >,
    pub local_file_add_info: ::core::option::Option<
        unsafe extern "C" fn(
            vfs: *mut GVfs,
            filename: *const ::core::ffi::c_char,
            device: guint64,
            attribute_matcher: *mut GFileAttributeMatcher,
            info: *mut GFileInfo,
            cancellable: *mut GCancellable,
            extra_data: *mut gpointer,
            free_extra_data: *mut GDestroyNotify,
        ),
    >,
    pub add_writable_namespaces: ::core::option::Option<
        unsafe extern "C" fn(vfs: *mut GVfs, list: *mut GFileAttributeInfoList),
    >,
    pub local_file_set_attributes: ::core::option::Option<
        unsafe extern "C" fn(
            vfs: *mut GVfs,
            filename: *const ::core::ffi::c_char,
            info: *mut GFileInfo,
            flags: GFileQueryInfoFlags,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub local_file_removed: ::core::option::Option<
        unsafe extern "C" fn(vfs: *mut GVfs, filename: *const ::core::ffi::c_char),
    >,
    pub local_file_moved: ::core::option::Option<
        unsafe extern "C" fn(
            vfs: *mut GVfs,
            source: *const ::core::ffi::c_char,
            dest: *const ::core::ffi::c_char,
        ),
    >,
    pub deserialize_icon: ::core::option::Option<
        unsafe extern "C" fn(vfs: *mut GVfs, value: *mut GVariant) -> *mut GIcon,
    >,
    pub _g_reserved1: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved2: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved3: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved4: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved5: ::core::option::Option<unsafe extern "C" fn()>,
    pub _g_reserved6: ::core::option::Option<unsafe extern "C" fn()>,
}
extern "C" {
    pub fn _frida_g_vfs_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_vfs_is_active(vfs: *mut GVfs) -> gboolean;
}
extern "C" {
    pub fn _frida_g_vfs_get_file_for_path(
        vfs: *mut GVfs,
        path: *const ::core::ffi::c_char,
    ) -> *mut GFile;
}
extern "C" {
    pub fn _frida_g_vfs_get_file_for_uri(
        vfs: *mut GVfs,
        uri: *const ::core::ffi::c_char,
    ) -> *mut GFile;
}
extern "C" {
    pub fn _frida_g_vfs_get_supported_uri_schemes(vfs: *mut GVfs) -> *const *const gchar;
}
extern "C" {
    pub fn _frida_g_vfs_parse_name(
        vfs: *mut GVfs,
        parse_name: *const ::core::ffi::c_char,
    ) -> *mut GFile;
}
extern "C" {
    pub fn _frida_g_vfs_get_default() -> *mut GVfs;
}
extern "C" {
    pub fn _frida_g_vfs_get_local() -> *mut GVfs;
}
extern "C" {
    pub fn _frida_g_vfs_register_uri_scheme(
        vfs: *mut GVfs,
        scheme: *const ::core::ffi::c_char,
        uri_func: GVfsFileLookupFunc,
        uri_data: gpointer,
        uri_destroy: GDestroyNotify,
        parse_name_func: GVfsFileLookupFunc,
        parse_name_data: gpointer,
        parse_name_destroy: GDestroyNotify,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_vfs_unregister_uri_scheme(
        vfs: *mut GVfs,
        scheme: *const ::core::ffi::c_char,
    ) -> gboolean;
}
pub type GVolumeIface = _GVolumeIface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GVolumeIface {
    pub g_iface: GTypeInterface,
    pub changed: ::core::option::Option<unsafe extern "C" fn(volume: *mut GVolume)>,
    pub removed: ::core::option::Option<unsafe extern "C" fn(volume: *mut GVolume)>,
    pub get_name: ::core::option::Option<
        unsafe extern "C" fn(volume: *mut GVolume) -> *mut ::core::ffi::c_char,
    >,
    pub get_icon: ::core::option::Option<unsafe extern "C" fn(volume: *mut GVolume) -> *mut GIcon>,
    pub get_uuid: ::core::option::Option<
        unsafe extern "C" fn(volume: *mut GVolume) -> *mut ::core::ffi::c_char,
    >,
    pub get_drive:
        ::core::option::Option<unsafe extern "C" fn(volume: *mut GVolume) -> *mut GDrive>,
    pub get_mount:
        ::core::option::Option<unsafe extern "C" fn(volume: *mut GVolume) -> *mut GMount>,
    pub can_mount: ::core::option::Option<unsafe extern "C" fn(volume: *mut GVolume) -> gboolean>,
    pub can_eject: ::core::option::Option<unsafe extern "C" fn(volume: *mut GVolume) -> gboolean>,
    pub mount_fn: ::core::option::Option<
        unsafe extern "C" fn(
            volume: *mut GVolume,
            flags: GMountMountFlags,
            mount_operation: *mut GMountOperation,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub mount_finish: ::core::option::Option<
        unsafe extern "C" fn(
            volume: *mut GVolume,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub eject: ::core::option::Option<
        unsafe extern "C" fn(
            volume: *mut GVolume,
            flags: GMountUnmountFlags,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub eject_finish: ::core::option::Option<
        unsafe extern "C" fn(
            volume: *mut GVolume,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub get_identifier: ::core::option::Option<
        unsafe extern "C" fn(
            volume: *mut GVolume,
            kind: *const ::core::ffi::c_char,
        ) -> *mut ::core::ffi::c_char,
    >,
    pub enumerate_identifiers: ::core::option::Option<
        unsafe extern "C" fn(volume: *mut GVolume) -> *mut *mut ::core::ffi::c_char,
    >,
    pub should_automount:
        ::core::option::Option<unsafe extern "C" fn(volume: *mut GVolume) -> gboolean>,
    pub get_activation_root:
        ::core::option::Option<unsafe extern "C" fn(volume: *mut GVolume) -> *mut GFile>,
    pub eject_with_operation: ::core::option::Option<
        unsafe extern "C" fn(
            volume: *mut GVolume,
            flags: GMountUnmountFlags,
            mount_operation: *mut GMountOperation,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub eject_with_operation_finish: ::core::option::Option<
        unsafe extern "C" fn(
            volume: *mut GVolume,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> gboolean,
    >,
    pub get_sort_key:
        ::core::option::Option<unsafe extern "C" fn(volume: *mut GVolume) -> *const gchar>,
    pub get_symbolic_icon:
        ::core::option::Option<unsafe extern "C" fn(volume: *mut GVolume) -> *mut GIcon>,
}
extern "C" {
    pub fn _frida_g_volume_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_volume_get_name(volume: *mut GVolume) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_volume_get_icon(volume: *mut GVolume) -> *mut GIcon;
}
extern "C" {
    pub fn _frida_g_volume_get_symbolic_icon(volume: *mut GVolume) -> *mut GIcon;
}
extern "C" {
    pub fn _frida_g_volume_get_uuid(volume: *mut GVolume) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_volume_get_drive(volume: *mut GVolume) -> *mut GDrive;
}
extern "C" {
    pub fn _frida_g_volume_get_mount(volume: *mut GVolume) -> *mut GMount;
}
extern "C" {
    pub fn _frida_g_volume_can_mount(volume: *mut GVolume) -> gboolean;
}
extern "C" {
    pub fn _frida_g_volume_can_eject(volume: *mut GVolume) -> gboolean;
}
extern "C" {
    pub fn _frida_g_volume_should_automount(volume: *mut GVolume) -> gboolean;
}
extern "C" {
    pub fn _frida_g_volume_mount(
        volume: *mut GVolume,
        flags: GMountMountFlags,
        mount_operation: *mut GMountOperation,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_volume_mount_finish(
        volume: *mut GVolume,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_volume_eject(
        volume: *mut GVolume,
        flags: GMountUnmountFlags,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_volume_eject_finish(
        volume: *mut GVolume,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_volume_get_identifier(
        volume: *mut GVolume,
        kind: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_volume_enumerate_identifiers(
        volume: *mut GVolume,
    ) -> *mut *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_g_volume_get_activation_root(volume: *mut GVolume) -> *mut GFile;
}
extern "C" {
    pub fn _frida_g_volume_eject_with_operation(
        volume: *mut GVolume,
        flags: GMountUnmountFlags,
        mount_operation: *mut GMountOperation,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_g_volume_eject_with_operation_finish(
        volume: *mut GVolume,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_g_volume_get_sort_key(volume: *mut GVolume) -> *const gchar;
}
pub type GZlibCompressorClass = _GZlibCompressorClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GZlibCompressorClass {
    pub parent_class: GObjectClass,
}
extern "C" {
    pub fn _frida_g_zlib_compressor_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_zlib_compressor_new(
        format: GZlibCompressorFormat,
        level: ::core::ffi::c_int,
    ) -> *mut GZlibCompressor;
}
extern "C" {
    pub fn _frida_g_zlib_compressor_get_file_info(
        compressor: *mut GZlibCompressor,
    ) -> *mut GFileInfo;
}
extern "C" {
    pub fn _frida_g_zlib_compressor_set_file_info(
        compressor: *mut GZlibCompressor,
        file_info: *mut GFileInfo,
    );
}
pub type GZlibDecompressorClass = _GZlibDecompressorClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GZlibDecompressorClass {
    pub parent_class: GObjectClass,
}
extern "C" {
    pub fn _frida_g_zlib_decompressor_get_type() -> GType;
}
extern "C" {
    pub fn _frida_g_zlib_decompressor_new(format: GZlibCompressorFormat) -> *mut GZlibDecompressor;
}
extern "C" {
    pub fn _frida_g_zlib_decompressor_get_file_info(
        decompressor: *mut GZlibDecompressor,
    ) -> *mut GFileInfo;
}
pub type GAction_autoptr = *mut GAction;
pub type GAction_listautoptr = *mut GList;
pub type GAction_slistautoptr = *mut GSList;
pub type GAction_queueautoptr = *mut GQueue;
pub type GActionMap_autoptr = *mut GActionMap;
pub type GActionMap_listautoptr = *mut GList;
pub type GActionMap_slistautoptr = *mut GSList;
pub type GActionMap_queueautoptr = *mut GQueue;
pub type GAppInfo_autoptr = *mut GAppInfo;
pub type GAppInfo_listautoptr = *mut GList;
pub type GAppInfo_slistautoptr = *mut GSList;
pub type GAppInfo_queueautoptr = *mut GQueue;
pub type GAppLaunchContext_autoptr = *mut GAppLaunchContext;
pub type GAppLaunchContext_listautoptr = *mut GList;
pub type GAppLaunchContext_slistautoptr = *mut GSList;
pub type GAppLaunchContext_queueautoptr = *mut GQueue;
pub type GAppInfoMonitor_autoptr = *mut GAppInfoMonitor;
pub type GAppInfoMonitor_listautoptr = *mut GList;
pub type GAppInfoMonitor_slistautoptr = *mut GSList;
pub type GAppInfoMonitor_queueautoptr = *mut GQueue;
pub type GApplicationCommandLine_autoptr = *mut GApplicationCommandLine;
pub type GApplicationCommandLine_listautoptr = *mut GList;
pub type GApplicationCommandLine_slistautoptr = *mut GSList;
pub type GApplicationCommandLine_queueautoptr = *mut GQueue;
pub type GApplication_autoptr = *mut GApplication;
pub type GApplication_listautoptr = *mut GList;
pub type GApplication_slistautoptr = *mut GSList;
pub type GApplication_queueautoptr = *mut GQueue;
pub type GAsyncInitable_autoptr = *mut GAsyncInitable;
pub type GAsyncInitable_listautoptr = *mut GList;
pub type GAsyncInitable_slistautoptr = *mut GSList;
pub type GAsyncInitable_queueautoptr = *mut GQueue;
pub type GAsyncResult_autoptr = *mut GAsyncResult;
pub type GAsyncResult_listautoptr = *mut GList;
pub type GAsyncResult_slistautoptr = *mut GSList;
pub type GAsyncResult_queueautoptr = *mut GQueue;
pub type GBufferedInputStream_autoptr = *mut GBufferedInputStream;
pub type GBufferedInputStream_listautoptr = *mut GList;
pub type GBufferedInputStream_slistautoptr = *mut GSList;
pub type GBufferedInputStream_queueautoptr = *mut GQueue;
pub type GBufferedOutputStream_autoptr = *mut GBufferedOutputStream;
pub type GBufferedOutputStream_listautoptr = *mut GList;
pub type GBufferedOutputStream_slistautoptr = *mut GSList;
pub type GBufferedOutputStream_queueautoptr = *mut GQueue;
pub type GBytesIcon_autoptr = *mut GBytesIcon;
pub type GBytesIcon_listautoptr = *mut GList;
pub type GBytesIcon_slistautoptr = *mut GSList;
pub type GBytesIcon_queueautoptr = *mut GQueue;
pub type GCancellable_autoptr = *mut GCancellable;
pub type GCancellable_listautoptr = *mut GList;
pub type GCancellable_slistautoptr = *mut GSList;
pub type GCancellable_queueautoptr = *mut GQueue;
pub type GCharsetConverter_autoptr = *mut GCharsetConverter;
pub type GCharsetConverter_listautoptr = *mut GList;
pub type GCharsetConverter_slistautoptr = *mut GSList;
pub type GCharsetConverter_queueautoptr = *mut GQueue;
pub type GConverter_autoptr = *mut GConverter;
pub type GConverter_listautoptr = *mut GList;
pub type GConverter_slistautoptr = *mut GSList;
pub type GConverter_queueautoptr = *mut GQueue;
pub type GConverterInputStream_autoptr = *mut GConverterInputStream;
pub type GConverterInputStream_listautoptr = *mut GList;
pub type GConverterInputStream_slistautoptr = *mut GSList;
pub type GConverterInputStream_queueautoptr = *mut GQueue;
pub type GConverterOutputStream_autoptr = *mut GConverterOutputStream;
pub type GConverterOutputStream_listautoptr = *mut GList;
pub type GConverterOutputStream_slistautoptr = *mut GSList;
pub type GConverterOutputStream_queueautoptr = *mut GQueue;
pub type GCredentials_autoptr = *mut GCredentials;
pub type GCredentials_listautoptr = *mut GList;
pub type GCredentials_slistautoptr = *mut GSList;
pub type GCredentials_queueautoptr = *mut GQueue;
pub type GDatagramBased_autoptr = *mut GDatagramBased;
pub type GDatagramBased_listautoptr = *mut GList;
pub type GDatagramBased_slistautoptr = *mut GSList;
pub type GDatagramBased_queueautoptr = *mut GQueue;
pub type GDataInputStream_autoptr = *mut GDataInputStream;
pub type GDataInputStream_listautoptr = *mut GList;
pub type GDataInputStream_slistautoptr = *mut GSList;
pub type GDataInputStream_queueautoptr = *mut GQueue;
pub type GDataOutputStream_autoptr = *mut GDataOutputStream;
pub type GDataOutputStream_listautoptr = *mut GList;
pub type GDataOutputStream_slistautoptr = *mut GSList;
pub type GDataOutputStream_queueautoptr = *mut GQueue;
pub type GDBusActionGroup_autoptr = *mut GDBusActionGroup;
pub type GDBusActionGroup_listautoptr = *mut GList;
pub type GDBusActionGroup_slistautoptr = *mut GSList;
pub type GDBusActionGroup_queueautoptr = *mut GQueue;
pub type GDBusAuthObserver_autoptr = *mut GDBusAuthObserver;
pub type GDBusAuthObserver_listautoptr = *mut GList;
pub type GDBusAuthObserver_slistautoptr = *mut GSList;
pub type GDBusAuthObserver_queueautoptr = *mut GQueue;
pub type GDBusConnection_autoptr = *mut GDBusConnection;
pub type GDBusConnection_listautoptr = *mut GList;
pub type GDBusConnection_slistautoptr = *mut GSList;
pub type GDBusConnection_queueautoptr = *mut GQueue;
pub type GDBusInterface_autoptr = *mut GDBusInterface;
pub type GDBusInterface_listautoptr = *mut GList;
pub type GDBusInterface_slistautoptr = *mut GSList;
pub type GDBusInterface_queueautoptr = *mut GQueue;
pub type GDBusInterfaceSkeleton_autoptr = *mut GDBusInterfaceSkeleton;
pub type GDBusInterfaceSkeleton_listautoptr = *mut GList;
pub type GDBusInterfaceSkeleton_slistautoptr = *mut GSList;
pub type GDBusInterfaceSkeleton_queueautoptr = *mut GQueue;
pub type GDBusMenuModel_autoptr = *mut GDBusMenuModel;
pub type GDBusMenuModel_listautoptr = *mut GList;
pub type GDBusMenuModel_slistautoptr = *mut GSList;
pub type GDBusMenuModel_queueautoptr = *mut GQueue;
pub type GDBusMessage_autoptr = *mut GDBusMessage;
pub type GDBusMessage_listautoptr = *mut GList;
pub type GDBusMessage_slistautoptr = *mut GSList;
pub type GDBusMessage_queueautoptr = *mut GQueue;
pub type GDBusMethodInvocation_autoptr = *mut GDBusMethodInvocation;
pub type GDBusMethodInvocation_listautoptr = *mut GList;
pub type GDBusMethodInvocation_slistautoptr = *mut GSList;
pub type GDBusMethodInvocation_queueautoptr = *mut GQueue;
pub type GDBusNodeInfo_autoptr = *mut GDBusNodeInfo;
pub type GDBusNodeInfo_listautoptr = *mut GList;
pub type GDBusNodeInfo_slistautoptr = *mut GSList;
pub type GDBusNodeInfo_queueautoptr = *mut GQueue;
pub type GDBusObject_autoptr = *mut GDBusObject;
pub type GDBusObject_listautoptr = *mut GList;
pub type GDBusObject_slistautoptr = *mut GSList;
pub type GDBusObject_queueautoptr = *mut GQueue;
pub type GDBusObjectManagerClient_autoptr = *mut GDBusObjectManagerClient;
pub type GDBusObjectManagerClient_listautoptr = *mut GList;
pub type GDBusObjectManagerClient_slistautoptr = *mut GSList;
pub type GDBusObjectManagerClient_queueautoptr = *mut GQueue;
pub type GDBusObjectManager_autoptr = *mut GDBusObjectManager;
pub type GDBusObjectManager_listautoptr = *mut GList;
pub type GDBusObjectManager_slistautoptr = *mut GSList;
pub type GDBusObjectManager_queueautoptr = *mut GQueue;
pub type GDBusObjectManagerServer_autoptr = *mut GDBusObjectManagerServer;
pub type GDBusObjectManagerServer_listautoptr = *mut GList;
pub type GDBusObjectManagerServer_slistautoptr = *mut GSList;
pub type GDBusObjectManagerServer_queueautoptr = *mut GQueue;
pub type GDBusObjectProxy_autoptr = *mut GDBusObjectProxy;
pub type GDBusObjectProxy_listautoptr = *mut GList;
pub type GDBusObjectProxy_slistautoptr = *mut GSList;
pub type GDBusObjectProxy_queueautoptr = *mut GQueue;
pub type GDBusObjectSkeleton_autoptr = *mut GDBusObjectSkeleton;
pub type GDBusObjectSkeleton_listautoptr = *mut GList;
pub type GDBusObjectSkeleton_slistautoptr = *mut GSList;
pub type GDBusObjectSkeleton_queueautoptr = *mut GQueue;
pub type GDBusProxy_autoptr = *mut GDBusProxy;
pub type GDBusProxy_listautoptr = *mut GList;
pub type GDBusProxy_slistautoptr = *mut GSList;
pub type GDBusProxy_queueautoptr = *mut GQueue;
pub type GDBusServer_autoptr = *mut GDBusServer;
pub type GDBusServer_listautoptr = *mut GList;
pub type GDBusServer_slistautoptr = *mut GSList;
pub type GDBusServer_queueautoptr = *mut GQueue;
pub type GDrive_autoptr = *mut GDrive;
pub type GDrive_listautoptr = *mut GList;
pub type GDrive_slistautoptr = *mut GSList;
pub type GDrive_queueautoptr = *mut GQueue;
pub type GEmblemedIcon_autoptr = *mut GEmblemedIcon;
pub type GEmblemedIcon_listautoptr = *mut GList;
pub type GEmblemedIcon_slistautoptr = *mut GSList;
pub type GEmblemedIcon_queueautoptr = *mut GQueue;
pub type GEmblem_autoptr = *mut GEmblem;
pub type GEmblem_listautoptr = *mut GList;
pub type GEmblem_slistautoptr = *mut GSList;
pub type GEmblem_queueautoptr = *mut GQueue;
pub type GFileEnumerator_autoptr = *mut GFileEnumerator;
pub type GFileEnumerator_listautoptr = *mut GList;
pub type GFileEnumerator_slistautoptr = *mut GSList;
pub type GFileEnumerator_queueautoptr = *mut GQueue;
pub type GFile_autoptr = *mut GFile;
pub type GFile_listautoptr = *mut GList;
pub type GFile_slistautoptr = *mut GSList;
pub type GFile_queueautoptr = *mut GQueue;
pub type GFileAttributeInfoList_autoptr = *mut GFileAttributeInfoList;
pub type GFileAttributeInfoList_listautoptr = *mut GList;
pub type GFileAttributeInfoList_slistautoptr = *mut GSList;
pub type GFileAttributeInfoList_queueautoptr = *mut GQueue;
pub type GFileIcon_autoptr = *mut GFileIcon;
pub type GFileIcon_listautoptr = *mut GList;
pub type GFileIcon_slistautoptr = *mut GSList;
pub type GFileIcon_queueautoptr = *mut GQueue;
pub type GFileInfo_autoptr = *mut GFileInfo;
pub type GFileInfo_listautoptr = *mut GList;
pub type GFileInfo_slistautoptr = *mut GSList;
pub type GFileInfo_queueautoptr = *mut GQueue;
pub type GFileInputStream_autoptr = *mut GFileInputStream;
pub type GFileInputStream_listautoptr = *mut GList;
pub type GFileInputStream_slistautoptr = *mut GSList;
pub type GFileInputStream_queueautoptr = *mut GQueue;
pub type GFileIOStream_autoptr = *mut GFileIOStream;
pub type GFileIOStream_listautoptr = *mut GList;
pub type GFileIOStream_slistautoptr = *mut GSList;
pub type GFileIOStream_queueautoptr = *mut GQueue;
pub type GFileMonitor_autoptr = *mut GFileMonitor;
pub type GFileMonitor_listautoptr = *mut GList;
pub type GFileMonitor_slistautoptr = *mut GSList;
pub type GFileMonitor_queueautoptr = *mut GQueue;
pub type GFilenameCompleter_autoptr = *mut GFilenameCompleter;
pub type GFilenameCompleter_listautoptr = *mut GList;
pub type GFilenameCompleter_slistautoptr = *mut GSList;
pub type GFilenameCompleter_queueautoptr = *mut GQueue;
pub type GFileOutputStream_autoptr = *mut GFileOutputStream;
pub type GFileOutputStream_listautoptr = *mut GList;
pub type GFileOutputStream_slistautoptr = *mut GSList;
pub type GFileOutputStream_queueautoptr = *mut GQueue;
pub type GFilterInputStream_autoptr = *mut GFilterInputStream;
pub type GFilterInputStream_listautoptr = *mut GList;
pub type GFilterInputStream_slistautoptr = *mut GSList;
pub type GFilterInputStream_queueautoptr = *mut GQueue;
pub type GFilterOutputStream_autoptr = *mut GFilterOutputStream;
pub type GFilterOutputStream_listautoptr = *mut GList;
pub type GFilterOutputStream_slistautoptr = *mut GSList;
pub type GFilterOutputStream_queueautoptr = *mut GQueue;
pub type GIcon_autoptr = *mut GIcon;
pub type GIcon_listautoptr = *mut GList;
pub type GIcon_slistautoptr = *mut GSList;
pub type GIcon_queueautoptr = *mut GQueue;
pub type GInetAddress_autoptr = *mut GInetAddress;
pub type GInetAddress_listautoptr = *mut GList;
pub type GInetAddress_slistautoptr = *mut GSList;
pub type GInetAddress_queueautoptr = *mut GQueue;
pub type GInetAddressMask_autoptr = *mut GInetAddressMask;
pub type GInetAddressMask_listautoptr = *mut GList;
pub type GInetAddressMask_slistautoptr = *mut GSList;
pub type GInetAddressMask_queueautoptr = *mut GQueue;
pub type GInetSocketAddress_autoptr = *mut GInetSocketAddress;
pub type GInetSocketAddress_listautoptr = *mut GList;
pub type GInetSocketAddress_slistautoptr = *mut GSList;
pub type GInetSocketAddress_queueautoptr = *mut GQueue;
pub type GInitable_autoptr = *mut GInitable;
pub type GInitable_listautoptr = *mut GList;
pub type GInitable_slistautoptr = *mut GSList;
pub type GInitable_queueautoptr = *mut GQueue;
pub type GInputStream_autoptr = *mut GInputStream;
pub type GInputStream_listautoptr = *mut GList;
pub type GInputStream_slistautoptr = *mut GSList;
pub type GInputStream_queueautoptr = *mut GQueue;
pub type GIOModule_autoptr = *mut GIOModule;
pub type GIOModule_listautoptr = *mut GList;
pub type GIOModule_slistautoptr = *mut GSList;
pub type GIOModule_queueautoptr = *mut GQueue;
pub type GIOStream_autoptr = *mut GIOStream;
pub type GIOStream_listautoptr = *mut GList;
pub type GIOStream_slistautoptr = *mut GSList;
pub type GIOStream_queueautoptr = *mut GQueue;
pub type GLoadableIcon_autoptr = *mut GLoadableIcon;
pub type GLoadableIcon_listautoptr = *mut GList;
pub type GLoadableIcon_slistautoptr = *mut GSList;
pub type GLoadableIcon_queueautoptr = *mut GQueue;
pub type GMemoryInputStream_autoptr = *mut GMemoryInputStream;
pub type GMemoryInputStream_listautoptr = *mut GList;
pub type GMemoryInputStream_slistautoptr = *mut GSList;
pub type GMemoryInputStream_queueautoptr = *mut GQueue;
pub type GMemoryOutputStream_autoptr = *mut GMemoryOutputStream;
pub type GMemoryOutputStream_listautoptr = *mut GList;
pub type GMemoryOutputStream_slistautoptr = *mut GSList;
pub type GMemoryOutputStream_queueautoptr = *mut GQueue;
pub type GMenu_autoptr = *mut GMenu;
pub type GMenu_listautoptr = *mut GList;
pub type GMenu_slistautoptr = *mut GSList;
pub type GMenu_queueautoptr = *mut GQueue;
pub type GMenuItem_autoptr = *mut GMenuItem;
pub type GMenuItem_listautoptr = *mut GList;
pub type GMenuItem_slistautoptr = *mut GSList;
pub type GMenuItem_queueautoptr = *mut GQueue;
pub type GMenuModel_autoptr = *mut GMenuModel;
pub type GMenuModel_listautoptr = *mut GList;
pub type GMenuModel_slistautoptr = *mut GSList;
pub type GMenuModel_queueautoptr = *mut GQueue;
pub type GMenuAttributeIter_autoptr = *mut GMenuAttributeIter;
pub type GMenuAttributeIter_listautoptr = *mut GList;
pub type GMenuAttributeIter_slistautoptr = *mut GSList;
pub type GMenuAttributeIter_queueautoptr = *mut GQueue;
pub type GMenuLinkIter_autoptr = *mut GMenuLinkIter;
pub type GMenuLinkIter_listautoptr = *mut GList;
pub type GMenuLinkIter_slistautoptr = *mut GSList;
pub type GMenuLinkIter_queueautoptr = *mut GQueue;
pub type GMount_autoptr = *mut GMount;
pub type GMount_listautoptr = *mut GList;
pub type GMount_slistautoptr = *mut GSList;
pub type GMount_queueautoptr = *mut GQueue;
pub type GMountOperation_autoptr = *mut GMountOperation;
pub type GMountOperation_listautoptr = *mut GList;
pub type GMountOperation_slistautoptr = *mut GSList;
pub type GMountOperation_queueautoptr = *mut GQueue;
pub type GNativeVolumeMonitor_autoptr = *mut GNativeVolumeMonitor;
pub type GNativeVolumeMonitor_listautoptr = *mut GList;
pub type GNativeVolumeMonitor_slistautoptr = *mut GSList;
pub type GNativeVolumeMonitor_queueautoptr = *mut GQueue;
pub type GNetworkAddress_autoptr = *mut GNetworkAddress;
pub type GNetworkAddress_listautoptr = *mut GList;
pub type GNetworkAddress_slistautoptr = *mut GSList;
pub type GNetworkAddress_queueautoptr = *mut GQueue;
pub type GNetworkMonitor_autoptr = *mut GNetworkMonitor;
pub type GNetworkMonitor_listautoptr = *mut GList;
pub type GNetworkMonitor_slistautoptr = *mut GSList;
pub type GNetworkMonitor_queueautoptr = *mut GQueue;
pub type GNetworkService_autoptr = *mut GNetworkService;
pub type GNetworkService_listautoptr = *mut GList;
pub type GNetworkService_slistautoptr = *mut GSList;
pub type GNetworkService_queueautoptr = *mut GQueue;
pub type GNotification_autoptr = *mut GNotification;
pub type GNotification_listautoptr = *mut GList;
pub type GNotification_slistautoptr = *mut GSList;
pub type GNotification_queueautoptr = *mut GQueue;
pub type GOutputStream_autoptr = *mut GOutputStream;
pub type GOutputStream_listautoptr = *mut GList;
pub type GOutputStream_slistautoptr = *mut GSList;
pub type GOutputStream_queueautoptr = *mut GQueue;
pub type GPermission_autoptr = *mut GPermission;
pub type GPermission_listautoptr = *mut GList;
pub type GPermission_slistautoptr = *mut GSList;
pub type GPermission_queueautoptr = *mut GQueue;
pub type GPollableInputStream_autoptr = *mut GPollableInputStream;
pub type GPollableInputStream_listautoptr = *mut GList;
pub type GPollableInputStream_slistautoptr = *mut GSList;
pub type GPollableInputStream_queueautoptr = *mut GQueue;
pub type GPollableOutputStream_autoptr = *mut GPollableOutputStream;
pub type GPollableOutputStream_listautoptr = *mut GList;
pub type GPollableOutputStream_slistautoptr = *mut GSList;
pub type GPollableOutputStream_queueautoptr = *mut GQueue;
pub type GPropertyAction_autoptr = *mut GPropertyAction;
pub type GPropertyAction_listautoptr = *mut GList;
pub type GPropertyAction_slistautoptr = *mut GSList;
pub type GPropertyAction_queueautoptr = *mut GQueue;
pub type GProxyAddressEnumerator_autoptr = *mut GProxyAddressEnumerator;
pub type GProxyAddressEnumerator_listautoptr = *mut GList;
pub type GProxyAddressEnumerator_slistautoptr = *mut GSList;
pub type GProxyAddressEnumerator_queueautoptr = *mut GQueue;
pub type GProxyAddress_autoptr = *mut GProxyAddress;
pub type GProxyAddress_listautoptr = *mut GList;
pub type GProxyAddress_slistautoptr = *mut GSList;
pub type GProxyAddress_queueautoptr = *mut GQueue;
pub type GProxy_autoptr = *mut GProxy;
pub type GProxy_listautoptr = *mut GList;
pub type GProxy_slistautoptr = *mut GSList;
pub type GProxy_queueautoptr = *mut GQueue;
pub type GProxyResolver_autoptr = *mut GProxyResolver;
pub type GProxyResolver_listautoptr = *mut GList;
pub type GProxyResolver_slistautoptr = *mut GSList;
pub type GProxyResolver_queueautoptr = *mut GQueue;
pub type GRemoteActionGroup_autoptr = *mut GRemoteActionGroup;
pub type GRemoteActionGroup_listautoptr = *mut GList;
pub type GRemoteActionGroup_slistautoptr = *mut GSList;
pub type GRemoteActionGroup_queueautoptr = *mut GQueue;
pub type GResolver_autoptr = *mut GResolver;
pub type GResolver_listautoptr = *mut GList;
pub type GResolver_slistautoptr = *mut GSList;
pub type GResolver_queueautoptr = *mut GQueue;
pub type GResource_autoptr = *mut GResource;
pub type GResource_listautoptr = *mut GList;
pub type GResource_slistautoptr = *mut GSList;
pub type GResource_queueautoptr = *mut GQueue;
pub type GSeekable_autoptr = *mut GSeekable;
pub type GSeekable_listautoptr = *mut GList;
pub type GSeekable_slistautoptr = *mut GSList;
pub type GSeekable_queueautoptr = *mut GQueue;
pub type GSettingsBackend_autoptr = *mut GSettingsBackend;
pub type GSettingsBackend_listautoptr = *mut GList;
pub type GSettingsBackend_slistautoptr = *mut GSList;
pub type GSettingsBackend_queueautoptr = *mut GQueue;
pub type GSettingsSchema_autoptr = *mut GSettingsSchema;
pub type GSettingsSchema_listautoptr = *mut GList;
pub type GSettingsSchema_slistautoptr = *mut GSList;
pub type GSettingsSchema_queueautoptr = *mut GQueue;
pub type GSettingsSchemaKey_autoptr = *mut GSettingsSchemaKey;
pub type GSettingsSchemaKey_listautoptr = *mut GList;
pub type GSettingsSchemaKey_slistautoptr = *mut GSList;
pub type GSettingsSchemaKey_queueautoptr = *mut GQueue;
pub type GSettingsSchemaSource_autoptr = *mut GSettingsSchemaSource;
pub type GSettingsSchemaSource_listautoptr = *mut GList;
pub type GSettingsSchemaSource_slistautoptr = *mut GSList;
pub type GSettingsSchemaSource_queueautoptr = *mut GQueue;
pub type GSettings_autoptr = *mut GSettings;
pub type GSettings_listautoptr = *mut GList;
pub type GSettings_slistautoptr = *mut GSList;
pub type GSettings_queueautoptr = *mut GQueue;
pub type GSimpleActionGroup_autoptr = *mut GSimpleActionGroup;
pub type GSimpleActionGroup_listautoptr = *mut GList;
pub type GSimpleActionGroup_slistautoptr = *mut GSList;
pub type GSimpleActionGroup_queueautoptr = *mut GQueue;
pub type GSimpleAction_autoptr = *mut GSimpleAction;
pub type GSimpleAction_listautoptr = *mut GList;
pub type GSimpleAction_slistautoptr = *mut GSList;
pub type GSimpleAction_queueautoptr = *mut GQueue;
pub type GSimpleAsyncResult_autoptr = *mut GSimpleAsyncResult;
pub type GSimpleAsyncResult_listautoptr = *mut GList;
pub type GSimpleAsyncResult_slistautoptr = *mut GSList;
pub type GSimpleAsyncResult_queueautoptr = *mut GQueue;
pub type GSimplePermission_autoptr = *mut GSimplePermission;
pub type GSimplePermission_listautoptr = *mut GList;
pub type GSimplePermission_slistautoptr = *mut GSList;
pub type GSimplePermission_queueautoptr = *mut GQueue;
pub type GSimpleProxyResolver_autoptr = *mut GSimpleProxyResolver;
pub type GSimpleProxyResolver_listautoptr = *mut GList;
pub type GSimpleProxyResolver_slistautoptr = *mut GSList;
pub type GSimpleProxyResolver_queueautoptr = *mut GQueue;
pub type GSocketAddressEnumerator_autoptr = *mut GSocketAddressEnumerator;
pub type GSocketAddressEnumerator_listautoptr = *mut GList;
pub type GSocketAddressEnumerator_slistautoptr = *mut GSList;
pub type GSocketAddressEnumerator_queueautoptr = *mut GQueue;
pub type GSocketAddress_autoptr = *mut GSocketAddress;
pub type GSocketAddress_listautoptr = *mut GList;
pub type GSocketAddress_slistautoptr = *mut GSList;
pub type GSocketAddress_queueautoptr = *mut GQueue;
pub type GSocketClient_autoptr = *mut GSocketClient;
pub type GSocketClient_listautoptr = *mut GList;
pub type GSocketClient_slistautoptr = *mut GSList;
pub type GSocketClient_queueautoptr = *mut GQueue;
pub type GSocketConnectable_autoptr = *mut GSocketConnectable;
pub type GSocketConnectable_listautoptr = *mut GList;
pub type GSocketConnectable_slistautoptr = *mut GSList;
pub type GSocketConnectable_queueautoptr = *mut GQueue;
pub type GSocketConnection_autoptr = *mut GSocketConnection;
pub type GSocketConnection_listautoptr = *mut GList;
pub type GSocketConnection_slistautoptr = *mut GSList;
pub type GSocketConnection_queueautoptr = *mut GQueue;
pub type GSocketControlMessage_autoptr = *mut GSocketControlMessage;
pub type GSocketControlMessage_listautoptr = *mut GList;
pub type GSocketControlMessage_slistautoptr = *mut GSList;
pub type GSocketControlMessage_queueautoptr = *mut GQueue;
pub type GSocket_autoptr = *mut GSocket;
pub type GSocket_listautoptr = *mut GList;
pub type GSocket_slistautoptr = *mut GSList;
pub type GSocket_queueautoptr = *mut GQueue;
pub type GSocketListener_autoptr = *mut GSocketListener;
pub type GSocketListener_listautoptr = *mut GList;
pub type GSocketListener_slistautoptr = *mut GSList;
pub type GSocketListener_queueautoptr = *mut GQueue;
pub type GSocketService_autoptr = *mut GSocketService;
pub type GSocketService_listautoptr = *mut GList;
pub type GSocketService_slistautoptr = *mut GSList;
pub type GSocketService_queueautoptr = *mut GQueue;
pub type GSubprocess_autoptr = *mut GSubprocess;
pub type GSubprocess_listautoptr = *mut GList;
pub type GSubprocess_slistautoptr = *mut GSList;
pub type GSubprocess_queueautoptr = *mut GQueue;
pub type GSubprocessLauncher_autoptr = *mut GSubprocessLauncher;
pub type GSubprocessLauncher_listautoptr = *mut GList;
pub type GSubprocessLauncher_slistautoptr = *mut GSList;
pub type GSubprocessLauncher_queueautoptr = *mut GQueue;
pub type GTask_autoptr = *mut GTask;
pub type GTask_listautoptr = *mut GList;
pub type GTask_slistautoptr = *mut GSList;
pub type GTask_queueautoptr = *mut GQueue;
pub type GTcpConnection_autoptr = *mut GTcpConnection;
pub type GTcpConnection_listautoptr = *mut GList;
pub type GTcpConnection_slistautoptr = *mut GSList;
pub type GTcpConnection_queueautoptr = *mut GQueue;
pub type GTcpWrapperConnection_autoptr = *mut GTcpWrapperConnection;
pub type GTcpWrapperConnection_listautoptr = *mut GList;
pub type GTcpWrapperConnection_slistautoptr = *mut GSList;
pub type GTcpWrapperConnection_queueautoptr = *mut GQueue;
pub type GTestDBus_autoptr = *mut GTestDBus;
pub type GTestDBus_listautoptr = *mut GList;
pub type GTestDBus_slistautoptr = *mut GSList;
pub type GTestDBus_queueautoptr = *mut GQueue;
pub type GThemedIcon_autoptr = *mut GThemedIcon;
pub type GThemedIcon_listautoptr = *mut GList;
pub type GThemedIcon_slistautoptr = *mut GSList;
pub type GThemedIcon_queueautoptr = *mut GQueue;
pub type GThreadedSocketService_autoptr = *mut GThreadedSocketService;
pub type GThreadedSocketService_listautoptr = *mut GList;
pub type GThreadedSocketService_slistautoptr = *mut GSList;
pub type GThreadedSocketService_queueautoptr = *mut GQueue;
pub type GTlsBackend_autoptr = *mut GTlsBackend;
pub type GTlsBackend_listautoptr = *mut GList;
pub type GTlsBackend_slistautoptr = *mut GSList;
pub type GTlsBackend_queueautoptr = *mut GQueue;
pub type GTlsCertificate_autoptr = *mut GTlsCertificate;
pub type GTlsCertificate_listautoptr = *mut GList;
pub type GTlsCertificate_slistautoptr = *mut GSList;
pub type GTlsCertificate_queueautoptr = *mut GQueue;
pub type GTlsClientConnection_autoptr = *mut GTlsClientConnection;
pub type GTlsClientConnection_listautoptr = *mut GList;
pub type GTlsClientConnection_slistautoptr = *mut GSList;
pub type GTlsClientConnection_queueautoptr = *mut GQueue;
pub type GTlsConnection_autoptr = *mut GTlsConnection;
pub type GTlsConnection_listautoptr = *mut GList;
pub type GTlsConnection_slistautoptr = *mut GSList;
pub type GTlsConnection_queueautoptr = *mut GQueue;
pub type GTlsDatabase_autoptr = *mut GTlsDatabase;
pub type GTlsDatabase_listautoptr = *mut GList;
pub type GTlsDatabase_slistautoptr = *mut GSList;
pub type GTlsDatabase_queueautoptr = *mut GQueue;
pub type GTlsFileDatabase_autoptr = *mut GTlsFileDatabase;
pub type GTlsFileDatabase_listautoptr = *mut GList;
pub type GTlsFileDatabase_slistautoptr = *mut GSList;
pub type GTlsFileDatabase_queueautoptr = *mut GQueue;
pub type GTlsInteraction_autoptr = *mut GTlsInteraction;
pub type GTlsInteraction_listautoptr = *mut GList;
pub type GTlsInteraction_slistautoptr = *mut GSList;
pub type GTlsInteraction_queueautoptr = *mut GQueue;
pub type GTlsPassword_autoptr = *mut GTlsPassword;
pub type GTlsPassword_listautoptr = *mut GList;
pub type GTlsPassword_slistautoptr = *mut GSList;
pub type GTlsPassword_queueautoptr = *mut GQueue;
pub type GTlsServerConnection_autoptr = *mut GTlsServerConnection;
pub type GTlsServerConnection_listautoptr = *mut GList;
pub type GTlsServerConnection_slistautoptr = *mut GSList;
pub type GTlsServerConnection_queueautoptr = *mut GQueue;
pub type GVfs_autoptr = *mut GVfs;
pub type GVfs_listautoptr = *mut GList;
pub type GVfs_slistautoptr = *mut GSList;
pub type GVfs_queueautoptr = *mut GQueue;
pub type GVolume_autoptr = *mut GVolume;
pub type GVolume_listautoptr = *mut GList;
pub type GVolume_slistautoptr = *mut GSList;
pub type GVolume_queueautoptr = *mut GQueue;
pub type GVolumeMonitor_autoptr = *mut GVolumeMonitor;
pub type GVolumeMonitor_listautoptr = *mut GList;
pub type GVolumeMonitor_slistautoptr = *mut GSList;
pub type GVolumeMonitor_queueautoptr = *mut GQueue;
pub type GZlibCompressor_autoptr = *mut GZlibCompressor;
pub type GZlibCompressor_listautoptr = *mut GList;
pub type GZlibCompressor_slistautoptr = *mut GSList;
pub type GZlibCompressor_queueautoptr = *mut GQueue;
pub type GZlibDecompressor_autoptr = *mut GZlibDecompressor;
pub type GZlibDecompressor_listautoptr = *mut GList;
pub type GZlibDecompressor_slistautoptr = *mut GSList;
pub type GZlibDecompressor_queueautoptr = *mut GQueue;
extern "C" {
    pub fn _frida_gio_init();
}
extern "C" {
    pub fn _frida_gio_shutdown();
}
extern "C" {
    pub fn _frida_gio_deinit();
}
extern "C" {
    pub fn _frida_gio_prepare_to_fork();
}
extern "C" {
    pub fn _frida_gio_recover_from_fork_in_parent();
}
extern "C" {
    pub fn _frida_gio_recover_from_fork_in_child();
}
extern "C" {
    pub fn gum_darwin_grafter_flags_get_type() -> GType;
}
extern "C" {
    pub fn gum_darwin_module_flags_get_type() -> GType;
}
extern "C" {
    pub fn gum_error_get_type() -> GType;
}
extern "C" {
    pub fn gum_cpu_type_get_type() -> GType;
}
extern "C" {
    pub fn gum_memory_access_get_type() -> GType;
}
extern "C" {
    pub fn gum_elf_type_get_type() -> GType;
}
extern "C" {
    pub fn gum_elf_osabi_get_type() -> GType;
}
extern "C" {
    pub fn gum_elf_machine_get_type() -> GType;
}
extern "C" {
    pub fn gum_elf_source_mode_get_type() -> GType;
}
extern "C" {
    pub fn gum_elf_section_type_get_type() -> GType;
}
extern "C" {
    pub fn gum_elf_dynamic_tag_get_type() -> GType;
}
extern "C" {
    pub fn gum_elf_shdr_index_get_type() -> GType;
}
extern "C" {
    pub fn gum_elf_symbol_type_get_type() -> GType;
}
extern "C" {
    pub fn gum_elf_symbol_bind_get_type() -> GType;
}
extern "C" {
    pub fn gum_elf_ia32_relocation_get_type() -> GType;
}
extern "C" {
    pub fn gum_elf_x64_relocation_get_type() -> GType;
}
extern "C" {
    pub fn gum_elf_arm_relocation_get_type() -> GType;
}
extern "C" {
    pub fn gum_elf_arm64_relocation_get_type() -> GType;
}
extern "C" {
    pub fn gum_elf_mips_relocation_get_type() -> GType;
}
extern "C" {
    pub fn gum_attach_return_get_type() -> GType;
}
extern "C" {
    pub fn gum_replace_return_get_type() -> GType;
}
extern "C" {
    pub fn gum_teardown_requirement_get_type() -> GType;
}
extern "C" {
    pub fn gum_code_signing_policy_get_type() -> GType;
}
extern "C" {
    pub fn gum_modify_thread_flags_get_type() -> GType;
}
extern "C" {
    pub fn gum_thread_state_get_type() -> GType;
}
extern "C" {
    pub fn gum_dependency_type_get_type() -> GType;
}
pub const GumError_GUM_ERROR_FAILED: GumError = 0;
pub const GumError_GUM_ERROR_NOT_FOUND: GumError = 1;
pub const GumError_GUM_ERROR_EXISTS: GumError = 2;
pub const GumError_GUM_ERROR_PERMISSION_DENIED: GumError = 3;
pub const GumError_GUM_ERROR_INVALID_ARGUMENT: GumError = 4;
pub const GumError_GUM_ERROR_NOT_SUPPORTED: GumError = 5;
pub const GumError_GUM_ERROR_INVALID_DATA: GumError = 6;
pub type GumError = ::core::ffi::c_uint;
pub type GumAddress = guint64;
pub type GumOS = guint;
pub type GumCallingConvention = guint;
pub type GumAbiType = guint;
pub type GumCpuFeatures = guint;
pub type GumInstructionEncoding = guint;
pub type GumArgType = guint;
pub type GumArgument = _GumArgument;
pub type GumBranchHint = guint;
pub type GumIA32CpuContext = _GumIA32CpuContext;
pub type GumX64CpuContext = _GumX64CpuContext;
pub type GumArmCpuContext = _GumArmCpuContext;
pub type GumArmVectorReg = _GumArmVectorReg;
pub type GumArm64CpuContext = _GumArm64CpuContext;
pub type GumArm64VectorReg = _GumArm64VectorReg;
pub type GumMipsCpuContext = _GumMipsCpuContext;
pub type GumRelocationScenario = guint;
pub type GumCpuContext = GumArm64CpuContext;
pub const _GumOS_GUM_OS_WINDOWS: _GumOS = 0;
pub const _GumOS_GUM_OS_MACOS: _GumOS = 1;
pub const _GumOS_GUM_OS_LINUX: _GumOS = 2;
pub const _GumOS_GUM_OS_IOS: _GumOS = 3;
pub const _GumOS_GUM_OS_WATCHOS: _GumOS = 4;
pub const _GumOS_GUM_OS_TVOS: _GumOS = 5;
pub const _GumOS_GUM_OS_ANDROID: _GumOS = 6;
pub const _GumOS_GUM_OS_FREEBSD: _GumOS = 7;
pub const _GumOS_GUM_OS_QNX: _GumOS = 8;
pub type _GumOS = ::core::ffi::c_uint;
pub const _GumCallingConvention_GUM_CALL_CAPI: _GumCallingConvention = 0;
pub const _GumCallingConvention_GUM_CALL_SYSAPI: _GumCallingConvention = 1;
pub type _GumCallingConvention = ::core::ffi::c_uint;
pub const _GumAbiType_GUM_ABI_UNIX: _GumAbiType = 0;
pub const _GumAbiType_GUM_ABI_WINDOWS: _GumAbiType = 1;
pub type _GumAbiType = ::core::ffi::c_uint;
pub const GumCpuType_GUM_CPU_INVALID: GumCpuType = 0;
pub const GumCpuType_GUM_CPU_IA32: GumCpuType = 1;
pub const GumCpuType_GUM_CPU_AMD64: GumCpuType = 2;
pub const GumCpuType_GUM_CPU_ARM: GumCpuType = 3;
pub const GumCpuType_GUM_CPU_ARM64: GumCpuType = 4;
pub const GumCpuType_GUM_CPU_MIPS: GumCpuType = 5;
pub type GumCpuType = ::core::ffi::c_uint;
pub const _GumCpuFeatures_GUM_CPU_AVX2: _GumCpuFeatures = 1;
pub const _GumCpuFeatures_GUM_CPU_THUMB_INTERWORK: _GumCpuFeatures = 2;
pub const _GumCpuFeatures_GUM_CPU_VFP2: _GumCpuFeatures = 4;
pub const _GumCpuFeatures_GUM_CPU_VFP3: _GumCpuFeatures = 8;
pub const _GumCpuFeatures_GUM_CPU_VFPD32: _GumCpuFeatures = 16;
pub const _GumCpuFeatures_GUM_CPU_PTRAUTH: _GumCpuFeatures = 32;
pub type _GumCpuFeatures = ::core::ffi::c_uint;
pub const GumMemoryAccess_GUM_MEMORY_ACCESS_OPEN: GumMemoryAccess = 0;
pub const GumMemoryAccess_GUM_MEMORY_ACCESS_EXCLUSIVE: GumMemoryAccess = 1;
pub type GumMemoryAccess = ::core::ffi::c_uint;
pub const _GumInstructionEncoding_GUM_INSTRUCTION_DEFAULT: _GumInstructionEncoding = 0;
pub const _GumInstructionEncoding_GUM_INSTRUCTION_SPECIAL: _GumInstructionEncoding = 1;
pub type _GumInstructionEncoding = ::core::ffi::c_uint;
pub const _GumArgType_GUM_ARG_ADDRESS: _GumArgType = 0;
pub const _GumArgType_GUM_ARG_REGISTER: _GumArgType = 1;
pub type _GumArgType = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _GumArgument {
    pub type_: GumArgType,
    pub value: _GumArgument__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _GumArgument__bindgen_ty_1 {
    pub address: GumAddress,
    pub reg: gint,
}
pub const _GumBranchHint_GUM_NO_HINT: _GumBranchHint = 0;
pub const _GumBranchHint_GUM_LIKELY: _GumBranchHint = 1;
pub const _GumBranchHint_GUM_UNLIKELY: _GumBranchHint = 2;
pub type _GumBranchHint = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumIA32CpuContext {
    pub eip: guint32,
    pub edi: guint32,
    pub esi: guint32,
    pub ebp: guint32,
    pub esp: guint32,
    pub ebx: guint32,
    pub edx: guint32,
    pub ecx: guint32,
    pub eax: guint32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumX64CpuContext {
    pub rip: guint64,
    pub r15: guint64,
    pub r14: guint64,
    pub r13: guint64,
    pub r12: guint64,
    pub r11: guint64,
    pub r10: guint64,
    pub r9: guint64,
    pub r8: guint64,
    pub rdi: guint64,
    pub rsi: guint64,
    pub rbp: guint64,
    pub rsp: guint64,
    pub rbx: guint64,
    pub rdx: guint64,
    pub rcx: guint64,
    pub rax: guint64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _GumArmVectorReg {
    pub q: [guint8; 16usize],
    pub d: [gdouble; 2usize],
    pub s: [gfloat; 4usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _GumArmCpuContext {
    pub pc: guint32,
    pub sp: guint32,
    pub cpsr: guint32,
    pub r8: guint32,
    pub r9: guint32,
    pub r10: guint32,
    pub r11: guint32,
    pub r12: guint32,
    pub v: [GumArmVectorReg; 16usize],
    pub _padding: guint32,
    pub r: [guint32; 8usize],
    pub lr: guint32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _GumArm64VectorReg {
    pub q: [guint8; 16usize],
    pub d: gdouble,
    pub s: gfloat,
    pub h: guint16,
    pub b: guint8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _GumArm64CpuContext {
    pub pc: guint64,
    pub sp: guint64,
    pub nzcv: guint64,
    pub x: [guint64; 29usize],
    pub fp: guint64,
    pub lr: guint64,
    pub v: [GumArm64VectorReg; 32usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumMipsCpuContext {
    pub pc: gsize,
    pub gp: gsize,
    pub sp: gsize,
    pub fp: gsize,
    pub ra: gsize,
    pub hi: gsize,
    pub lo: gsize,
    pub at: gsize,
    pub v0: gsize,
    pub v1: gsize,
    pub a0: gsize,
    pub a1: gsize,
    pub a2: gsize,
    pub a3: gsize,
    pub t0: gsize,
    pub t1: gsize,
    pub t2: gsize,
    pub t3: gsize,
    pub t4: gsize,
    pub t5: gsize,
    pub t6: gsize,
    pub t7: gsize,
    pub t8: gsize,
    pub t9: gsize,
    pub s0: gsize,
    pub s1: gsize,
    pub s2: gsize,
    pub s3: gsize,
    pub s4: gsize,
    pub s5: gsize,
    pub s6: gsize,
    pub s7: gsize,
    pub k0: gsize,
    pub k1: gsize,
}
pub const _GumRelocationScenario_GUM_SCENARIO_OFFLINE: _GumRelocationScenario = 0;
pub const _GumRelocationScenario_GUM_SCENARIO_ONLINE: _GumRelocationScenario = 1;
pub type _GumRelocationScenario = ::core::ffi::c_uint;
extern "C" {
    pub fn gum_error_quark() -> GQuark;
}
extern "C" {
    pub fn gum_panic(format: *const gchar, ...) -> !;
}
extern "C" {
    pub fn gum_query_cpu_features() -> GumCpuFeatures;
}
extern "C" {
    pub fn gum_cpu_context_get_nth_argument(self_: *mut GumCpuContext, n: guint) -> gpointer;
}
extern "C" {
    pub fn gum_cpu_context_replace_nth_argument(
        self_: *mut GumCpuContext,
        n: guint,
        value: gpointer,
    );
}
extern "C" {
    pub fn gum_cpu_context_get_return_value(self_: *mut GumCpuContext) -> gpointer;
}
extern "C" {
    pub fn gum_cpu_context_replace_return_value(self_: *mut GumCpuContext, value: gpointer);
}
extern "C" {
    pub fn gum_address_get_type() -> GType;
}
extern "C" {
    pub fn gum_api_resolver_get_type() -> GType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumApiResolver {
    _unused: [u8; 0],
}
pub type GumApiResolver = _GumApiResolver;
pub type GumApiResolverInterface = _GumApiResolverInterface;
pub type GumApiResolver_autoptr = *mut GumApiResolver;
pub type GumApiResolver_listautoptr = *mut GList;
pub type GumApiResolver_slistautoptr = *mut GSList;
pub type GumApiResolver_queueautoptr = *mut GQueue;
pub type GumApiDetails = _GumApiDetails;
pub type GumFoundApiFunc = ::core::option::Option<
    unsafe extern "C" fn(details: *const GumApiDetails, user_data: gpointer) -> gboolean,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumApiResolverInterface {
    pub parent: GTypeInterface,
    pub enumerate_matches: ::core::option::Option<
        unsafe extern "C" fn(
            self_: *mut GumApiResolver,
            query: *const gchar,
            func: GumFoundApiFunc,
            user_data: gpointer,
            error: *mut *mut GError,
        ),
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumApiDetails {
    pub name: *const gchar,
    pub address: GumAddress,
    pub size: gssize,
}
extern "C" {
    pub fn gum_api_resolver_make(type_: *const gchar) -> *mut GumApiResolver;
}
extern "C" {
    pub fn gum_api_resolver_enumerate_matches(
        self_: *mut GumApiResolver,
        query: *const gchar,
        func: GumFoundApiFunc,
        user_data: gpointer,
        error: *mut *mut GError,
    );
}
pub type GumReturnAddressDetails = _GumReturnAddressDetails;
pub type GumReturnAddress = gpointer;
pub type GumReturnAddressArray = _GumReturnAddressArray;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumReturnAddressDetails {
    pub address: GumReturnAddress,
    pub module_name: [gchar; 261usize],
    pub function_name: [gchar; 2049usize],
    pub file_name: [gchar; 261usize],
    pub line_number: guint,
    pub column: guint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumReturnAddressArray {
    pub len: guint,
    pub items: [GumReturnAddress; 16usize],
}
extern "C" {
    pub fn gum_return_address_details_from_address(
        address: GumReturnAddress,
        details: *mut GumReturnAddressDetails,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_return_address_array_is_equal(
        array1: *const GumReturnAddressArray,
        array2: *const GumReturnAddressArray,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_backtracer_get_type() -> GType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumBacktracer {
    _unused: [u8; 0],
}
pub type GumBacktracer = _GumBacktracer;
pub type GumBacktracerInterface = _GumBacktracerInterface;
pub type GumBacktracer_autoptr = *mut GumBacktracer;
pub type GumBacktracer_listautoptr = *mut GList;
pub type GumBacktracer_slistautoptr = *mut GSList;
pub type GumBacktracer_queueautoptr = *mut GQueue;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumBacktracerInterface {
    pub parent: GTypeInterface,
    pub generate: ::core::option::Option<
        unsafe extern "C" fn(
            self_: *mut GumBacktracer,
            cpu_context: *const GumCpuContext,
            return_addresses: *mut GumReturnAddressArray,
            limit: guint,
        ),
    >,
}
extern "C" {
    pub fn gum_backtracer_make_accurate() -> *mut GumBacktracer;
}
extern "C" {
    pub fn gum_backtracer_make_fuzzy() -> *mut GumBacktracer;
}
extern "C" {
    pub fn gum_backtracer_generate(
        self_: *mut GumBacktracer,
        cpu_context: *const GumCpuContext,
        return_addresses: *mut GumReturnAddressArray,
    );
}
extern "C" {
    pub fn gum_backtracer_generate_with_limit(
        self_: *mut GumBacktracer,
        cpu_context: *const GumCpuContext,
        return_addresses: *mut GumReturnAddressArray,
        limit: guint,
    );
}
pub type GumPtrauthSupport = guint;
pub type GumRwxSupport = guint;
pub type GumMemoryOperation = guint;
pub type GumPageProtection = guint;
pub type GumAddressSpec = _GumAddressSpec;
pub type GumMemoryRange = _GumMemoryRange;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumMatchPattern {
    _unused: [u8; 0],
}
pub type GumMatchPattern = _GumMatchPattern;
pub type GumMemoryIsNearFunc =
    ::core::option::Option<unsafe extern "C" fn(memory: gpointer, address: gpointer) -> gboolean>;
pub const _GumPtrauthSupport_GUM_PTRAUTH_INVALID: _GumPtrauthSupport = 0;
pub const _GumPtrauthSupport_GUM_PTRAUTH_UNSUPPORTED: _GumPtrauthSupport = 1;
pub const _GumPtrauthSupport_GUM_PTRAUTH_SUPPORTED: _GumPtrauthSupport = 2;
pub type _GumPtrauthSupport = ::core::ffi::c_uint;
pub const _GumRwxSupport_GUM_RWX_NONE: _GumRwxSupport = 0;
pub const _GumRwxSupport_GUM_RWX_ALLOCATIONS_ONLY: _GumRwxSupport = 1;
pub const _GumRwxSupport_GUM_RWX_FULL: _GumRwxSupport = 2;
pub type _GumRwxSupport = ::core::ffi::c_uint;
pub const _GumMemoryOperation_GUM_MEMOP_INVALID: _GumMemoryOperation = 0;
pub const _GumMemoryOperation_GUM_MEMOP_READ: _GumMemoryOperation = 1;
pub const _GumMemoryOperation_GUM_MEMOP_WRITE: _GumMemoryOperation = 2;
pub const _GumMemoryOperation_GUM_MEMOP_EXECUTE: _GumMemoryOperation = 3;
pub type _GumMemoryOperation = ::core::ffi::c_uint;
pub const _GumPageProtection_GUM_PAGE_NO_ACCESS: _GumPageProtection = 0;
pub const _GumPageProtection_GUM_PAGE_READ: _GumPageProtection = 1;
pub const _GumPageProtection_GUM_PAGE_WRITE: _GumPageProtection = 2;
pub const _GumPageProtection_GUM_PAGE_EXECUTE: _GumPageProtection = 4;
pub type _GumPageProtection = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumAddressSpec {
    pub near_address: gpointer,
    pub max_distance: gsize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumMemoryRange {
    pub base_address: GumAddress,
    pub size: gsize,
}
pub type GumMemoryPatchApplyFunc =
    ::core::option::Option<unsafe extern "C" fn(mem: gpointer, user_data: gpointer)>;
pub type GumMemoryScanMatchFunc = ::core::option::Option<
    unsafe extern "C" fn(address: GumAddress, size: gsize, user_data: gpointer) -> gboolean,
>;
extern "C" {
    pub fn gum_internal_heap_ref();
}
extern "C" {
    pub fn gum_internal_heap_unref();
}
extern "C" {
    pub fn gum_sign_code_pointer(value: gpointer) -> gpointer;
}
extern "C" {
    pub fn gum_strip_code_pointer(value: gpointer) -> gpointer;
}
extern "C" {
    pub fn gum_sign_code_address(value: GumAddress) -> GumAddress;
}
extern "C" {
    pub fn gum_strip_code_address(value: GumAddress) -> GumAddress;
}
extern "C" {
    pub fn gum_query_ptrauth_support() -> GumPtrauthSupport;
}
extern "C" {
    pub fn gum_query_page_size() -> guint;
}
extern "C" {
    pub fn gum_query_is_rwx_supported() -> gboolean;
}
extern "C" {
    pub fn gum_query_rwx_support() -> GumRwxSupport;
}
extern "C" {
    pub fn gum_memory_is_readable(address: gconstpointer, len: gsize) -> gboolean;
}
extern "C" {
    pub fn gum_memory_query_protection(
        address: gconstpointer,
        prot: *mut GumPageProtection,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_memory_read(
        address: gconstpointer,
        len: gsize,
        n_bytes_read: *mut gsize,
    ) -> *mut guint8;
}
extern "C" {
    pub fn gum_memory_write(address: gpointer, bytes: *const guint8, len: gsize) -> gboolean;
}
extern "C" {
    pub fn gum_memory_patch_code(
        address: gpointer,
        size: gsize,
        apply: GumMemoryPatchApplyFunc,
        apply_data: gpointer,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_memory_mark_code(address: gpointer, size: gsize) -> gboolean;
}
extern "C" {
    pub fn gum_memory_scan(
        range: *const GumMemoryRange,
        pattern: *const GumMatchPattern,
        func: GumMemoryScanMatchFunc,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn gum_match_pattern_get_type() -> GType;
}
extern "C" {
    pub fn gum_match_pattern_new_from_string(pattern_str: *const gchar) -> *mut GumMatchPattern;
}
extern "C" {
    pub fn gum_match_pattern_ref(pattern: *mut GumMatchPattern) -> *mut GumMatchPattern;
}
extern "C" {
    pub fn gum_match_pattern_unref(pattern: *mut GumMatchPattern);
}
extern "C" {
    pub fn gum_match_pattern_get_size(pattern: *const GumMatchPattern) -> guint;
}
extern "C" {
    pub fn gum_match_pattern_get_tokens(pattern: *const GumMatchPattern) -> *mut GPtrArray;
}
extern "C" {
    pub fn gum_ensure_code_readable(address: gconstpointer, size: gsize);
}
extern "C" {
    pub fn gum_mprotect(address: gpointer, size: gsize, prot: GumPageProtection);
}
extern "C" {
    pub fn gum_try_mprotect(address: gpointer, size: gsize, prot: GumPageProtection) -> gboolean;
}
extern "C" {
    pub fn gum_clear_cache(address: gpointer, size: gsize);
}
extern "C" {
    pub fn gum_peek_private_memory_usage() -> guint;
}
extern "C" {
    pub fn gum_malloc(size: gsize) -> gpointer;
}
extern "C" {
    pub fn gum_malloc0(size: gsize) -> gpointer;
}
extern "C" {
    pub fn gum_malloc_usable_size(mem: gconstpointer) -> gsize;
}
extern "C" {
    pub fn gum_calloc(count: gsize, size: gsize) -> gpointer;
}
extern "C" {
    pub fn gum_realloc(mem: gpointer, size: gsize) -> gpointer;
}
extern "C" {
    pub fn gum_memalign(alignment: gsize, size: gsize) -> gpointer;
}
extern "C" {
    pub fn gum_memdup(mem: gconstpointer, byte_size: gsize) -> gpointer;
}
extern "C" {
    pub fn gum_free(mem: gpointer);
}
extern "C" {
    pub fn gum_alloc_n_pages(n_pages: guint, prot: GumPageProtection) -> gpointer;
}
extern "C" {
    pub fn gum_try_alloc_n_pages(n_pages: guint, prot: GumPageProtection) -> gpointer;
}
extern "C" {
    pub fn gum_alloc_n_pages_near(
        n_pages: guint,
        prot: GumPageProtection,
        spec: *const GumAddressSpec,
    ) -> gpointer;
}
extern "C" {
    pub fn gum_try_alloc_n_pages_near(
        n_pages: guint,
        prot: GumPageProtection,
        spec: *const GumAddressSpec,
    ) -> gpointer;
}
extern "C" {
    pub fn gum_query_page_allocation_range(
        mem: gconstpointer,
        size: guint,
        range: *mut GumMemoryRange,
    );
}
extern "C" {
    pub fn gum_free_pages(mem: gpointer);
}
extern "C" {
    pub fn gum_memory_allocate(
        address: gpointer,
        size: gsize,
        alignment: gsize,
        prot: GumPageProtection,
    ) -> gpointer;
}
extern "C" {
    pub fn gum_memory_allocate_near(
        spec: *const GumAddressSpec,
        size: gsize,
        alignment: gsize,
        prot: GumPageProtection,
    ) -> gpointer;
}
extern "C" {
    pub fn gum_memory_free(address: gpointer, size: gsize) -> gboolean;
}
extern "C" {
    pub fn gum_memory_release(address: gpointer, size: gsize) -> gboolean;
}
extern "C" {
    pub fn gum_memory_recommit(address: gpointer, size: gsize, prot: GumPageProtection)
        -> gboolean;
}
extern "C" {
    pub fn gum_memory_discard(address: gpointer, size: gsize) -> gboolean;
}
extern "C" {
    pub fn gum_memory_decommit(address: gpointer, size: gsize) -> gboolean;
}
extern "C" {
    pub fn gum_address_spec_is_satisfied_by(
        spec: *const GumAddressSpec,
        address: gconstpointer,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_memory_range_get_type() -> GType;
}
extern "C" {
    pub fn gum_memory_range_copy(range: *const GumMemoryRange) -> *mut GumMemoryRange;
}
extern "C" {
    pub fn gum_memory_range_free(range: *mut GumMemoryRange);
}
pub type GumProcessId = guint;
pub type GumThreadId = gsize;
pub type GumThreadDetails = _GumThreadDetails;
pub type GumModuleDetails = _GumModuleDetails;
pub type GumImportType = guint;
pub type GumExportType = guint;
pub type GumSymbolType = guint;
pub type GumImportDetails = _GumImportDetails;
pub type GumExportDetails = _GumExportDetails;
pub type GumSymbolDetails = _GumSymbolDetails;
pub type GumSymbolSection = _GumSymbolSection;
pub type GumRangeDetails = _GumRangeDetails;
pub type GumFileMapping = _GumFileMapping;
pub type GumSectionDetails = _GumSectionDetails;
pub type GumDependencyDetails = _GumDependencyDetails;
pub type GumMallocRangeDetails = _GumMallocRangeDetails;
pub const GumTeardownRequirement_GUM_TEARDOWN_REQUIREMENT_FULL: GumTeardownRequirement = 0;
pub const GumTeardownRequirement_GUM_TEARDOWN_REQUIREMENT_MINIMAL: GumTeardownRequirement = 1;
pub type GumTeardownRequirement = ::core::ffi::c_uint;
pub const GumCodeSigningPolicy_GUM_CODE_SIGNING_OPTIONAL: GumCodeSigningPolicy = 0;
pub const GumCodeSigningPolicy_GUM_CODE_SIGNING_REQUIRED: GumCodeSigningPolicy = 1;
pub type GumCodeSigningPolicy = ::core::ffi::c_uint;
pub const GumModifyThreadFlags_GUM_MODIFY_THREAD_FLAGS_NONE: GumModifyThreadFlags = 0;
pub const GumModifyThreadFlags_GUM_MODIFY_THREAD_FLAGS_ABORT_SAFELY: GumModifyThreadFlags = 1;
pub type GumModifyThreadFlags = ::core::ffi::c_uint;
pub const GumThreadState_GUM_THREAD_RUNNING: GumThreadState = 1;
pub const GumThreadState_GUM_THREAD_STOPPED: GumThreadState = 2;
pub const GumThreadState_GUM_THREAD_WAITING: GumThreadState = 3;
pub const GumThreadState_GUM_THREAD_UNINTERRUPTIBLE: GumThreadState = 4;
pub const GumThreadState_GUM_THREAD_HALTED: GumThreadState = 5;
pub type GumThreadState = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _GumThreadDetails {
    pub id: GumThreadId,
    pub name: *const gchar,
    pub state: GumThreadState,
    pub cpu_context: GumCpuContext,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumModuleDetails {
    pub name: *const gchar,
    pub range: *const GumMemoryRange,
    pub path: *const gchar,
}
pub const _GumImportType_GUM_IMPORT_UNKNOWN: _GumImportType = 0;
pub const _GumImportType_GUM_IMPORT_FUNCTION: _GumImportType = 1;
pub const _GumImportType_GUM_IMPORT_VARIABLE: _GumImportType = 2;
pub type _GumImportType = ::core::ffi::c_uint;
pub const _GumExportType_GUM_EXPORT_FUNCTION: _GumExportType = 1;
pub const _GumExportType_GUM_EXPORT_VARIABLE: _GumExportType = 2;
pub type _GumExportType = ::core::ffi::c_uint;
pub const _GumSymbolType_GUM_SYMBOL_UNKNOWN: _GumSymbolType = 0;
pub const _GumSymbolType_GUM_SYMBOL_SECTION: _GumSymbolType = 1;
pub const _GumSymbolType_GUM_SYMBOL_UNDEFINED: _GumSymbolType = 2;
pub const _GumSymbolType_GUM_SYMBOL_ABSOLUTE: _GumSymbolType = 3;
pub const _GumSymbolType_GUM_SYMBOL_PREBOUND_UNDEFINED: _GumSymbolType = 4;
pub const _GumSymbolType_GUM_SYMBOL_INDIRECT: _GumSymbolType = 5;
pub const _GumSymbolType_GUM_SYMBOL_OBJECT: _GumSymbolType = 6;
pub const _GumSymbolType_GUM_SYMBOL_FUNCTION: _GumSymbolType = 7;
pub const _GumSymbolType_GUM_SYMBOL_FILE: _GumSymbolType = 8;
pub const _GumSymbolType_GUM_SYMBOL_COMMON: _GumSymbolType = 9;
pub const _GumSymbolType_GUM_SYMBOL_TLS: _GumSymbolType = 10;
pub type _GumSymbolType = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumImportDetails {
    pub type_: GumImportType,
    pub name: *const gchar,
    pub module: *const gchar,
    pub address: GumAddress,
    pub slot: GumAddress,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumExportDetails {
    pub type_: GumExportType,
    pub name: *const gchar,
    pub address: GumAddress,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumSymbolDetails {
    pub is_global: gboolean,
    pub type_: GumSymbolType,
    pub section: *const GumSymbolSection,
    pub name: *const gchar,
    pub address: GumAddress,
    pub size: gssize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumSymbolSection {
    pub id: *const gchar,
    pub protection: GumPageProtection,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumRangeDetails {
    pub range: *const GumMemoryRange,
    pub protection: GumPageProtection,
    pub file: *const GumFileMapping,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumFileMapping {
    pub path: *const gchar,
    pub offset: guint64,
    pub size: gsize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumSectionDetails {
    pub id: *const gchar,
    pub name: *const gchar,
    pub address: GumAddress,
    pub size: gsize,
}
pub const GumDependencyType_GUM_DEPENDENCY_REGULAR: GumDependencyType = 0;
pub const GumDependencyType_GUM_DEPENDENCY_WEAK: GumDependencyType = 1;
pub const GumDependencyType_GUM_DEPENDENCY_REEXPORT: GumDependencyType = 2;
pub const GumDependencyType_GUM_DEPENDENCY_UPWARD: GumDependencyType = 3;
pub type GumDependencyType = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumDependencyDetails {
    pub name: *const gchar,
    pub type_: GumDependencyType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumMallocRangeDetails {
    pub range: *const GumMemoryRange,
}
pub type GumModifyThreadFunc = ::core::option::Option<
    unsafe extern "C" fn(
        thread_id: GumThreadId,
        cpu_context: *mut GumCpuContext,
        user_data: gpointer,
    ),
>;
pub type GumFoundThreadFunc = ::core::option::Option<
    unsafe extern "C" fn(details: *const GumThreadDetails, user_data: gpointer) -> gboolean,
>;
pub type GumFoundModuleFunc = ::core::option::Option<
    unsafe extern "C" fn(details: *const GumModuleDetails, user_data: gpointer) -> gboolean,
>;
pub type GumFoundImportFunc = ::core::option::Option<
    unsafe extern "C" fn(details: *const GumImportDetails, user_data: gpointer) -> gboolean,
>;
pub type GumFoundExportFunc = ::core::option::Option<
    unsafe extern "C" fn(details: *const GumExportDetails, user_data: gpointer) -> gboolean,
>;
pub type GumFoundSymbolFunc = ::core::option::Option<
    unsafe extern "C" fn(details: *const GumSymbolDetails, user_data: gpointer) -> gboolean,
>;
pub type GumFoundRangeFunc = ::core::option::Option<
    unsafe extern "C" fn(details: *const GumRangeDetails, user_data: gpointer) -> gboolean,
>;
pub type GumFoundSectionFunc = ::core::option::Option<
    unsafe extern "C" fn(details: *const GumSectionDetails, user_data: gpointer) -> gboolean,
>;
pub type GumFoundDependencyFunc = ::core::option::Option<
    unsafe extern "C" fn(details: *const GumDependencyDetails, user_data: gpointer) -> gboolean,
>;
pub type GumFoundMallocRangeFunc = ::core::option::Option<
    unsafe extern "C" fn(details: *const GumMallocRangeDetails, user_data: gpointer) -> gboolean,
>;
pub type GumResolveExportFunc = ::core::option::Option<
    unsafe extern "C" fn(
        module_name: *const ::core::ffi::c_char,
        symbol_name: *const ::core::ffi::c_char,
        user_data: gpointer,
    ) -> GumAddress,
>;
extern "C" {
    pub fn gum_process_get_native_os() -> GumOS;
}
extern "C" {
    pub fn gum_process_get_teardown_requirement() -> GumTeardownRequirement;
}
extern "C" {
    pub fn gum_process_set_teardown_requirement(requirement: GumTeardownRequirement);
}
extern "C" {
    pub fn gum_process_get_code_signing_policy() -> GumCodeSigningPolicy;
}
extern "C" {
    pub fn gum_process_set_code_signing_policy(policy: GumCodeSigningPolicy);
}
extern "C" {
    pub fn gum_process_query_libc_name() -> *const gchar;
}
extern "C" {
    pub fn gum_process_is_debugger_attached() -> gboolean;
}
extern "C" {
    pub fn gum_process_get_id() -> GumProcessId;
}
extern "C" {
    pub fn gum_process_get_current_thread_id() -> GumThreadId;
}
extern "C" {
    pub fn gum_process_has_thread(thread_id: GumThreadId) -> gboolean;
}
extern "C" {
    pub fn gum_process_modify_thread(
        thread_id: GumThreadId,
        func: GumModifyThreadFunc,
        user_data: gpointer,
        flags: GumModifyThreadFlags,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_process_enumerate_threads(func: GumFoundThreadFunc, user_data: gpointer);
}
extern "C" {
    pub fn gum_process_get_main_module() -> *const GumModuleDetails;
}
extern "C" {
    pub fn gum_process_resolve_module_pointer(
        ptr: gconstpointer,
        path: *mut *mut gchar,
        range: *mut GumMemoryRange,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_process_enumerate_modules(func: GumFoundModuleFunc, user_data: gpointer);
}
extern "C" {
    pub fn gum_process_enumerate_ranges(
        prot: GumPageProtection,
        func: GumFoundRangeFunc,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn gum_process_enumerate_malloc_ranges(func: GumFoundMallocRangeFunc, user_data: gpointer);
}
extern "C" {
    pub fn gum_thread_try_get_ranges(ranges: *mut GumMemoryRange, max_length: guint) -> guint;
}
extern "C" {
    pub fn gum_thread_get_system_error() -> gint;
}
extern "C" {
    pub fn gum_thread_set_system_error(value: gint);
}
extern "C" {
    pub fn gum_thread_suspend(thread_id: GumThreadId, error: *mut *mut GError) -> gboolean;
}
extern "C" {
    pub fn gum_thread_resume(thread_id: GumThreadId, error: *mut *mut GError) -> gboolean;
}
extern "C" {
    pub fn gum_module_load(module_name: *const gchar, error: *mut *mut GError) -> gboolean;
}
extern "C" {
    pub fn gum_module_ensure_initialized(module_name: *const gchar) -> gboolean;
}
extern "C" {
    pub fn gum_module_enumerate_imports(
        module_name: *const gchar,
        func: GumFoundImportFunc,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn gum_module_enumerate_exports(
        module_name: *const gchar,
        func: GumFoundExportFunc,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn gum_module_enumerate_symbols(
        module_name: *const gchar,
        func: GumFoundSymbolFunc,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn gum_module_enumerate_ranges(
        module_name: *const gchar,
        prot: GumPageProtection,
        func: GumFoundRangeFunc,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn gum_module_enumerate_sections(
        module_name: *const gchar,
        func: GumFoundSectionFunc,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn gum_module_enumerate_dependencies(
        module_name: *const gchar,
        func: GumFoundDependencyFunc,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn gum_module_find_base_address(module_name: *const gchar) -> GumAddress;
}
extern "C" {
    pub fn gum_module_find_export_by_name(
        module_name: *const gchar,
        symbol_name: *const gchar,
    ) -> GumAddress;
}
extern "C" {
    pub fn gum_module_find_symbol_by_name(
        module_name: *const gchar,
        symbol_name: *const gchar,
    ) -> GumAddress;
}
extern "C" {
    pub fn gum_code_signing_policy_to_string(policy: GumCodeSigningPolicy) -> *const gchar;
}
extern "C" {
    pub fn gum_module_details_get_type() -> GType;
}
extern "C" {
    pub fn gum_module_details_copy(module: *const GumModuleDetails) -> *mut GumModuleDetails;
}
extern "C" {
    pub fn gum_module_details_free(module: *mut GumModuleDetails);
}
extern "C" {
    pub fn gum_symbol_type_to_string(type_: GumSymbolType) -> *const gchar;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumCloak {
    _unused: [u8; 0],
}
pub type GumCloak = _GumCloak;
pub type GumCloakFoundThreadFunc =
    ::core::option::Option<unsafe extern "C" fn(id: GumThreadId, user_data: gpointer) -> gboolean>;
pub type GumCloakFoundRangeFunc = ::core::option::Option<
    unsafe extern "C" fn(range: *const GumMemoryRange, user_data: gpointer) -> gboolean,
>;
pub type GumCloakFoundFDFunc =
    ::core::option::Option<unsafe extern "C" fn(fd: gint, user_data: gpointer) -> gboolean>;
extern "C" {
    pub fn gum_cloak_add_thread(id: GumThreadId);
}
extern "C" {
    pub fn gum_cloak_remove_thread(id: GumThreadId);
}
extern "C" {
    pub fn gum_cloak_has_thread(id: GumThreadId) -> gboolean;
}
extern "C" {
    pub fn gum_cloak_enumerate_threads(func: GumCloakFoundThreadFunc, user_data: gpointer);
}
extern "C" {
    pub fn gum_cloak_add_range(range: *const GumMemoryRange);
}
extern "C" {
    pub fn gum_cloak_remove_range(range: *const GumMemoryRange);
}
extern "C" {
    pub fn gum_cloak_has_range_containing(address: GumAddress) -> gboolean;
}
extern "C" {
    pub fn gum_cloak_clip_range(range: *const GumMemoryRange) -> *mut GArray;
}
extern "C" {
    pub fn gum_cloak_enumerate_ranges(func: GumCloakFoundRangeFunc, user_data: gpointer);
}
extern "C" {
    pub fn gum_cloak_add_file_descriptor(fd: gint);
}
extern "C" {
    pub fn gum_cloak_remove_file_descriptor(fd: gint);
}
extern "C" {
    pub fn gum_cloak_has_file_descriptor(fd: gint) -> gboolean;
}
extern "C" {
    pub fn gum_cloak_enumerate_file_descriptors(func: GumCloakFoundFDFunc, user_data: gpointer);
}
pub type GumCodeAllocator = _GumCodeAllocator;
pub type GumCodeSlice = _GumCodeSlice;
pub type GumCodeDeflector = _GumCodeDeflector;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumCodeAllocator {
    pub slice_size: gsize,
    pub pages_per_batch: gsize,
    pub slices_per_batch: gsize,
    pub pages_metadata_size: gsize,
    pub uncommitted_pages: *mut GSList,
    pub dirty_pages: *mut GHashTable,
    pub free_slices: *mut GList,
    pub dispatchers: *mut GSList,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumCodeSlice {
    pub data: gpointer,
    pub size: guint,
    pub ref_count: gint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumCodeDeflector {
    pub return_address: gpointer,
    pub target: gpointer,
    pub trampoline: gpointer,
    pub ref_count: gint,
}
extern "C" {
    pub fn gum_code_allocator_init(allocator: *mut GumCodeAllocator, slice_size: gsize);
}
extern "C" {
    pub fn gum_code_allocator_free(allocator: *mut GumCodeAllocator);
}
extern "C" {
    pub fn gum_code_allocator_alloc_slice(self_: *mut GumCodeAllocator) -> *mut GumCodeSlice;
}
extern "C" {
    pub fn gum_code_allocator_try_alloc_slice_near(
        self_: *mut GumCodeAllocator,
        spec: *const GumAddressSpec,
        alignment: gsize,
    ) -> *mut GumCodeSlice;
}
extern "C" {
    pub fn gum_code_allocator_commit(self_: *mut GumCodeAllocator);
}
extern "C" {
    pub fn gum_code_slice_get_type() -> GType;
}
extern "C" {
    pub fn gum_code_slice_ref(slice: *mut GumCodeSlice) -> *mut GumCodeSlice;
}
extern "C" {
    pub fn gum_code_slice_unref(slice: *mut GumCodeSlice);
}
extern "C" {
    pub fn gum_code_allocator_alloc_deflector(
        self_: *mut GumCodeAllocator,
        caller: *const GumAddressSpec,
        return_address: gpointer,
        target: gpointer,
        dedicated: gboolean,
    ) -> *mut GumCodeDeflector;
}
extern "C" {
    pub fn gum_code_deflector_get_type() -> GType;
}
extern "C" {
    pub fn gum_code_deflector_ref(deflector: *mut GumCodeDeflector) -> *mut GumCodeDeflector;
}
extern "C" {
    pub fn gum_code_deflector_unref(deflector: *mut GumCodeDeflector);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumCodeSegment {
    _unused: [u8; 0],
}
pub type GumCodeSegment = _GumCodeSegment;
extern "C" {
    pub fn gum_code_segment_is_supported() -> gboolean;
}
extern "C" {
    pub fn gum_code_segment_new(size: gsize, spec: *const GumAddressSpec) -> *mut GumCodeSegment;
}
extern "C" {
    pub fn gum_code_segment_free(segment: *mut GumCodeSegment);
}
extern "C" {
    pub fn gum_code_segment_get_address(self_: *mut GumCodeSegment) -> gpointer;
}
extern "C" {
    pub fn gum_code_segment_get_size(self_: *mut GumCodeSegment) -> gsize;
}
extern "C" {
    pub fn gum_code_segment_get_virtual_size(self_: *mut GumCodeSegment) -> gsize;
}
extern "C" {
    pub fn gum_code_segment_realize(self_: *mut GumCodeSegment);
}
extern "C" {
    pub fn gum_code_segment_map(
        self_: *mut GumCodeSegment,
        source_offset: gsize,
        source_size: gsize,
        target_address: gpointer,
    );
}
extern "C" {
    pub fn gum_code_segment_mark(code: gpointer, size: gsize, error: *mut *mut GError) -> gboolean;
}
pub const GumDarwinGrafterFlags_GUM_DARWIN_GRAFTER_FLAGS_NONE: GumDarwinGrafterFlags = 0;
pub const GumDarwinGrafterFlags_GUM_DARWIN_GRAFTER_FLAGS_INGEST_FUNCTION_STARTS:
    GumDarwinGrafterFlags = 1;
pub const GumDarwinGrafterFlags_GUM_DARWIN_GRAFTER_FLAGS_INGEST_IMPORTS: GumDarwinGrafterFlags = 2;
pub const GumDarwinGrafterFlags_GUM_DARWIN_GRAFTER_FLAGS_TRANSFORM_LAZY_BINDS:
    GumDarwinGrafterFlags = 4;
pub type GumDarwinGrafterFlags = ::core::ffi::c_uint;
extern "C" {
    pub fn gum_darwin_grafter_get_type() -> GType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumDarwinGrafter {
    _unused: [u8; 0],
}
pub type GumDarwinGrafter = _GumDarwinGrafter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GumDarwinGrafterClass {
    pub parent_class: GObjectClass,
}
pub type GumDarwinGrafter_autoptr = *mut GumDarwinGrafter;
pub type GumDarwinGrafter_listautoptr = *mut GList;
pub type GumDarwinGrafter_slistautoptr = *mut GSList;
pub type GumDarwinGrafter_queueautoptr = *mut GQueue;
pub type GumDarwinGrafterClass_autoptr = *mut GumDarwinGrafterClass;
pub type GumDarwinGrafterClass_listautoptr = *mut GList;
pub type GumDarwinGrafterClass_slistautoptr = *mut GSList;
pub type GumDarwinGrafterClass_queueautoptr = *mut GQueue;
extern "C" {
    pub fn gum_darwin_grafter_new_from_file(
        path: *const gchar,
        flags: GumDarwinGrafterFlags,
    ) -> *mut GumDarwinGrafter;
}
extern "C" {
    pub fn gum_darwin_grafter_add(self_: *mut GumDarwinGrafter, code_offset: guint32);
}
extern "C" {
    pub fn gum_darwin_grafter_graft(
        self_: *mut GumDarwinGrafter,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_darwin_module_get_type() -> GType;
}
pub type GumDarwinModule = _GumDarwinModule;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GumDarwinModuleClass {
    pub parent_class: GObjectClass,
}
pub type GumDarwinModule_autoptr = *mut GumDarwinModule;
pub type GumDarwinModule_listautoptr = *mut GList;
pub type GumDarwinModule_slistautoptr = *mut GSList;
pub type GumDarwinModule_queueautoptr = *mut GQueue;
pub type GumDarwinModuleClass_autoptr = *mut GumDarwinModuleClass;
pub type GumDarwinModuleClass_listautoptr = *mut GList;
pub type GumDarwinModuleClass_slistautoptr = *mut GSList;
pub type GumDarwinModuleClass_queueautoptr = *mut GQueue;
pub type GumDarwinModuleFiletype = guint;
pub type GumDarwinCpuType = gint;
pub type GumDarwinCpuSubtype = gint;
pub type GumDarwinModuleImage = _GumDarwinModuleImage;
pub type GumDarwinModuleImageSegment = _GumDarwinModuleImageSegment;
pub type GumDarwinSectionDetails = _GumDarwinSectionDetails;
pub type GumDarwinChainedFixupsDetails = _GumDarwinChainedFixupsDetails;
pub type GumDarwinRebaseDetails = _GumDarwinRebaseDetails;
pub type GumDarwinBindDetails = _GumDarwinBindDetails;
pub type GumDarwinThreadedItem = _GumDarwinThreadedItem;
pub type GumDarwinTlvParameters = _GumDarwinTlvParameters;
pub type GumDarwinTlvDescriptorDetails = _GumDarwinTlvDescriptorDetails;
pub type GumDarwinInitPointersDetails = _GumDarwinInitPointersDetails;
pub type GumDarwinInitOffsetsDetails = _GumDarwinInitOffsetsDetails;
pub type GumDarwinTermPointersDetails = _GumDarwinTermPointersDetails;
pub type GumDarwinFunctionStartsDetails = _GumDarwinFunctionStartsDetails;
pub type GumDarwinSegment = _GumDarwinSegment;
pub type GumDarwinExportDetails = _GumDarwinExportDetails;
pub type GumDarwinSymbolDetails = _GumDarwinSymbolDetails;
pub type GumDarwinRebaseType = guint8;
pub type GumDarwinBindType = guint8;
pub type GumDarwinThreadedItemType = guint8;
pub type GumDarwinBindOrdinal = gint;
pub type GumDarwinBindSymbolFlags = guint8;
pub type GumDarwinExportSymbolKind = guint8;
pub type GumDarwinExportSymbolFlags = guint8;
pub type GumDarwinPort = guint;
pub type GumDarwinPageProtection = gint;
pub type GumFoundDarwinExportFunc = ::core::option::Option<
    unsafe extern "C" fn(details: *const GumDarwinExportDetails, user_data: gpointer) -> gboolean,
>;
pub type GumFoundDarwinSymbolFunc = ::core::option::Option<
    unsafe extern "C" fn(details: *const GumDarwinSymbolDetails, user_data: gpointer) -> gboolean,
>;
pub type GumFoundDarwinSectionFunc = ::core::option::Option<
    unsafe extern "C" fn(details: *const GumDarwinSectionDetails, user_data: gpointer) -> gboolean,
>;
pub type GumFoundDarwinChainedFixupsFunc = ::core::option::Option<
    unsafe extern "C" fn(
        details: *const GumDarwinChainedFixupsDetails,
        user_data: gpointer,
    ) -> gboolean,
>;
pub type GumFoundDarwinRebaseFunc = ::core::option::Option<
    unsafe extern "C" fn(details: *const GumDarwinRebaseDetails, user_data: gpointer) -> gboolean,
>;
pub type GumFoundDarwinBindFunc = ::core::option::Option<
    unsafe extern "C" fn(details: *const GumDarwinBindDetails, user_data: gpointer) -> gboolean,
>;
pub type GumFoundDarwinTlvDescriptorFunc = ::core::option::Option<
    unsafe extern "C" fn(
        details: *const GumDarwinTlvDescriptorDetails,
        user_data: gpointer,
    ) -> gboolean,
>;
pub type GumFoundDarwinInitPointersFunc = ::core::option::Option<
    unsafe extern "C" fn(
        details: *const GumDarwinInitPointersDetails,
        user_data: gpointer,
    ) -> gboolean,
>;
pub type GumFoundDarwinInitOffsetsFunc = ::core::option::Option<
    unsafe extern "C" fn(
        details: *const GumDarwinInitOffsetsDetails,
        user_data: gpointer,
    ) -> gboolean,
>;
pub type GumFoundDarwinTermPointersFunc = ::core::option::Option<
    unsafe extern "C" fn(
        details: *const GumDarwinTermPointersDetails,
        user_data: gpointer,
    ) -> gboolean,
>;
pub type GumFoundDarwinFunctionStartsFunc = ::core::option::Option<
    unsafe extern "C" fn(
        details: *const GumDarwinFunctionStartsDetails,
        user_data: gpointer,
    ) -> gboolean,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumDyldInfoCommand {
    _unused: [u8; 0],
}
pub type GumDyldInfoCommand = _GumDyldInfoCommand;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumSymtabCommand {
    _unused: [u8; 0],
}
pub type GumSymtabCommand = _GumSymtabCommand;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumDysymtabCommand {
    _unused: [u8; 0],
}
pub type GumDysymtabCommand = _GumDysymtabCommand;
pub const GumDarwinModuleFlags_GUM_DARWIN_MODULE_FLAGS_NONE: GumDarwinModuleFlags = 0;
pub const GumDarwinModuleFlags_GUM_DARWIN_MODULE_FLAGS_HEADER_ONLY: GumDarwinModuleFlags = 1;
pub type GumDarwinModuleFlags = ::core::ffi::c_uint;
pub type GumChainedFixupsHeader = _GumChainedFixupsHeader;
pub type GumChainedStartsInImage = _GumChainedStartsInImage;
pub type GumChainedStartsInSegment = _GumChainedStartsInSegment;
pub type GumChainedImportFormat = guint32;
pub type GumChainedSymbolFormat = guint32;
pub type GumChainedPtrFormat = guint16;
pub type GumChainedImport = _GumChainedImport;
pub type GumChainedImportAddend = _GumChainedImportAddend;
pub type GumChainedImportAddend64 = _GumChainedImportAddend64;
pub type GumChainedPtr64Bind = _GumChainedPtr64Bind;
pub type GumChainedPtrArm64eBind = _GumChainedPtrArm64eBind;
pub type GumChainedPtrArm64eBind24 = _GumChainedPtrArm64eBind24;
pub type GumChainedPtrArm64eAuthRebase = _GumChainedPtrArm64eAuthRebase;
pub type GumChainedPtrArm64eAuthBind = _GumChainedPtrArm64eAuthBind;
pub type GumChainedPtrArm64eAuthBind24 = _GumChainedPtrArm64eAuthBind24;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumDarwinModule {
    pub parent: GObject,
    pub filetype: GumDarwinModuleFiletype,
    pub name: *mut gchar,
    pub uuid: *mut gchar,
    pub task: GumDarwinPort,
    pub is_local: gboolean,
    pub is_kernel: gboolean,
    pub cpu_type: GumCpuType,
    pub ptrauth_support: GumPtrauthSupport,
    pub pointer_size: gsize,
    pub base_address: GumAddress,
    pub source_path: *mut gchar,
    pub source_blob: *mut GBytes,
    pub flags: GumDarwinModuleFlags,
    pub image: *mut GumDarwinModuleImage,
    pub info: *const GumDyldInfoCommand,
    pub symtab: *const GumSymtabCommand,
    pub dysymtab: *const GumDysymtabCommand,
    pub preferred_address: GumAddress,
    pub segments: *mut GArray,
    pub text_ranges: *mut GArray,
    pub rebases: *const guint8,
    pub rebases_end: *const guint8,
    pub rebases_malloc_data: gpointer,
    pub binds: *const guint8,
    pub binds_end: *const guint8,
    pub binds_malloc_data: gpointer,
    pub lazy_binds: *const guint8,
    pub lazy_binds_end: *const guint8,
    pub lazy_binds_malloc_data: gpointer,
    pub exports: *const guint8,
    pub exports_end: *const guint8,
    pub exports_malloc_data: gpointer,
    pub dependencies: *mut GArray,
    pub reexports: *mut GPtrArray,
}
pub const _GumDarwinModuleFiletype_GUM_DARWIN_MODULE_FILETYPE_OBJECT: _GumDarwinModuleFiletype = 1;
pub const _GumDarwinModuleFiletype_GUM_DARWIN_MODULE_FILETYPE_EXECUTE: _GumDarwinModuleFiletype = 2;
pub const _GumDarwinModuleFiletype_GUM_DARWIN_MODULE_FILETYPE_FVMLIB: _GumDarwinModuleFiletype = 3;
pub const _GumDarwinModuleFiletype_GUM_DARWIN_MODULE_FILETYPE_CORE: _GumDarwinModuleFiletype = 4;
pub const _GumDarwinModuleFiletype_GUM_DARWIN_MODULE_FILETYPE_PRELOAD: _GumDarwinModuleFiletype = 5;
pub const _GumDarwinModuleFiletype_GUM_DARWIN_MODULE_FILETYPE_DYLIB: _GumDarwinModuleFiletype = 6;
pub const _GumDarwinModuleFiletype_GUM_DARWIN_MODULE_FILETYPE_DYLINKER: _GumDarwinModuleFiletype =
    7;
pub const _GumDarwinModuleFiletype_GUM_DARWIN_MODULE_FILETYPE_BUNDLE: _GumDarwinModuleFiletype = 8;
pub const _GumDarwinModuleFiletype_GUM_DARWIN_MODULE_FILETYPE_DYLIB_STUB: _GumDarwinModuleFiletype =
    9;
pub const _GumDarwinModuleFiletype_GUM_DARWIN_MODULE_FILETYPE_DSYM: _GumDarwinModuleFiletype = 10;
pub const _GumDarwinModuleFiletype_GUM_DARWIN_MODULE_FILETYPE_KEXT_BUNDLE:
    _GumDarwinModuleFiletype = 11;
pub const _GumDarwinModuleFiletype_GUM_DARWIN_MODULE_FILETYPE_FILESET: _GumDarwinModuleFiletype =
    12;
pub type _GumDarwinModuleFiletype = ::core::ffi::c_uint;
pub const _GumDarwinCpuArchType_GUM_DARWIN_CPU_ARCH_ABI64: _GumDarwinCpuArchType = 16777216;
pub const _GumDarwinCpuArchType_GUM_DARWIN_CPU_ARCH_ABI64_32: _GumDarwinCpuArchType = 33554432;
pub type _GumDarwinCpuArchType = ::core::ffi::c_uint;
pub const _GumDarwinCpuType_GUM_DARWIN_CPU_X86: _GumDarwinCpuType = 7;
pub const _GumDarwinCpuType_GUM_DARWIN_CPU_X86_64: _GumDarwinCpuType = 16777223;
pub const _GumDarwinCpuType_GUM_DARWIN_CPU_ARM: _GumDarwinCpuType = 12;
pub const _GumDarwinCpuType_GUM_DARWIN_CPU_ARM64: _GumDarwinCpuType = 16777228;
pub const _GumDarwinCpuType_GUM_DARWIN_CPU_ARM64_32: _GumDarwinCpuType = 33554444;
pub type _GumDarwinCpuType = ::core::ffi::c_uint;
pub const _GumDarwinCpuSubtype_GUM_DARWIN_CPU_SUBTYPE_ARM64E: _GumDarwinCpuSubtype = 2;
pub const _GumDarwinCpuSubtype_GUM_DARWIN_CPU_SUBTYPE_MASK: _GumDarwinCpuSubtype = 16777215;
pub type _GumDarwinCpuSubtype = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumDarwinModuleImage {
    pub data: gpointer,
    pub size: guint64,
    pub linkedit: gconstpointer,
    pub source_offset: guint64,
    pub source_size: guint64,
    pub shared_offset: guint64,
    pub shared_size: guint64,
    pub shared_segments: *mut GArray,
    pub bytes: *mut GBytes,
    pub malloc_data: gpointer,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumDarwinModuleImageSegment {
    pub offset: guint64,
    pub size: guint64,
    pub protection: GumDarwinPageProtection,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumDarwinSectionDetails {
    pub segment_name: [gchar; 17usize],
    pub section_name: [gchar; 17usize],
    pub vm_address: GumAddress,
    pub size: guint64,
    pub protection: GumDarwinPageProtection,
    pub file_offset: guint32,
    pub flags: guint32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumDarwinChainedFixupsDetails {
    pub vm_address: GumAddress,
    pub file_offset: guint64,
    pub size: guint32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumDarwinRebaseDetails {
    pub segment: *const GumDarwinSegment,
    pub offset: guint64,
    pub type_: GumDarwinRebaseType,
    pub slide: GumAddress,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumDarwinBindDetails {
    pub segment: *const GumDarwinSegment,
    pub offset: guint64,
    pub type_: GumDarwinBindType,
    pub library_ordinal: GumDarwinBindOrdinal,
    pub symbol_name: *const gchar,
    pub symbol_flags: GumDarwinBindSymbolFlags,
    pub addend: gint64,
    pub threaded_table_size: guint16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumDarwinThreadedItem {
    pub is_authenticated: gboolean,
    pub type_: GumDarwinThreadedItemType,
    pub delta: guint16,
    pub key: guint8,
    pub has_address_diversity: gboolean,
    pub diversity: guint16,
    pub bind_ordinal: guint16,
    pub rebase_address: GumAddress,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumDarwinTlvParameters {
    pub num_descriptors: guint,
    pub descriptors_offset: guint,
    pub data_offset: guint,
    pub data_size: gsize,
    pub bss_size: gsize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumDarwinTlvDescriptorDetails {
    pub file_offset: guint64,
    pub thunk: GumAddress,
    pub key: guint64,
    pub offset: gsize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumDarwinInitPointersDetails {
    pub address: GumAddress,
    pub count: guint64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumDarwinInitOffsetsDetails {
    pub address: GumAddress,
    pub count: guint64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumDarwinTermPointersDetails {
    pub address: GumAddress,
    pub count: guint64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumDarwinFunctionStartsDetails {
    pub vm_address: GumAddress,
    pub file_offset: guint64,
    pub size: guint32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumDarwinSegment {
    pub name: [gchar; 17usize],
    pub vm_address: GumAddress,
    pub vm_size: guint64,
    pub file_offset: guint64,
    pub file_size: guint64,
    pub protection: GumDarwinPageProtection,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _GumDarwinExportDetails {
    pub name: *const gchar,
    pub flags: guint64,
    pub __bindgen_anon_1: _GumDarwinExportDetails__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _GumDarwinExportDetails__bindgen_ty_1 {
    pub __bindgen_anon_1: _GumDarwinExportDetails__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: _GumDarwinExportDetails__bindgen_ty_1__bindgen_ty_2,
    pub __bindgen_anon_3: _GumDarwinExportDetails__bindgen_ty_1__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumDarwinExportDetails__bindgen_ty_1__bindgen_ty_1 {
    pub offset: guint64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumDarwinExportDetails__bindgen_ty_1__bindgen_ty_2 {
    pub stub: guint64,
    pub resolver: guint64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumDarwinExportDetails__bindgen_ty_1__bindgen_ty_3 {
    pub reexport_library_ordinal: gint,
    pub reexport_symbol: *const gchar,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumDarwinSymbolDetails {
    pub name: *const gchar,
    pub address: GumAddress,
    pub type_: guint8,
    pub section: guint8,
    pub description: guint16,
}
pub const _GumDarwinRebaseType_GUM_DARWIN_REBASE_POINTER: _GumDarwinRebaseType = 1;
pub const _GumDarwinRebaseType_GUM_DARWIN_REBASE_TEXT_ABSOLUTE32: _GumDarwinRebaseType = 2;
pub const _GumDarwinRebaseType_GUM_DARWIN_REBASE_TEXT_PCREL32: _GumDarwinRebaseType = 3;
pub type _GumDarwinRebaseType = ::core::ffi::c_uint;
pub const _GumDarwinBindType_GUM_DARWIN_BIND_POINTER: _GumDarwinBindType = 1;
pub const _GumDarwinBindType_GUM_DARWIN_BIND_TEXT_ABSOLUTE32: _GumDarwinBindType = 2;
pub const _GumDarwinBindType_GUM_DARWIN_BIND_TEXT_PCREL32: _GumDarwinBindType = 3;
pub const _GumDarwinBindType_GUM_DARWIN_BIND_THREADED_TABLE: _GumDarwinBindType = 4;
pub const _GumDarwinBindType_GUM_DARWIN_BIND_THREADED_ITEMS: _GumDarwinBindType = 5;
pub type _GumDarwinBindType = ::core::ffi::c_uint;
pub const _GumDarwinThreadedItemType_GUM_DARWIN_THREADED_REBASE: _GumDarwinThreadedItemType = 0;
pub const _GumDarwinThreadedItemType_GUM_DARWIN_THREADED_BIND: _GumDarwinThreadedItemType = 1;
pub type _GumDarwinThreadedItemType = ::core::ffi::c_uint;
pub const _GumDarwinBindOrdinal_GUM_DARWIN_BIND_SELF: _GumDarwinBindOrdinal = 0;
pub const _GumDarwinBindOrdinal_GUM_DARWIN_BIND_MAIN_EXECUTABLE: _GumDarwinBindOrdinal = -1;
pub const _GumDarwinBindOrdinal_GUM_DARWIN_BIND_FLAT_LOOKUP: _GumDarwinBindOrdinal = -2;
pub const _GumDarwinBindOrdinal_GUM_DARWIN_BIND_WEAK_LOOKUP: _GumDarwinBindOrdinal = -3;
pub type _GumDarwinBindOrdinal = ::core::ffi::c_int;
pub const _GumDarwinBindSymbolFlags_GUM_DARWIN_BIND_WEAK_IMPORT: _GumDarwinBindSymbolFlags = 1;
pub const _GumDarwinBindSymbolFlags_GUM_DARWIN_BIND_NON_WEAK_DEFINITION: _GumDarwinBindSymbolFlags =
    8;
pub type _GumDarwinBindSymbolFlags = ::core::ffi::c_uint;
pub const _GumDarwinExportSymbolKind_GUM_DARWIN_EXPORT_REGULAR: _GumDarwinExportSymbolKind = 0;
pub const _GumDarwinExportSymbolKind_GUM_DARWIN_EXPORT_THREAD_LOCAL: _GumDarwinExportSymbolKind = 1;
pub const _GumDarwinExportSymbolKind_GUM_DARWIN_EXPORT_ABSOLUTE: _GumDarwinExportSymbolKind = 2;
pub type _GumDarwinExportSymbolKind = ::core::ffi::c_uint;
pub const _GumDarwinExportSymbolFlags_GUM_DARWIN_EXPORT_WEAK_DEFINITION:
    _GumDarwinExportSymbolFlags = 4;
pub const _GumDarwinExportSymbolFlags_GUM_DARWIN_EXPORT_REEXPORT: _GumDarwinExportSymbolFlags = 8;
pub const _GumDarwinExportSymbolFlags_GUM_DARWIN_EXPORT_STUB_AND_RESOLVER:
    _GumDarwinExportSymbolFlags = 16;
pub type _GumDarwinExportSymbolFlags = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumChainedFixupsHeader {
    pub fixups_version: guint32,
    pub starts_offset: guint32,
    pub imports_offset: guint32,
    pub symbols_offset: guint32,
    pub imports_count: guint32,
    pub imports_format: GumChainedImportFormat,
    pub symbols_format: GumChainedSymbolFormat,
}
pub const _GumChainedImportFormat_GUM_CHAINED_IMPORT: _GumChainedImportFormat = 1;
pub const _GumChainedImportFormat_GUM_CHAINED_IMPORT_ADDEND: _GumChainedImportFormat = 2;
pub const _GumChainedImportFormat_GUM_CHAINED_IMPORT_ADDEND64: _GumChainedImportFormat = 3;
pub type _GumChainedImportFormat = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumChainedImport {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
impl _GumChainedImport {
    #[inline]
    pub fn lib_ordinal(&self) -> guint32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_lib_ordinal(&mut self, val: guint32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn weak_import(&self) -> guint32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_weak_import(&mut self, val: guint32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn name_offset(&self) -> guint32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 23u8) as u32) }
    }
    #[inline]
    pub fn set_name_offset(&mut self, val: guint32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 23u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        lib_ordinal: guint32,
        weak_import: guint32,
        name_offset: guint32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let lib_ordinal: u32 = unsafe { ::core::mem::transmute(lib_ordinal) };
            lib_ordinal as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let weak_import: u32 = unsafe { ::core::mem::transmute(weak_import) };
            weak_import as u64
        });
        __bindgen_bitfield_unit.set(9usize, 23u8, {
            let name_offset: u32 = unsafe { ::core::mem::transmute(name_offset) };
            name_offset as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumChainedImportAddend {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub addend: gint32,
}
impl _GumChainedImportAddend {
    #[inline]
    pub fn lib_ordinal(&self) -> guint32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_lib_ordinal(&mut self, val: guint32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn weak_import(&self) -> guint32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_weak_import(&mut self, val: guint32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn name_offset(&self) -> guint32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 23u8) as u32) }
    }
    #[inline]
    pub fn set_name_offset(&mut self, val: guint32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 23u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        lib_ordinal: guint32,
        weak_import: guint32,
        name_offset: guint32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let lib_ordinal: u32 = unsafe { ::core::mem::transmute(lib_ordinal) };
            lib_ordinal as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let weak_import: u32 = unsafe { ::core::mem::transmute(weak_import) };
            weak_import as u64
        });
        __bindgen_bitfield_unit.set(9usize, 23u8, {
            let name_offset: u32 = unsafe { ::core::mem::transmute(name_offset) };
            name_offset as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumChainedImportAddend64 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
    pub addend: guint64,
}
impl _GumChainedImportAddend64 {
    #[inline]
    pub fn lib_ordinal(&self) -> guint64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u64) }
    }
    #[inline]
    pub fn set_lib_ordinal(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn weak_import(&self) -> guint64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_weak_import(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> guint64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(17usize, 15u8) as u64) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(17usize, 15u8, val as u64)
        }
    }
    #[inline]
    pub fn name_offset(&self) -> guint64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(32usize, 32u8) as u64) }
    }
    #[inline]
    pub fn set_name_offset(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(32usize, 32u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        lib_ordinal: guint64,
        weak_import: guint64,
        reserved: guint64,
        name_offset: guint64,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let lib_ordinal: u64 = unsafe { ::core::mem::transmute(lib_ordinal) };
            lib_ordinal as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let weak_import: u64 = unsafe { ::core::mem::transmute(weak_import) };
            weak_import as u64
        });
        __bindgen_bitfield_unit.set(17usize, 15u8, {
            let reserved: u64 = unsafe { ::core::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit.set(32usize, 32u8, {
            let name_offset: u64 = unsafe { ::core::mem::transmute(name_offset) };
            name_offset as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumChainedStartsInImage {
    pub seg_count: guint32,
    pub seg_info_offset: [guint32; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumChainedStartsInSegment {
    pub size: guint32,
    pub page_size: guint16,
    pub pointer_format: GumChainedPtrFormat,
    pub segment_offset: guint64,
    pub max_valid_pointer: guint32,
    pub page_count: guint16,
    pub page_start: [guint16; 1usize],
}
pub const _GumChainedPtrStart_GUM_CHAINED_PTR_START_NONE: _GumChainedPtrStart = 65535;
pub const _GumChainedPtrStart_GUM_CHAINED_PTR_START_MULTI: _GumChainedPtrStart = 32768;
pub const _GumChainedPtrStart_GUM_CHAINED_PTR_START_LAST: _GumChainedPtrStart = 32768;
pub type _GumChainedPtrStart = ::core::ffi::c_uint;
pub const _GumChainedPtrFormat_GUM_CHAINED_PTR_ARM64E: _GumChainedPtrFormat = 1;
pub const _GumChainedPtrFormat_GUM_CHAINED_PTR_64: _GumChainedPtrFormat = 2;
pub const _GumChainedPtrFormat_GUM_CHAINED_PTR_32: _GumChainedPtrFormat = 3;
pub const _GumChainedPtrFormat_GUM_CHAINED_PTR_32_CACHE: _GumChainedPtrFormat = 4;
pub const _GumChainedPtrFormat_GUM_CHAINED_PTR_32_FIRMWARE: _GumChainedPtrFormat = 5;
pub const _GumChainedPtrFormat_GUM_CHAINED_PTR_64_OFFSET: _GumChainedPtrFormat = 6;
pub const _GumChainedPtrFormat_GUM_CHAINED_PTR_ARM64E_OFFSET: _GumChainedPtrFormat = 7;
pub const _GumChainedPtrFormat_GUM_CHAINED_PTR_ARM64E_KERNEL: _GumChainedPtrFormat = 7;
pub const _GumChainedPtrFormat_GUM_CHAINED_PTR_64_KERNEL_CACHE: _GumChainedPtrFormat = 8;
pub const _GumChainedPtrFormat_GUM_CHAINED_PTR_ARM64E_USERLAND: _GumChainedPtrFormat = 9;
pub const _GumChainedPtrFormat_GUM_CHAINED_PTR_ARM64E_FIRMWARE: _GumChainedPtrFormat = 10;
pub const _GumChainedPtrFormat_GUM_CHAINED_PTR_X86_64_KERNEL_CACHE: _GumChainedPtrFormat = 11;
pub const _GumChainedPtrFormat_GUM_CHAINED_PTR_ARM64E_USERLAND24: _GumChainedPtrFormat = 12;
pub type _GumChainedPtrFormat = ::core::ffi::c_uint;
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct _GumChainedPtr64Bind {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
impl _GumChainedPtr64Bind {
    #[inline]
    pub fn ordinal(&self) -> guint64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u64) }
    }
    #[inline]
    pub fn set_ordinal(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn addend(&self) -> guint64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u64) }
    }
    #[inline]
    pub fn set_addend(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> guint64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(32usize, 19u8) as u64) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(32usize, 19u8, val as u64)
        }
    }
    #[inline]
    pub fn next(&self) -> guint64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(51usize, 12u8) as u64) }
    }
    #[inline]
    pub fn set_next(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(51usize, 12u8, val as u64)
        }
    }
    #[inline]
    pub fn bind(&self) -> guint64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(63usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bind(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(63usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ordinal: guint64,
        addend: guint64,
        reserved: guint64,
        next: guint64,
        bind: guint64,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let ordinal: u64 = unsafe { ::core::mem::transmute(ordinal) };
            ordinal as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let addend: u64 = unsafe { ::core::mem::transmute(addend) };
            addend as u64
        });
        __bindgen_bitfield_unit.set(32usize, 19u8, {
            let reserved: u64 = unsafe { ::core::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit.set(51usize, 12u8, {
            let next: u64 = unsafe { ::core::mem::transmute(next) };
            next as u64
        });
        __bindgen_bitfield_unit.set(63usize, 1u8, {
            let bind: u64 = unsafe { ::core::mem::transmute(bind) };
            bind as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct _GumChainedPtrArm64eBind {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
impl _GumChainedPtrArm64eBind {
    #[inline]
    pub fn ordinal(&self) -> guint64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u64) }
    }
    #[inline]
    pub fn set_ordinal(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn zero(&self) -> guint64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u64) }
    }
    #[inline]
    pub fn set_zero(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn addend(&self) -> guint64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(32usize, 19u8) as u64) }
    }
    #[inline]
    pub fn set_addend(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(32usize, 19u8, val as u64)
        }
    }
    #[inline]
    pub fn next(&self) -> guint64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(51usize, 11u8) as u64) }
    }
    #[inline]
    pub fn set_next(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(51usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub fn bind(&self) -> guint64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(62usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bind(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(62usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn auth(&self) -> guint64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(63usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_auth(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(63usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ordinal: guint64,
        zero: guint64,
        addend: guint64,
        next: guint64,
        bind: guint64,
        auth: guint64,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let ordinal: u64 = unsafe { ::core::mem::transmute(ordinal) };
            ordinal as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let zero: u64 = unsafe { ::core::mem::transmute(zero) };
            zero as u64
        });
        __bindgen_bitfield_unit.set(32usize, 19u8, {
            let addend: u64 = unsafe { ::core::mem::transmute(addend) };
            addend as u64
        });
        __bindgen_bitfield_unit.set(51usize, 11u8, {
            let next: u64 = unsafe { ::core::mem::transmute(next) };
            next as u64
        });
        __bindgen_bitfield_unit.set(62usize, 1u8, {
            let bind: u64 = unsafe { ::core::mem::transmute(bind) };
            bind as u64
        });
        __bindgen_bitfield_unit.set(63usize, 1u8, {
            let auth: u64 = unsafe { ::core::mem::transmute(auth) };
            auth as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct _GumChainedPtrArm64eBind24 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
impl _GumChainedPtrArm64eBind24 {
    #[inline]
    pub fn ordinal(&self) -> guint64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u64) }
    }
    #[inline]
    pub fn set_ordinal(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn zero(&self) -> guint64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u64) }
    }
    #[inline]
    pub fn set_zero(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn addend(&self) -> guint64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(32usize, 19u8) as u64) }
    }
    #[inline]
    pub fn set_addend(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(32usize, 19u8, val as u64)
        }
    }
    #[inline]
    pub fn next(&self) -> guint64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(51usize, 11u8) as u64) }
    }
    #[inline]
    pub fn set_next(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(51usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub fn bind(&self) -> guint64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(62usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bind(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(62usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn auth(&self) -> guint64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(63usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_auth(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(63usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ordinal: guint64,
        zero: guint64,
        addend: guint64,
        next: guint64,
        bind: guint64,
        auth: guint64,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let ordinal: u64 = unsafe { ::core::mem::transmute(ordinal) };
            ordinal as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let zero: u64 = unsafe { ::core::mem::transmute(zero) };
            zero as u64
        });
        __bindgen_bitfield_unit.set(32usize, 19u8, {
            let addend: u64 = unsafe { ::core::mem::transmute(addend) };
            addend as u64
        });
        __bindgen_bitfield_unit.set(51usize, 11u8, {
            let next: u64 = unsafe { ::core::mem::transmute(next) };
            next as u64
        });
        __bindgen_bitfield_unit.set(62usize, 1u8, {
            let bind: u64 = unsafe { ::core::mem::transmute(bind) };
            bind as u64
        });
        __bindgen_bitfield_unit.set(63usize, 1u8, {
            let auth: u64 = unsafe { ::core::mem::transmute(auth) };
            auth as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct _GumChainedPtrArm64eAuthRebase {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
impl _GumChainedPtrArm64eAuthRebase {
    #[inline]
    pub fn target(&self) -> guint64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 32u8) as u64) }
    }
    #[inline]
    pub fn set_target(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 32u8, val as u64)
        }
    }
    #[inline]
    pub fn diversity(&self) -> guint64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(32usize, 16u8) as u64) }
    }
    #[inline]
    pub fn set_diversity(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(32usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn addr_div(&self) -> guint64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(48usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_addr_div(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(48usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn key(&self) -> guint64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(49usize, 2u8) as u64) }
    }
    #[inline]
    pub fn set_key(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(49usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn next(&self) -> guint64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(51usize, 11u8) as u64) }
    }
    #[inline]
    pub fn set_next(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(51usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub fn bind(&self) -> guint64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(62usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bind(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(62usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn auth(&self) -> guint64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(63usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_auth(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(63usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        target: guint64,
        diversity: guint64,
        addr_div: guint64,
        key: guint64,
        next: guint64,
        bind: guint64,
        auth: guint64,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 32u8, {
            let target: u64 = unsafe { ::core::mem::transmute(target) };
            target as u64
        });
        __bindgen_bitfield_unit.set(32usize, 16u8, {
            let diversity: u64 = unsafe { ::core::mem::transmute(diversity) };
            diversity as u64
        });
        __bindgen_bitfield_unit.set(48usize, 1u8, {
            let addr_div: u64 = unsafe { ::core::mem::transmute(addr_div) };
            addr_div as u64
        });
        __bindgen_bitfield_unit.set(49usize, 2u8, {
            let key: u64 = unsafe { ::core::mem::transmute(key) };
            key as u64
        });
        __bindgen_bitfield_unit.set(51usize, 11u8, {
            let next: u64 = unsafe { ::core::mem::transmute(next) };
            next as u64
        });
        __bindgen_bitfield_unit.set(62usize, 1u8, {
            let bind: u64 = unsafe { ::core::mem::transmute(bind) };
            bind as u64
        });
        __bindgen_bitfield_unit.set(63usize, 1u8, {
            let auth: u64 = unsafe { ::core::mem::transmute(auth) };
            auth as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct _GumChainedPtrArm64eAuthBind {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
impl _GumChainedPtrArm64eAuthBind {
    #[inline]
    pub fn ordinal(&self) -> guint64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u64) }
    }
    #[inline]
    pub fn set_ordinal(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn zero(&self) -> guint64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u64) }
    }
    #[inline]
    pub fn set_zero(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn diversity(&self) -> guint64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(32usize, 16u8) as u64) }
    }
    #[inline]
    pub fn set_diversity(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(32usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn addr_div(&self) -> guint64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(48usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_addr_div(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(48usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn key(&self) -> guint64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(49usize, 2u8) as u64) }
    }
    #[inline]
    pub fn set_key(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(49usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn next(&self) -> guint64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(51usize, 11u8) as u64) }
    }
    #[inline]
    pub fn set_next(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(51usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub fn bind(&self) -> guint64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(62usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bind(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(62usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn auth(&self) -> guint64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(63usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_auth(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(63usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ordinal: guint64,
        zero: guint64,
        diversity: guint64,
        addr_div: guint64,
        key: guint64,
        next: guint64,
        bind: guint64,
        auth: guint64,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let ordinal: u64 = unsafe { ::core::mem::transmute(ordinal) };
            ordinal as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let zero: u64 = unsafe { ::core::mem::transmute(zero) };
            zero as u64
        });
        __bindgen_bitfield_unit.set(32usize, 16u8, {
            let diversity: u64 = unsafe { ::core::mem::transmute(diversity) };
            diversity as u64
        });
        __bindgen_bitfield_unit.set(48usize, 1u8, {
            let addr_div: u64 = unsafe { ::core::mem::transmute(addr_div) };
            addr_div as u64
        });
        __bindgen_bitfield_unit.set(49usize, 2u8, {
            let key: u64 = unsafe { ::core::mem::transmute(key) };
            key as u64
        });
        __bindgen_bitfield_unit.set(51usize, 11u8, {
            let next: u64 = unsafe { ::core::mem::transmute(next) };
            next as u64
        });
        __bindgen_bitfield_unit.set(62usize, 1u8, {
            let bind: u64 = unsafe { ::core::mem::transmute(bind) };
            bind as u64
        });
        __bindgen_bitfield_unit.set(63usize, 1u8, {
            let auth: u64 = unsafe { ::core::mem::transmute(auth) };
            auth as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct _GumChainedPtrArm64eAuthBind24 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
impl _GumChainedPtrArm64eAuthBind24 {
    #[inline]
    pub fn ordinal(&self) -> guint64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u64) }
    }
    #[inline]
    pub fn set_ordinal(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn zero(&self) -> guint64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u64) }
    }
    #[inline]
    pub fn set_zero(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn diversity(&self) -> guint64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(32usize, 16u8) as u64) }
    }
    #[inline]
    pub fn set_diversity(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(32usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn addr_div(&self) -> guint64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(48usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_addr_div(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(48usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn key(&self) -> guint64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(49usize, 2u8) as u64) }
    }
    #[inline]
    pub fn set_key(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(49usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn next(&self) -> guint64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(51usize, 11u8) as u64) }
    }
    #[inline]
    pub fn set_next(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(51usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub fn bind(&self) -> guint64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(62usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bind(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(62usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn auth(&self) -> guint64 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(63usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_auth(&mut self, val: guint64) {
        unsafe {
            let val: u64 = ::core::mem::transmute(val);
            self._bitfield_1.set(63usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ordinal: guint64,
        zero: guint64,
        diversity: guint64,
        addr_div: guint64,
        key: guint64,
        next: guint64,
        bind: guint64,
        auth: guint64,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let ordinal: u64 = unsafe { ::core::mem::transmute(ordinal) };
            ordinal as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let zero: u64 = unsafe { ::core::mem::transmute(zero) };
            zero as u64
        });
        __bindgen_bitfield_unit.set(32usize, 16u8, {
            let diversity: u64 = unsafe { ::core::mem::transmute(diversity) };
            diversity as u64
        });
        __bindgen_bitfield_unit.set(48usize, 1u8, {
            let addr_div: u64 = unsafe { ::core::mem::transmute(addr_div) };
            addr_div as u64
        });
        __bindgen_bitfield_unit.set(49usize, 2u8, {
            let key: u64 = unsafe { ::core::mem::transmute(key) };
            key as u64
        });
        __bindgen_bitfield_unit.set(51usize, 11u8, {
            let next: u64 = unsafe { ::core::mem::transmute(next) };
            next as u64
        });
        __bindgen_bitfield_unit.set(62usize, 1u8, {
            let bind: u64 = unsafe { ::core::mem::transmute(bind) };
            bind as u64
        });
        __bindgen_bitfield_unit.set(63usize, 1u8, {
            let auth: u64 = unsafe { ::core::mem::transmute(auth) };
            auth as u64
        });
        __bindgen_bitfield_unit
    }
}
extern "C" {
    pub fn gum_darwin_module_new_from_file(
        path: *const gchar,
        cpu_type: GumCpuType,
        ptrauth_support: GumPtrauthSupport,
        flags: GumDarwinModuleFlags,
        error: *mut *mut GError,
    ) -> *mut GumDarwinModule;
}
extern "C" {
    pub fn gum_darwin_module_new_from_blob(
        blob: *mut GBytes,
        cpu_type: GumCpuType,
        ptrauth_support: GumPtrauthSupport,
        flags: GumDarwinModuleFlags,
        error: *mut *mut GError,
    ) -> *mut GumDarwinModule;
}
extern "C" {
    pub fn gum_darwin_module_new_from_memory(
        name: *const gchar,
        task: GumDarwinPort,
        base_address: GumAddress,
        flags: GumDarwinModuleFlags,
        error: *mut *mut GError,
    ) -> *mut GumDarwinModule;
}
extern "C" {
    pub fn gum_darwin_module_load(self_: *mut GumDarwinModule, error: *mut *mut GError)
        -> gboolean;
}
extern "C" {
    pub fn gum_darwin_module_resolve_export(
        self_: *mut GumDarwinModule,
        symbol: *const gchar,
        details: *mut GumDarwinExportDetails,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_darwin_module_resolve_symbol_address(
        self_: *mut GumDarwinModule,
        symbol: *const gchar,
    ) -> GumAddress;
}
extern "C" {
    pub fn gum_darwin_module_get_lacks_exports_for_reexports(
        self_: *mut GumDarwinModule,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_darwin_module_enumerate_imports(
        self_: *mut GumDarwinModule,
        func: GumFoundImportFunc,
        resolver: GumResolveExportFunc,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn gum_darwin_module_enumerate_exports(
        self_: *mut GumDarwinModule,
        func: GumFoundDarwinExportFunc,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn gum_darwin_module_enumerate_symbols(
        self_: *mut GumDarwinModule,
        func: GumFoundDarwinSymbolFunc,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn gum_darwin_module_get_slide(self_: *mut GumDarwinModule) -> GumAddress;
}
extern "C" {
    pub fn gum_darwin_module_get_nth_segment(
        self_: *mut GumDarwinModule,
        index: gsize,
    ) -> *const GumDarwinSegment;
}
extern "C" {
    pub fn gum_darwin_module_enumerate_sections(
        self_: *mut GumDarwinModule,
        func: GumFoundDarwinSectionFunc,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn gum_darwin_module_is_address_in_text_section(
        self_: *mut GumDarwinModule,
        address: GumAddress,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_darwin_module_enumerate_chained_fixups(
        self_: *mut GumDarwinModule,
        func: GumFoundDarwinChainedFixupsFunc,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn gum_darwin_module_enumerate_rebases(
        self_: *mut GumDarwinModule,
        func: GumFoundDarwinRebaseFunc,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn gum_darwin_module_enumerate_binds(
        self_: *mut GumDarwinModule,
        func: GumFoundDarwinBindFunc,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn gum_darwin_module_enumerate_lazy_binds(
        self_: *mut GumDarwinModule,
        func: GumFoundDarwinBindFunc,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn gum_darwin_module_query_tlv_parameters(
        self_: *mut GumDarwinModule,
        params: *mut GumDarwinTlvParameters,
    );
}
extern "C" {
    pub fn gum_darwin_module_enumerate_tlv_descriptors(
        self_: *mut GumDarwinModule,
        func: GumFoundDarwinTlvDescriptorFunc,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn gum_darwin_module_enumerate_init_pointers(
        self_: *mut GumDarwinModule,
        func: GumFoundDarwinInitPointersFunc,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn gum_darwin_module_enumerate_init_offsets(
        self_: *mut GumDarwinModule,
        func: GumFoundDarwinInitOffsetsFunc,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn gum_darwin_module_enumerate_term_pointers(
        self_: *mut GumDarwinModule,
        func: GumFoundDarwinTermPointersFunc,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn gum_darwin_module_enumerate_dependencies(
        self_: *mut GumDarwinModule,
        func: GumFoundDependencyFunc,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn gum_darwin_module_enumerate_function_starts(
        self_: *mut GumDarwinModule,
        func: GumFoundDarwinFunctionStartsFunc,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn gum_darwin_module_get_dependency_by_ordinal(
        self_: *mut GumDarwinModule,
        ordinal: gint,
    ) -> *const gchar;
}
extern "C" {
    pub fn gum_darwin_module_ensure_image_loaded(
        self_: *mut GumDarwinModule,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_darwin_threaded_item_parse(value: guint64, result: *mut GumDarwinThreadedItem);
}
extern "C" {
    pub fn gum_darwin_module_image_get_type() -> GType;
}
extern "C" {
    pub fn gum_darwin_module_image_new() -> *mut GumDarwinModuleImage;
}
extern "C" {
    pub fn gum_darwin_module_image_dup(
        other: *const GumDarwinModuleImage,
    ) -> *mut GumDarwinModuleImage;
}
extern "C" {
    pub fn gum_darwin_module_image_free(image: *mut GumDarwinModuleImage);
}
extern "C" {
    pub fn gum_elf_module_get_type() -> GType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumElfModule {
    _unused: [u8; 0],
}
pub type GumElfModule = _GumElfModule;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GumElfModuleClass {
    pub parent_class: GObjectClass,
}
pub type GumElfModule_autoptr = *mut GumElfModule;
pub type GumElfModule_listautoptr = *mut GList;
pub type GumElfModule_slistautoptr = *mut GSList;
pub type GumElfModule_queueautoptr = *mut GQueue;
pub type GumElfModuleClass_autoptr = *mut GumElfModuleClass;
pub type GumElfModuleClass_listautoptr = *mut GList;
pub type GumElfModuleClass_slistautoptr = *mut GSList;
pub type GumElfModuleClass_queueautoptr = *mut GQueue;
pub const GumElfType_GUM_ELF_NONE: GumElfType = 0;
pub const GumElfType_GUM_ELF_REL: GumElfType = 1;
pub const GumElfType_GUM_ELF_EXEC: GumElfType = 2;
pub const GumElfType_GUM_ELF_DYN: GumElfType = 3;
pub const GumElfType_GUM_ELF_CORE: GumElfType = 4;
pub type GumElfType = ::core::ffi::c_uint;
pub const GumElfOSABI_GUM_ELF_OS_SYSV: GumElfOSABI = 0;
pub const GumElfOSABI_GUM_ELF_OS_HPUX: GumElfOSABI = 1;
pub const GumElfOSABI_GUM_ELF_OS_NETBSD: GumElfOSABI = 2;
pub const GumElfOSABI_GUM_ELF_OS_LINUX: GumElfOSABI = 3;
pub const GumElfOSABI_GUM_ELF_OS_SOLARIS: GumElfOSABI = 6;
pub const GumElfOSABI_GUM_ELF_OS_AIX: GumElfOSABI = 7;
pub const GumElfOSABI_GUM_ELF_OS_IRIX: GumElfOSABI = 8;
pub const GumElfOSABI_GUM_ELF_OS_FREEBSD: GumElfOSABI = 9;
pub const GumElfOSABI_GUM_ELF_OS_TRU64: GumElfOSABI = 10;
pub const GumElfOSABI_GUM_ELF_OS_MODESTO: GumElfOSABI = 11;
pub const GumElfOSABI_GUM_ELF_OS_OPENBSD: GumElfOSABI = 12;
pub const GumElfOSABI_GUM_ELF_OS_ARM_AEABI: GumElfOSABI = 64;
pub const GumElfOSABI_GUM_ELF_OS_ARM: GumElfOSABI = 97;
pub const GumElfOSABI_GUM_ELF_OS_STANDALONE: GumElfOSABI = 255;
pub type GumElfOSABI = ::core::ffi::c_uint;
pub const GumElfMachine_GUM_ELF_MACHINE_NONE: GumElfMachine = 0;
pub const GumElfMachine_GUM_ELF_MACHINE_M32: GumElfMachine = 1;
pub const GumElfMachine_GUM_ELF_MACHINE_SPARC: GumElfMachine = 2;
pub const GumElfMachine_GUM_ELF_MACHINE_386: GumElfMachine = 3;
pub const GumElfMachine_GUM_ELF_MACHINE_68K: GumElfMachine = 4;
pub const GumElfMachine_GUM_ELF_MACHINE_88K: GumElfMachine = 5;
pub const GumElfMachine_GUM_ELF_MACHINE_IAMCU: GumElfMachine = 6;
pub const GumElfMachine_GUM_ELF_MACHINE_860: GumElfMachine = 7;
pub const GumElfMachine_GUM_ELF_MACHINE_MIPS: GumElfMachine = 8;
pub const GumElfMachine_GUM_ELF_MACHINE_S370: GumElfMachine = 9;
pub const GumElfMachine_GUM_ELF_MACHINE_MIPS_RS3_LE: GumElfMachine = 10;
pub const GumElfMachine_GUM_ELF_MACHINE_PARISC: GumElfMachine = 15;
pub const GumElfMachine_GUM_ELF_MACHINE_VPP500: GumElfMachine = 17;
pub const GumElfMachine_GUM_ELF_MACHINE_SPARC32PLUS: GumElfMachine = 18;
pub const GumElfMachine_GUM_ELF_MACHINE_960: GumElfMachine = 19;
pub const GumElfMachine_GUM_ELF_MACHINE_PPC: GumElfMachine = 20;
pub const GumElfMachine_GUM_ELF_MACHINE_PPC64: GumElfMachine = 21;
pub const GumElfMachine_GUM_ELF_MACHINE_S390: GumElfMachine = 22;
pub const GumElfMachine_GUM_ELF_MACHINE_SPU: GumElfMachine = 23;
pub const GumElfMachine_GUM_ELF_MACHINE_V800: GumElfMachine = 36;
pub const GumElfMachine_GUM_ELF_MACHINE_FR20: GumElfMachine = 37;
pub const GumElfMachine_GUM_ELF_MACHINE_RH32: GumElfMachine = 38;
pub const GumElfMachine_GUM_ELF_MACHINE_RCE: GumElfMachine = 39;
pub const GumElfMachine_GUM_ELF_MACHINE_ARM: GumElfMachine = 40;
pub const GumElfMachine_GUM_ELF_MACHINE_FAKE_ALPHA: GumElfMachine = 41;
pub const GumElfMachine_GUM_ELF_MACHINE_SH: GumElfMachine = 42;
pub const GumElfMachine_GUM_ELF_MACHINE_SPARCV9: GumElfMachine = 43;
pub const GumElfMachine_GUM_ELF_MACHINE_TRICORE: GumElfMachine = 44;
pub const GumElfMachine_GUM_ELF_MACHINE_ARC: GumElfMachine = 45;
pub const GumElfMachine_GUM_ELF_MACHINE_H8_300: GumElfMachine = 46;
pub const GumElfMachine_GUM_ELF_MACHINE_H8_300H: GumElfMachine = 47;
pub const GumElfMachine_GUM_ELF_MACHINE_H8S: GumElfMachine = 48;
pub const GumElfMachine_GUM_ELF_MACHINE_H8_500: GumElfMachine = 49;
pub const GumElfMachine_GUM_ELF_MACHINE_IA_64: GumElfMachine = 50;
pub const GumElfMachine_GUM_ELF_MACHINE_MIPS_X: GumElfMachine = 51;
pub const GumElfMachine_GUM_ELF_MACHINE_COLDFIRE: GumElfMachine = 52;
pub const GumElfMachine_GUM_ELF_MACHINE_68HC12: GumElfMachine = 53;
pub const GumElfMachine_GUM_ELF_MACHINE_MMA: GumElfMachine = 54;
pub const GumElfMachine_GUM_ELF_MACHINE_PCP: GumElfMachine = 55;
pub const GumElfMachine_GUM_ELF_MACHINE_NCPU: GumElfMachine = 56;
pub const GumElfMachine_GUM_ELF_MACHINE_NDR1: GumElfMachine = 57;
pub const GumElfMachine_GUM_ELF_MACHINE_STARCORE: GumElfMachine = 58;
pub const GumElfMachine_GUM_ELF_MACHINE_ME16: GumElfMachine = 59;
pub const GumElfMachine_GUM_ELF_MACHINE_ST100: GumElfMachine = 60;
pub const GumElfMachine_GUM_ELF_MACHINE_TINYJ: GumElfMachine = 61;
pub const GumElfMachine_GUM_ELF_MACHINE_X86_64: GumElfMachine = 62;
pub const GumElfMachine_GUM_ELF_MACHINE_PDSP: GumElfMachine = 63;
pub const GumElfMachine_GUM_ELF_MACHINE_PDP10: GumElfMachine = 64;
pub const GumElfMachine_GUM_ELF_MACHINE_PDP11: GumElfMachine = 65;
pub const GumElfMachine_GUM_ELF_MACHINE_FX66: GumElfMachine = 66;
pub const GumElfMachine_GUM_ELF_MACHINE_ST9PLUS: GumElfMachine = 67;
pub const GumElfMachine_GUM_ELF_MACHINE_ST7: GumElfMachine = 68;
pub const GumElfMachine_GUM_ELF_MACHINE_68HC16: GumElfMachine = 69;
pub const GumElfMachine_GUM_ELF_MACHINE_68HC11: GumElfMachine = 70;
pub const GumElfMachine_GUM_ELF_MACHINE_68HC08: GumElfMachine = 71;
pub const GumElfMachine_GUM_ELF_MACHINE_68HC05: GumElfMachine = 72;
pub const GumElfMachine_GUM_ELF_MACHINE_SVX: GumElfMachine = 73;
pub const GumElfMachine_GUM_ELF_MACHINE_ST19: GumElfMachine = 74;
pub const GumElfMachine_GUM_ELF_MACHINE_VAX: GumElfMachine = 75;
pub const GumElfMachine_GUM_ELF_MACHINE_CRIS: GumElfMachine = 76;
pub const GumElfMachine_GUM_ELF_MACHINE_JAVELIN: GumElfMachine = 77;
pub const GumElfMachine_GUM_ELF_MACHINE_FIREPATH: GumElfMachine = 78;
pub const GumElfMachine_GUM_ELF_MACHINE_ZSP: GumElfMachine = 79;
pub const GumElfMachine_GUM_ELF_MACHINE_MMIX: GumElfMachine = 80;
pub const GumElfMachine_GUM_ELF_MACHINE_HUANY: GumElfMachine = 81;
pub const GumElfMachine_GUM_ELF_MACHINE_PRISM: GumElfMachine = 82;
pub const GumElfMachine_GUM_ELF_MACHINE_AVR: GumElfMachine = 83;
pub const GumElfMachine_GUM_ELF_MACHINE_FR30: GumElfMachine = 84;
pub const GumElfMachine_GUM_ELF_MACHINE_D10V: GumElfMachine = 85;
pub const GumElfMachine_GUM_ELF_MACHINE_D30V: GumElfMachine = 86;
pub const GumElfMachine_GUM_ELF_MACHINE_V850: GumElfMachine = 87;
pub const GumElfMachine_GUM_ELF_MACHINE_M32R: GumElfMachine = 88;
pub const GumElfMachine_GUM_ELF_MACHINE_MN10300: GumElfMachine = 89;
pub const GumElfMachine_GUM_ELF_MACHINE_MN10200: GumElfMachine = 90;
pub const GumElfMachine_GUM_ELF_MACHINE_PJ: GumElfMachine = 91;
pub const GumElfMachine_GUM_ELF_MACHINE_OPENRISC: GumElfMachine = 92;
pub const GumElfMachine_GUM_ELF_MACHINE_ARC_COMPACT: GumElfMachine = 93;
pub const GumElfMachine_GUM_ELF_MACHINE_XTENSA: GumElfMachine = 94;
pub const GumElfMachine_GUM_ELF_MACHINE_VIDEOCORE: GumElfMachine = 95;
pub const GumElfMachine_GUM_ELF_MACHINE_TMM_GPP: GumElfMachine = 96;
pub const GumElfMachine_GUM_ELF_MACHINE_NS32K: GumElfMachine = 97;
pub const GumElfMachine_GUM_ELF_MACHINE_TPC: GumElfMachine = 98;
pub const GumElfMachine_GUM_ELF_MACHINE_SNP1K: GumElfMachine = 99;
pub const GumElfMachine_GUM_ELF_MACHINE_ST200: GumElfMachine = 100;
pub const GumElfMachine_GUM_ELF_MACHINE_IP2K: GumElfMachine = 101;
pub const GumElfMachine_GUM_ELF_MACHINE_MAX: GumElfMachine = 102;
pub const GumElfMachine_GUM_ELF_MACHINE_CR: GumElfMachine = 103;
pub const GumElfMachine_GUM_ELF_MACHINE_F2MC16: GumElfMachine = 104;
pub const GumElfMachine_GUM_ELF_MACHINE_MSP430: GumElfMachine = 105;
pub const GumElfMachine_GUM_ELF_MACHINE_BLACKFIN: GumElfMachine = 106;
pub const GumElfMachine_GUM_ELF_MACHINE_SE_C33: GumElfMachine = 107;
pub const GumElfMachine_GUM_ELF_MACHINE_SEP: GumElfMachine = 108;
pub const GumElfMachine_GUM_ELF_MACHINE_ARCA: GumElfMachine = 109;
pub const GumElfMachine_GUM_ELF_MACHINE_UNICORE: GumElfMachine = 110;
pub const GumElfMachine_GUM_ELF_MACHINE_EXCESS: GumElfMachine = 111;
pub const GumElfMachine_GUM_ELF_MACHINE_DXP: GumElfMachine = 112;
pub const GumElfMachine_GUM_ELF_MACHINE_ALTERA_NIOS2: GumElfMachine = 113;
pub const GumElfMachine_GUM_ELF_MACHINE_CRX: GumElfMachine = 114;
pub const GumElfMachine_GUM_ELF_MACHINE_XGATE: GumElfMachine = 115;
pub const GumElfMachine_GUM_ELF_MACHINE_C166: GumElfMachine = 116;
pub const GumElfMachine_GUM_ELF_MACHINE_M16C: GumElfMachine = 117;
pub const GumElfMachine_GUM_ELF_MACHINE_DSPIC30F: GumElfMachine = 118;
pub const GumElfMachine_GUM_ELF_MACHINE_CE: GumElfMachine = 119;
pub const GumElfMachine_GUM_ELF_MACHINE_M32C: GumElfMachine = 120;
pub const GumElfMachine_GUM_ELF_MACHINE_TSK3000: GumElfMachine = 131;
pub const GumElfMachine_GUM_ELF_MACHINE_RS08: GumElfMachine = 132;
pub const GumElfMachine_GUM_ELF_MACHINE_SHARC: GumElfMachine = 133;
pub const GumElfMachine_GUM_ELF_MACHINE_ECOG2: GumElfMachine = 134;
pub const GumElfMachine_GUM_ELF_MACHINE_SCORE7: GumElfMachine = 135;
pub const GumElfMachine_GUM_ELF_MACHINE_DSP24: GumElfMachine = 136;
pub const GumElfMachine_GUM_ELF_MACHINE_VIDEOCORE3: GumElfMachine = 137;
pub const GumElfMachine_GUM_ELF_MACHINE_LATTICEMICO32: GumElfMachine = 138;
pub const GumElfMachine_GUM_ELF_MACHINE_SE_C17: GumElfMachine = 139;
pub const GumElfMachine_GUM_ELF_MACHINE_TI_C6000: GumElfMachine = 140;
pub const GumElfMachine_GUM_ELF_MACHINE_TI_C2000: GumElfMachine = 141;
pub const GumElfMachine_GUM_ELF_MACHINE_TI_C5500: GumElfMachine = 142;
pub const GumElfMachine_GUM_ELF_MACHINE_TI_ARP32: GumElfMachine = 143;
pub const GumElfMachine_GUM_ELF_MACHINE_TI_PRU: GumElfMachine = 144;
pub const GumElfMachine_GUM_ELF_MACHINE_MMDSP_PLUS: GumElfMachine = 160;
pub const GumElfMachine_GUM_ELF_MACHINE_CYPRESS_M8C: GumElfMachine = 161;
pub const GumElfMachine_GUM_ELF_MACHINE_R32C: GumElfMachine = 162;
pub const GumElfMachine_GUM_ELF_MACHINE_TRIMEDIA: GumElfMachine = 163;
pub const GumElfMachine_GUM_ELF_MACHINE_QDSP6: GumElfMachine = 164;
pub const GumElfMachine_GUM_ELF_MACHINE_8051: GumElfMachine = 165;
pub const GumElfMachine_GUM_ELF_MACHINE_STXP7X: GumElfMachine = 166;
pub const GumElfMachine_GUM_ELF_MACHINE_NDS32: GumElfMachine = 167;
pub const GumElfMachine_GUM_ELF_MACHINE_ECOG1X: GumElfMachine = 168;
pub const GumElfMachine_GUM_ELF_MACHINE_MAXQ30: GumElfMachine = 169;
pub const GumElfMachine_GUM_ELF_MACHINE_XIMO16: GumElfMachine = 170;
pub const GumElfMachine_GUM_ELF_MACHINE_MANIK: GumElfMachine = 171;
pub const GumElfMachine_GUM_ELF_MACHINE_CRAYNV2: GumElfMachine = 172;
pub const GumElfMachine_GUM_ELF_MACHINE_RX: GumElfMachine = 173;
pub const GumElfMachine_GUM_ELF_MACHINE_METAG: GumElfMachine = 174;
pub const GumElfMachine_GUM_ELF_MACHINE_MCST_ELBRUS: GumElfMachine = 175;
pub const GumElfMachine_GUM_ELF_MACHINE_ECOG16: GumElfMachine = 176;
pub const GumElfMachine_GUM_ELF_MACHINE_CR16: GumElfMachine = 177;
pub const GumElfMachine_GUM_ELF_MACHINE_ETPU: GumElfMachine = 178;
pub const GumElfMachine_GUM_ELF_MACHINE_SLE9X: GumElfMachine = 179;
pub const GumElfMachine_GUM_ELF_MACHINE_L10M: GumElfMachine = 180;
pub const GumElfMachine_GUM_ELF_MACHINE_K10M: GumElfMachine = 181;
pub const GumElfMachine_GUM_ELF_MACHINE_AARCH64: GumElfMachine = 183;
pub const GumElfMachine_GUM_ELF_MACHINE_AVR32: GumElfMachine = 185;
pub const GumElfMachine_GUM_ELF_MACHINE_STM8: GumElfMachine = 186;
pub const GumElfMachine_GUM_ELF_MACHINE_TILE64: GumElfMachine = 187;
pub const GumElfMachine_GUM_ELF_MACHINE_TILEPRO: GumElfMachine = 188;
pub const GumElfMachine_GUM_ELF_MACHINE_MICROBLAZE: GumElfMachine = 189;
pub const GumElfMachine_GUM_ELF_MACHINE_CUDA: GumElfMachine = 190;
pub const GumElfMachine_GUM_ELF_MACHINE_TILEGX: GumElfMachine = 191;
pub const GumElfMachine_GUM_ELF_MACHINE_CLOUDSHIELD: GumElfMachine = 192;
pub const GumElfMachine_GUM_ELF_MACHINE_COREA_1ST: GumElfMachine = 193;
pub const GumElfMachine_GUM_ELF_MACHINE_COREA_2ND: GumElfMachine = 194;
pub const GumElfMachine_GUM_ELF_MACHINE_ARCV2: GumElfMachine = 195;
pub const GumElfMachine_GUM_ELF_MACHINE_OPEN8: GumElfMachine = 196;
pub const GumElfMachine_GUM_ELF_MACHINE_RL78: GumElfMachine = 197;
pub const GumElfMachine_GUM_ELF_MACHINE_VIDEOCORE5: GumElfMachine = 198;
pub const GumElfMachine_GUM_ELF_MACHINE_78KOR: GumElfMachine = 199;
pub const GumElfMachine_GUM_ELF_MACHINE_56800EX: GumElfMachine = 200;
pub const GumElfMachine_GUM_ELF_MACHINE_BA1: GumElfMachine = 201;
pub const GumElfMachine_GUM_ELF_MACHINE_BA2: GumElfMachine = 202;
pub const GumElfMachine_GUM_ELF_MACHINE_XCORE: GumElfMachine = 203;
pub const GumElfMachine_GUM_ELF_MACHINE_MCHP_PIC: GumElfMachine = 204;
pub const GumElfMachine_GUM_ELF_MACHINE_KM32: GumElfMachine = 210;
pub const GumElfMachine_GUM_ELF_MACHINE_KMX32: GumElfMachine = 211;
pub const GumElfMachine_GUM_ELF_MACHINE_EMX16: GumElfMachine = 212;
pub const GumElfMachine_GUM_ELF_MACHINE_EMX8: GumElfMachine = 213;
pub const GumElfMachine_GUM_ELF_MACHINE_KVARC: GumElfMachine = 214;
pub const GumElfMachine_GUM_ELF_MACHINE_CDP: GumElfMachine = 215;
pub const GumElfMachine_GUM_ELF_MACHINE_COGE: GumElfMachine = 216;
pub const GumElfMachine_GUM_ELF_MACHINE_COOL: GumElfMachine = 217;
pub const GumElfMachine_GUM_ELF_MACHINE_NORC: GumElfMachine = 218;
pub const GumElfMachine_GUM_ELF_MACHINE_CSR_KALIMBA: GumElfMachine = 219;
pub const GumElfMachine_GUM_ELF_MACHINE_Z80: GumElfMachine = 220;
pub const GumElfMachine_GUM_ELF_MACHINE_VISIUM: GumElfMachine = 221;
pub const GumElfMachine_GUM_ELF_MACHINE_FT32: GumElfMachine = 222;
pub const GumElfMachine_GUM_ELF_MACHINE_MOXIE: GumElfMachine = 223;
pub const GumElfMachine_GUM_ELF_MACHINE_AMDGPU: GumElfMachine = 224;
pub const GumElfMachine_GUM_ELF_MACHINE_RISCV: GumElfMachine = 243;
pub const GumElfMachine_GUM_ELF_MACHINE_BPF: GumElfMachine = 247;
pub const GumElfMachine_GUM_ELF_MACHINE_CSKY: GumElfMachine = 252;
pub const GumElfMachine_GUM_ELF_MACHINE_ALPHA: GumElfMachine = 36902;
pub type GumElfMachine = ::core::ffi::c_uint;
pub const GumElfSourceMode_GUM_ELF_SOURCE_MODE_OFFLINE: GumElfSourceMode = 0;
pub const GumElfSourceMode_GUM_ELF_SOURCE_MODE_ONLINE: GumElfSourceMode = 1;
pub type GumElfSourceMode = ::core::ffi::c_uint;
pub const GumElfSectionType_GUM_ELF_SECTION_NULL: GumElfSectionType = 0;
pub const GumElfSectionType_GUM_ELF_SECTION_PROGBITS: GumElfSectionType = 1;
pub const GumElfSectionType_GUM_ELF_SECTION_SYMTAB: GumElfSectionType = 2;
pub const GumElfSectionType_GUM_ELF_SECTION_STRTAB: GumElfSectionType = 3;
pub const GumElfSectionType_GUM_ELF_SECTION_RELA: GumElfSectionType = 4;
pub const GumElfSectionType_GUM_ELF_SECTION_HASH: GumElfSectionType = 5;
pub const GumElfSectionType_GUM_ELF_SECTION_DYNAMIC: GumElfSectionType = 6;
pub const GumElfSectionType_GUM_ELF_SECTION_NOTE: GumElfSectionType = 7;
pub const GumElfSectionType_GUM_ELF_SECTION_NOBITS: GumElfSectionType = 8;
pub const GumElfSectionType_GUM_ELF_SECTION_REL: GumElfSectionType = 9;
pub const GumElfSectionType_GUM_ELF_SECTION_SHLIB: GumElfSectionType = 10;
pub const GumElfSectionType_GUM_ELF_SECTION_DYNSYM: GumElfSectionType = 11;
pub const GumElfSectionType_GUM_ELF_SECTION_INIT_ARRAY: GumElfSectionType = 14;
pub const GumElfSectionType_GUM_ELF_SECTION_FINI_ARRAY: GumElfSectionType = 15;
pub const GumElfSectionType_GUM_ELF_SECTION_PREINIT_ARRAY: GumElfSectionType = 16;
pub const GumElfSectionType_GUM_ELF_SECTION_GROUP: GumElfSectionType = 17;
pub const GumElfSectionType_GUM_ELF_SECTION_SYMTAB_SHNDX: GumElfSectionType = 18;
pub const GumElfSectionType_GUM_ELF_SECTION_RELR: GumElfSectionType = 19;
pub const GumElfSectionType_GUM_ELF_SECTION_NUM: GumElfSectionType = 20;
pub const GumElfSectionType_GUM_ELF_SECTION_GNU_ATTRIBUTES: GumElfSectionType = 1879048181;
pub const GumElfSectionType_GUM_ELF_SECTION_GNU_HASH: GumElfSectionType = 1879048182;
pub const GumElfSectionType_GUM_ELF_SECTION_GNU_LIBLIST: GumElfSectionType = 1879048183;
pub const GumElfSectionType_GUM_ELF_SECTION_CHECKSUM: GumElfSectionType = 1879048184;
pub const GumElfSectionType_GUM_ELF_SECTION_SUNW_MOVE: GumElfSectionType = 1879048186;
pub const GumElfSectionType_GUM_ELF_SECTION_SUNW_COMDAT: GumElfSectionType = 1879048187;
pub const GumElfSectionType_GUM_ELF_SECTION_SUNW_SYMINFO: GumElfSectionType = 1879048188;
pub const GumElfSectionType_GUM_ELF_SECTION_GNU_VERDEF: GumElfSectionType = 1879048189;
pub const GumElfSectionType_GUM_ELF_SECTION_GNU_VERNEED: GumElfSectionType = 1879048190;
pub const GumElfSectionType_GUM_ELF_SECTION_GNU_VERSYM: GumElfSectionType = 1879048191;
pub type GumElfSectionType = ::core::ffi::c_uint;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_NULL: GumElfDynamicTag = 0;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_NEEDED: GumElfDynamicTag = 1;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_PLTRELSZ: GumElfDynamicTag = 2;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_PLTGOT: GumElfDynamicTag = 3;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_HASH: GumElfDynamicTag = 4;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_STRTAB: GumElfDynamicTag = 5;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_SYMTAB: GumElfDynamicTag = 6;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_RELA: GumElfDynamicTag = 7;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_RELASZ: GumElfDynamicTag = 8;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_RELAENT: GumElfDynamicTag = 9;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_STRSZ: GumElfDynamicTag = 10;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_SYMENT: GumElfDynamicTag = 11;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_INIT: GumElfDynamicTag = 12;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_FINI: GumElfDynamicTag = 13;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_SONAME: GumElfDynamicTag = 14;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_RPATH: GumElfDynamicTag = 15;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_SYMBOLIC: GumElfDynamicTag = 16;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_REL: GumElfDynamicTag = 17;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_RELSZ: GumElfDynamicTag = 18;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_RELENT: GumElfDynamicTag = 19;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_PLTREL: GumElfDynamicTag = 20;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_DEBUG: GumElfDynamicTag = 21;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_TEXTREL: GumElfDynamicTag = 22;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_JMPREL: GumElfDynamicTag = 23;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_BIND_NOW: GumElfDynamicTag = 24;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_INIT_ARRAY: GumElfDynamicTag = 25;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_FINI_ARRAY: GumElfDynamicTag = 26;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_INIT_ARRAYSZ: GumElfDynamicTag = 27;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_FINI_ARRAYSZ: GumElfDynamicTag = 28;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_RUNPATH: GumElfDynamicTag = 29;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_FLAGS: GumElfDynamicTag = 30;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_ENCODING: GumElfDynamicTag = 32;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_PREINIT_ARRAY: GumElfDynamicTag = 32;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_PREINIT_ARRAYSZ: GumElfDynamicTag = 33;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MAXPOSTAGS: GumElfDynamicTag = 34;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_LOOS: GumElfDynamicTag = 1610612749;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_SUNW_AUXILIARY: GumElfDynamicTag = 1610612749;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_SUNW_RTLDINF: GumElfDynamicTag = 1610612750;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_SUNW_FILTER: GumElfDynamicTag = 1610612751;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_SUNW_CAP: GumElfDynamicTag = 1610612752;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_SUNW_ASLR: GumElfDynamicTag = 1610612771;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_HIOS: GumElfDynamicTag = 1879044096;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_VALRNGLO: GumElfDynamicTag = 1879047424;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_GNU_PRELINKED: GumElfDynamicTag = 1879047669;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_GNU_CONFLICTSZ: GumElfDynamicTag = 1879047670;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_GNU_LIBLISTSZ: GumElfDynamicTag = 1879047671;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_CHECKSUM: GumElfDynamicTag = 1879047672;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_PLTPADSZ: GumElfDynamicTag = 1879047673;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MOVEENT: GumElfDynamicTag = 1879047674;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MOVESZ: GumElfDynamicTag = 1879047675;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_FEATURE: GumElfDynamicTag = 1879047676;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_FEATURE_1: GumElfDynamicTag = 1879047676;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_POSFLAG_1: GumElfDynamicTag = 1879047677;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_SYMINSZ: GumElfDynamicTag = 1879047678;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_SYMINENT: GumElfDynamicTag = 1879047679;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_VALRNGHI: GumElfDynamicTag = 1879047679;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_ADDRRNGLO: GumElfDynamicTag = 1879047680;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_GNU_HASH: GumElfDynamicTag = 1879047925;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_TLSDESC_PLT: GumElfDynamicTag = 1879047926;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_TLSDESC_GOT: GumElfDynamicTag = 1879047927;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_GNU_CONFLICT: GumElfDynamicTag = 1879047928;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_GNU_LIBLIST: GumElfDynamicTag = 1879047929;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_CONFIG: GumElfDynamicTag = 1879047930;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_DEPAUDIT: GumElfDynamicTag = 1879047931;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_AUDIT: GumElfDynamicTag = 1879047932;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_PLTPAD: GumElfDynamicTag = 1879047933;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MOVETAB: GumElfDynamicTag = 1879047934;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_SYMINFO: GumElfDynamicTag = 1879047935;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_ADDRRNGHI: GumElfDynamicTag = 1879047935;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_VERSYM: GumElfDynamicTag = 1879048176;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_RELACOUNT: GumElfDynamicTag = 1879048185;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_RELCOUNT: GumElfDynamicTag = 1879048186;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_FLAGS_1: GumElfDynamicTag = 1879048187;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_VERDEF: GumElfDynamicTag = 1879048188;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_VERDEFNUM: GumElfDynamicTag = 1879048189;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_VERNEED: GumElfDynamicTag = 1879048190;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_VERNEEDNUM: GumElfDynamicTag = 1879048191;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_LOPROC: GumElfDynamicTag = 1879048192;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_ARM_SYMTABSZ: GumElfDynamicTag = 1879048193;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_ARM_PREEMPTMAP: GumElfDynamicTag = 1879048194;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_SPARC_REGISTER: GumElfDynamicTag = 1879048193;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_DEPRECATED_SPARC_REGISTER: GumElfDynamicTag = 117440513;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_RLD_VERSION: GumElfDynamicTag = 1879048193;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_TIME_STAMP: GumElfDynamicTag = 1879048194;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_ICHECKSUM: GumElfDynamicTag = 1879048195;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_IVERSION: GumElfDynamicTag = 1879048196;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_FLAGS: GumElfDynamicTag = 1879048197;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_BASE_ADDRESS: GumElfDynamicTag = 1879048198;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_CONFLICT: GumElfDynamicTag = 1879048200;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_LIBLIST: GumElfDynamicTag = 1879048201;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_LOCAL_GOTNO: GumElfDynamicTag = 1879048202;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_CONFLICTNO: GumElfDynamicTag = 1879048203;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_LIBLISTNO: GumElfDynamicTag = 1879048208;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_SYMTABNO: GumElfDynamicTag = 1879048209;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_UNREFEXTNO: GumElfDynamicTag = 1879048210;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_GOTSYM: GumElfDynamicTag = 1879048211;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_HIPAGENO: GumElfDynamicTag = 1879048212;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_RLD_MAP: GumElfDynamicTag = 1879048214;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_DELTA_CLASS: GumElfDynamicTag = 1879048215;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_DELTA_CLASS_NO: GumElfDynamicTag = 1879048216;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_DELTA_INSTANCE: GumElfDynamicTag = 1879048217;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_DELTA_INSTANCE_NO: GumElfDynamicTag = 1879048218;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_DELTA_RELOC: GumElfDynamicTag = 1879048219;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_DELTA_RELOC_NO: GumElfDynamicTag = 1879048220;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_DELTA_SYM: GumElfDynamicTag = 1879048221;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_DELTA_SYM_NO: GumElfDynamicTag = 1879048222;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_DELTA_CLASSSYM: GumElfDynamicTag = 1879048224;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_DELTA_CLASSSYM_NO: GumElfDynamicTag = 1879048225;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_CXX_FLAGS: GumElfDynamicTag = 1879048226;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_PIXIE_INIT: GumElfDynamicTag = 1879048227;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_SYMBOL_LIB: GumElfDynamicTag = 1879048228;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_LOCALPAGE_GOTIDX: GumElfDynamicTag = 1879048229;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_LOCAL_GOTIDX: GumElfDynamicTag = 1879048230;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_HIDDEN_GOTIDX: GumElfDynamicTag = 1879048231;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_PROTECTED_GOTIDX: GumElfDynamicTag = 1879048232;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_OPTIONS: GumElfDynamicTag = 1879048233;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_INTERFACE: GumElfDynamicTag = 1879048234;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_DYNSTR_ALIGN: GumElfDynamicTag = 1879048235;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_INTERFACE_SIZE: GumElfDynamicTag = 1879048236;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_RLD_TEXT_RESOLVE_ADDR: GumElfDynamicTag =
    1879048237;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_PERF_SUFFIX: GumElfDynamicTag = 1879048238;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_COMPACT_SIZE: GumElfDynamicTag = 1879048239;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_GP_VALUE: GumElfDynamicTag = 1879048240;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_AUX_DYNAMIC: GumElfDynamicTag = 1879048241;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_PLTGOT: GumElfDynamicTag = 1879048242;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_RLD_OBJ_UPDATE: GumElfDynamicTag = 1879048243;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_RWPLT: GumElfDynamicTag = 1879048244;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_MIPS_RLD_MAP_REL: GumElfDynamicTag = 1879048245;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_PPC_GOT: GumElfDynamicTag = 1879048192;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_PPC_TLSOPT: GumElfDynamicTag = 1879048193;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_PPC64_GLINK: GumElfDynamicTag = 1879048192;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_PPC64_OPD: GumElfDynamicTag = 1879048193;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_PPC64_OPDSZ: GumElfDynamicTag = 1879048194;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_PPC64_TLSOPT: GumElfDynamicTag = 1879048195;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_AUXILIARY: GumElfDynamicTag = 2147483645;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_USED: GumElfDynamicTag = 2147483646;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_FILTER: GumElfDynamicTag = 2147483647;
pub const GumElfDynamicTag_GUM_ELF_DYNAMIC_HIPROC: GumElfDynamicTag = 2147483647;
pub type GumElfDynamicTag = ::core::ffi::c_uint;
pub const GumElfShdrIndex_GUM_ELF_SHDR_INDEX_UNDEF: GumElfShdrIndex = 0;
pub const GumElfShdrIndex_GUM_ELF_SHDR_INDEX_BEFORE: GumElfShdrIndex = 65280;
pub const GumElfShdrIndex_GUM_ELF_SHDR_INDEX_AFTER: GumElfShdrIndex = 65281;
pub const GumElfShdrIndex_GUM_ELF_SHDR_INDEX_ABS: GumElfShdrIndex = 65521;
pub const GumElfShdrIndex_GUM_ELF_SHDR_INDEX_COMMON: GumElfShdrIndex = 65522;
pub const GumElfShdrIndex_GUM_ELF_SHDR_INDEX_XINDEX: GumElfShdrIndex = 65535;
pub type GumElfShdrIndex = ::core::ffi::c_uint;
pub const GumElfSymbolType_GUM_ELF_SYMBOL_NOTYPE: GumElfSymbolType = 0;
pub const GumElfSymbolType_GUM_ELF_SYMBOL_OBJECT: GumElfSymbolType = 1;
pub const GumElfSymbolType_GUM_ELF_SYMBOL_FUNC: GumElfSymbolType = 2;
pub const GumElfSymbolType_GUM_ELF_SYMBOL_SECTION: GumElfSymbolType = 3;
pub const GumElfSymbolType_GUM_ELF_SYMBOL_FILE: GumElfSymbolType = 4;
pub const GumElfSymbolType_GUM_ELF_SYMBOL_COMMON: GumElfSymbolType = 5;
pub const GumElfSymbolType_GUM_ELF_SYMBOL_TLS: GumElfSymbolType = 6;
pub const GumElfSymbolType_GUM_ELF_SYMBOL_NUM: GumElfSymbolType = 7;
pub const GumElfSymbolType_GUM_ELF_SYMBOL_LOOS: GumElfSymbolType = 10;
pub const GumElfSymbolType_GUM_ELF_SYMBOL_GNU_IFUNC: GumElfSymbolType = 10;
pub const GumElfSymbolType_GUM_ELF_SYMBOL_HIOS: GumElfSymbolType = 12;
pub const GumElfSymbolType_GUM_ELF_SYMBOL_LOPROC: GumElfSymbolType = 13;
pub const GumElfSymbolType_GUM_ELF_SYMBOL_SPARC_REGISTER: GumElfSymbolType = 13;
pub const GumElfSymbolType_GUM_ELF_SYMBOL_HIPROC: GumElfSymbolType = 15;
pub type GumElfSymbolType = ::core::ffi::c_uint;
pub const GumElfSymbolBind_GUM_ELF_BIND_LOCAL: GumElfSymbolBind = 0;
pub const GumElfSymbolBind_GUM_ELF_BIND_GLOBAL: GumElfSymbolBind = 1;
pub const GumElfSymbolBind_GUM_ELF_BIND_WEAK: GumElfSymbolBind = 2;
pub const GumElfSymbolBind_GUM_ELF_BIND_LOOS: GumElfSymbolBind = 10;
pub const GumElfSymbolBind_GUM_ELF_BIND_GNU_UNIQUE: GumElfSymbolBind = 10;
pub const GumElfSymbolBind_GUM_ELF_BIND_HIOS: GumElfSymbolBind = 12;
pub const GumElfSymbolBind_GUM_ELF_BIND_LOPROC: GumElfSymbolBind = 13;
pub const GumElfSymbolBind_GUM_ELF_BIND_HIPROC: GumElfSymbolBind = 15;
pub type GumElfSymbolBind = ::core::ffi::c_uint;
pub const GumElfIA32Relocation_GUM_ELF_IA32_NONE: GumElfIA32Relocation = 0;
pub const GumElfIA32Relocation_GUM_ELF_IA32_32: GumElfIA32Relocation = 1;
pub const GumElfIA32Relocation_GUM_ELF_IA32_PC32: GumElfIA32Relocation = 2;
pub const GumElfIA32Relocation_GUM_ELF_IA32_GOT32: GumElfIA32Relocation = 3;
pub const GumElfIA32Relocation_GUM_ELF_IA32_PLT32: GumElfIA32Relocation = 4;
pub const GumElfIA32Relocation_GUM_ELF_IA32_COPY: GumElfIA32Relocation = 5;
pub const GumElfIA32Relocation_GUM_ELF_IA32_GLOB_DAT: GumElfIA32Relocation = 6;
pub const GumElfIA32Relocation_GUM_ELF_IA32_JMP_SLOT: GumElfIA32Relocation = 7;
pub const GumElfIA32Relocation_GUM_ELF_IA32_RELATIVE: GumElfIA32Relocation = 8;
pub const GumElfIA32Relocation_GUM_ELF_IA32_GOTOFF: GumElfIA32Relocation = 9;
pub const GumElfIA32Relocation_GUM_ELF_IA32_GOTPC: GumElfIA32Relocation = 10;
pub const GumElfIA32Relocation_GUM_ELF_IA32_32PLT: GumElfIA32Relocation = 11;
pub const GumElfIA32Relocation_GUM_ELF_IA32_TLS_TPOFF: GumElfIA32Relocation = 14;
pub const GumElfIA32Relocation_GUM_ELF_IA32_TLS_IE: GumElfIA32Relocation = 15;
pub const GumElfIA32Relocation_GUM_ELF_IA32_TLS_GOTIE: GumElfIA32Relocation = 16;
pub const GumElfIA32Relocation_GUM_ELF_IA32_TLS_LE: GumElfIA32Relocation = 17;
pub const GumElfIA32Relocation_GUM_ELF_IA32_TLS_GD: GumElfIA32Relocation = 18;
pub const GumElfIA32Relocation_GUM_ELF_IA32_TLS_LDM: GumElfIA32Relocation = 19;
pub const GumElfIA32Relocation_GUM_ELF_IA32_16: GumElfIA32Relocation = 20;
pub const GumElfIA32Relocation_GUM_ELF_IA32_PC16: GumElfIA32Relocation = 21;
pub const GumElfIA32Relocation_GUM_ELF_IA32_8: GumElfIA32Relocation = 22;
pub const GumElfIA32Relocation_GUM_ELF_IA32_PC8: GumElfIA32Relocation = 23;
pub const GumElfIA32Relocation_GUM_ELF_IA32_TLS_GD_32: GumElfIA32Relocation = 24;
pub const GumElfIA32Relocation_GUM_ELF_IA32_TLS_GD_PUSH: GumElfIA32Relocation = 25;
pub const GumElfIA32Relocation_GUM_ELF_IA32_TLS_GD_CALL: GumElfIA32Relocation = 26;
pub const GumElfIA32Relocation_GUM_ELF_IA32_TLS_GD_POP: GumElfIA32Relocation = 27;
pub const GumElfIA32Relocation_GUM_ELF_IA32_TLS_LDM_32: GumElfIA32Relocation = 28;
pub const GumElfIA32Relocation_GUM_ELF_IA32_TLS_LDM_PUSH: GumElfIA32Relocation = 29;
pub const GumElfIA32Relocation_GUM_ELF_IA32_TLS_LDM_CALL: GumElfIA32Relocation = 30;
pub const GumElfIA32Relocation_GUM_ELF_IA32_TLS_LDM_POP: GumElfIA32Relocation = 31;
pub const GumElfIA32Relocation_GUM_ELF_IA32_TLS_LDO_32: GumElfIA32Relocation = 32;
pub const GumElfIA32Relocation_GUM_ELF_IA32_TLS_IE_32: GumElfIA32Relocation = 33;
pub const GumElfIA32Relocation_GUM_ELF_IA32_TLS_LE_32: GumElfIA32Relocation = 34;
pub const GumElfIA32Relocation_GUM_ELF_IA32_TLS_DTPMOD32: GumElfIA32Relocation = 35;
pub const GumElfIA32Relocation_GUM_ELF_IA32_TLS_DTPOFF32: GumElfIA32Relocation = 36;
pub const GumElfIA32Relocation_GUM_ELF_IA32_TLS_TPOFF32: GumElfIA32Relocation = 37;
pub const GumElfIA32Relocation_GUM_ELF_IA32_SIZE32: GumElfIA32Relocation = 38;
pub const GumElfIA32Relocation_GUM_ELF_IA32_TLS_GOTDESC: GumElfIA32Relocation = 39;
pub const GumElfIA32Relocation_GUM_ELF_IA32_TLS_DESC_CALL: GumElfIA32Relocation = 40;
pub const GumElfIA32Relocation_GUM_ELF_IA32_TLS_DESC: GumElfIA32Relocation = 41;
pub const GumElfIA32Relocation_GUM_ELF_IA32_IRELATIVE: GumElfIA32Relocation = 42;
pub const GumElfIA32Relocation_GUM_ELF_IA32_GOT32X: GumElfIA32Relocation = 43;
pub type GumElfIA32Relocation = ::core::ffi::c_uint;
pub const GumElfX64Relocation_GUM_ELF_X64_NONE: GumElfX64Relocation = 0;
pub const GumElfX64Relocation_GUM_ELF_X64_64: GumElfX64Relocation = 1;
pub const GumElfX64Relocation_GUM_ELF_X64_PC32: GumElfX64Relocation = 2;
pub const GumElfX64Relocation_GUM_ELF_X64_GOT32: GumElfX64Relocation = 3;
pub const GumElfX64Relocation_GUM_ELF_X64_PLT32: GumElfX64Relocation = 4;
pub const GumElfX64Relocation_GUM_ELF_X64_COPY: GumElfX64Relocation = 5;
pub const GumElfX64Relocation_GUM_ELF_X64_GLOB_DAT: GumElfX64Relocation = 6;
pub const GumElfX64Relocation_GUM_ELF_X64_JUMP_SLOT: GumElfX64Relocation = 7;
pub const GumElfX64Relocation_GUM_ELF_X64_RELATIVE: GumElfX64Relocation = 8;
pub const GumElfX64Relocation_GUM_ELF_X64_GOTPCREL: GumElfX64Relocation = 9;
pub const GumElfX64Relocation_GUM_ELF_X64_32: GumElfX64Relocation = 10;
pub const GumElfX64Relocation_GUM_ELF_X64_32S: GumElfX64Relocation = 11;
pub const GumElfX64Relocation_GUM_ELF_X64_16: GumElfX64Relocation = 12;
pub const GumElfX64Relocation_GUM_ELF_X64_PC16: GumElfX64Relocation = 13;
pub const GumElfX64Relocation_GUM_ELF_X64_8: GumElfX64Relocation = 14;
pub const GumElfX64Relocation_GUM_ELF_X64_PC8: GumElfX64Relocation = 15;
pub const GumElfX64Relocation_GUM_ELF_X64_DTPMOD64: GumElfX64Relocation = 16;
pub const GumElfX64Relocation_GUM_ELF_X64_DTPOFF64: GumElfX64Relocation = 17;
pub const GumElfX64Relocation_GUM_ELF_X64_TPOFF64: GumElfX64Relocation = 18;
pub const GumElfX64Relocation_GUM_ELF_X64_TLSGD: GumElfX64Relocation = 19;
pub const GumElfX64Relocation_GUM_ELF_X64_TLSLD: GumElfX64Relocation = 20;
pub const GumElfX64Relocation_GUM_ELF_X64_DTPOFF32: GumElfX64Relocation = 21;
pub const GumElfX64Relocation_GUM_ELF_X64_GOTTPOFF: GumElfX64Relocation = 22;
pub const GumElfX64Relocation_GUM_ELF_X64_TPOFF32: GumElfX64Relocation = 23;
pub const GumElfX64Relocation_GUM_ELF_X64_PC64: GumElfX64Relocation = 24;
pub const GumElfX64Relocation_GUM_ELF_X64_GOTOFF64: GumElfX64Relocation = 25;
pub const GumElfX64Relocation_GUM_ELF_X64_GOTPC32: GumElfX64Relocation = 26;
pub const GumElfX64Relocation_GUM_ELF_X64_GOT64: GumElfX64Relocation = 27;
pub const GumElfX64Relocation_GUM_ELF_X64_GOTPCREL64: GumElfX64Relocation = 28;
pub const GumElfX64Relocation_GUM_ELF_X64_GOTPC64: GumElfX64Relocation = 29;
pub const GumElfX64Relocation_GUM_ELF_X64_GOTPLT64: GumElfX64Relocation = 30;
pub const GumElfX64Relocation_GUM_ELF_X64_PLTOFF64: GumElfX64Relocation = 31;
pub const GumElfX64Relocation_GUM_ELF_X64_SIZE32: GumElfX64Relocation = 32;
pub const GumElfX64Relocation_GUM_ELF_X64_SIZE64: GumElfX64Relocation = 33;
pub const GumElfX64Relocation_GUM_ELF_X64_GOTPC32_TLSDESC: GumElfX64Relocation = 34;
pub const GumElfX64Relocation_GUM_ELF_X64_TLSDESC_CALL: GumElfX64Relocation = 35;
pub const GumElfX64Relocation_GUM_ELF_X64_TLSDESC: GumElfX64Relocation = 36;
pub const GumElfX64Relocation_GUM_ELF_X64_IRELATIVE: GumElfX64Relocation = 37;
pub const GumElfX64Relocation_GUM_ELF_X64_RELATIVE64: GumElfX64Relocation = 38;
pub const GumElfX64Relocation_GUM_ELF_X64_GOTPCRELX: GumElfX64Relocation = 41;
pub const GumElfX64Relocation_GUM_ELF_X64_REX_GOTPCRELX: GumElfX64Relocation = 42;
pub type GumElfX64Relocation = ::core::ffi::c_uint;
pub const GumElfArmRelocation_GUM_ELF_ARM_NONE: GumElfArmRelocation = 0;
pub const GumElfArmRelocation_GUM_ELF_ARM_PC24: GumElfArmRelocation = 1;
pub const GumElfArmRelocation_GUM_ELF_ARM_ABS32: GumElfArmRelocation = 2;
pub const GumElfArmRelocation_GUM_ELF_ARM_REL32: GumElfArmRelocation = 3;
pub const GumElfArmRelocation_GUM_ELF_ARM_PC13: GumElfArmRelocation = 4;
pub const GumElfArmRelocation_GUM_ELF_ARM_ABS16: GumElfArmRelocation = 5;
pub const GumElfArmRelocation_GUM_ELF_ARM_ABS12: GumElfArmRelocation = 6;
pub const GumElfArmRelocation_GUM_ELF_ARM_THM_ABS5: GumElfArmRelocation = 7;
pub const GumElfArmRelocation_GUM_ELF_ARM_ABS8: GumElfArmRelocation = 8;
pub const GumElfArmRelocation_GUM_ELF_ARM_SBREL32: GumElfArmRelocation = 9;
pub const GumElfArmRelocation_GUM_ELF_ARM_THM_PC22: GumElfArmRelocation = 10;
pub const GumElfArmRelocation_GUM_ELF_ARM_THM_PC8: GumElfArmRelocation = 11;
pub const GumElfArmRelocation_GUM_ELF_ARM_AMP_VCALL9: GumElfArmRelocation = 12;
pub const GumElfArmRelocation_GUM_ELF_ARM_SWI24: GumElfArmRelocation = 13;
pub const GumElfArmRelocation_GUM_ELF_ARM_TLS_DESC: GumElfArmRelocation = 13;
pub const GumElfArmRelocation_GUM_ELF_ARM_THM_SWI8: GumElfArmRelocation = 14;
pub const GumElfArmRelocation_GUM_ELF_ARM_XPC25: GumElfArmRelocation = 15;
pub const GumElfArmRelocation_GUM_ELF_ARM_THM_XPC22: GumElfArmRelocation = 16;
pub const GumElfArmRelocation_GUM_ELF_ARM_TLS_DTPMOD32: GumElfArmRelocation = 17;
pub const GumElfArmRelocation_GUM_ELF_ARM_TLS_DTPOFF32: GumElfArmRelocation = 18;
pub const GumElfArmRelocation_GUM_ELF_ARM_TLS_TPOFF32: GumElfArmRelocation = 19;
pub const GumElfArmRelocation_GUM_ELF_ARM_COPY: GumElfArmRelocation = 20;
pub const GumElfArmRelocation_GUM_ELF_ARM_GLOB_DAT: GumElfArmRelocation = 21;
pub const GumElfArmRelocation_GUM_ELF_ARM_JUMP_SLOT: GumElfArmRelocation = 22;
pub const GumElfArmRelocation_GUM_ELF_ARM_RELATIVE: GumElfArmRelocation = 23;
pub const GumElfArmRelocation_GUM_ELF_ARM_GOTOFF: GumElfArmRelocation = 24;
pub const GumElfArmRelocation_GUM_ELF_ARM_GOTPC: GumElfArmRelocation = 25;
pub const GumElfArmRelocation_GUM_ELF_ARM_GOT32: GumElfArmRelocation = 26;
pub const GumElfArmRelocation_GUM_ELF_ARM_PLT32: GumElfArmRelocation = 27;
pub const GumElfArmRelocation_GUM_ELF_ARM_CALL: GumElfArmRelocation = 28;
pub const GumElfArmRelocation_GUM_ELF_ARM_JUMP24: GumElfArmRelocation = 29;
pub const GumElfArmRelocation_GUM_ELF_ARM_THM_JUMP24: GumElfArmRelocation = 30;
pub const GumElfArmRelocation_GUM_ELF_ARM_BASE_ABS: GumElfArmRelocation = 31;
pub const GumElfArmRelocation_GUM_ELF_ARM_ALU_PCREL_7_0: GumElfArmRelocation = 32;
pub const GumElfArmRelocation_GUM_ELF_ARM_ALU_PCREL_15_8: GumElfArmRelocation = 33;
pub const GumElfArmRelocation_GUM_ELF_ARM_ALU_PCREL_23_15: GumElfArmRelocation = 34;
pub const GumElfArmRelocation_GUM_ELF_ARM_LDR_SBREL_11_0: GumElfArmRelocation = 35;
pub const GumElfArmRelocation_GUM_ELF_ARM_ALU_SBREL_19_12: GumElfArmRelocation = 36;
pub const GumElfArmRelocation_GUM_ELF_ARM_ALU_SBREL_27_20: GumElfArmRelocation = 37;
pub const GumElfArmRelocation_GUM_ELF_ARM_TARGET1: GumElfArmRelocation = 38;
pub const GumElfArmRelocation_GUM_ELF_ARM_SBREL31: GumElfArmRelocation = 39;
pub const GumElfArmRelocation_GUM_ELF_ARM_V4BX: GumElfArmRelocation = 40;
pub const GumElfArmRelocation_GUM_ELF_ARM_TARGET2: GumElfArmRelocation = 41;
pub const GumElfArmRelocation_GUM_ELF_ARM_PREL31: GumElfArmRelocation = 42;
pub const GumElfArmRelocation_GUM_ELF_ARM_MOVW_ABS_NC: GumElfArmRelocation = 43;
pub const GumElfArmRelocation_GUM_ELF_ARM_MOVT_ABS: GumElfArmRelocation = 44;
pub const GumElfArmRelocation_GUM_ELF_ARM_MOVW_PREL_NC: GumElfArmRelocation = 45;
pub const GumElfArmRelocation_GUM_ELF_ARM_MOVT_PREL: GumElfArmRelocation = 46;
pub const GumElfArmRelocation_GUM_ELF_ARM_THM_MOVW_ABS_NC: GumElfArmRelocation = 47;
pub const GumElfArmRelocation_GUM_ELF_ARM_THM_MOVT_ABS: GumElfArmRelocation = 48;
pub const GumElfArmRelocation_GUM_ELF_ARM_THM_MOVW_PREL_NC: GumElfArmRelocation = 49;
pub const GumElfArmRelocation_GUM_ELF_ARM_THM_MOVT_PREL: GumElfArmRelocation = 50;
pub const GumElfArmRelocation_GUM_ELF_ARM_THM_JUMP19: GumElfArmRelocation = 51;
pub const GumElfArmRelocation_GUM_ELF_ARM_THM_JUMP6: GumElfArmRelocation = 52;
pub const GumElfArmRelocation_GUM_ELF_ARM_THM_ALU_PREL_11_0: GumElfArmRelocation = 53;
pub const GumElfArmRelocation_GUM_ELF_ARM_THM_PC12: GumElfArmRelocation = 54;
pub const GumElfArmRelocation_GUM_ELF_ARM_ABS32_NOI: GumElfArmRelocation = 55;
pub const GumElfArmRelocation_GUM_ELF_ARM_REL32_NOI: GumElfArmRelocation = 56;
pub const GumElfArmRelocation_GUM_ELF_ARM_ALU_PC_G0_NC: GumElfArmRelocation = 57;
pub const GumElfArmRelocation_GUM_ELF_ARM_ALU_PC_G0: GumElfArmRelocation = 58;
pub const GumElfArmRelocation_GUM_ELF_ARM_ALU_PC_G1_NC: GumElfArmRelocation = 59;
pub const GumElfArmRelocation_GUM_ELF_ARM_ALU_PC_G1: GumElfArmRelocation = 60;
pub const GumElfArmRelocation_GUM_ELF_ARM_ALU_PC_G2: GumElfArmRelocation = 61;
pub const GumElfArmRelocation_GUM_ELF_ARM_LDR_PC_G1: GumElfArmRelocation = 62;
pub const GumElfArmRelocation_GUM_ELF_ARM_LDR_PC_G2: GumElfArmRelocation = 63;
pub const GumElfArmRelocation_GUM_ELF_ARM_LDRS_PC_G0: GumElfArmRelocation = 64;
pub const GumElfArmRelocation_GUM_ELF_ARM_LDRS_PC_G1: GumElfArmRelocation = 65;
pub const GumElfArmRelocation_GUM_ELF_ARM_LDRS_PC_G2: GumElfArmRelocation = 66;
pub const GumElfArmRelocation_GUM_ELF_ARM_LDC_PC_G0: GumElfArmRelocation = 67;
pub const GumElfArmRelocation_GUM_ELF_ARM_LDC_PC_G1: GumElfArmRelocation = 68;
pub const GumElfArmRelocation_GUM_ELF_ARM_LDC_PC_G2: GumElfArmRelocation = 69;
pub const GumElfArmRelocation_GUM_ELF_ARM_ALU_SB_G0_NC: GumElfArmRelocation = 70;
pub const GumElfArmRelocation_GUM_ELF_ARM_ALU_SB_G0: GumElfArmRelocation = 71;
pub const GumElfArmRelocation_GUM_ELF_ARM_ALU_SB_G1_NC: GumElfArmRelocation = 72;
pub const GumElfArmRelocation_GUM_ELF_ARM_ALU_SB_G1: GumElfArmRelocation = 73;
pub const GumElfArmRelocation_GUM_ELF_ARM_ALU_SB_G2: GumElfArmRelocation = 74;
pub const GumElfArmRelocation_GUM_ELF_ARM_LDR_SB_G0: GumElfArmRelocation = 75;
pub const GumElfArmRelocation_GUM_ELF_ARM_LDR_SB_G1: GumElfArmRelocation = 76;
pub const GumElfArmRelocation_GUM_ELF_ARM_LDR_SB_G2: GumElfArmRelocation = 77;
pub const GumElfArmRelocation_GUM_ELF_ARM_LDRS_SB_G0: GumElfArmRelocation = 78;
pub const GumElfArmRelocation_GUM_ELF_ARM_LDRS_SB_G1: GumElfArmRelocation = 79;
pub const GumElfArmRelocation_GUM_ELF_ARM_LDRS_SB_G2: GumElfArmRelocation = 80;
pub const GumElfArmRelocation_GUM_ELF_ARM_LDC_SB_G0: GumElfArmRelocation = 81;
pub const GumElfArmRelocation_GUM_ELF_ARM_LDC_SB_G1: GumElfArmRelocation = 82;
pub const GumElfArmRelocation_GUM_ELF_ARM_LDC_SB_G2: GumElfArmRelocation = 83;
pub const GumElfArmRelocation_GUM_ELF_ARM_MOVW_BREL_NC: GumElfArmRelocation = 84;
pub const GumElfArmRelocation_GUM_ELF_ARM_MOVT_BREL: GumElfArmRelocation = 85;
pub const GumElfArmRelocation_GUM_ELF_ARM_MOVW_BREL: GumElfArmRelocation = 86;
pub const GumElfArmRelocation_GUM_ELF_ARM_THM_MOVW_BREL_NC: GumElfArmRelocation = 87;
pub const GumElfArmRelocation_GUM_ELF_ARM_THM_MOVT_BREL: GumElfArmRelocation = 88;
pub const GumElfArmRelocation_GUM_ELF_ARM_THM_MOVW_BREL: GumElfArmRelocation = 89;
pub const GumElfArmRelocation_GUM_ELF_ARM_TLS_GOTDESC: GumElfArmRelocation = 90;
pub const GumElfArmRelocation_GUM_ELF_ARM_TLS_CALL: GumElfArmRelocation = 91;
pub const GumElfArmRelocation_GUM_ELF_ARM_TLS_DESCSEQ: GumElfArmRelocation = 92;
pub const GumElfArmRelocation_GUM_ELF_ARM_THM_TLS_CALL: GumElfArmRelocation = 93;
pub const GumElfArmRelocation_GUM_ELF_ARM_PLT32_ABS: GumElfArmRelocation = 94;
pub const GumElfArmRelocation_GUM_ELF_ARM_GOT_ABS: GumElfArmRelocation = 95;
pub const GumElfArmRelocation_GUM_ELF_ARM_GOT_PREL: GumElfArmRelocation = 96;
pub const GumElfArmRelocation_GUM_ELF_ARM_GOT_BREL12: GumElfArmRelocation = 97;
pub const GumElfArmRelocation_GUM_ELF_ARM_GOTOFF12: GumElfArmRelocation = 98;
pub const GumElfArmRelocation_GUM_ELF_ARM_GOTRELAX: GumElfArmRelocation = 99;
pub const GumElfArmRelocation_GUM_ELF_ARM_GNU_VTENTRY: GumElfArmRelocation = 100;
pub const GumElfArmRelocation_GUM_ELF_ARM_GNU_VTINHERIT: GumElfArmRelocation = 101;
pub const GumElfArmRelocation_GUM_ELF_ARM_THM_PC11: GumElfArmRelocation = 102;
pub const GumElfArmRelocation_GUM_ELF_ARM_THM_PC9: GumElfArmRelocation = 103;
pub const GumElfArmRelocation_GUM_ELF_ARM_TLS_GD32: GumElfArmRelocation = 104;
pub const GumElfArmRelocation_GUM_ELF_ARM_TLS_LDM32: GumElfArmRelocation = 105;
pub const GumElfArmRelocation_GUM_ELF_ARM_TLS_LDO32: GumElfArmRelocation = 106;
pub const GumElfArmRelocation_GUM_ELF_ARM_TLS_IE32: GumElfArmRelocation = 107;
pub const GumElfArmRelocation_GUM_ELF_ARM_TLS_LE32: GumElfArmRelocation = 108;
pub const GumElfArmRelocation_GUM_ELF_ARM_TLS_LDO12: GumElfArmRelocation = 109;
pub const GumElfArmRelocation_GUM_ELF_ARM_TLS_LE12: GumElfArmRelocation = 110;
pub const GumElfArmRelocation_GUM_ELF_ARM_TLS_IE12GP: GumElfArmRelocation = 111;
pub const GumElfArmRelocation_GUM_ELF_ARM_ME_TOO: GumElfArmRelocation = 128;
pub const GumElfArmRelocation_GUM_ELF_ARM_THM_TLS_DESCSEQ: GumElfArmRelocation = 129;
pub const GumElfArmRelocation_GUM_ELF_ARM_THM_TLS_DESCSEQ16: GumElfArmRelocation = 129;
pub const GumElfArmRelocation_GUM_ELF_ARM_THM_TLS_DESCSEQ32: GumElfArmRelocation = 130;
pub const GumElfArmRelocation_GUM_ELF_ARM_THM_GOT_BREL12: GumElfArmRelocation = 131;
pub const GumElfArmRelocation_GUM_ELF_ARM_IRELATIVE: GumElfArmRelocation = 160;
pub const GumElfArmRelocation_GUM_ELF_ARM_RXPC25: GumElfArmRelocation = 249;
pub const GumElfArmRelocation_GUM_ELF_ARM_RSBREL32: GumElfArmRelocation = 250;
pub const GumElfArmRelocation_GUM_ELF_ARM_THM_RPC22: GumElfArmRelocation = 251;
pub const GumElfArmRelocation_GUM_ELF_ARM_RREL32: GumElfArmRelocation = 252;
pub const GumElfArmRelocation_GUM_ELF_ARM_RABS22: GumElfArmRelocation = 253;
pub const GumElfArmRelocation_GUM_ELF_ARM_RPC24: GumElfArmRelocation = 254;
pub const GumElfArmRelocation_GUM_ELF_ARM_RBASE: GumElfArmRelocation = 255;
pub type GumElfArmRelocation = ::core::ffi::c_uint;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_NONE: GumElfArm64Relocation = 0;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_P32_ABS32: GumElfArm64Relocation = 1;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_P32_COPY: GumElfArm64Relocation = 180;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_P32_GLOB_DAT: GumElfArm64Relocation = 181;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_P32_JUMP_SLOT: GumElfArm64Relocation = 182;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_P32_RELATIVE: GumElfArm64Relocation = 183;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_P32_TLS_DTPMOD: GumElfArm64Relocation = 184;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_P32_TLS_DTPREL: GumElfArm64Relocation = 185;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_P32_TLS_TPREL: GumElfArm64Relocation = 186;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_P32_TLSDESC: GumElfArm64Relocation = 187;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_P32_IRELATIVE: GumElfArm64Relocation = 188;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_ABS64: GumElfArm64Relocation = 257;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_ABS32: GumElfArm64Relocation = 258;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_ABS16: GumElfArm64Relocation = 259;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_PREL64: GumElfArm64Relocation = 260;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_PREL32: GumElfArm64Relocation = 261;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_PREL16: GumElfArm64Relocation = 262;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_MOVW_UABS_G0: GumElfArm64Relocation = 263;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_MOVW_UABS_G0_NC: GumElfArm64Relocation = 264;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_MOVW_UABS_G1: GumElfArm64Relocation = 265;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_MOVW_UABS_G1_NC: GumElfArm64Relocation = 266;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_MOVW_UABS_G2: GumElfArm64Relocation = 267;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_MOVW_UABS_G2_NC: GumElfArm64Relocation = 268;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_MOVW_UABS_G3: GumElfArm64Relocation = 269;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_MOVW_SABS_G0: GumElfArm64Relocation = 270;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_MOVW_SABS_G1: GumElfArm64Relocation = 271;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_MOVW_SABS_G2: GumElfArm64Relocation = 272;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_LD_PREL_LO19: GumElfArm64Relocation = 273;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_ADR_PREL_LO21: GumElfArm64Relocation = 274;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_ADR_PREL_PG_HI21: GumElfArm64Relocation = 275;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_ADR_PREL_PG_HI21_NC: GumElfArm64Relocation = 276;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_ADD_ABS_LO12_NC: GumElfArm64Relocation = 277;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_LDST8_ABS_LO12_NC: GumElfArm64Relocation = 278;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TSTBR14: GumElfArm64Relocation = 279;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_CONDBR19: GumElfArm64Relocation = 280;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_JUMP26: GumElfArm64Relocation = 282;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_CALL26: GumElfArm64Relocation = 283;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_LDST16_ABS_LO12_NC: GumElfArm64Relocation = 284;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_LDST32_ABS_LO12_NC: GumElfArm64Relocation = 285;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_LDST64_ABS_LO12_NC: GumElfArm64Relocation = 286;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_MOVW_PREL_G0: GumElfArm64Relocation = 287;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_MOVW_PREL_G0_NC: GumElfArm64Relocation = 288;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_MOVW_PREL_G1: GumElfArm64Relocation = 289;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_MOVW_PREL_G1_NC: GumElfArm64Relocation = 290;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_MOVW_PREL_G2: GumElfArm64Relocation = 291;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_MOVW_PREL_G2_NC: GumElfArm64Relocation = 292;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_MOVW_PREL_G3: GumElfArm64Relocation = 293;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_LDST128_ABS_LO12_NC: GumElfArm64Relocation = 299;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_MOVW_GOTOFF_G0: GumElfArm64Relocation = 300;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_MOVW_GOTOFF_G0_NC: GumElfArm64Relocation = 301;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_MOVW_GOTOFF_G1: GumElfArm64Relocation = 302;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_MOVW_GOTOFF_G1_NC: GumElfArm64Relocation = 303;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_MOVW_GOTOFF_G2: GumElfArm64Relocation = 304;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_MOVW_GOTOFF_G2_NC: GumElfArm64Relocation = 305;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_MOVW_GOTOFF_G3: GumElfArm64Relocation = 306;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_GOTREL64: GumElfArm64Relocation = 307;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_GOTREL32: GumElfArm64Relocation = 308;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_GOT_LD_PREL19: GumElfArm64Relocation = 309;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_LD64_GOTOFF_LO15: GumElfArm64Relocation = 310;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_ADR_GOT_PAGE: GumElfArm64Relocation = 311;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_LD64_GOT_LO12_NC: GumElfArm64Relocation = 312;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_LD64_GOTPAGE_LO15: GumElfArm64Relocation = 313;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSGD_ADR_PREL21: GumElfArm64Relocation = 512;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSGD_ADR_PAGE21: GumElfArm64Relocation = 513;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSGD_ADD_LO12_NC: GumElfArm64Relocation = 514;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSGD_MOVW_G1: GumElfArm64Relocation = 515;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSGD_MOVW_G0_NC: GumElfArm64Relocation = 516;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLD_ADR_PREL21: GumElfArm64Relocation = 517;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLD_ADR_PAGE21: GumElfArm64Relocation = 518;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLD_ADD_LO12_NC: GumElfArm64Relocation = 519;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLD_MOVW_G1: GumElfArm64Relocation = 520;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLD_MOVW_G0_NC: GumElfArm64Relocation = 521;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLD_LD_PREL19: GumElfArm64Relocation = 522;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLD_MOVW_DTPREL_G2: GumElfArm64Relocation = 523;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLD_MOVW_DTPREL_G1: GumElfArm64Relocation = 524;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLD_MOVW_DTPREL_G1_NC: GumElfArm64Relocation = 525;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLD_MOVW_DTPREL_G0: GumElfArm64Relocation = 526;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLD_MOVW_DTPREL_G0_NC: GumElfArm64Relocation = 527;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLD_ADD_DTPREL_HI12: GumElfArm64Relocation = 528;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLD_ADD_DTPREL_LO12: GumElfArm64Relocation = 529;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLD_ADD_DTPREL_LO12_NC: GumElfArm64Relocation = 530;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLD_LDST8_DTPREL_LO12: GumElfArm64Relocation = 531;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLD_LDST8_DTPREL_LO12_NC: GumElfArm64Relocation =
    532;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLD_LDST16_DTPREL_LO12: GumElfArm64Relocation = 533;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLD_LDST16_DTPREL_LO12_NC: GumElfArm64Relocation =
    534;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLD_LDST32_DTPREL_LO12: GumElfArm64Relocation = 535;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLD_LDST32_DTPREL_LO12_NC: GumElfArm64Relocation =
    536;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLD_LDST64_DTPREL_LO12: GumElfArm64Relocation = 537;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLD_LDST64_DTPREL_LO12_NC: GumElfArm64Relocation =
    538;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSIE_MOVW_GOTTPREL_G1: GumElfArm64Relocation = 539;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSIE_MOVW_GOTTPREL_G0_NC: GumElfArm64Relocation =
    540;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSIE_ADR_GOTTPREL_PAGE21: GumElfArm64Relocation =
    541;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSIE_LD64_GOTTPREL_LO12_NC: GumElfArm64Relocation =
    542;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSIE_LD_GOTTPREL_PREL19: GumElfArm64Relocation = 543;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLE_MOVW_TPREL_G2: GumElfArm64Relocation = 544;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLE_MOVW_TPREL_G1: GumElfArm64Relocation = 545;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLE_MOVW_TPREL_G1_NC: GumElfArm64Relocation = 546;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLE_MOVW_TPREL_G0: GumElfArm64Relocation = 547;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLE_MOVW_TPREL_G0_NC: GumElfArm64Relocation = 548;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLE_ADD_TPREL_HI12: GumElfArm64Relocation = 549;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLE_ADD_TPREL_LO12: GumElfArm64Relocation = 550;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLE_ADD_TPREL_LO12_NC: GumElfArm64Relocation = 551;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLE_LDST8_TPREL_LO12: GumElfArm64Relocation = 552;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLE_LDST8_TPREL_LO12_NC: GumElfArm64Relocation =
    553;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLE_LDST16_TPREL_LO12: GumElfArm64Relocation = 554;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLE_LDST16_TPREL_LO12_NC: GumElfArm64Relocation =
    555;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLE_LDST32_TPREL_LO12: GumElfArm64Relocation = 556;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLE_LDST32_TPREL_LO12_NC: GumElfArm64Relocation =
    557;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLE_LDST64_TPREL_LO12: GumElfArm64Relocation = 558;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLE_LDST64_TPREL_LO12_NC: GumElfArm64Relocation =
    559;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSDESC_LD_PREL19: GumElfArm64Relocation = 560;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSDESC_ADR_PREL21: GumElfArm64Relocation = 561;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSDESC_ADR_PAGE21: GumElfArm64Relocation = 562;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSDESC_LD64_LO12: GumElfArm64Relocation = 563;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSDESC_ADD_LO12: GumElfArm64Relocation = 564;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSDESC_OFF_G1: GumElfArm64Relocation = 565;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSDESC_OFF_G0_NC: GumElfArm64Relocation = 566;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSDESC_LDR: GumElfArm64Relocation = 567;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSDESC_ADD: GumElfArm64Relocation = 568;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSDESC_CALL: GumElfArm64Relocation = 569;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLE_LDST128_TPREL_LO12: GumElfArm64Relocation = 570;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLE_LDST128_TPREL_LO12_NC: GumElfArm64Relocation =
    571;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLD_LDST128_DTPREL_LO12: GumElfArm64Relocation =
    572;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSLD_LDST128_DTPREL_LO12_NC: GumElfArm64Relocation =
    573;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_COPY: GumElfArm64Relocation = 1024;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_GLOB_DAT: GumElfArm64Relocation = 1025;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_JUMP_SLOT: GumElfArm64Relocation = 1026;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_RELATIVE: GumElfArm64Relocation = 1027;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLS_DTPMOD: GumElfArm64Relocation = 1028;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLS_DTPREL: GumElfArm64Relocation = 1029;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLS_TPREL: GumElfArm64Relocation = 1030;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_TLSDESC: GumElfArm64Relocation = 1031;
pub const GumElfArm64Relocation_GUM_ELF_ARM64_IRELATIVE: GumElfArm64Relocation = 1032;
pub type GumElfArm64Relocation = ::core::ffi::c_uint;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_NONE: GumElfMipsRelocation = 0;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_16: GumElfMipsRelocation = 1;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_32: GumElfMipsRelocation = 2;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_REL32: GumElfMipsRelocation = 3;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_26: GumElfMipsRelocation = 4;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_HI16: GumElfMipsRelocation = 5;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_LO16: GumElfMipsRelocation = 6;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_GPREL16: GumElfMipsRelocation = 7;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_LITERAL: GumElfMipsRelocation = 8;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_GOT16: GumElfMipsRelocation = 9;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_PC16: GumElfMipsRelocation = 10;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_CALL16: GumElfMipsRelocation = 11;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_GPREL32: GumElfMipsRelocation = 12;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_SHIFT5: GumElfMipsRelocation = 16;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_SHIFT6: GumElfMipsRelocation = 17;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_64: GumElfMipsRelocation = 18;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_GOT_DISP: GumElfMipsRelocation = 19;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_GOT_PAGE: GumElfMipsRelocation = 20;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_GOT_OFST: GumElfMipsRelocation = 21;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_GOT_HI16: GumElfMipsRelocation = 22;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_GOT_LO16: GumElfMipsRelocation = 23;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_SUB: GumElfMipsRelocation = 24;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_INSERT_A: GumElfMipsRelocation = 25;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_INSERT_B: GumElfMipsRelocation = 26;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_DELETE: GumElfMipsRelocation = 27;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_HIGHER: GumElfMipsRelocation = 28;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_HIGHEST: GumElfMipsRelocation = 29;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_CALL_HI16: GumElfMipsRelocation = 30;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_CALL_LO16: GumElfMipsRelocation = 31;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_SCN_DISP: GumElfMipsRelocation = 32;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_REL16: GumElfMipsRelocation = 33;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_ADD_IMMEDIATE: GumElfMipsRelocation = 34;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_PJUMP: GumElfMipsRelocation = 35;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_RELGOT: GumElfMipsRelocation = 36;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_JALR: GumElfMipsRelocation = 37;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_TLS_DTPMOD32: GumElfMipsRelocation = 38;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_TLS_DTPREL32: GumElfMipsRelocation = 39;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_TLS_DTPMOD64: GumElfMipsRelocation = 40;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_TLS_DTPREL64: GumElfMipsRelocation = 41;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_TLS_GD: GumElfMipsRelocation = 42;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_TLS_LDM: GumElfMipsRelocation = 43;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_TLS_DTPREL_HI16: GumElfMipsRelocation = 44;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_TLS_DTPREL_LO16: GumElfMipsRelocation = 45;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_TLS_GOTTPREL: GumElfMipsRelocation = 46;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_TLS_TPREL32: GumElfMipsRelocation = 47;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_TLS_TPREL64: GumElfMipsRelocation = 48;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_TLS_TPREL_HI16: GumElfMipsRelocation = 49;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_TLS_TPREL_LO16: GumElfMipsRelocation = 50;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_GLOB_DAT: GumElfMipsRelocation = 51;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_COPY: GumElfMipsRelocation = 126;
pub const GumElfMipsRelocation_GUM_ELF_MIPS_JUMP_SLOT: GumElfMipsRelocation = 127;
pub type GumElfMipsRelocation = ::core::ffi::c_uint;
pub type GumElfSegmentDetails = _GumElfSegmentDetails;
pub type GumElfSectionDetails = _GumElfSectionDetails;
pub type GumElfRelocationDetails = _GumElfRelocationDetails;
pub type GumElfDynamicEntryDetails = _GumElfDynamicEntryDetails;
pub type GumElfSymbolDetails = _GumElfSymbolDetails;
pub type GumFoundElfSegmentFunc = ::core::option::Option<
    unsafe extern "C" fn(details: *const GumElfSegmentDetails, user_data: gpointer) -> gboolean,
>;
pub type GumFoundElfSectionFunc = ::core::option::Option<
    unsafe extern "C" fn(details: *const GumElfSectionDetails, user_data: gpointer) -> gboolean,
>;
pub type GumFoundElfRelocationFunc = ::core::option::Option<
    unsafe extern "C" fn(details: *const GumElfRelocationDetails, user_data: gpointer) -> gboolean,
>;
pub type GumFoundElfDynamicEntryFunc = ::core::option::Option<
    unsafe extern "C" fn(
        details: *const GumElfDynamicEntryDetails,
        user_data: gpointer,
    ) -> gboolean,
>;
pub type GumFoundElfSymbolFunc = ::core::option::Option<
    unsafe extern "C" fn(details: *const GumElfSymbolDetails, user_data: gpointer) -> gboolean,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumElfSegmentDetails {
    pub vm_address: GumAddress,
    pub vm_size: guint64,
    pub file_offset: guint64,
    pub file_size: guint64,
    pub protection: GumPageProtection,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumElfSectionDetails {
    pub id: *const gchar,
    pub name: *const gchar,
    pub type_: GumElfSectionType,
    pub flags: guint64,
    pub address: GumAddress,
    pub offset: guint64,
    pub size: gsize,
    pub link: guint32,
    pub info: guint32,
    pub alignment: guint64,
    pub entry_size: guint64,
    pub protection: GumPageProtection,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumElfRelocationDetails {
    pub address: GumAddress,
    pub type_: guint32,
    pub symbol: *const GumElfSymbolDetails,
    pub addend: gint64,
    pub parent: *const GumElfSectionDetails,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumElfDynamicEntryDetails {
    pub tag: GumElfDynamicTag,
    pub val: guint64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumElfSymbolDetails {
    pub name: *const gchar,
    pub address: GumAddress,
    pub size: gsize,
    pub type_: GumElfSymbolType,
    pub bind: GumElfSymbolBind,
    pub shdr_index: guint16,
    pub section: *const GumElfSectionDetails,
}
extern "C" {
    pub fn gum_elf_module_new_from_file(
        path: *const gchar,
        error: *mut *mut GError,
    ) -> *mut GumElfModule;
}
extern "C" {
    pub fn gum_elf_module_new_from_blob(
        blob: *mut GBytes,
        error: *mut *mut GError,
    ) -> *mut GumElfModule;
}
extern "C" {
    pub fn gum_elf_module_new_from_memory(
        path: *const gchar,
        base_address: GumAddress,
        error: *mut *mut GError,
    ) -> *mut GumElfModule;
}
extern "C" {
    pub fn gum_elf_module_load(self_: *mut GumElfModule, error: *mut *mut GError) -> gboolean;
}
extern "C" {
    pub fn gum_elf_module_get_etype(self_: *mut GumElfModule) -> GumElfType;
}
extern "C" {
    pub fn gum_elf_module_get_pointer_size(self_: *mut GumElfModule) -> guint;
}
extern "C" {
    pub fn gum_elf_module_get_byte_order(self_: *mut GumElfModule) -> gint;
}
extern "C" {
    pub fn gum_elf_module_get_os_abi(self_: *mut GumElfModule) -> GumElfOSABI;
}
extern "C" {
    pub fn gum_elf_module_get_os_abi_version(self_: *mut GumElfModule) -> guint8;
}
extern "C" {
    pub fn gum_elf_module_get_machine(self_: *mut GumElfModule) -> GumElfMachine;
}
extern "C" {
    pub fn gum_elf_module_get_base_address(self_: *mut GumElfModule) -> GumAddress;
}
extern "C" {
    pub fn gum_elf_module_get_preferred_address(self_: *mut GumElfModule) -> GumAddress;
}
extern "C" {
    pub fn gum_elf_module_get_mapped_size(self_: *mut GumElfModule) -> guint64;
}
extern "C" {
    pub fn gum_elf_module_get_entrypoint(self_: *mut GumElfModule) -> GumAddress;
}
extern "C" {
    pub fn gum_elf_module_get_interpreter(self_: *mut GumElfModule) -> *const gchar;
}
extern "C" {
    pub fn gum_elf_module_get_source_path(self_: *mut GumElfModule) -> *const gchar;
}
extern "C" {
    pub fn gum_elf_module_get_source_blob(self_: *mut GumElfModule) -> *mut GBytes;
}
extern "C" {
    pub fn gum_elf_module_get_source_mode(self_: *mut GumElfModule) -> GumElfSourceMode;
}
extern "C" {
    pub fn gum_elf_module_get_file_data(
        self_: *mut GumElfModule,
        size: *mut gsize,
    ) -> gconstpointer;
}
extern "C" {
    pub fn gum_elf_module_enumerate_segments(
        self_: *mut GumElfModule,
        func: GumFoundElfSegmentFunc,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn gum_elf_module_enumerate_sections(
        self_: *mut GumElfModule,
        func: GumFoundElfSectionFunc,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn gum_elf_module_enumerate_relocations(
        self_: *mut GumElfModule,
        func: GumFoundElfRelocationFunc,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn gum_elf_module_enumerate_dynamic_entries(
        self_: *mut GumElfModule,
        func: GumFoundElfDynamicEntryFunc,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn gum_elf_module_enumerate_imports(
        self_: *mut GumElfModule,
        func: GumFoundImportFunc,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn gum_elf_module_enumerate_exports(
        self_: *mut GumElfModule,
        func: GumFoundExportFunc,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn gum_elf_module_enumerate_dynamic_symbols(
        self_: *mut GumElfModule,
        func: GumFoundElfSymbolFunc,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn gum_elf_module_enumerate_symbols(
        self_: *mut GumElfModule,
        func: GumFoundElfSymbolFunc,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn gum_elf_module_enumerate_dependencies(
        self_: *mut GumElfModule,
        func: GumFoundDependencyFunc,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn gum_elf_module_translate_to_offline(
        self_: *mut GumElfModule,
        online_address: GumAddress,
    ) -> GumAddress;
}
extern "C" {
    pub fn gum_elf_module_translate_to_online(
        self_: *mut GumElfModule,
        offline_address: GumAddress,
    ) -> GumAddress;
}
pub type GumEventType = guint;
pub type GumEvent = _GumEvent;
pub type GumAnyEvent = _GumAnyEvent;
pub type GumCallEvent = _GumCallEvent;
pub type GumRetEvent = _GumRetEvent;
pub type GumExecEvent = _GumExecEvent;
pub type GumBlockEvent = _GumBlockEvent;
pub type GumCompileEvent = _GumCompileEvent;
pub const _GumEventType_GUM_NOTHING: _GumEventType = 0;
pub const _GumEventType_GUM_CALL: _GumEventType = 1;
pub const _GumEventType_GUM_RET: _GumEventType = 2;
pub const _GumEventType_GUM_EXEC: _GumEventType = 4;
pub const _GumEventType_GUM_BLOCK: _GumEventType = 8;
pub const _GumEventType_GUM_COMPILE: _GumEventType = 16;
pub type _GumEventType = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumAnyEvent {
    pub type_: GumEventType,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumCallEvent {
    pub type_: GumEventType,
    pub location: gpointer,
    pub target: gpointer,
    pub depth: gint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumRetEvent {
    pub type_: GumEventType,
    pub location: gpointer,
    pub target: gpointer,
    pub depth: gint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumExecEvent {
    pub type_: GumEventType,
    pub location: gpointer,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumBlockEvent {
    pub type_: GumEventType,
    pub start: gpointer,
    pub end: gpointer,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumCompileEvent {
    pub type_: GumEventType,
    pub start: gpointer,
    pub end: gpointer,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _GumEvent {
    pub type_: GumEventType,
    pub any: GumAnyEvent,
    pub call: GumCallEvent,
    pub ret: GumRetEvent,
    pub exec: GumExecEvent,
    pub block: GumBlockEvent,
    pub compile: GumCompileEvent,
}
extern "C" {
    pub fn gum_event_sink_get_type() -> GType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumEventSink {
    _unused: [u8; 0],
}
pub type GumEventSink = _GumEventSink;
pub type GumEventSinkInterface = _GumEventSinkInterface;
pub type GumEventSink_autoptr = *mut GumEventSink;
pub type GumEventSink_listautoptr = *mut GList;
pub type GumEventSink_slistautoptr = *mut GSList;
pub type GumEventSink_queueautoptr = *mut GQueue;
extern "C" {
    pub fn gum_default_event_sink_get_type() -> GType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumDefaultEventSink {
    _unused: [u8; 0],
}
pub type GumDefaultEventSink = _GumDefaultEventSink;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GumDefaultEventSinkClass {
    pub parent_class: GObjectClass,
}
pub type GumDefaultEventSink_autoptr = *mut GumDefaultEventSink;
pub type GumDefaultEventSink_listautoptr = *mut GList;
pub type GumDefaultEventSink_slistautoptr = *mut GSList;
pub type GumDefaultEventSink_queueautoptr = *mut GQueue;
pub type GumDefaultEventSinkClass_autoptr = *mut GumDefaultEventSinkClass;
pub type GumDefaultEventSinkClass_listautoptr = *mut GList;
pub type GumDefaultEventSinkClass_slistautoptr = *mut GSList;
pub type GumDefaultEventSinkClass_queueautoptr = *mut GQueue;
extern "C" {
    pub fn gum_callback_event_sink_get_type() -> GType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumCallbackEventSink {
    _unused: [u8; 0],
}
pub type GumCallbackEventSink = _GumCallbackEventSink;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GumCallbackEventSinkClass {
    pub parent_class: GObjectClass,
}
pub type GumCallbackEventSink_autoptr = *mut GumCallbackEventSink;
pub type GumCallbackEventSink_listautoptr = *mut GList;
pub type GumCallbackEventSink_slistautoptr = *mut GSList;
pub type GumCallbackEventSink_queueautoptr = *mut GQueue;
pub type GumCallbackEventSinkClass_autoptr = *mut GumCallbackEventSinkClass;
pub type GumCallbackEventSinkClass_listautoptr = *mut GList;
pub type GumCallbackEventSinkClass_slistautoptr = *mut GSList;
pub type GumCallbackEventSinkClass_queueautoptr = *mut GQueue;
pub type GumEventSinkCallback = ::core::option::Option<
    unsafe extern "C" fn(
        event: *const GumEvent,
        cpu_context: *mut GumCpuContext,
        user_data: gpointer,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumEventSinkInterface {
    pub parent: GTypeInterface,
    pub query_mask:
        ::core::option::Option<unsafe extern "C" fn(self_: *mut GumEventSink) -> GumEventType>,
    pub start: ::core::option::Option<unsafe extern "C" fn(self_: *mut GumEventSink)>,
    pub process: ::core::option::Option<
        unsafe extern "C" fn(
            self_: *mut GumEventSink,
            event: *const GumEvent,
            cpu_context: *mut GumCpuContext,
        ),
    >,
    pub flush: ::core::option::Option<unsafe extern "C" fn(self_: *mut GumEventSink)>,
    pub stop: ::core::option::Option<unsafe extern "C" fn(self_: *mut GumEventSink)>,
}
extern "C" {
    pub fn gum_event_sink_query_mask(self_: *mut GumEventSink) -> GumEventType;
}
extern "C" {
    pub fn gum_event_sink_start(self_: *mut GumEventSink);
}
extern "C" {
    pub fn gum_event_sink_process(
        self_: *mut GumEventSink,
        event: *const GumEvent,
        cpu_context: *mut GumCpuContext,
    );
}
extern "C" {
    pub fn gum_event_sink_flush(self_: *mut GumEventSink);
}
extern "C" {
    pub fn gum_event_sink_stop(self_: *mut GumEventSink);
}
extern "C" {
    pub fn gum_event_sink_make_default() -> *mut GumEventSink;
}
extern "C" {
    pub fn gum_event_sink_make_from_callback(
        mask: GumEventType,
        callback: GumEventSinkCallback,
        data: gpointer,
        data_destroy: GDestroyNotify,
    ) -> *mut GumEventSink;
}
pub type sigjmp_buf = [::core::ffi::c_long; 33usize];
pub type jmp_buf = [::core::ffi::c_long; 32usize];
extern "C" {
    pub fn _setjmp(__env: *mut ::core::ffi::c_long) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _longjmp(__env: *mut ::core::ffi::c_long, __value: ::core::ffi::c_int) -> !;
}
extern "C" {
    pub fn setjmp(__env: *mut ::core::ffi::c_long) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn longjmp(__env: *mut ::core::ffi::c_long, __value: ::core::ffi::c_int) -> !;
}
extern "C" {
    pub fn sigsetjmp(
        __env: *mut ::core::ffi::c_long,
        __save_signal_mask: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn siglongjmp(__env: *mut ::core::ffi::c_long, __value: ::core::ffi::c_int) -> !;
}
extern "C" {
    pub fn gum_exceptor_get_type() -> GType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumExceptor {
    _unused: [u8; 0],
}
pub type GumExceptor = _GumExceptor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GumExceptorClass {
    pub parent_class: GObjectClass,
}
pub type GumExceptor_autoptr = *mut GumExceptor;
pub type GumExceptor_listautoptr = *mut GList;
pub type GumExceptor_slistautoptr = *mut GSList;
pub type GumExceptor_queueautoptr = *mut GQueue;
pub type GumExceptorClass_autoptr = *mut GumExceptorClass;
pub type GumExceptorClass_listautoptr = *mut GList;
pub type GumExceptorClass_slistautoptr = *mut GSList;
pub type GumExceptorClass_queueautoptr = *mut GQueue;
pub type GumExceptorNativeJmpBuf = sigjmp_buf;
pub type GumExceptionDetails = _GumExceptionDetails;
pub type GumExceptionType = guint;
pub type GumExceptionMemoryDetails = _GumExceptionMemoryDetails;
pub type GumExceptionHandler = ::core::option::Option<
    unsafe extern "C" fn(details: *mut GumExceptionDetails, user_data: gpointer) -> gboolean,
>;
pub type GumExceptorScope = _GumExceptorScope;
pub const _GumExceptionType_GUM_EXCEPTION_ABORT: _GumExceptionType = 1;
pub const _GumExceptionType_GUM_EXCEPTION_ACCESS_VIOLATION: _GumExceptionType = 2;
pub const _GumExceptionType_GUM_EXCEPTION_GUARD_PAGE: _GumExceptionType = 3;
pub const _GumExceptionType_GUM_EXCEPTION_ILLEGAL_INSTRUCTION: _GumExceptionType = 4;
pub const _GumExceptionType_GUM_EXCEPTION_STACK_OVERFLOW: _GumExceptionType = 5;
pub const _GumExceptionType_GUM_EXCEPTION_ARITHMETIC: _GumExceptionType = 6;
pub const _GumExceptionType_GUM_EXCEPTION_BREAKPOINT: _GumExceptionType = 7;
pub const _GumExceptionType_GUM_EXCEPTION_SINGLE_STEP: _GumExceptionType = 8;
pub const _GumExceptionType_GUM_EXCEPTION_SYSTEM: _GumExceptionType = 9;
pub type _GumExceptionType = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumExceptionMemoryDetails {
    pub operation: GumMemoryOperation,
    pub address: gpointer,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _GumExceptionDetails {
    pub thread_id: GumThreadId,
    pub type_: GumExceptionType,
    pub address: gpointer,
    pub memory: GumExceptionMemoryDetails,
    pub context: GumCpuContext,
    pub native_context: gpointer,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _GumExceptorScope {
    pub exception: GumExceptionDetails,
    pub exception_occurred: gboolean,
    pub padding: [gpointer; 2usize],
    pub env: GumExceptorNativeJmpBuf,
    pub mask: sigset_t,
    pub next: *mut GumExceptorScope,
}
extern "C" {
    pub fn gum_exceptor_disable();
}
extern "C" {
    pub fn gum_exceptor_obtain() -> *mut GumExceptor;
}
extern "C" {
    pub fn gum_exceptor_reset(self_: *mut GumExceptor);
}
extern "C" {
    pub fn gum_exceptor_add(
        self_: *mut GumExceptor,
        func: GumExceptionHandler,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn gum_exceptor_remove(
        self_: *mut GumExceptor,
        func: GumExceptionHandler,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn gum_exceptor_catch(self_: *mut GumExceptor, scope: *mut GumExceptorScope) -> gboolean;
}
extern "C" {
    pub fn gum_exceptor_has_scope(self_: *mut GumExceptor, thread_id: GumThreadId) -> gboolean;
}
extern "C" {
    pub fn gum_exception_details_to_string(details: *const GumExceptionDetails) -> *mut gchar;
}
extern "C" {
    pub fn _gum_exceptor_prepare_try(self_: *mut GumExceptor, scope: *mut GumExceptorScope);
}
pub type GumFunctionDetails = _GumFunctionDetails;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumFunctionDetails {
    pub name: *const gchar,
    pub address: gpointer,
    pub num_arguments: gint,
}
pub type GumInvocationBackend = _GumInvocationBackend;
pub type GumInvocationContext = _GumInvocationContext;
pub type GumPointCut = guint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumInvocationBackend {
    pub get_point_cut: ::core::option::Option<
        unsafe extern "C" fn(context: *mut GumInvocationContext) -> GumPointCut,
    >,
    pub get_thread_id: ::core::option::Option<
        unsafe extern "C" fn(context: *mut GumInvocationContext) -> GumThreadId,
    >,
    pub get_depth:
        ::core::option::Option<unsafe extern "C" fn(context: *mut GumInvocationContext) -> guint>,
    pub get_listener_thread_data: ::core::option::Option<
        unsafe extern "C" fn(context: *mut GumInvocationContext, required_size: gsize) -> gpointer,
    >,
    pub get_listener_function_data: ::core::option::Option<
        unsafe extern "C" fn(context: *mut GumInvocationContext) -> gpointer,
    >,
    pub get_listener_invocation_data: ::core::option::Option<
        unsafe extern "C" fn(context: *mut GumInvocationContext, required_size: gsize) -> gpointer,
    >,
    pub get_replacement_data: ::core::option::Option<
        unsafe extern "C" fn(context: *mut GumInvocationContext) -> gpointer,
    >,
    pub state: gpointer,
    pub data: gpointer,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumInvocationContext {
    pub function: gpointer,
    pub cpu_context: *mut GumCpuContext,
    pub system_error: gint,
    pub backend: *mut GumInvocationBackend,
}
pub const _GumPointCut_GUM_POINT_ENTER: _GumPointCut = 0;
pub const _GumPointCut_GUM_POINT_LEAVE: _GumPointCut = 1;
pub type _GumPointCut = ::core::ffi::c_uint;
extern "C" {
    pub fn gum_invocation_context_get_point_cut(context: *mut GumInvocationContext) -> GumPointCut;
}
extern "C" {
    pub fn gum_invocation_context_get_nth_argument(
        context: *mut GumInvocationContext,
        n: guint,
    ) -> gpointer;
}
extern "C" {
    pub fn gum_invocation_context_replace_nth_argument(
        context: *mut GumInvocationContext,
        n: guint,
        value: gpointer,
    );
}
extern "C" {
    pub fn gum_invocation_context_get_return_value(context: *mut GumInvocationContext) -> gpointer;
}
extern "C" {
    pub fn gum_invocation_context_replace_return_value(
        context: *mut GumInvocationContext,
        value: gpointer,
    );
}
extern "C" {
    pub fn gum_invocation_context_get_return_address(
        context: *mut GumInvocationContext,
    ) -> gpointer;
}
extern "C" {
    pub fn gum_invocation_context_get_thread_id(context: *mut GumInvocationContext) -> guint;
}
extern "C" {
    pub fn gum_invocation_context_get_depth(context: *mut GumInvocationContext) -> guint;
}
extern "C" {
    pub fn gum_invocation_context_get_listener_thread_data(
        context: *mut GumInvocationContext,
        required_size: gsize,
    ) -> gpointer;
}
extern "C" {
    pub fn gum_invocation_context_get_listener_function_data(
        context: *mut GumInvocationContext,
    ) -> gpointer;
}
extern "C" {
    pub fn gum_invocation_context_get_listener_invocation_data(
        context: *mut GumInvocationContext,
        required_size: gsize,
    ) -> gpointer;
}
extern "C" {
    pub fn gum_invocation_context_get_replacement_data(
        context: *mut GumInvocationContext,
    ) -> gpointer;
}
extern "C" {
    pub fn gum_invocation_listener_get_type() -> GType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumInvocationListener {
    _unused: [u8; 0],
}
pub type GumInvocationListener = _GumInvocationListener;
pub type GumInvocationListenerInterface = _GumInvocationListenerInterface;
pub type GumInvocationListener_autoptr = *mut GumInvocationListener;
pub type GumInvocationListener_listautoptr = *mut GList;
pub type GumInvocationListener_slistautoptr = *mut GSList;
pub type GumInvocationListener_queueautoptr = *mut GQueue;
pub type GumInvocationCallback = ::core::option::Option<
    unsafe extern "C" fn(context: *mut GumInvocationContext, user_data: gpointer),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumInvocationListenerInterface {
    pub parent: GTypeInterface,
    pub on_enter: ::core::option::Option<
        unsafe extern "C" fn(self_: *mut GumInvocationListener, context: *mut GumInvocationContext),
    >,
    pub on_leave: ::core::option::Option<
        unsafe extern "C" fn(self_: *mut GumInvocationListener, context: *mut GumInvocationContext),
    >,
}
extern "C" {
    pub fn gum_make_call_listener(
        on_enter: GumInvocationCallback,
        on_leave: GumInvocationCallback,
        data: gpointer,
        data_destroy: GDestroyNotify,
    ) -> *mut GumInvocationListener;
}
extern "C" {
    pub fn gum_make_probe_listener(
        on_hit: GumInvocationCallback,
        data: gpointer,
        data_destroy: GDestroyNotify,
    ) -> *mut GumInvocationListener;
}
extern "C" {
    pub fn gum_invocation_listener_on_enter(
        self_: *mut GumInvocationListener,
        context: *mut GumInvocationContext,
    );
}
extern "C" {
    pub fn gum_invocation_listener_on_leave(
        self_: *mut GumInvocationListener,
        context: *mut GumInvocationContext,
    );
}
extern "C" {
    pub fn gum_interceptor_get_type() -> GType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumInterceptor {
    _unused: [u8; 0],
}
pub type GumInterceptor = _GumInterceptor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GumInterceptorClass {
    pub parent_class: GObjectClass,
}
pub type GumInterceptor_autoptr = *mut GumInterceptor;
pub type GumInterceptor_listautoptr = *mut GList;
pub type GumInterceptor_slistautoptr = *mut GSList;
pub type GumInterceptor_queueautoptr = *mut GQueue;
pub type GumInterceptorClass_autoptr = *mut GumInterceptorClass;
pub type GumInterceptorClass_listautoptr = *mut GList;
pub type GumInterceptorClass_slistautoptr = *mut GSList;
pub type GumInterceptorClass_queueautoptr = *mut GQueue;
pub type GumInvocationStack = GArray;
pub type GumInvocationState = guint;
pub const GumAttachReturn_GUM_ATTACH_OK: GumAttachReturn = 0;
pub const GumAttachReturn_GUM_ATTACH_WRONG_SIGNATURE: GumAttachReturn = -1;
pub const GumAttachReturn_GUM_ATTACH_ALREADY_ATTACHED: GumAttachReturn = -2;
pub const GumAttachReturn_GUM_ATTACH_POLICY_VIOLATION: GumAttachReturn = -3;
pub const GumAttachReturn_GUM_ATTACH_WRONG_TYPE: GumAttachReturn = -4;
pub type GumAttachReturn = ::core::ffi::c_int;
pub const GumReplaceReturn_GUM_REPLACE_OK: GumReplaceReturn = 0;
pub const GumReplaceReturn_GUM_REPLACE_WRONG_SIGNATURE: GumReplaceReturn = -1;
pub const GumReplaceReturn_GUM_REPLACE_ALREADY_REPLACED: GumReplaceReturn = -2;
pub const GumReplaceReturn_GUM_REPLACE_POLICY_VIOLATION: GumReplaceReturn = -3;
pub const GumReplaceReturn_GUM_REPLACE_WRONG_TYPE: GumReplaceReturn = -4;
pub type GumReplaceReturn = ::core::ffi::c_int;
extern "C" {
    pub fn gum_interceptor_obtain() -> *mut GumInterceptor;
}
extern "C" {
    pub fn gum_interceptor_attach(
        self_: *mut GumInterceptor,
        function_address: gpointer,
        listener: *mut GumInvocationListener,
        listener_function_data: gpointer,
    ) -> GumAttachReturn;
}
extern "C" {
    pub fn gum_interceptor_detach(self_: *mut GumInterceptor, listener: *mut GumInvocationListener);
}
extern "C" {
    pub fn gum_interceptor_replace(
        self_: *mut GumInterceptor,
        function_address: gpointer,
        replacement_function: gpointer,
        replacement_data: gpointer,
        original_function: *mut gpointer,
    ) -> GumReplaceReturn;
}
extern "C" {
    pub fn gum_interceptor_replace_fast(
        self_: *mut GumInterceptor,
        function_address: gpointer,
        replacement_function: gpointer,
        original_function: *mut gpointer,
    ) -> GumReplaceReturn;
}
extern "C" {
    pub fn gum_interceptor_revert(self_: *mut GumInterceptor, function_address: gpointer);
}
extern "C" {
    pub fn gum_interceptor_begin_transaction(self_: *mut GumInterceptor);
}
extern "C" {
    pub fn gum_interceptor_end_transaction(self_: *mut GumInterceptor);
}
extern "C" {
    pub fn gum_interceptor_flush(self_: *mut GumInterceptor) -> gboolean;
}
extern "C" {
    pub fn gum_interceptor_get_current_invocation() -> *mut GumInvocationContext;
}
extern "C" {
    pub fn gum_interceptor_get_current_stack() -> *mut GumInvocationStack;
}
extern "C" {
    pub fn gum_interceptor_ignore_current_thread(self_: *mut GumInterceptor);
}
extern "C" {
    pub fn gum_interceptor_unignore_current_thread(self_: *mut GumInterceptor);
}
extern "C" {
    pub fn gum_interceptor_maybe_unignore_current_thread(self_: *mut GumInterceptor) -> gboolean;
}
extern "C" {
    pub fn gum_interceptor_ignore_other_threads(self_: *mut GumInterceptor);
}
extern "C" {
    pub fn gum_interceptor_unignore_other_threads(self_: *mut GumInterceptor);
}
extern "C" {
    pub fn gum_invocation_stack_translate(
        self_: *mut GumInvocationStack,
        return_address: gpointer,
    ) -> gpointer;
}
extern "C" {
    pub fn gum_interceptor_save(state: *mut GumInvocationState);
}
extern "C" {
    pub fn gum_interceptor_restore(state: *mut GumInvocationState);
}
pub type GumKernelModuleRangeDetails = _GumKernelModuleRangeDetails;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumKernelModuleRangeDetails {
    pub name: [gchar; 48usize],
    pub address: GumAddress,
    pub size: guint64,
    pub protection: GumPageProtection,
}
pub type GumFoundKernelModuleRangeFunc = ::core::option::Option<
    unsafe extern "C" fn(
        details: *const GumKernelModuleRangeDetails,
        user_data: gpointer,
    ) -> gboolean,
>;
extern "C" {
    pub fn gum_kernel_api_is_available() -> gboolean;
}
extern "C" {
    pub fn gum_kernel_query_page_size() -> guint;
}
extern "C" {
    pub fn gum_kernel_alloc_n_pages(n_pages: guint) -> GumAddress;
}
extern "C" {
    pub fn gum_kernel_free_pages(mem: GumAddress);
}
extern "C" {
    pub fn gum_kernel_try_mprotect(
        address: GumAddress,
        size: gsize,
        prot: GumPageProtection,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_kernel_read(
        address: GumAddress,
        len: gsize,
        n_bytes_read: *mut gsize,
    ) -> *mut guint8;
}
extern "C" {
    pub fn gum_kernel_write(address: GumAddress, bytes: *const guint8, len: gsize) -> gboolean;
}
extern "C" {
    pub fn gum_kernel_scan(
        range: *const GumMemoryRange,
        pattern: *const GumMatchPattern,
        func: GumMemoryScanMatchFunc,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn gum_kernel_enumerate_ranges(
        prot: GumPageProtection,
        func: GumFoundRangeFunc,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn gum_kernel_enumerate_module_ranges(
        module_name: *const gchar,
        prot: GumPageProtection,
        func: GumFoundKernelModuleRangeFunc,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn gum_kernel_enumerate_modules(func: GumFoundModuleFunc, user_data: gpointer);
}
extern "C" {
    pub fn gum_kernel_find_base_address() -> GumAddress;
}
extern "C" {
    pub fn gum_kernel_set_base_address(base: GumAddress);
}
extern "C" {
    pub fn gum_memset(dst: gpointer, c: gint, n: gsize) -> gpointer;
}
extern "C" {
    pub fn gum_memcpy(dst: gpointer, src: gconstpointer, n: gsize) -> gpointer;
}
extern "C" {
    pub fn gum_memmove(dst: gpointer, src: gconstpointer, n: gsize) -> gpointer;
}
extern "C" {
    pub fn gum_memory_access_monitor_get_type() -> GType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumMemoryAccessMonitor {
    _unused: [u8; 0],
}
pub type GumMemoryAccessMonitor = _GumMemoryAccessMonitor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GumMemoryAccessMonitorClass {
    pub parent_class: GObjectClass,
}
pub type GumMemoryAccessMonitor_autoptr = *mut GumMemoryAccessMonitor;
pub type GumMemoryAccessMonitor_listautoptr = *mut GList;
pub type GumMemoryAccessMonitor_slistautoptr = *mut GSList;
pub type GumMemoryAccessMonitor_queueautoptr = *mut GQueue;
pub type GumMemoryAccessMonitorClass_autoptr = *mut GumMemoryAccessMonitorClass;
pub type GumMemoryAccessMonitorClass_listautoptr = *mut GList;
pub type GumMemoryAccessMonitorClass_slistautoptr = *mut GSList;
pub type GumMemoryAccessMonitorClass_queueautoptr = *mut GQueue;
pub type GumMemoryAccessDetails = _GumMemoryAccessDetails;
pub type GumMemoryAccessNotify = ::core::option::Option<
    unsafe extern "C" fn(
        monitor: *mut GumMemoryAccessMonitor,
        details: *const GumMemoryAccessDetails,
        user_data: gpointer,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumMemoryAccessDetails {
    pub operation: GumMemoryOperation,
    pub from: gpointer,
    pub address: gpointer,
    pub range_index: guint,
    pub page_index: guint,
    pub pages_completed: guint,
    pub pages_total: guint,
}
extern "C" {
    pub fn gum_memory_access_monitor_new(
        ranges: *const GumMemoryRange,
        num_ranges: guint,
        access_mask: GumPageProtection,
        auto_reset: gboolean,
        func: GumMemoryAccessNotify,
        data: gpointer,
        data_destroy: GDestroyNotify,
    ) -> *mut GumMemoryAccessMonitor;
}
extern "C" {
    pub fn gum_memory_access_monitor_enable(
        self_: *mut GumMemoryAccessMonitor,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_memory_access_monitor_disable(self_: *mut GumMemoryAccessMonitor);
}
extern "C" {
    pub fn gum_memory_map_get_type() -> GType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumMemoryMap {
    _unused: [u8; 0],
}
pub type GumMemoryMap = _GumMemoryMap;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GumMemoryMapClass {
    pub parent_class: GObjectClass,
}
pub type GumMemoryMap_autoptr = *mut GumMemoryMap;
pub type GumMemoryMap_listautoptr = *mut GList;
pub type GumMemoryMap_slistautoptr = *mut GSList;
pub type GumMemoryMap_queueautoptr = *mut GQueue;
pub type GumMemoryMapClass_autoptr = *mut GumMemoryMapClass;
pub type GumMemoryMapClass_listautoptr = *mut GList;
pub type GumMemoryMapClass_slistautoptr = *mut GSList;
pub type GumMemoryMapClass_queueautoptr = *mut GQueue;
extern "C" {
    pub fn gum_memory_map_new(prot: GumPageProtection) -> *mut GumMemoryMap;
}
extern "C" {
    pub fn gum_memory_map_contains(
        self_: *mut GumMemoryMap,
        range: *const GumMemoryRange,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_memory_map_update(self_: *mut GumMemoryMap);
}
pub type GumMetalArray = _GumMetalArray;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumMetalArray {
    pub data: gpointer,
    pub length: guint,
    pub capacity: guint,
    pub element_size: guint,
}
extern "C" {
    pub fn gum_metal_array_init(array: *mut GumMetalArray, element_size: guint);
}
extern "C" {
    pub fn gum_metal_array_free(array: *mut GumMetalArray);
}
extern "C" {
    pub fn gum_metal_array_element_at(self_: *mut GumMetalArray, index_: guint) -> gpointer;
}
extern "C" {
    pub fn gum_metal_array_insert_at(self_: *mut GumMetalArray, index_: guint) -> gpointer;
}
extern "C" {
    pub fn gum_metal_array_remove_at(self_: *mut GumMetalArray, index_: guint);
}
extern "C" {
    pub fn gum_metal_array_remove_all(self_: *mut GumMetalArray);
}
extern "C" {
    pub fn gum_metal_array_append(self_: *mut GumMetalArray) -> gpointer;
}
extern "C" {
    pub fn gum_metal_array_get_extents(
        self_: *mut GumMetalArray,
        start: *mut gpointer,
        end: *mut gpointer,
    );
}
extern "C" {
    pub fn gum_metal_array_ensure_capacity(self_: *mut GumMetalArray, capacity: guint);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumMetalHashTable {
    _unused: [u8; 0],
}
pub type GumMetalHashTable = _GumMetalHashTable;
pub type GumMetalHashTableIter = _GumMetalHashTableIter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumMetalHashTableIter {
    pub dummy1: gpointer,
    pub dummy2: gpointer,
    pub dummy3: gpointer,
    pub dummy4: ::core::ffi::c_int,
    pub dummy5: gboolean,
    pub dummy6: gpointer,
}
extern "C" {
    pub fn gum_metal_hash_table_new(
        hash_func: GHashFunc,
        key_equal_func: GEqualFunc,
    ) -> *mut GumMetalHashTable;
}
extern "C" {
    pub fn gum_metal_hash_table_new_full(
        hash_func: GHashFunc,
        key_equal_func: GEqualFunc,
        key_destroy_func: GDestroyNotify,
        value_destroy_func: GDestroyNotify,
    ) -> *mut GumMetalHashTable;
}
extern "C" {
    pub fn gum_metal_hash_table_destroy(hash_table: *mut GumMetalHashTable);
}
extern "C" {
    pub fn gum_metal_hash_table_insert(
        hash_table: *mut GumMetalHashTable,
        key: gpointer,
        value: gpointer,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_metal_hash_table_replace(
        hash_table: *mut GumMetalHashTable,
        key: gpointer,
        value: gpointer,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_metal_hash_table_add(hash_table: *mut GumMetalHashTable, key: gpointer) -> gboolean;
}
extern "C" {
    pub fn gum_metal_hash_table_remove(
        hash_table: *mut GumMetalHashTable,
        key: gconstpointer,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_metal_hash_table_remove_all(hash_table: *mut GumMetalHashTable);
}
extern "C" {
    pub fn gum_metal_hash_table_steal(
        hash_table: *mut GumMetalHashTable,
        key: gconstpointer,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_metal_hash_table_steal_all(hash_table: *mut GumMetalHashTable);
}
extern "C" {
    pub fn gum_metal_hash_table_lookup(
        hash_table: *mut GumMetalHashTable,
        key: gconstpointer,
    ) -> gpointer;
}
extern "C" {
    pub fn gum_metal_hash_table_contains(
        hash_table: *mut GumMetalHashTable,
        key: gconstpointer,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_metal_hash_table_lookup_extended(
        hash_table: *mut GumMetalHashTable,
        lookup_key: gconstpointer,
        orig_key: *mut gpointer,
        value: *mut gpointer,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_metal_hash_table_foreach(
        hash_table: *mut GumMetalHashTable,
        func: GHFunc,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn gum_metal_hash_table_find(
        hash_table: *mut GumMetalHashTable,
        predicate: GHRFunc,
        user_data: gpointer,
    ) -> gpointer;
}
extern "C" {
    pub fn gum_metal_hash_table_foreach_remove(
        hash_table: *mut GumMetalHashTable,
        func: GHRFunc,
        user_data: gpointer,
    ) -> guint;
}
extern "C" {
    pub fn gum_metal_hash_table_foreach_steal(
        hash_table: *mut GumMetalHashTable,
        func: GHRFunc,
        user_data: gpointer,
    ) -> guint;
}
extern "C" {
    pub fn gum_metal_hash_table_size(hash_table: *mut GumMetalHashTable) -> guint;
}
extern "C" {
    pub fn gum_metal_hash_table_iter_init(
        iter: *mut GumMetalHashTableIter,
        hash_table: *mut GumMetalHashTable,
    );
}
extern "C" {
    pub fn gum_metal_hash_table_iter_next(
        iter: *mut GumMetalHashTableIter,
        key: *mut gpointer,
        value: *mut gpointer,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_metal_hash_table_iter_get_hash_table(
        iter: *mut GumMetalHashTableIter,
    ) -> *mut GumMetalHashTable;
}
extern "C" {
    pub fn gum_metal_hash_table_iter_remove(iter: *mut GumMetalHashTableIter);
}
extern "C" {
    pub fn gum_metal_hash_table_iter_replace(iter: *mut GumMetalHashTableIter, value: gpointer);
}
extern "C" {
    pub fn gum_metal_hash_table_iter_steal(iter: *mut GumMetalHashTableIter);
}
extern "C" {
    pub fn gum_metal_hash_table_ref(hash_table: *mut GumMetalHashTable) -> *mut GumMetalHashTable;
}
extern "C" {
    pub fn gum_metal_hash_table_unref(hash_table: *mut GumMetalHashTable);
}
extern "C" {
    pub fn gum_module_api_resolver_get_type() -> GType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumModuleApiResolver {
    _unused: [u8; 0],
}
pub type GumModuleApiResolver = _GumModuleApiResolver;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GumModuleApiResolverClass {
    pub parent_class: GObjectClass,
}
pub type GumModuleApiResolver_autoptr = *mut GumModuleApiResolver;
pub type GumModuleApiResolver_listautoptr = *mut GList;
pub type GumModuleApiResolver_slistautoptr = *mut GSList;
pub type GumModuleApiResolver_queueautoptr = *mut GQueue;
pub type GumModuleApiResolverClass_autoptr = *mut GumModuleApiResolverClass;
pub type GumModuleApiResolverClass_listautoptr = *mut GList;
pub type GumModuleApiResolverClass_slistautoptr = *mut GSList;
pub type GumModuleApiResolverClass_queueautoptr = *mut GQueue;
extern "C" {
    pub fn gum_module_api_resolver_new() -> *mut GumApiResolver;
}
extern "C" {
    pub fn gum_module_map_get_type() -> GType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumModuleMap {
    _unused: [u8; 0],
}
pub type GumModuleMap = _GumModuleMap;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GumModuleMapClass {
    pub parent_class: GObjectClass,
}
pub type GumModuleMap_autoptr = *mut GumModuleMap;
pub type GumModuleMap_listautoptr = *mut GList;
pub type GumModuleMap_slistautoptr = *mut GSList;
pub type GumModuleMap_queueautoptr = *mut GQueue;
pub type GumModuleMapClass_autoptr = *mut GumModuleMapClass;
pub type GumModuleMapClass_listautoptr = *mut GList;
pub type GumModuleMapClass_slistautoptr = *mut GSList;
pub type GumModuleMapClass_queueautoptr = *mut GQueue;
pub type GumModuleMapFilterFunc = ::core::option::Option<
    unsafe extern "C" fn(details: *const GumModuleDetails, user_data: gpointer) -> gboolean,
>;
extern "C" {
    pub fn gum_module_map_new() -> *mut GumModuleMap;
}
extern "C" {
    pub fn gum_module_map_new_filtered(
        func: GumModuleMapFilterFunc,
        data: gpointer,
        data_destroy: GDestroyNotify,
    ) -> *mut GumModuleMap;
}
extern "C" {
    pub fn gum_module_map_find(
        self_: *mut GumModuleMap,
        address: GumAddress,
    ) -> *const GumModuleDetails;
}
extern "C" {
    pub fn gum_module_map_update(self_: *mut GumModuleMap);
}
extern "C" {
    pub fn gum_module_map_get_values(self_: *mut GumModuleMap) -> *mut GArray;
}
extern "C" {
    pub fn gum_vsnprintf(
        str_: *mut gchar,
        size: gsize,
        format: *const gchar,
        args: va_list,
    ) -> gint;
}
extern "C" {
    pub fn gum_snprintf(str_: *mut gchar, size: gsize, format: *const gchar, ...) -> gint;
}
extern "C" {
    pub fn gum_vasprintf(ret: *mut *mut gchar, format: *const gchar, ap: va_list) -> gint;
}
extern "C" {
    pub fn gum_asprintf(ret: *mut *mut gchar, format: *const gchar, ...) -> gint;
}
pub type GumSpinlock = _GumSpinlock;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumSpinlock {
    pub data: gpointer,
}
extern "C" {
    pub fn gum_spinlock_init(spinlock: *mut GumSpinlock);
}
extern "C" {
    pub fn gum_spinlock_acquire(spinlock: *mut GumSpinlock);
}
extern "C" {
    pub fn gum_spinlock_release(spinlock: *mut GumSpinlock);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: intmax_t,
    pub rem: intmax_t,
}
extern "C" {
    pub fn imaxabs(__i: intmax_t) -> intmax_t;
}
extern "C" {
    pub fn imaxdiv(__numerator: intmax_t, __denominator: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        __s: *const ::core::ffi::c_char,
        __end_ptr: *mut *mut ::core::ffi::c_char,
        __base: ::core::ffi::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        __s: *const ::core::ffi::c_char,
        __end_ptr: *mut *mut ::core::ffi::c_char,
        __base: ::core::ffi::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(
        __s: *const wchar_t,
        __end_ptr: *mut *mut wchar_t,
        __base: ::core::ffi::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(
        __s: *const wchar_t,
        __end_ptr: *mut *mut wchar_t,
        __base: ::core::ffi::c_int,
    ) -> uintmax_t;
}
pub type csh = usize;
pub const cs_arch_CS_ARCH_ARM: cs_arch = 0;
pub const cs_arch_CS_ARCH_ARM64: cs_arch = 1;
pub const cs_arch_CS_ARCH_MIPS: cs_arch = 2;
pub const cs_arch_CS_ARCH_X86: cs_arch = 3;
pub const cs_arch_CS_ARCH_PPC: cs_arch = 4;
pub const cs_arch_CS_ARCH_SPARC: cs_arch = 5;
pub const cs_arch_CS_ARCH_SYSZ: cs_arch = 6;
pub const cs_arch_CS_ARCH_XCORE: cs_arch = 7;
pub const cs_arch_CS_ARCH_M68K: cs_arch = 8;
pub const cs_arch_CS_ARCH_TMS320C64X: cs_arch = 9;
pub const cs_arch_CS_ARCH_M680X: cs_arch = 10;
pub const cs_arch_CS_ARCH_EVM: cs_arch = 11;
pub const cs_arch_CS_ARCH_MOS65XX: cs_arch = 12;
pub const cs_arch_CS_ARCH_WASM: cs_arch = 13;
pub const cs_arch_CS_ARCH_BPF: cs_arch = 14;
pub const cs_arch_CS_ARCH_RISCV: cs_arch = 15;
pub const cs_arch_CS_ARCH_SH: cs_arch = 16;
pub const cs_arch_CS_ARCH_TRICORE: cs_arch = 17;
pub const cs_arch_CS_ARCH_MAX: cs_arch = 18;
pub const cs_arch_CS_ARCH_ALL: cs_arch = 65535;
pub type cs_arch = ::core::ffi::c_uint;
pub const cs_mode_CS_MODE_LITTLE_ENDIAN: cs_mode = 0;
pub const cs_mode_CS_MODE_ARM: cs_mode = 0;
pub const cs_mode_CS_MODE_16: cs_mode = 2;
pub const cs_mode_CS_MODE_32: cs_mode = 4;
pub const cs_mode_CS_MODE_64: cs_mode = 8;
pub const cs_mode_CS_MODE_THUMB: cs_mode = 16;
pub const cs_mode_CS_MODE_MCLASS: cs_mode = 32;
pub const cs_mode_CS_MODE_V8: cs_mode = 64;
pub const cs_mode_CS_MODE_MICRO: cs_mode = 16;
pub const cs_mode_CS_MODE_MIPS3: cs_mode = 32;
pub const cs_mode_CS_MODE_MIPS32R6: cs_mode = 64;
pub const cs_mode_CS_MODE_MIPS2: cs_mode = 128;
pub const cs_mode_CS_MODE_V9: cs_mode = 16;
pub const cs_mode_CS_MODE_QPX: cs_mode = 16;
pub const cs_mode_CS_MODE_SPE: cs_mode = 32;
pub const cs_mode_CS_MODE_BOOKE: cs_mode = 64;
pub const cs_mode_CS_MODE_PS: cs_mode = 128;
pub const cs_mode_CS_MODE_M68K_000: cs_mode = 2;
pub const cs_mode_CS_MODE_M68K_010: cs_mode = 4;
pub const cs_mode_CS_MODE_M68K_020: cs_mode = 8;
pub const cs_mode_CS_MODE_M68K_030: cs_mode = 16;
pub const cs_mode_CS_MODE_M68K_040: cs_mode = 32;
pub const cs_mode_CS_MODE_M68K_060: cs_mode = 64;
pub const cs_mode_CS_MODE_BIG_ENDIAN: cs_mode = 2147483648;
pub const cs_mode_CS_MODE_MIPS32: cs_mode = 4;
pub const cs_mode_CS_MODE_MIPS64: cs_mode = 8;
pub const cs_mode_CS_MODE_M680X_6301: cs_mode = 2;
pub const cs_mode_CS_MODE_M680X_6309: cs_mode = 4;
pub const cs_mode_CS_MODE_M680X_6800: cs_mode = 8;
pub const cs_mode_CS_MODE_M680X_6801: cs_mode = 16;
pub const cs_mode_CS_MODE_M680X_6805: cs_mode = 32;
pub const cs_mode_CS_MODE_M680X_6808: cs_mode = 64;
pub const cs_mode_CS_MODE_M680X_6809: cs_mode = 128;
pub const cs_mode_CS_MODE_M680X_6811: cs_mode = 256;
pub const cs_mode_CS_MODE_M680X_CPU12: cs_mode = 512;
pub const cs_mode_CS_MODE_M680X_HCS08: cs_mode = 1024;
pub const cs_mode_CS_MODE_BPF_CLASSIC: cs_mode = 0;
pub const cs_mode_CS_MODE_BPF_EXTENDED: cs_mode = 1;
pub const cs_mode_CS_MODE_RISCV32: cs_mode = 1;
pub const cs_mode_CS_MODE_RISCV64: cs_mode = 2;
pub const cs_mode_CS_MODE_RISCVC: cs_mode = 4;
pub const cs_mode_CS_MODE_MOS65XX_6502: cs_mode = 2;
pub const cs_mode_CS_MODE_MOS65XX_65C02: cs_mode = 4;
pub const cs_mode_CS_MODE_MOS65XX_W65C02: cs_mode = 8;
pub const cs_mode_CS_MODE_MOS65XX_65816: cs_mode = 16;
pub const cs_mode_CS_MODE_MOS65XX_65816_LONG_M: cs_mode = 32;
pub const cs_mode_CS_MODE_MOS65XX_65816_LONG_X: cs_mode = 64;
pub const cs_mode_CS_MODE_MOS65XX_65816_LONG_MX: cs_mode = 96;
pub const cs_mode_CS_MODE_SH2: cs_mode = 2;
pub const cs_mode_CS_MODE_SH2A: cs_mode = 4;
pub const cs_mode_CS_MODE_SH3: cs_mode = 8;
pub const cs_mode_CS_MODE_SH4: cs_mode = 16;
pub const cs_mode_CS_MODE_SH4A: cs_mode = 32;
pub const cs_mode_CS_MODE_SHFPU: cs_mode = 64;
pub const cs_mode_CS_MODE_SHDSP: cs_mode = 128;
pub const cs_mode_CS_MODE_TRICORE_110: cs_mode = 2;
pub const cs_mode_CS_MODE_TRICORE_120: cs_mode = 4;
pub const cs_mode_CS_MODE_TRICORE_130: cs_mode = 8;
pub const cs_mode_CS_MODE_TRICORE_131: cs_mode = 16;
pub const cs_mode_CS_MODE_TRICORE_160: cs_mode = 32;
pub const cs_mode_CS_MODE_TRICORE_161: cs_mode = 64;
pub const cs_mode_CS_MODE_TRICORE_162: cs_mode = 128;
pub type cs_mode = ::core::ffi::c_uint;
pub type cs_malloc_t =
    ::core::option::Option<unsafe extern "C" fn(size: usize) -> *mut ::core::ffi::c_void>;
pub type cs_calloc_t = ::core::option::Option<
    unsafe extern "C" fn(nmemb: usize, size: usize) -> *mut ::core::ffi::c_void,
>;
pub type cs_realloc_t = ::core::option::Option<
    unsafe extern "C" fn(ptr: *mut ::core::ffi::c_void, size: usize) -> *mut ::core::ffi::c_void,
>;
pub type cs_free_t = ::core::option::Option<unsafe extern "C" fn(ptr: *mut ::core::ffi::c_void)>;
pub type cs_vsnprintf_t = ::core::option::Option<
    unsafe extern "C" fn(
        str_: *mut ::core::ffi::c_char,
        size: usize,
        format: *const ::core::ffi::c_char,
        ap: va_list,
    ) -> ::core::ffi::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cs_opt_mem {
    pub malloc: cs_malloc_t,
    pub calloc: cs_calloc_t,
    pub realloc: cs_realloc_t,
    pub free: cs_free_t,
    pub vsnprintf: cs_vsnprintf_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cs_opt_mnem {
    pub id: ::core::ffi::c_uint,
    pub mnemonic: *const ::core::ffi::c_char,
}
pub const cs_opt_type_CS_OPT_INVALID: cs_opt_type = 0;
pub const cs_opt_type_CS_OPT_SYNTAX: cs_opt_type = 1;
pub const cs_opt_type_CS_OPT_DETAIL: cs_opt_type = 2;
pub const cs_opt_type_CS_OPT_MODE: cs_opt_type = 3;
pub const cs_opt_type_CS_OPT_MEM: cs_opt_type = 4;
pub const cs_opt_type_CS_OPT_SKIPDATA: cs_opt_type = 5;
pub const cs_opt_type_CS_OPT_SKIPDATA_SETUP: cs_opt_type = 6;
pub const cs_opt_type_CS_OPT_MNEMONIC: cs_opt_type = 7;
pub const cs_opt_type_CS_OPT_UNSIGNED: cs_opt_type = 8;
pub const cs_opt_type_CS_OPT_NO_BRANCH_OFFSET: cs_opt_type = 9;
pub type cs_opt_type = ::core::ffi::c_uint;
pub const cs_opt_value_CS_OPT_OFF: cs_opt_value = 0;
pub const cs_opt_value_CS_OPT_ON: cs_opt_value = 3;
pub const cs_opt_value_CS_OPT_SYNTAX_DEFAULT: cs_opt_value = 0;
pub const cs_opt_value_CS_OPT_SYNTAX_INTEL: cs_opt_value = 1;
pub const cs_opt_value_CS_OPT_SYNTAX_ATT: cs_opt_value = 2;
pub const cs_opt_value_CS_OPT_SYNTAX_NOREGNAME: cs_opt_value = 3;
pub const cs_opt_value_CS_OPT_SYNTAX_MASM: cs_opt_value = 4;
pub const cs_opt_value_CS_OPT_SYNTAX_MOTOROLA: cs_opt_value = 5;
pub type cs_opt_value = ::core::ffi::c_uint;
pub const cs_op_type_CS_OP_INVALID: cs_op_type = 0;
pub const cs_op_type_CS_OP_REG: cs_op_type = 1;
pub const cs_op_type_CS_OP_IMM: cs_op_type = 2;
pub const cs_op_type_CS_OP_FP: cs_op_type = 3;
pub const cs_op_type_CS_OP_MEM: cs_op_type = 128;
pub type cs_op_type = ::core::ffi::c_uint;
pub const cs_ac_type_CS_AC_INVALID: cs_ac_type = 0;
pub const cs_ac_type_CS_AC_READ: cs_ac_type = 1;
pub const cs_ac_type_CS_AC_WRITE: cs_ac_type = 2;
pub type cs_ac_type = ::core::ffi::c_uint;
pub const cs_group_type_CS_GRP_INVALID: cs_group_type = 0;
pub const cs_group_type_CS_GRP_JUMP: cs_group_type = 1;
pub const cs_group_type_CS_GRP_CALL: cs_group_type = 2;
pub const cs_group_type_CS_GRP_RET: cs_group_type = 3;
pub const cs_group_type_CS_GRP_INT: cs_group_type = 4;
pub const cs_group_type_CS_GRP_IRET: cs_group_type = 5;
pub const cs_group_type_CS_GRP_PRIVILEGE: cs_group_type = 6;
pub const cs_group_type_CS_GRP_BRANCH_RELATIVE: cs_group_type = 7;
pub type cs_group_type = ::core::ffi::c_uint;
pub type cs_skipdata_cb_t = ::core::option::Option<
    unsafe extern "C" fn(
        code: *const u8,
        code_size: usize,
        offset: usize,
        user_data: *mut ::core::ffi::c_void,
    ) -> usize,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cs_opt_skipdata {
    pub mnemonic: *const ::core::ffi::c_char,
    pub callback: cs_skipdata_cb_t,
    pub user_data: *mut ::core::ffi::c_void,
}
pub const arm_shifter_ARM_SFT_INVALID: arm_shifter = 0;
pub const arm_shifter_ARM_SFT_ASR: arm_shifter = 1;
pub const arm_shifter_ARM_SFT_LSL: arm_shifter = 2;
pub const arm_shifter_ARM_SFT_LSR: arm_shifter = 3;
pub const arm_shifter_ARM_SFT_ROR: arm_shifter = 4;
pub const arm_shifter_ARM_SFT_RRX: arm_shifter = 5;
pub const arm_shifter_ARM_SFT_ASR_REG: arm_shifter = 6;
pub const arm_shifter_ARM_SFT_LSL_REG: arm_shifter = 7;
pub const arm_shifter_ARM_SFT_LSR_REG: arm_shifter = 8;
pub const arm_shifter_ARM_SFT_ROR_REG: arm_shifter = 9;
pub const arm_shifter_ARM_SFT_RRX_REG: arm_shifter = 10;
pub type arm_shifter = ::core::ffi::c_uint;
pub const arm_cc_ARM_CC_INVALID: arm_cc = 0;
pub const arm_cc_ARM_CC_EQ: arm_cc = 1;
pub const arm_cc_ARM_CC_NE: arm_cc = 2;
pub const arm_cc_ARM_CC_HS: arm_cc = 3;
pub const arm_cc_ARM_CC_LO: arm_cc = 4;
pub const arm_cc_ARM_CC_MI: arm_cc = 5;
pub const arm_cc_ARM_CC_PL: arm_cc = 6;
pub const arm_cc_ARM_CC_VS: arm_cc = 7;
pub const arm_cc_ARM_CC_VC: arm_cc = 8;
pub const arm_cc_ARM_CC_HI: arm_cc = 9;
pub const arm_cc_ARM_CC_LS: arm_cc = 10;
pub const arm_cc_ARM_CC_GE: arm_cc = 11;
pub const arm_cc_ARM_CC_LT: arm_cc = 12;
pub const arm_cc_ARM_CC_GT: arm_cc = 13;
pub const arm_cc_ARM_CC_LE: arm_cc = 14;
pub const arm_cc_ARM_CC_AL: arm_cc = 15;
pub type arm_cc = ::core::ffi::c_uint;
pub const arm_sysreg_ARM_SYSREG_INVALID: arm_sysreg = 0;
pub const arm_sysreg_ARM_SYSREG_SPSR_C: arm_sysreg = 1;
pub const arm_sysreg_ARM_SYSREG_SPSR_X: arm_sysreg = 2;
pub const arm_sysreg_ARM_SYSREG_SPSR_S: arm_sysreg = 4;
pub const arm_sysreg_ARM_SYSREG_SPSR_F: arm_sysreg = 8;
pub const arm_sysreg_ARM_SYSREG_CPSR_C: arm_sysreg = 16;
pub const arm_sysreg_ARM_SYSREG_CPSR_X: arm_sysreg = 32;
pub const arm_sysreg_ARM_SYSREG_CPSR_S: arm_sysreg = 64;
pub const arm_sysreg_ARM_SYSREG_CPSR_F: arm_sysreg = 128;
pub const arm_sysreg_ARM_SYSREG_APSR: arm_sysreg = 256;
pub const arm_sysreg_ARM_SYSREG_APSR_G: arm_sysreg = 257;
pub const arm_sysreg_ARM_SYSREG_APSR_NZCVQ: arm_sysreg = 258;
pub const arm_sysreg_ARM_SYSREG_APSR_NZCVQG: arm_sysreg = 259;
pub const arm_sysreg_ARM_SYSREG_IAPSR: arm_sysreg = 260;
pub const arm_sysreg_ARM_SYSREG_IAPSR_G: arm_sysreg = 261;
pub const arm_sysreg_ARM_SYSREG_IAPSR_NZCVQG: arm_sysreg = 262;
pub const arm_sysreg_ARM_SYSREG_IAPSR_NZCVQ: arm_sysreg = 263;
pub const arm_sysreg_ARM_SYSREG_EAPSR: arm_sysreg = 264;
pub const arm_sysreg_ARM_SYSREG_EAPSR_G: arm_sysreg = 265;
pub const arm_sysreg_ARM_SYSREG_EAPSR_NZCVQG: arm_sysreg = 266;
pub const arm_sysreg_ARM_SYSREG_EAPSR_NZCVQ: arm_sysreg = 267;
pub const arm_sysreg_ARM_SYSREG_XPSR: arm_sysreg = 268;
pub const arm_sysreg_ARM_SYSREG_XPSR_G: arm_sysreg = 269;
pub const arm_sysreg_ARM_SYSREG_XPSR_NZCVQG: arm_sysreg = 270;
pub const arm_sysreg_ARM_SYSREG_XPSR_NZCVQ: arm_sysreg = 271;
pub const arm_sysreg_ARM_SYSREG_IPSR: arm_sysreg = 272;
pub const arm_sysreg_ARM_SYSREG_EPSR: arm_sysreg = 273;
pub const arm_sysreg_ARM_SYSREG_IEPSR: arm_sysreg = 274;
pub const arm_sysreg_ARM_SYSREG_MSP: arm_sysreg = 275;
pub const arm_sysreg_ARM_SYSREG_PSP: arm_sysreg = 276;
pub const arm_sysreg_ARM_SYSREG_PRIMASK: arm_sysreg = 277;
pub const arm_sysreg_ARM_SYSREG_BASEPRI: arm_sysreg = 278;
pub const arm_sysreg_ARM_SYSREG_BASEPRI_MAX: arm_sysreg = 279;
pub const arm_sysreg_ARM_SYSREG_FAULTMASK: arm_sysreg = 280;
pub const arm_sysreg_ARM_SYSREG_CONTROL: arm_sysreg = 281;
pub const arm_sysreg_ARM_SYSREG_MSPLIM: arm_sysreg = 282;
pub const arm_sysreg_ARM_SYSREG_PSPLIM: arm_sysreg = 283;
pub const arm_sysreg_ARM_SYSREG_MSP_NS: arm_sysreg = 284;
pub const arm_sysreg_ARM_SYSREG_PSP_NS: arm_sysreg = 285;
pub const arm_sysreg_ARM_SYSREG_MSPLIM_NS: arm_sysreg = 286;
pub const arm_sysreg_ARM_SYSREG_PSPLIM_NS: arm_sysreg = 287;
pub const arm_sysreg_ARM_SYSREG_PRIMASK_NS: arm_sysreg = 288;
pub const arm_sysreg_ARM_SYSREG_BASEPRI_NS: arm_sysreg = 289;
pub const arm_sysreg_ARM_SYSREG_FAULTMASK_NS: arm_sysreg = 290;
pub const arm_sysreg_ARM_SYSREG_CONTROL_NS: arm_sysreg = 291;
pub const arm_sysreg_ARM_SYSREG_SP_NS: arm_sysreg = 292;
pub const arm_sysreg_ARM_SYSREG_R8_USR: arm_sysreg = 293;
pub const arm_sysreg_ARM_SYSREG_R9_USR: arm_sysreg = 294;
pub const arm_sysreg_ARM_SYSREG_R10_USR: arm_sysreg = 295;
pub const arm_sysreg_ARM_SYSREG_R11_USR: arm_sysreg = 296;
pub const arm_sysreg_ARM_SYSREG_R12_USR: arm_sysreg = 297;
pub const arm_sysreg_ARM_SYSREG_SP_USR: arm_sysreg = 298;
pub const arm_sysreg_ARM_SYSREG_LR_USR: arm_sysreg = 299;
pub const arm_sysreg_ARM_SYSREG_R8_FIQ: arm_sysreg = 300;
pub const arm_sysreg_ARM_SYSREG_R9_FIQ: arm_sysreg = 301;
pub const arm_sysreg_ARM_SYSREG_R10_FIQ: arm_sysreg = 302;
pub const arm_sysreg_ARM_SYSREG_R11_FIQ: arm_sysreg = 303;
pub const arm_sysreg_ARM_SYSREG_R12_FIQ: arm_sysreg = 304;
pub const arm_sysreg_ARM_SYSREG_SP_FIQ: arm_sysreg = 305;
pub const arm_sysreg_ARM_SYSREG_LR_FIQ: arm_sysreg = 306;
pub const arm_sysreg_ARM_SYSREG_LR_IRQ: arm_sysreg = 307;
pub const arm_sysreg_ARM_SYSREG_SP_IRQ: arm_sysreg = 308;
pub const arm_sysreg_ARM_SYSREG_LR_SVC: arm_sysreg = 309;
pub const arm_sysreg_ARM_SYSREG_SP_SVC: arm_sysreg = 310;
pub const arm_sysreg_ARM_SYSREG_LR_ABT: arm_sysreg = 311;
pub const arm_sysreg_ARM_SYSREG_SP_ABT: arm_sysreg = 312;
pub const arm_sysreg_ARM_SYSREG_LR_UND: arm_sysreg = 313;
pub const arm_sysreg_ARM_SYSREG_SP_UND: arm_sysreg = 314;
pub const arm_sysreg_ARM_SYSREG_LR_MON: arm_sysreg = 315;
pub const arm_sysreg_ARM_SYSREG_SP_MON: arm_sysreg = 316;
pub const arm_sysreg_ARM_SYSREG_ELR_HYP: arm_sysreg = 317;
pub const arm_sysreg_ARM_SYSREG_SP_HYP: arm_sysreg = 318;
pub const arm_sysreg_ARM_SYSREG_SPSR_FIQ: arm_sysreg = 319;
pub const arm_sysreg_ARM_SYSREG_SPSR_IRQ: arm_sysreg = 320;
pub const arm_sysreg_ARM_SYSREG_SPSR_SVC: arm_sysreg = 321;
pub const arm_sysreg_ARM_SYSREG_SPSR_ABT: arm_sysreg = 322;
pub const arm_sysreg_ARM_SYSREG_SPSR_UND: arm_sysreg = 323;
pub const arm_sysreg_ARM_SYSREG_SPSR_MON: arm_sysreg = 324;
pub const arm_sysreg_ARM_SYSREG_SPSR_HYP: arm_sysreg = 325;
pub type arm_sysreg = ::core::ffi::c_uint;
pub const arm_mem_barrier_ARM_MB_INVALID: arm_mem_barrier = 0;
pub const arm_mem_barrier_ARM_MB_RESERVED_0: arm_mem_barrier = 1;
pub const arm_mem_barrier_ARM_MB_OSHLD: arm_mem_barrier = 2;
pub const arm_mem_barrier_ARM_MB_OSHST: arm_mem_barrier = 3;
pub const arm_mem_barrier_ARM_MB_OSH: arm_mem_barrier = 4;
pub const arm_mem_barrier_ARM_MB_RESERVED_4: arm_mem_barrier = 5;
pub const arm_mem_barrier_ARM_MB_NSHLD: arm_mem_barrier = 6;
pub const arm_mem_barrier_ARM_MB_NSHST: arm_mem_barrier = 7;
pub const arm_mem_barrier_ARM_MB_NSH: arm_mem_barrier = 8;
pub const arm_mem_barrier_ARM_MB_RESERVED_8: arm_mem_barrier = 9;
pub const arm_mem_barrier_ARM_MB_ISHLD: arm_mem_barrier = 10;
pub const arm_mem_barrier_ARM_MB_ISHST: arm_mem_barrier = 11;
pub const arm_mem_barrier_ARM_MB_ISH: arm_mem_barrier = 12;
pub const arm_mem_barrier_ARM_MB_RESERVED_12: arm_mem_barrier = 13;
pub const arm_mem_barrier_ARM_MB_LD: arm_mem_barrier = 14;
pub const arm_mem_barrier_ARM_MB_ST: arm_mem_barrier = 15;
pub const arm_mem_barrier_ARM_MB_SY: arm_mem_barrier = 16;
pub type arm_mem_barrier = ::core::ffi::c_uint;
pub const arm_op_type_ARM_OP_INVALID: arm_op_type = 0;
pub const arm_op_type_ARM_OP_REG: arm_op_type = 1;
pub const arm_op_type_ARM_OP_IMM: arm_op_type = 2;
pub const arm_op_type_ARM_OP_MEM: arm_op_type = 3;
pub const arm_op_type_ARM_OP_FP: arm_op_type = 4;
pub const arm_op_type_ARM_OP_CIMM: arm_op_type = 64;
pub const arm_op_type_ARM_OP_PIMM: arm_op_type = 65;
pub const arm_op_type_ARM_OP_SETEND: arm_op_type = 66;
pub const arm_op_type_ARM_OP_SYSREG: arm_op_type = 67;
pub type arm_op_type = ::core::ffi::c_uint;
pub const arm_setend_type_ARM_SETEND_INVALID: arm_setend_type = 0;
pub const arm_setend_type_ARM_SETEND_BE: arm_setend_type = 1;
pub const arm_setend_type_ARM_SETEND_LE: arm_setend_type = 2;
pub type arm_setend_type = ::core::ffi::c_uint;
pub const arm_cpsmode_type_ARM_CPSMODE_INVALID: arm_cpsmode_type = 0;
pub const arm_cpsmode_type_ARM_CPSMODE_IE: arm_cpsmode_type = 2;
pub const arm_cpsmode_type_ARM_CPSMODE_ID: arm_cpsmode_type = 3;
pub type arm_cpsmode_type = ::core::ffi::c_uint;
pub const arm_cpsflag_type_ARM_CPSFLAG_INVALID: arm_cpsflag_type = 0;
pub const arm_cpsflag_type_ARM_CPSFLAG_F: arm_cpsflag_type = 1;
pub const arm_cpsflag_type_ARM_CPSFLAG_I: arm_cpsflag_type = 2;
pub const arm_cpsflag_type_ARM_CPSFLAG_A: arm_cpsflag_type = 4;
pub const arm_cpsflag_type_ARM_CPSFLAG_NONE: arm_cpsflag_type = 16;
pub type arm_cpsflag_type = ::core::ffi::c_uint;
pub const arm_vectordata_type_ARM_VECTORDATA_INVALID: arm_vectordata_type = 0;
pub const arm_vectordata_type_ARM_VECTORDATA_I8: arm_vectordata_type = 1;
pub const arm_vectordata_type_ARM_VECTORDATA_I16: arm_vectordata_type = 2;
pub const arm_vectordata_type_ARM_VECTORDATA_I32: arm_vectordata_type = 3;
pub const arm_vectordata_type_ARM_VECTORDATA_I64: arm_vectordata_type = 4;
pub const arm_vectordata_type_ARM_VECTORDATA_S8: arm_vectordata_type = 5;
pub const arm_vectordata_type_ARM_VECTORDATA_S16: arm_vectordata_type = 6;
pub const arm_vectordata_type_ARM_VECTORDATA_S32: arm_vectordata_type = 7;
pub const arm_vectordata_type_ARM_VECTORDATA_S64: arm_vectordata_type = 8;
pub const arm_vectordata_type_ARM_VECTORDATA_U8: arm_vectordata_type = 9;
pub const arm_vectordata_type_ARM_VECTORDATA_U16: arm_vectordata_type = 10;
pub const arm_vectordata_type_ARM_VECTORDATA_U32: arm_vectordata_type = 11;
pub const arm_vectordata_type_ARM_VECTORDATA_U64: arm_vectordata_type = 12;
pub const arm_vectordata_type_ARM_VECTORDATA_P8: arm_vectordata_type = 13;
pub const arm_vectordata_type_ARM_VECTORDATA_F16: arm_vectordata_type = 14;
pub const arm_vectordata_type_ARM_VECTORDATA_F32: arm_vectordata_type = 15;
pub const arm_vectordata_type_ARM_VECTORDATA_F64: arm_vectordata_type = 16;
pub const arm_vectordata_type_ARM_VECTORDATA_F16F64: arm_vectordata_type = 17;
pub const arm_vectordata_type_ARM_VECTORDATA_F64F16: arm_vectordata_type = 18;
pub const arm_vectordata_type_ARM_VECTORDATA_F32F16: arm_vectordata_type = 19;
pub const arm_vectordata_type_ARM_VECTORDATA_F16F32: arm_vectordata_type = 20;
pub const arm_vectordata_type_ARM_VECTORDATA_F64F32: arm_vectordata_type = 21;
pub const arm_vectordata_type_ARM_VECTORDATA_F32F64: arm_vectordata_type = 22;
pub const arm_vectordata_type_ARM_VECTORDATA_S32F32: arm_vectordata_type = 23;
pub const arm_vectordata_type_ARM_VECTORDATA_U32F32: arm_vectordata_type = 24;
pub const arm_vectordata_type_ARM_VECTORDATA_F32S32: arm_vectordata_type = 25;
pub const arm_vectordata_type_ARM_VECTORDATA_F32U32: arm_vectordata_type = 26;
pub const arm_vectordata_type_ARM_VECTORDATA_F64S16: arm_vectordata_type = 27;
pub const arm_vectordata_type_ARM_VECTORDATA_F32S16: arm_vectordata_type = 28;
pub const arm_vectordata_type_ARM_VECTORDATA_F64S32: arm_vectordata_type = 29;
pub const arm_vectordata_type_ARM_VECTORDATA_S16F64: arm_vectordata_type = 30;
pub const arm_vectordata_type_ARM_VECTORDATA_S16F32: arm_vectordata_type = 31;
pub const arm_vectordata_type_ARM_VECTORDATA_S32F64: arm_vectordata_type = 32;
pub const arm_vectordata_type_ARM_VECTORDATA_U16F64: arm_vectordata_type = 33;
pub const arm_vectordata_type_ARM_VECTORDATA_U16F32: arm_vectordata_type = 34;
pub const arm_vectordata_type_ARM_VECTORDATA_U32F64: arm_vectordata_type = 35;
pub const arm_vectordata_type_ARM_VECTORDATA_F64U16: arm_vectordata_type = 36;
pub const arm_vectordata_type_ARM_VECTORDATA_F32U16: arm_vectordata_type = 37;
pub const arm_vectordata_type_ARM_VECTORDATA_F64U32: arm_vectordata_type = 38;
pub const arm_vectordata_type_ARM_VECTORDATA_F16U16: arm_vectordata_type = 39;
pub const arm_vectordata_type_ARM_VECTORDATA_U16F16: arm_vectordata_type = 40;
pub const arm_vectordata_type_ARM_VECTORDATA_F16U32: arm_vectordata_type = 41;
pub const arm_vectordata_type_ARM_VECTORDATA_U32F16: arm_vectordata_type = 42;
pub type arm_vectordata_type = ::core::ffi::c_uint;
pub const arm_reg_ARM_REG_INVALID: arm_reg = 0;
pub const arm_reg_ARM_REG_APSR: arm_reg = 1;
pub const arm_reg_ARM_REG_APSR_NZCV: arm_reg = 2;
pub const arm_reg_ARM_REG_CPSR: arm_reg = 3;
pub const arm_reg_ARM_REG_FPEXC: arm_reg = 4;
pub const arm_reg_ARM_REG_FPINST: arm_reg = 5;
pub const arm_reg_ARM_REG_FPSCR: arm_reg = 6;
pub const arm_reg_ARM_REG_FPSCR_NZCV: arm_reg = 7;
pub const arm_reg_ARM_REG_FPSID: arm_reg = 8;
pub const arm_reg_ARM_REG_ITSTATE: arm_reg = 9;
pub const arm_reg_ARM_REG_LR: arm_reg = 10;
pub const arm_reg_ARM_REG_PC: arm_reg = 11;
pub const arm_reg_ARM_REG_SP: arm_reg = 12;
pub const arm_reg_ARM_REG_SPSR: arm_reg = 13;
pub const arm_reg_ARM_REG_D0: arm_reg = 14;
pub const arm_reg_ARM_REG_D1: arm_reg = 15;
pub const arm_reg_ARM_REG_D2: arm_reg = 16;
pub const arm_reg_ARM_REG_D3: arm_reg = 17;
pub const arm_reg_ARM_REG_D4: arm_reg = 18;
pub const arm_reg_ARM_REG_D5: arm_reg = 19;
pub const arm_reg_ARM_REG_D6: arm_reg = 20;
pub const arm_reg_ARM_REG_D7: arm_reg = 21;
pub const arm_reg_ARM_REG_D8: arm_reg = 22;
pub const arm_reg_ARM_REG_D9: arm_reg = 23;
pub const arm_reg_ARM_REG_D10: arm_reg = 24;
pub const arm_reg_ARM_REG_D11: arm_reg = 25;
pub const arm_reg_ARM_REG_D12: arm_reg = 26;
pub const arm_reg_ARM_REG_D13: arm_reg = 27;
pub const arm_reg_ARM_REG_D14: arm_reg = 28;
pub const arm_reg_ARM_REG_D15: arm_reg = 29;
pub const arm_reg_ARM_REG_D16: arm_reg = 30;
pub const arm_reg_ARM_REG_D17: arm_reg = 31;
pub const arm_reg_ARM_REG_D18: arm_reg = 32;
pub const arm_reg_ARM_REG_D19: arm_reg = 33;
pub const arm_reg_ARM_REG_D20: arm_reg = 34;
pub const arm_reg_ARM_REG_D21: arm_reg = 35;
pub const arm_reg_ARM_REG_D22: arm_reg = 36;
pub const arm_reg_ARM_REG_D23: arm_reg = 37;
pub const arm_reg_ARM_REG_D24: arm_reg = 38;
pub const arm_reg_ARM_REG_D25: arm_reg = 39;
pub const arm_reg_ARM_REG_D26: arm_reg = 40;
pub const arm_reg_ARM_REG_D27: arm_reg = 41;
pub const arm_reg_ARM_REG_D28: arm_reg = 42;
pub const arm_reg_ARM_REG_D29: arm_reg = 43;
pub const arm_reg_ARM_REG_D30: arm_reg = 44;
pub const arm_reg_ARM_REG_D31: arm_reg = 45;
pub const arm_reg_ARM_REG_FPINST2: arm_reg = 46;
pub const arm_reg_ARM_REG_MVFR0: arm_reg = 47;
pub const arm_reg_ARM_REG_MVFR1: arm_reg = 48;
pub const arm_reg_ARM_REG_MVFR2: arm_reg = 49;
pub const arm_reg_ARM_REG_Q0: arm_reg = 50;
pub const arm_reg_ARM_REG_Q1: arm_reg = 51;
pub const arm_reg_ARM_REG_Q2: arm_reg = 52;
pub const arm_reg_ARM_REG_Q3: arm_reg = 53;
pub const arm_reg_ARM_REG_Q4: arm_reg = 54;
pub const arm_reg_ARM_REG_Q5: arm_reg = 55;
pub const arm_reg_ARM_REG_Q6: arm_reg = 56;
pub const arm_reg_ARM_REG_Q7: arm_reg = 57;
pub const arm_reg_ARM_REG_Q8: arm_reg = 58;
pub const arm_reg_ARM_REG_Q9: arm_reg = 59;
pub const arm_reg_ARM_REG_Q10: arm_reg = 60;
pub const arm_reg_ARM_REG_Q11: arm_reg = 61;
pub const arm_reg_ARM_REG_Q12: arm_reg = 62;
pub const arm_reg_ARM_REG_Q13: arm_reg = 63;
pub const arm_reg_ARM_REG_Q14: arm_reg = 64;
pub const arm_reg_ARM_REG_Q15: arm_reg = 65;
pub const arm_reg_ARM_REG_R0: arm_reg = 66;
pub const arm_reg_ARM_REG_R1: arm_reg = 67;
pub const arm_reg_ARM_REG_R2: arm_reg = 68;
pub const arm_reg_ARM_REG_R3: arm_reg = 69;
pub const arm_reg_ARM_REG_R4: arm_reg = 70;
pub const arm_reg_ARM_REG_R5: arm_reg = 71;
pub const arm_reg_ARM_REG_R6: arm_reg = 72;
pub const arm_reg_ARM_REG_R7: arm_reg = 73;
pub const arm_reg_ARM_REG_R8: arm_reg = 74;
pub const arm_reg_ARM_REG_R9: arm_reg = 75;
pub const arm_reg_ARM_REG_R10: arm_reg = 76;
pub const arm_reg_ARM_REG_R11: arm_reg = 77;
pub const arm_reg_ARM_REG_R12: arm_reg = 78;
pub const arm_reg_ARM_REG_S0: arm_reg = 79;
pub const arm_reg_ARM_REG_S1: arm_reg = 80;
pub const arm_reg_ARM_REG_S2: arm_reg = 81;
pub const arm_reg_ARM_REG_S3: arm_reg = 82;
pub const arm_reg_ARM_REG_S4: arm_reg = 83;
pub const arm_reg_ARM_REG_S5: arm_reg = 84;
pub const arm_reg_ARM_REG_S6: arm_reg = 85;
pub const arm_reg_ARM_REG_S7: arm_reg = 86;
pub const arm_reg_ARM_REG_S8: arm_reg = 87;
pub const arm_reg_ARM_REG_S9: arm_reg = 88;
pub const arm_reg_ARM_REG_S10: arm_reg = 89;
pub const arm_reg_ARM_REG_S11: arm_reg = 90;
pub const arm_reg_ARM_REG_S12: arm_reg = 91;
pub const arm_reg_ARM_REG_S13: arm_reg = 92;
pub const arm_reg_ARM_REG_S14: arm_reg = 93;
pub const arm_reg_ARM_REG_S15: arm_reg = 94;
pub const arm_reg_ARM_REG_S16: arm_reg = 95;
pub const arm_reg_ARM_REG_S17: arm_reg = 96;
pub const arm_reg_ARM_REG_S18: arm_reg = 97;
pub const arm_reg_ARM_REG_S19: arm_reg = 98;
pub const arm_reg_ARM_REG_S20: arm_reg = 99;
pub const arm_reg_ARM_REG_S21: arm_reg = 100;
pub const arm_reg_ARM_REG_S22: arm_reg = 101;
pub const arm_reg_ARM_REG_S23: arm_reg = 102;
pub const arm_reg_ARM_REG_S24: arm_reg = 103;
pub const arm_reg_ARM_REG_S25: arm_reg = 104;
pub const arm_reg_ARM_REG_S26: arm_reg = 105;
pub const arm_reg_ARM_REG_S27: arm_reg = 106;
pub const arm_reg_ARM_REG_S28: arm_reg = 107;
pub const arm_reg_ARM_REG_S29: arm_reg = 108;
pub const arm_reg_ARM_REG_S30: arm_reg = 109;
pub const arm_reg_ARM_REG_S31: arm_reg = 110;
pub const arm_reg_ARM_REG_ENDING: arm_reg = 111;
pub const arm_reg_ARM_REG_R13: arm_reg = 12;
pub const arm_reg_ARM_REG_R14: arm_reg = 10;
pub const arm_reg_ARM_REG_R15: arm_reg = 11;
pub const arm_reg_ARM_REG_SB: arm_reg = 75;
pub const arm_reg_ARM_REG_SL: arm_reg = 76;
pub const arm_reg_ARM_REG_FP: arm_reg = 77;
pub const arm_reg_ARM_REG_IP: arm_reg = 78;
pub type arm_reg = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arm_op_mem {
    pub base: arm_reg,
    pub index: arm_reg,
    pub scale: ::core::ffi::c_int,
    pub disp: ::core::ffi::c_int,
    pub lshift: ::core::ffi::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_arm_op {
    pub vector_index: ::core::ffi::c_int,
    pub shift: cs_arm_op__bindgen_ty_1,
    pub type_: arm_op_type,
    pub __bindgen_anon_1: cs_arm_op__bindgen_ty_2,
    pub subtracted: bool,
    pub access: u8,
    pub neon_lane: i8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cs_arm_op__bindgen_ty_1 {
    pub type_: arm_shifter,
    pub value: ::core::ffi::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_arm_op__bindgen_ty_2 {
    pub reg: ::core::ffi::c_int,
    pub imm: i32,
    pub fp: f64,
    pub mem: arm_op_mem,
    pub setend: arm_setend_type,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_arm {
    pub usermode: bool,
    pub vector_size: ::core::ffi::c_int,
    pub vector_data: arm_vectordata_type,
    pub cps_mode: arm_cpsmode_type,
    pub cps_flag: arm_cpsflag_type,
    pub cc: arm_cc,
    pub update_flags: bool,
    pub writeback: bool,
    pub post_index: bool,
    pub mem_barrier: arm_mem_barrier,
    pub op_count: u8,
    pub operands: [cs_arm_op; 36usize],
}
pub const arm_insn_ARM_INS_INVALID: arm_insn = 0;
pub const arm_insn_ARM_INS_ADC: arm_insn = 1;
pub const arm_insn_ARM_INS_ADD: arm_insn = 2;
pub const arm_insn_ARM_INS_ADDW: arm_insn = 3;
pub const arm_insn_ARM_INS_ADR: arm_insn = 4;
pub const arm_insn_ARM_INS_AESD: arm_insn = 5;
pub const arm_insn_ARM_INS_AESE: arm_insn = 6;
pub const arm_insn_ARM_INS_AESIMC: arm_insn = 7;
pub const arm_insn_ARM_INS_AESMC: arm_insn = 8;
pub const arm_insn_ARM_INS_AND: arm_insn = 9;
pub const arm_insn_ARM_INS_ASR: arm_insn = 10;
pub const arm_insn_ARM_INS_B: arm_insn = 11;
pub const arm_insn_ARM_INS_BFC: arm_insn = 12;
pub const arm_insn_ARM_INS_BFI: arm_insn = 13;
pub const arm_insn_ARM_INS_BIC: arm_insn = 14;
pub const arm_insn_ARM_INS_BKPT: arm_insn = 15;
pub const arm_insn_ARM_INS_BL: arm_insn = 16;
pub const arm_insn_ARM_INS_BLX: arm_insn = 17;
pub const arm_insn_ARM_INS_BLXNS: arm_insn = 18;
pub const arm_insn_ARM_INS_BX: arm_insn = 19;
pub const arm_insn_ARM_INS_BXJ: arm_insn = 20;
pub const arm_insn_ARM_INS_BXNS: arm_insn = 21;
pub const arm_insn_ARM_INS_CBNZ: arm_insn = 22;
pub const arm_insn_ARM_INS_CBZ: arm_insn = 23;
pub const arm_insn_ARM_INS_CDP: arm_insn = 24;
pub const arm_insn_ARM_INS_CDP2: arm_insn = 25;
pub const arm_insn_ARM_INS_CLREX: arm_insn = 26;
pub const arm_insn_ARM_INS_CLZ: arm_insn = 27;
pub const arm_insn_ARM_INS_CMN: arm_insn = 28;
pub const arm_insn_ARM_INS_CMP: arm_insn = 29;
pub const arm_insn_ARM_INS_CPS: arm_insn = 30;
pub const arm_insn_ARM_INS_CRC32B: arm_insn = 31;
pub const arm_insn_ARM_INS_CRC32CB: arm_insn = 32;
pub const arm_insn_ARM_INS_CRC32CH: arm_insn = 33;
pub const arm_insn_ARM_INS_CRC32CW: arm_insn = 34;
pub const arm_insn_ARM_INS_CRC32H: arm_insn = 35;
pub const arm_insn_ARM_INS_CRC32W: arm_insn = 36;
pub const arm_insn_ARM_INS_CSDB: arm_insn = 37;
pub const arm_insn_ARM_INS_DBG: arm_insn = 38;
pub const arm_insn_ARM_INS_DCPS1: arm_insn = 39;
pub const arm_insn_ARM_INS_DCPS2: arm_insn = 40;
pub const arm_insn_ARM_INS_DCPS3: arm_insn = 41;
pub const arm_insn_ARM_INS_DFB: arm_insn = 42;
pub const arm_insn_ARM_INS_DMB: arm_insn = 43;
pub const arm_insn_ARM_INS_DSB: arm_insn = 44;
pub const arm_insn_ARM_INS_EOR: arm_insn = 45;
pub const arm_insn_ARM_INS_ERET: arm_insn = 46;
pub const arm_insn_ARM_INS_ESB: arm_insn = 47;
pub const arm_insn_ARM_INS_FADDD: arm_insn = 48;
pub const arm_insn_ARM_INS_FADDS: arm_insn = 49;
pub const arm_insn_ARM_INS_FCMPZD: arm_insn = 50;
pub const arm_insn_ARM_INS_FCMPZS: arm_insn = 51;
pub const arm_insn_ARM_INS_FCONSTD: arm_insn = 52;
pub const arm_insn_ARM_INS_FCONSTS: arm_insn = 53;
pub const arm_insn_ARM_INS_FLDMDBX: arm_insn = 54;
pub const arm_insn_ARM_INS_FLDMIAX: arm_insn = 55;
pub const arm_insn_ARM_INS_FMDHR: arm_insn = 56;
pub const arm_insn_ARM_INS_FMDLR: arm_insn = 57;
pub const arm_insn_ARM_INS_FMSTAT: arm_insn = 58;
pub const arm_insn_ARM_INS_FSTMDBX: arm_insn = 59;
pub const arm_insn_ARM_INS_FSTMIAX: arm_insn = 60;
pub const arm_insn_ARM_INS_FSUBD: arm_insn = 61;
pub const arm_insn_ARM_INS_FSUBS: arm_insn = 62;
pub const arm_insn_ARM_INS_HINT: arm_insn = 63;
pub const arm_insn_ARM_INS_HLT: arm_insn = 64;
pub const arm_insn_ARM_INS_HVC: arm_insn = 65;
pub const arm_insn_ARM_INS_ISB: arm_insn = 66;
pub const arm_insn_ARM_INS_IT: arm_insn = 67;
pub const arm_insn_ARM_INS_LDA: arm_insn = 68;
pub const arm_insn_ARM_INS_LDAB: arm_insn = 69;
pub const arm_insn_ARM_INS_LDAEX: arm_insn = 70;
pub const arm_insn_ARM_INS_LDAEXB: arm_insn = 71;
pub const arm_insn_ARM_INS_LDAEXD: arm_insn = 72;
pub const arm_insn_ARM_INS_LDAEXH: arm_insn = 73;
pub const arm_insn_ARM_INS_LDAH: arm_insn = 74;
pub const arm_insn_ARM_INS_LDC: arm_insn = 75;
pub const arm_insn_ARM_INS_LDC2: arm_insn = 76;
pub const arm_insn_ARM_INS_LDC2L: arm_insn = 77;
pub const arm_insn_ARM_INS_LDCL: arm_insn = 78;
pub const arm_insn_ARM_INS_LDM: arm_insn = 79;
pub const arm_insn_ARM_INS_LDMDA: arm_insn = 80;
pub const arm_insn_ARM_INS_LDMDB: arm_insn = 81;
pub const arm_insn_ARM_INS_LDMIB: arm_insn = 82;
pub const arm_insn_ARM_INS_LDR: arm_insn = 83;
pub const arm_insn_ARM_INS_LDRB: arm_insn = 84;
pub const arm_insn_ARM_INS_LDRBT: arm_insn = 85;
pub const arm_insn_ARM_INS_LDRD: arm_insn = 86;
pub const arm_insn_ARM_INS_LDREX: arm_insn = 87;
pub const arm_insn_ARM_INS_LDREXB: arm_insn = 88;
pub const arm_insn_ARM_INS_LDREXD: arm_insn = 89;
pub const arm_insn_ARM_INS_LDREXH: arm_insn = 90;
pub const arm_insn_ARM_INS_LDRH: arm_insn = 91;
pub const arm_insn_ARM_INS_LDRHT: arm_insn = 92;
pub const arm_insn_ARM_INS_LDRSB: arm_insn = 93;
pub const arm_insn_ARM_INS_LDRSBT: arm_insn = 94;
pub const arm_insn_ARM_INS_LDRSH: arm_insn = 95;
pub const arm_insn_ARM_INS_LDRSHT: arm_insn = 96;
pub const arm_insn_ARM_INS_LDRT: arm_insn = 97;
pub const arm_insn_ARM_INS_LSL: arm_insn = 98;
pub const arm_insn_ARM_INS_LSR: arm_insn = 99;
pub const arm_insn_ARM_INS_MCR: arm_insn = 100;
pub const arm_insn_ARM_INS_MCR2: arm_insn = 101;
pub const arm_insn_ARM_INS_MCRR: arm_insn = 102;
pub const arm_insn_ARM_INS_MCRR2: arm_insn = 103;
pub const arm_insn_ARM_INS_MLA: arm_insn = 104;
pub const arm_insn_ARM_INS_MLS: arm_insn = 105;
pub const arm_insn_ARM_INS_MOV: arm_insn = 106;
pub const arm_insn_ARM_INS_MOVS: arm_insn = 107;
pub const arm_insn_ARM_INS_MOVT: arm_insn = 108;
pub const arm_insn_ARM_INS_MOVW: arm_insn = 109;
pub const arm_insn_ARM_INS_MRC: arm_insn = 110;
pub const arm_insn_ARM_INS_MRC2: arm_insn = 111;
pub const arm_insn_ARM_INS_MRRC: arm_insn = 112;
pub const arm_insn_ARM_INS_MRRC2: arm_insn = 113;
pub const arm_insn_ARM_INS_MRS: arm_insn = 114;
pub const arm_insn_ARM_INS_MSR: arm_insn = 115;
pub const arm_insn_ARM_INS_MUL: arm_insn = 116;
pub const arm_insn_ARM_INS_MVN: arm_insn = 117;
pub const arm_insn_ARM_INS_NEG: arm_insn = 118;
pub const arm_insn_ARM_INS_NOP: arm_insn = 119;
pub const arm_insn_ARM_INS_ORN: arm_insn = 120;
pub const arm_insn_ARM_INS_ORR: arm_insn = 121;
pub const arm_insn_ARM_INS_PKHBT: arm_insn = 122;
pub const arm_insn_ARM_INS_PKHTB: arm_insn = 123;
pub const arm_insn_ARM_INS_PLD: arm_insn = 124;
pub const arm_insn_ARM_INS_PLDW: arm_insn = 125;
pub const arm_insn_ARM_INS_PLI: arm_insn = 126;
pub const arm_insn_ARM_INS_POP: arm_insn = 127;
pub const arm_insn_ARM_INS_PUSH: arm_insn = 128;
pub const arm_insn_ARM_INS_QADD: arm_insn = 129;
pub const arm_insn_ARM_INS_QADD16: arm_insn = 130;
pub const arm_insn_ARM_INS_QADD8: arm_insn = 131;
pub const arm_insn_ARM_INS_QASX: arm_insn = 132;
pub const arm_insn_ARM_INS_QDADD: arm_insn = 133;
pub const arm_insn_ARM_INS_QDSUB: arm_insn = 134;
pub const arm_insn_ARM_INS_QSAX: arm_insn = 135;
pub const arm_insn_ARM_INS_QSUB: arm_insn = 136;
pub const arm_insn_ARM_INS_QSUB16: arm_insn = 137;
pub const arm_insn_ARM_INS_QSUB8: arm_insn = 138;
pub const arm_insn_ARM_INS_RBIT: arm_insn = 139;
pub const arm_insn_ARM_INS_REV: arm_insn = 140;
pub const arm_insn_ARM_INS_REV16: arm_insn = 141;
pub const arm_insn_ARM_INS_REVSH: arm_insn = 142;
pub const arm_insn_ARM_INS_RFEDA: arm_insn = 143;
pub const arm_insn_ARM_INS_RFEDB: arm_insn = 144;
pub const arm_insn_ARM_INS_RFEIA: arm_insn = 145;
pub const arm_insn_ARM_INS_RFEIB: arm_insn = 146;
pub const arm_insn_ARM_INS_ROR: arm_insn = 147;
pub const arm_insn_ARM_INS_RRX: arm_insn = 148;
pub const arm_insn_ARM_INS_RSB: arm_insn = 149;
pub const arm_insn_ARM_INS_RSC: arm_insn = 150;
pub const arm_insn_ARM_INS_SADD16: arm_insn = 151;
pub const arm_insn_ARM_INS_SADD8: arm_insn = 152;
pub const arm_insn_ARM_INS_SASX: arm_insn = 153;
pub const arm_insn_ARM_INS_SBC: arm_insn = 154;
pub const arm_insn_ARM_INS_SBFX: arm_insn = 155;
pub const arm_insn_ARM_INS_SDIV: arm_insn = 156;
pub const arm_insn_ARM_INS_SEL: arm_insn = 157;
pub const arm_insn_ARM_INS_SETEND: arm_insn = 158;
pub const arm_insn_ARM_INS_SETPAN: arm_insn = 159;
pub const arm_insn_ARM_INS_SEV: arm_insn = 160;
pub const arm_insn_ARM_INS_SEVL: arm_insn = 161;
pub const arm_insn_ARM_INS_SG: arm_insn = 162;
pub const arm_insn_ARM_INS_SHA1C: arm_insn = 163;
pub const arm_insn_ARM_INS_SHA1H: arm_insn = 164;
pub const arm_insn_ARM_INS_SHA1M: arm_insn = 165;
pub const arm_insn_ARM_INS_SHA1P: arm_insn = 166;
pub const arm_insn_ARM_INS_SHA1SU0: arm_insn = 167;
pub const arm_insn_ARM_INS_SHA1SU1: arm_insn = 168;
pub const arm_insn_ARM_INS_SHA256H: arm_insn = 169;
pub const arm_insn_ARM_INS_SHA256H2: arm_insn = 170;
pub const arm_insn_ARM_INS_SHA256SU0: arm_insn = 171;
pub const arm_insn_ARM_INS_SHA256SU1: arm_insn = 172;
pub const arm_insn_ARM_INS_SHADD16: arm_insn = 173;
pub const arm_insn_ARM_INS_SHADD8: arm_insn = 174;
pub const arm_insn_ARM_INS_SHASX: arm_insn = 175;
pub const arm_insn_ARM_INS_SHSAX: arm_insn = 176;
pub const arm_insn_ARM_INS_SHSUB16: arm_insn = 177;
pub const arm_insn_ARM_INS_SHSUB8: arm_insn = 178;
pub const arm_insn_ARM_INS_SMC: arm_insn = 179;
pub const arm_insn_ARM_INS_SMLABB: arm_insn = 180;
pub const arm_insn_ARM_INS_SMLABT: arm_insn = 181;
pub const arm_insn_ARM_INS_SMLAD: arm_insn = 182;
pub const arm_insn_ARM_INS_SMLADX: arm_insn = 183;
pub const arm_insn_ARM_INS_SMLAL: arm_insn = 184;
pub const arm_insn_ARM_INS_SMLALBB: arm_insn = 185;
pub const arm_insn_ARM_INS_SMLALBT: arm_insn = 186;
pub const arm_insn_ARM_INS_SMLALD: arm_insn = 187;
pub const arm_insn_ARM_INS_SMLALDX: arm_insn = 188;
pub const arm_insn_ARM_INS_SMLALTB: arm_insn = 189;
pub const arm_insn_ARM_INS_SMLALTT: arm_insn = 190;
pub const arm_insn_ARM_INS_SMLATB: arm_insn = 191;
pub const arm_insn_ARM_INS_SMLATT: arm_insn = 192;
pub const arm_insn_ARM_INS_SMLAWB: arm_insn = 193;
pub const arm_insn_ARM_INS_SMLAWT: arm_insn = 194;
pub const arm_insn_ARM_INS_SMLSD: arm_insn = 195;
pub const arm_insn_ARM_INS_SMLSDX: arm_insn = 196;
pub const arm_insn_ARM_INS_SMLSLD: arm_insn = 197;
pub const arm_insn_ARM_INS_SMLSLDX: arm_insn = 198;
pub const arm_insn_ARM_INS_SMMLA: arm_insn = 199;
pub const arm_insn_ARM_INS_SMMLAR: arm_insn = 200;
pub const arm_insn_ARM_INS_SMMLS: arm_insn = 201;
pub const arm_insn_ARM_INS_SMMLSR: arm_insn = 202;
pub const arm_insn_ARM_INS_SMMUL: arm_insn = 203;
pub const arm_insn_ARM_INS_SMMULR: arm_insn = 204;
pub const arm_insn_ARM_INS_SMUAD: arm_insn = 205;
pub const arm_insn_ARM_INS_SMUADX: arm_insn = 206;
pub const arm_insn_ARM_INS_SMULBB: arm_insn = 207;
pub const arm_insn_ARM_INS_SMULBT: arm_insn = 208;
pub const arm_insn_ARM_INS_SMULL: arm_insn = 209;
pub const arm_insn_ARM_INS_SMULTB: arm_insn = 210;
pub const arm_insn_ARM_INS_SMULTT: arm_insn = 211;
pub const arm_insn_ARM_INS_SMULWB: arm_insn = 212;
pub const arm_insn_ARM_INS_SMULWT: arm_insn = 213;
pub const arm_insn_ARM_INS_SMUSD: arm_insn = 214;
pub const arm_insn_ARM_INS_SMUSDX: arm_insn = 215;
pub const arm_insn_ARM_INS_SRSDA: arm_insn = 216;
pub const arm_insn_ARM_INS_SRSDB: arm_insn = 217;
pub const arm_insn_ARM_INS_SRSIA: arm_insn = 218;
pub const arm_insn_ARM_INS_SRSIB: arm_insn = 219;
pub const arm_insn_ARM_INS_SSAT: arm_insn = 220;
pub const arm_insn_ARM_INS_SSAT16: arm_insn = 221;
pub const arm_insn_ARM_INS_SSAX: arm_insn = 222;
pub const arm_insn_ARM_INS_SSUB16: arm_insn = 223;
pub const arm_insn_ARM_INS_SSUB8: arm_insn = 224;
pub const arm_insn_ARM_INS_STC: arm_insn = 225;
pub const arm_insn_ARM_INS_STC2: arm_insn = 226;
pub const arm_insn_ARM_INS_STC2L: arm_insn = 227;
pub const arm_insn_ARM_INS_STCL: arm_insn = 228;
pub const arm_insn_ARM_INS_STL: arm_insn = 229;
pub const arm_insn_ARM_INS_STLB: arm_insn = 230;
pub const arm_insn_ARM_INS_STLEX: arm_insn = 231;
pub const arm_insn_ARM_INS_STLEXB: arm_insn = 232;
pub const arm_insn_ARM_INS_STLEXD: arm_insn = 233;
pub const arm_insn_ARM_INS_STLEXH: arm_insn = 234;
pub const arm_insn_ARM_INS_STLH: arm_insn = 235;
pub const arm_insn_ARM_INS_STM: arm_insn = 236;
pub const arm_insn_ARM_INS_STMDA: arm_insn = 237;
pub const arm_insn_ARM_INS_STMDB: arm_insn = 238;
pub const arm_insn_ARM_INS_STMIB: arm_insn = 239;
pub const arm_insn_ARM_INS_STR: arm_insn = 240;
pub const arm_insn_ARM_INS_STRB: arm_insn = 241;
pub const arm_insn_ARM_INS_STRBT: arm_insn = 242;
pub const arm_insn_ARM_INS_STRD: arm_insn = 243;
pub const arm_insn_ARM_INS_STREX: arm_insn = 244;
pub const arm_insn_ARM_INS_STREXB: arm_insn = 245;
pub const arm_insn_ARM_INS_STREXD: arm_insn = 246;
pub const arm_insn_ARM_INS_STREXH: arm_insn = 247;
pub const arm_insn_ARM_INS_STRH: arm_insn = 248;
pub const arm_insn_ARM_INS_STRHT: arm_insn = 249;
pub const arm_insn_ARM_INS_STRT: arm_insn = 250;
pub const arm_insn_ARM_INS_SUB: arm_insn = 251;
pub const arm_insn_ARM_INS_SUBS: arm_insn = 252;
pub const arm_insn_ARM_INS_SUBW: arm_insn = 253;
pub const arm_insn_ARM_INS_SVC: arm_insn = 254;
pub const arm_insn_ARM_INS_SWP: arm_insn = 255;
pub const arm_insn_ARM_INS_SWPB: arm_insn = 256;
pub const arm_insn_ARM_INS_SXTAB: arm_insn = 257;
pub const arm_insn_ARM_INS_SXTAB16: arm_insn = 258;
pub const arm_insn_ARM_INS_SXTAH: arm_insn = 259;
pub const arm_insn_ARM_INS_SXTB: arm_insn = 260;
pub const arm_insn_ARM_INS_SXTB16: arm_insn = 261;
pub const arm_insn_ARM_INS_SXTH: arm_insn = 262;
pub const arm_insn_ARM_INS_TBB: arm_insn = 263;
pub const arm_insn_ARM_INS_TBH: arm_insn = 264;
pub const arm_insn_ARM_INS_TEQ: arm_insn = 265;
pub const arm_insn_ARM_INS_TRAP: arm_insn = 266;
pub const arm_insn_ARM_INS_TSB: arm_insn = 267;
pub const arm_insn_ARM_INS_TST: arm_insn = 268;
pub const arm_insn_ARM_INS_TT: arm_insn = 269;
pub const arm_insn_ARM_INS_TTA: arm_insn = 270;
pub const arm_insn_ARM_INS_TTAT: arm_insn = 271;
pub const arm_insn_ARM_INS_TTT: arm_insn = 272;
pub const arm_insn_ARM_INS_UADD16: arm_insn = 273;
pub const arm_insn_ARM_INS_UADD8: arm_insn = 274;
pub const arm_insn_ARM_INS_UASX: arm_insn = 275;
pub const arm_insn_ARM_INS_UBFX: arm_insn = 276;
pub const arm_insn_ARM_INS_UDF: arm_insn = 277;
pub const arm_insn_ARM_INS_UDIV: arm_insn = 278;
pub const arm_insn_ARM_INS_UHADD16: arm_insn = 279;
pub const arm_insn_ARM_INS_UHADD8: arm_insn = 280;
pub const arm_insn_ARM_INS_UHASX: arm_insn = 281;
pub const arm_insn_ARM_INS_UHSAX: arm_insn = 282;
pub const arm_insn_ARM_INS_UHSUB16: arm_insn = 283;
pub const arm_insn_ARM_INS_UHSUB8: arm_insn = 284;
pub const arm_insn_ARM_INS_UMAAL: arm_insn = 285;
pub const arm_insn_ARM_INS_UMLAL: arm_insn = 286;
pub const arm_insn_ARM_INS_UMULL: arm_insn = 287;
pub const arm_insn_ARM_INS_UQADD16: arm_insn = 288;
pub const arm_insn_ARM_INS_UQADD8: arm_insn = 289;
pub const arm_insn_ARM_INS_UQASX: arm_insn = 290;
pub const arm_insn_ARM_INS_UQSAX: arm_insn = 291;
pub const arm_insn_ARM_INS_UQSUB16: arm_insn = 292;
pub const arm_insn_ARM_INS_UQSUB8: arm_insn = 293;
pub const arm_insn_ARM_INS_USAD8: arm_insn = 294;
pub const arm_insn_ARM_INS_USADA8: arm_insn = 295;
pub const arm_insn_ARM_INS_USAT: arm_insn = 296;
pub const arm_insn_ARM_INS_USAT16: arm_insn = 297;
pub const arm_insn_ARM_INS_USAX: arm_insn = 298;
pub const arm_insn_ARM_INS_USUB16: arm_insn = 299;
pub const arm_insn_ARM_INS_USUB8: arm_insn = 300;
pub const arm_insn_ARM_INS_UXTAB: arm_insn = 301;
pub const arm_insn_ARM_INS_UXTAB16: arm_insn = 302;
pub const arm_insn_ARM_INS_UXTAH: arm_insn = 303;
pub const arm_insn_ARM_INS_UXTB: arm_insn = 304;
pub const arm_insn_ARM_INS_UXTB16: arm_insn = 305;
pub const arm_insn_ARM_INS_UXTH: arm_insn = 306;
pub const arm_insn_ARM_INS_VABA: arm_insn = 307;
pub const arm_insn_ARM_INS_VABAL: arm_insn = 308;
pub const arm_insn_ARM_INS_VABD: arm_insn = 309;
pub const arm_insn_ARM_INS_VABDL: arm_insn = 310;
pub const arm_insn_ARM_INS_VABS: arm_insn = 311;
pub const arm_insn_ARM_INS_VACGE: arm_insn = 312;
pub const arm_insn_ARM_INS_VACGT: arm_insn = 313;
pub const arm_insn_ARM_INS_VACLE: arm_insn = 314;
pub const arm_insn_ARM_INS_VACLT: arm_insn = 315;
pub const arm_insn_ARM_INS_VADD: arm_insn = 316;
pub const arm_insn_ARM_INS_VADDHN: arm_insn = 317;
pub const arm_insn_ARM_INS_VADDL: arm_insn = 318;
pub const arm_insn_ARM_INS_VADDW: arm_insn = 319;
pub const arm_insn_ARM_INS_VAND: arm_insn = 320;
pub const arm_insn_ARM_INS_VBIC: arm_insn = 321;
pub const arm_insn_ARM_INS_VBIF: arm_insn = 322;
pub const arm_insn_ARM_INS_VBIT: arm_insn = 323;
pub const arm_insn_ARM_INS_VBSL: arm_insn = 324;
pub const arm_insn_ARM_INS_VCADD: arm_insn = 325;
pub const arm_insn_ARM_INS_VCEQ: arm_insn = 326;
pub const arm_insn_ARM_INS_VCGE: arm_insn = 327;
pub const arm_insn_ARM_INS_VCGT: arm_insn = 328;
pub const arm_insn_ARM_INS_VCLE: arm_insn = 329;
pub const arm_insn_ARM_INS_VCLS: arm_insn = 330;
pub const arm_insn_ARM_INS_VCLT: arm_insn = 331;
pub const arm_insn_ARM_INS_VCLZ: arm_insn = 332;
pub const arm_insn_ARM_INS_VCMLA: arm_insn = 333;
pub const arm_insn_ARM_INS_VCMP: arm_insn = 334;
pub const arm_insn_ARM_INS_VCMPE: arm_insn = 335;
pub const arm_insn_ARM_INS_VCNT: arm_insn = 336;
pub const arm_insn_ARM_INS_VCVT: arm_insn = 337;
pub const arm_insn_ARM_INS_VCVTA: arm_insn = 338;
pub const arm_insn_ARM_INS_VCVTB: arm_insn = 339;
pub const arm_insn_ARM_INS_VCVTM: arm_insn = 340;
pub const arm_insn_ARM_INS_VCVTN: arm_insn = 341;
pub const arm_insn_ARM_INS_VCVTP: arm_insn = 342;
pub const arm_insn_ARM_INS_VCVTR: arm_insn = 343;
pub const arm_insn_ARM_INS_VCVTT: arm_insn = 344;
pub const arm_insn_ARM_INS_VDIV: arm_insn = 345;
pub const arm_insn_ARM_INS_VDUP: arm_insn = 346;
pub const arm_insn_ARM_INS_VEOR: arm_insn = 347;
pub const arm_insn_ARM_INS_VEXT: arm_insn = 348;
pub const arm_insn_ARM_INS_VFMA: arm_insn = 349;
pub const arm_insn_ARM_INS_VFMS: arm_insn = 350;
pub const arm_insn_ARM_INS_VFNMA: arm_insn = 351;
pub const arm_insn_ARM_INS_VFNMS: arm_insn = 352;
pub const arm_insn_ARM_INS_VHADD: arm_insn = 353;
pub const arm_insn_ARM_INS_VHSUB: arm_insn = 354;
pub const arm_insn_ARM_INS_VINS: arm_insn = 355;
pub const arm_insn_ARM_INS_VJCVT: arm_insn = 356;
pub const arm_insn_ARM_INS_VLD1: arm_insn = 357;
pub const arm_insn_ARM_INS_VLD2: arm_insn = 358;
pub const arm_insn_ARM_INS_VLD3: arm_insn = 359;
pub const arm_insn_ARM_INS_VLD4: arm_insn = 360;
pub const arm_insn_ARM_INS_VLDMDB: arm_insn = 361;
pub const arm_insn_ARM_INS_VLDMIA: arm_insn = 362;
pub const arm_insn_ARM_INS_VLDR: arm_insn = 363;
pub const arm_insn_ARM_INS_VLLDM: arm_insn = 364;
pub const arm_insn_ARM_INS_VLSTM: arm_insn = 365;
pub const arm_insn_ARM_INS_VMAX: arm_insn = 366;
pub const arm_insn_ARM_INS_VMAXNM: arm_insn = 367;
pub const arm_insn_ARM_INS_VMIN: arm_insn = 368;
pub const arm_insn_ARM_INS_VMINNM: arm_insn = 369;
pub const arm_insn_ARM_INS_VMLA: arm_insn = 370;
pub const arm_insn_ARM_INS_VMLAL: arm_insn = 371;
pub const arm_insn_ARM_INS_VMLS: arm_insn = 372;
pub const arm_insn_ARM_INS_VMLSL: arm_insn = 373;
pub const arm_insn_ARM_INS_VMOV: arm_insn = 374;
pub const arm_insn_ARM_INS_VMOVL: arm_insn = 375;
pub const arm_insn_ARM_INS_VMOVN: arm_insn = 376;
pub const arm_insn_ARM_INS_VMOVX: arm_insn = 377;
pub const arm_insn_ARM_INS_VMRS: arm_insn = 378;
pub const arm_insn_ARM_INS_VMSR: arm_insn = 379;
pub const arm_insn_ARM_INS_VMUL: arm_insn = 380;
pub const arm_insn_ARM_INS_VMULL: arm_insn = 381;
pub const arm_insn_ARM_INS_VMVN: arm_insn = 382;
pub const arm_insn_ARM_INS_VNEG: arm_insn = 383;
pub const arm_insn_ARM_INS_VNMLA: arm_insn = 384;
pub const arm_insn_ARM_INS_VNMLS: arm_insn = 385;
pub const arm_insn_ARM_INS_VNMUL: arm_insn = 386;
pub const arm_insn_ARM_INS_VORN: arm_insn = 387;
pub const arm_insn_ARM_INS_VORR: arm_insn = 388;
pub const arm_insn_ARM_INS_VPADAL: arm_insn = 389;
pub const arm_insn_ARM_INS_VPADD: arm_insn = 390;
pub const arm_insn_ARM_INS_VPADDL: arm_insn = 391;
pub const arm_insn_ARM_INS_VPMAX: arm_insn = 392;
pub const arm_insn_ARM_INS_VPMIN: arm_insn = 393;
pub const arm_insn_ARM_INS_VPOP: arm_insn = 394;
pub const arm_insn_ARM_INS_VPUSH: arm_insn = 395;
pub const arm_insn_ARM_INS_VQABS: arm_insn = 396;
pub const arm_insn_ARM_INS_VQADD: arm_insn = 397;
pub const arm_insn_ARM_INS_VQDMLAL: arm_insn = 398;
pub const arm_insn_ARM_INS_VQDMLSL: arm_insn = 399;
pub const arm_insn_ARM_INS_VQDMULH: arm_insn = 400;
pub const arm_insn_ARM_INS_VQDMULL: arm_insn = 401;
pub const arm_insn_ARM_INS_VQMOVN: arm_insn = 402;
pub const arm_insn_ARM_INS_VQMOVUN: arm_insn = 403;
pub const arm_insn_ARM_INS_VQNEG: arm_insn = 404;
pub const arm_insn_ARM_INS_VQRDMLAH: arm_insn = 405;
pub const arm_insn_ARM_INS_VQRDMLSH: arm_insn = 406;
pub const arm_insn_ARM_INS_VQRDMULH: arm_insn = 407;
pub const arm_insn_ARM_INS_VQRSHL: arm_insn = 408;
pub const arm_insn_ARM_INS_VQRSHRN: arm_insn = 409;
pub const arm_insn_ARM_INS_VQRSHRUN: arm_insn = 410;
pub const arm_insn_ARM_INS_VQSHL: arm_insn = 411;
pub const arm_insn_ARM_INS_VQSHLU: arm_insn = 412;
pub const arm_insn_ARM_INS_VQSHRN: arm_insn = 413;
pub const arm_insn_ARM_INS_VQSHRUN: arm_insn = 414;
pub const arm_insn_ARM_INS_VQSUB: arm_insn = 415;
pub const arm_insn_ARM_INS_VRADDHN: arm_insn = 416;
pub const arm_insn_ARM_INS_VRECPE: arm_insn = 417;
pub const arm_insn_ARM_INS_VRECPS: arm_insn = 418;
pub const arm_insn_ARM_INS_VREV16: arm_insn = 419;
pub const arm_insn_ARM_INS_VREV32: arm_insn = 420;
pub const arm_insn_ARM_INS_VREV64: arm_insn = 421;
pub const arm_insn_ARM_INS_VRHADD: arm_insn = 422;
pub const arm_insn_ARM_INS_VRINTA: arm_insn = 423;
pub const arm_insn_ARM_INS_VRINTM: arm_insn = 424;
pub const arm_insn_ARM_INS_VRINTN: arm_insn = 425;
pub const arm_insn_ARM_INS_VRINTP: arm_insn = 426;
pub const arm_insn_ARM_INS_VRINTR: arm_insn = 427;
pub const arm_insn_ARM_INS_VRINTX: arm_insn = 428;
pub const arm_insn_ARM_INS_VRINTZ: arm_insn = 429;
pub const arm_insn_ARM_INS_VRSHL: arm_insn = 430;
pub const arm_insn_ARM_INS_VRSHR: arm_insn = 431;
pub const arm_insn_ARM_INS_VRSHRN: arm_insn = 432;
pub const arm_insn_ARM_INS_VRSQRTE: arm_insn = 433;
pub const arm_insn_ARM_INS_VRSQRTS: arm_insn = 434;
pub const arm_insn_ARM_INS_VRSRA: arm_insn = 435;
pub const arm_insn_ARM_INS_VRSUBHN: arm_insn = 436;
pub const arm_insn_ARM_INS_VSDOT: arm_insn = 437;
pub const arm_insn_ARM_INS_VSELEQ: arm_insn = 438;
pub const arm_insn_ARM_INS_VSELGE: arm_insn = 439;
pub const arm_insn_ARM_INS_VSELGT: arm_insn = 440;
pub const arm_insn_ARM_INS_VSELVS: arm_insn = 441;
pub const arm_insn_ARM_INS_VSHL: arm_insn = 442;
pub const arm_insn_ARM_INS_VSHLL: arm_insn = 443;
pub const arm_insn_ARM_INS_VSHR: arm_insn = 444;
pub const arm_insn_ARM_INS_VSHRN: arm_insn = 445;
pub const arm_insn_ARM_INS_VSLI: arm_insn = 446;
pub const arm_insn_ARM_INS_VSQRT: arm_insn = 447;
pub const arm_insn_ARM_INS_VSRA: arm_insn = 448;
pub const arm_insn_ARM_INS_VSRI: arm_insn = 449;
pub const arm_insn_ARM_INS_VST1: arm_insn = 450;
pub const arm_insn_ARM_INS_VST2: arm_insn = 451;
pub const arm_insn_ARM_INS_VST3: arm_insn = 452;
pub const arm_insn_ARM_INS_VST4: arm_insn = 453;
pub const arm_insn_ARM_INS_VSTMDB: arm_insn = 454;
pub const arm_insn_ARM_INS_VSTMIA: arm_insn = 455;
pub const arm_insn_ARM_INS_VSTR: arm_insn = 456;
pub const arm_insn_ARM_INS_VSUB: arm_insn = 457;
pub const arm_insn_ARM_INS_VSUBHN: arm_insn = 458;
pub const arm_insn_ARM_INS_VSUBL: arm_insn = 459;
pub const arm_insn_ARM_INS_VSUBW: arm_insn = 460;
pub const arm_insn_ARM_INS_VSWP: arm_insn = 461;
pub const arm_insn_ARM_INS_VTBL: arm_insn = 462;
pub const arm_insn_ARM_INS_VTBX: arm_insn = 463;
pub const arm_insn_ARM_INS_VTRN: arm_insn = 464;
pub const arm_insn_ARM_INS_VTST: arm_insn = 465;
pub const arm_insn_ARM_INS_VUDOT: arm_insn = 466;
pub const arm_insn_ARM_INS_VUZP: arm_insn = 467;
pub const arm_insn_ARM_INS_VZIP: arm_insn = 468;
pub const arm_insn_ARM_INS_WFE: arm_insn = 469;
pub const arm_insn_ARM_INS_WFI: arm_insn = 470;
pub const arm_insn_ARM_INS_YIELD: arm_insn = 471;
pub const arm_insn_ARM_INS_ENDING: arm_insn = 472;
pub type arm_insn = ::core::ffi::c_uint;
pub const arm_insn_group_ARM_GRP_INVALID: arm_insn_group = 0;
pub const arm_insn_group_ARM_GRP_JUMP: arm_insn_group = 1;
pub const arm_insn_group_ARM_GRP_CALL: arm_insn_group = 2;
pub const arm_insn_group_ARM_GRP_INT: arm_insn_group = 4;
pub const arm_insn_group_ARM_GRP_PRIVILEGE: arm_insn_group = 6;
pub const arm_insn_group_ARM_GRP_BRANCH_RELATIVE: arm_insn_group = 7;
pub const arm_insn_group_ARM_GRP_CRYPTO: arm_insn_group = 128;
pub const arm_insn_group_ARM_GRP_DATABARRIER: arm_insn_group = 129;
pub const arm_insn_group_ARM_GRP_DIVIDE: arm_insn_group = 130;
pub const arm_insn_group_ARM_GRP_FPARMV8: arm_insn_group = 131;
pub const arm_insn_group_ARM_GRP_MULTPRO: arm_insn_group = 132;
pub const arm_insn_group_ARM_GRP_NEON: arm_insn_group = 133;
pub const arm_insn_group_ARM_GRP_T2EXTRACTPACK: arm_insn_group = 134;
pub const arm_insn_group_ARM_GRP_THUMB2DSP: arm_insn_group = 135;
pub const arm_insn_group_ARM_GRP_TRUSTZONE: arm_insn_group = 136;
pub const arm_insn_group_ARM_GRP_V4T: arm_insn_group = 137;
pub const arm_insn_group_ARM_GRP_V5T: arm_insn_group = 138;
pub const arm_insn_group_ARM_GRP_V5TE: arm_insn_group = 139;
pub const arm_insn_group_ARM_GRP_V6: arm_insn_group = 140;
pub const arm_insn_group_ARM_GRP_V6T2: arm_insn_group = 141;
pub const arm_insn_group_ARM_GRP_V7: arm_insn_group = 142;
pub const arm_insn_group_ARM_GRP_V8: arm_insn_group = 143;
pub const arm_insn_group_ARM_GRP_VFP2: arm_insn_group = 144;
pub const arm_insn_group_ARM_GRP_VFP3: arm_insn_group = 145;
pub const arm_insn_group_ARM_GRP_VFP4: arm_insn_group = 146;
pub const arm_insn_group_ARM_GRP_ARM: arm_insn_group = 147;
pub const arm_insn_group_ARM_GRP_MCLASS: arm_insn_group = 148;
pub const arm_insn_group_ARM_GRP_NOTMCLASS: arm_insn_group = 149;
pub const arm_insn_group_ARM_GRP_THUMB: arm_insn_group = 150;
pub const arm_insn_group_ARM_GRP_THUMB1ONLY: arm_insn_group = 151;
pub const arm_insn_group_ARM_GRP_THUMB2: arm_insn_group = 152;
pub const arm_insn_group_ARM_GRP_PREV8: arm_insn_group = 153;
pub const arm_insn_group_ARM_GRP_FPVMLX: arm_insn_group = 154;
pub const arm_insn_group_ARM_GRP_MULOPS: arm_insn_group = 155;
pub const arm_insn_group_ARM_GRP_CRC: arm_insn_group = 156;
pub const arm_insn_group_ARM_GRP_DPVFP: arm_insn_group = 157;
pub const arm_insn_group_ARM_GRP_V6M: arm_insn_group = 158;
pub const arm_insn_group_ARM_GRP_VIRTUALIZATION: arm_insn_group = 159;
pub const arm_insn_group_ARM_GRP_ENDING: arm_insn_group = 160;
pub type arm_insn_group = ::core::ffi::c_uint;
pub const arm64_shifter_ARM64_SFT_INVALID: arm64_shifter = 0;
pub const arm64_shifter_ARM64_SFT_LSL: arm64_shifter = 1;
pub const arm64_shifter_ARM64_SFT_MSL: arm64_shifter = 2;
pub const arm64_shifter_ARM64_SFT_LSR: arm64_shifter = 3;
pub const arm64_shifter_ARM64_SFT_ASR: arm64_shifter = 4;
pub const arm64_shifter_ARM64_SFT_ROR: arm64_shifter = 5;
pub type arm64_shifter = ::core::ffi::c_uint;
pub const arm64_extender_ARM64_EXT_INVALID: arm64_extender = 0;
pub const arm64_extender_ARM64_EXT_UXTB: arm64_extender = 1;
pub const arm64_extender_ARM64_EXT_UXTH: arm64_extender = 2;
pub const arm64_extender_ARM64_EXT_UXTW: arm64_extender = 3;
pub const arm64_extender_ARM64_EXT_UXTX: arm64_extender = 4;
pub const arm64_extender_ARM64_EXT_SXTB: arm64_extender = 5;
pub const arm64_extender_ARM64_EXT_SXTH: arm64_extender = 6;
pub const arm64_extender_ARM64_EXT_SXTW: arm64_extender = 7;
pub const arm64_extender_ARM64_EXT_SXTX: arm64_extender = 8;
pub type arm64_extender = ::core::ffi::c_uint;
pub const arm64_cc_ARM64_CC_INVALID: arm64_cc = 0;
pub const arm64_cc_ARM64_CC_EQ: arm64_cc = 1;
pub const arm64_cc_ARM64_CC_NE: arm64_cc = 2;
pub const arm64_cc_ARM64_CC_HS: arm64_cc = 3;
pub const arm64_cc_ARM64_CC_LO: arm64_cc = 4;
pub const arm64_cc_ARM64_CC_MI: arm64_cc = 5;
pub const arm64_cc_ARM64_CC_PL: arm64_cc = 6;
pub const arm64_cc_ARM64_CC_VS: arm64_cc = 7;
pub const arm64_cc_ARM64_CC_VC: arm64_cc = 8;
pub const arm64_cc_ARM64_CC_HI: arm64_cc = 9;
pub const arm64_cc_ARM64_CC_LS: arm64_cc = 10;
pub const arm64_cc_ARM64_CC_GE: arm64_cc = 11;
pub const arm64_cc_ARM64_CC_LT: arm64_cc = 12;
pub const arm64_cc_ARM64_CC_GT: arm64_cc = 13;
pub const arm64_cc_ARM64_CC_LE: arm64_cc = 14;
pub const arm64_cc_ARM64_CC_AL: arm64_cc = 15;
pub const arm64_cc_ARM64_CC_NV: arm64_cc = 16;
pub type arm64_cc = ::core::ffi::c_uint;
pub const arm64_sysreg_ARM64_SYSREG_INVALID: arm64_sysreg = 0;
pub const arm64_sysreg_ARM64_SYSREG_ACCDATA_EL1: arm64_sysreg = 50821;
pub const arm64_sysreg_ARM64_SYSREG_ACTLR_EL1: arm64_sysreg = 49281;
pub const arm64_sysreg_ARM64_SYSREG_ACTLR_EL2: arm64_sysreg = 57473;
pub const arm64_sysreg_ARM64_SYSREG_ACTLR_EL3: arm64_sysreg = 61569;
pub const arm64_sysreg_ARM64_SYSREG_AFSR0_EL1: arm64_sysreg = 49800;
pub const arm64_sysreg_ARM64_SYSREG_AFSR0_EL12: arm64_sysreg = 60040;
pub const arm64_sysreg_ARM64_SYSREG_AFSR0_EL2: arm64_sysreg = 57992;
pub const arm64_sysreg_ARM64_SYSREG_AFSR0_EL3: arm64_sysreg = 62088;
pub const arm64_sysreg_ARM64_SYSREG_AFSR1_EL1: arm64_sysreg = 49801;
pub const arm64_sysreg_ARM64_SYSREG_AFSR1_EL12: arm64_sysreg = 60041;
pub const arm64_sysreg_ARM64_SYSREG_AFSR1_EL2: arm64_sysreg = 57993;
pub const arm64_sysreg_ARM64_SYSREG_AFSR1_EL3: arm64_sysreg = 62089;
pub const arm64_sysreg_ARM64_SYSREG_AIDR_EL1: arm64_sysreg = 51207;
pub const arm64_sysreg_ARM64_SYSREG_AMAIR_EL1: arm64_sysreg = 50456;
pub const arm64_sysreg_ARM64_SYSREG_AMAIR_EL12: arm64_sysreg = 60696;
pub const arm64_sysreg_ARM64_SYSREG_AMAIR_EL2: arm64_sysreg = 58648;
pub const arm64_sysreg_ARM64_SYSREG_AMAIR_EL3: arm64_sysreg = 62744;
pub const arm64_sysreg_ARM64_SYSREG_AMCFGR_EL0: arm64_sysreg = 56977;
pub const arm64_sysreg_ARM64_SYSREG_AMCGCR_EL0: arm64_sysreg = 56978;
pub const arm64_sysreg_ARM64_SYSREG_AMCNTENCLR0_EL0: arm64_sysreg = 56980;
pub const arm64_sysreg_ARM64_SYSREG_AMCNTENCLR1_EL0: arm64_sysreg = 56984;
pub const arm64_sysreg_ARM64_SYSREG_AMCNTENSET0_EL0: arm64_sysreg = 56981;
pub const arm64_sysreg_ARM64_SYSREG_AMCNTENSET1_EL0: arm64_sysreg = 56985;
pub const arm64_sysreg_ARM64_SYSREG_AMCR_EL0: arm64_sysreg = 56976;
pub const arm64_sysreg_ARM64_SYSREG_AMEVCNTR00_EL0: arm64_sysreg = 56992;
pub const arm64_sysreg_ARM64_SYSREG_AMEVCNTR01_EL0: arm64_sysreg = 56993;
pub const arm64_sysreg_ARM64_SYSREG_AMEVCNTR02_EL0: arm64_sysreg = 56994;
pub const arm64_sysreg_ARM64_SYSREG_AMEVCNTR03_EL0: arm64_sysreg = 56995;
pub const arm64_sysreg_ARM64_SYSREG_AMEVCNTR10_EL0: arm64_sysreg = 57056;
pub const arm64_sysreg_ARM64_SYSREG_AMEVCNTR110_EL0: arm64_sysreg = 57066;
pub const arm64_sysreg_ARM64_SYSREG_AMEVCNTR111_EL0: arm64_sysreg = 57067;
pub const arm64_sysreg_ARM64_SYSREG_AMEVCNTR112_EL0: arm64_sysreg = 57068;
pub const arm64_sysreg_ARM64_SYSREG_AMEVCNTR113_EL0: arm64_sysreg = 57069;
pub const arm64_sysreg_ARM64_SYSREG_AMEVCNTR114_EL0: arm64_sysreg = 57070;
pub const arm64_sysreg_ARM64_SYSREG_AMEVCNTR115_EL0: arm64_sysreg = 57071;
pub const arm64_sysreg_ARM64_SYSREG_AMEVCNTR11_EL0: arm64_sysreg = 57057;
pub const arm64_sysreg_ARM64_SYSREG_AMEVCNTR12_EL0: arm64_sysreg = 57058;
pub const arm64_sysreg_ARM64_SYSREG_AMEVCNTR13_EL0: arm64_sysreg = 57059;
pub const arm64_sysreg_ARM64_SYSREG_AMEVCNTR14_EL0: arm64_sysreg = 57060;
pub const arm64_sysreg_ARM64_SYSREG_AMEVCNTR15_EL0: arm64_sysreg = 57061;
pub const arm64_sysreg_ARM64_SYSREG_AMEVCNTR16_EL0: arm64_sysreg = 57062;
pub const arm64_sysreg_ARM64_SYSREG_AMEVCNTR17_EL0: arm64_sysreg = 57063;
pub const arm64_sysreg_ARM64_SYSREG_AMEVCNTR18_EL0: arm64_sysreg = 57064;
pub const arm64_sysreg_ARM64_SYSREG_AMEVCNTR19_EL0: arm64_sysreg = 57065;
pub const arm64_sysreg_ARM64_SYSREG_AMEVCNTVOFF00_EL2: arm64_sysreg = 59072;
pub const arm64_sysreg_ARM64_SYSREG_AMEVCNTVOFF010_EL2: arm64_sysreg = 59082;
pub const arm64_sysreg_ARM64_SYSREG_AMEVCNTVOFF011_EL2: arm64_sysreg = 59083;
pub const arm64_sysreg_ARM64_SYSREG_AMEVCNTVOFF012_EL2: arm64_sysreg = 59084;
pub const arm64_sysreg_ARM64_SYSREG_AMEVCNTVOFF013_EL2: arm64_sysreg = 59085;
pub const arm64_sysreg_ARM64_SYSREG_AMEVCNTVOFF014_EL2: arm64_sysreg = 59086;
pub const arm64_sysreg_ARM64_SYSREG_AMEVCNTVOFF015_EL2: arm64_sysreg = 59087;
pub const arm64_sysreg_ARM64_SYSREG_AMEVCNTVOFF01_EL2: arm64_sysreg = 59073;
pub const arm64_sysreg_ARM64_SYSREG_AMEVCNTVOFF02_EL2: arm64_sysreg = 59074;
pub const arm64_sysreg_ARM64_SYSREG_AMEVCNTVOFF03_EL2: arm64_sysreg = 59075;
pub const arm64_sysreg_ARM64_SYSREG_AMEVCNTVOFF04_EL2: arm64_sysreg = 59076;
pub const arm64_sysreg_ARM64_SYSREG_AMEVCNTVOFF05_EL2: arm64_sysreg = 59077;
pub const arm64_sysreg_ARM64_SYSREG_AMEVCNTVOFF06_EL2: arm64_sysreg = 59078;
pub const arm64_sysreg_ARM64_SYSREG_AMEVCNTVOFF07_EL2: arm64_sysreg = 59079;
pub const arm64_sysreg_ARM64_SYSREG_AMEVCNTVOFF08_EL2: arm64_sysreg = 59080;
pub const arm64_sysreg_ARM64_SYSREG_AMEVCNTVOFF09_EL2: arm64_sysreg = 59081;
pub const arm64_sysreg_ARM64_SYSREG_AMEVCNTVOFF10_EL2: arm64_sysreg = 59088;
pub const arm64_sysreg_ARM64_SYSREG_AMEVCNTVOFF110_EL2: arm64_sysreg = 59098;
pub const arm64_sysreg_ARM64_SYSREG_AMEVCNTVOFF111_EL2: arm64_sysreg = 59099;
pub const arm64_sysreg_ARM64_SYSREG_AMEVCNTVOFF112_EL2: arm64_sysreg = 59100;
pub const arm64_sysreg_ARM64_SYSREG_AMEVCNTVOFF113_EL2: arm64_sysreg = 59101;
pub const arm64_sysreg_ARM64_SYSREG_AMEVCNTVOFF114_EL2: arm64_sysreg = 59102;
pub const arm64_sysreg_ARM64_SYSREG_AMEVCNTVOFF115_EL2: arm64_sysreg = 59103;
pub const arm64_sysreg_ARM64_SYSREG_AMEVCNTVOFF11_EL2: arm64_sysreg = 59089;
pub const arm64_sysreg_ARM64_SYSREG_AMEVCNTVOFF12_EL2: arm64_sysreg = 59090;
pub const arm64_sysreg_ARM64_SYSREG_AMEVCNTVOFF13_EL2: arm64_sysreg = 59091;
pub const arm64_sysreg_ARM64_SYSREG_AMEVCNTVOFF14_EL2: arm64_sysreg = 59092;
pub const arm64_sysreg_ARM64_SYSREG_AMEVCNTVOFF15_EL2: arm64_sysreg = 59093;
pub const arm64_sysreg_ARM64_SYSREG_AMEVCNTVOFF16_EL2: arm64_sysreg = 59094;
pub const arm64_sysreg_ARM64_SYSREG_AMEVCNTVOFF17_EL2: arm64_sysreg = 59095;
pub const arm64_sysreg_ARM64_SYSREG_AMEVCNTVOFF18_EL2: arm64_sysreg = 59096;
pub const arm64_sysreg_ARM64_SYSREG_AMEVCNTVOFF19_EL2: arm64_sysreg = 59097;
pub const arm64_sysreg_ARM64_SYSREG_AMEVTYPER00_EL0: arm64_sysreg = 57008;
pub const arm64_sysreg_ARM64_SYSREG_AMEVTYPER01_EL0: arm64_sysreg = 57009;
pub const arm64_sysreg_ARM64_SYSREG_AMEVTYPER02_EL0: arm64_sysreg = 57010;
pub const arm64_sysreg_ARM64_SYSREG_AMEVTYPER03_EL0: arm64_sysreg = 57011;
pub const arm64_sysreg_ARM64_SYSREG_AMEVTYPER10_EL0: arm64_sysreg = 57072;
pub const arm64_sysreg_ARM64_SYSREG_AMEVTYPER110_EL0: arm64_sysreg = 57082;
pub const arm64_sysreg_ARM64_SYSREG_AMEVTYPER111_EL0: arm64_sysreg = 57083;
pub const arm64_sysreg_ARM64_SYSREG_AMEVTYPER112_EL0: arm64_sysreg = 57084;
pub const arm64_sysreg_ARM64_SYSREG_AMEVTYPER113_EL0: arm64_sysreg = 57085;
pub const arm64_sysreg_ARM64_SYSREG_AMEVTYPER114_EL0: arm64_sysreg = 57086;
pub const arm64_sysreg_ARM64_SYSREG_AMEVTYPER115_EL0: arm64_sysreg = 57087;
pub const arm64_sysreg_ARM64_SYSREG_AMEVTYPER11_EL0: arm64_sysreg = 57073;
pub const arm64_sysreg_ARM64_SYSREG_AMEVTYPER12_EL0: arm64_sysreg = 57074;
pub const arm64_sysreg_ARM64_SYSREG_AMEVTYPER13_EL0: arm64_sysreg = 57075;
pub const arm64_sysreg_ARM64_SYSREG_AMEVTYPER14_EL0: arm64_sysreg = 57076;
pub const arm64_sysreg_ARM64_SYSREG_AMEVTYPER15_EL0: arm64_sysreg = 57077;
pub const arm64_sysreg_ARM64_SYSREG_AMEVTYPER16_EL0: arm64_sysreg = 57078;
pub const arm64_sysreg_ARM64_SYSREG_AMEVTYPER17_EL0: arm64_sysreg = 57079;
pub const arm64_sysreg_ARM64_SYSREG_AMEVTYPER18_EL0: arm64_sysreg = 57080;
pub const arm64_sysreg_ARM64_SYSREG_AMEVTYPER19_EL0: arm64_sysreg = 57081;
pub const arm64_sysreg_ARM64_SYSREG_AMUSERENR_EL0: arm64_sysreg = 56979;
pub const arm64_sysreg_ARM64_SYSREG_APDAKEYHI_EL1: arm64_sysreg = 49425;
pub const arm64_sysreg_ARM64_SYSREG_APDAKEYLO_EL1: arm64_sysreg = 49424;
pub const arm64_sysreg_ARM64_SYSREG_APDBKEYHI_EL1: arm64_sysreg = 49427;
pub const arm64_sysreg_ARM64_SYSREG_APDBKEYLO_EL1: arm64_sysreg = 49426;
pub const arm64_sysreg_ARM64_SYSREG_APGAKEYHI_EL1: arm64_sysreg = 49433;
pub const arm64_sysreg_ARM64_SYSREG_APGAKEYLO_EL1: arm64_sysreg = 49432;
pub const arm64_sysreg_ARM64_SYSREG_APIAKEYHI_EL1: arm64_sysreg = 49417;
pub const arm64_sysreg_ARM64_SYSREG_APIAKEYLO_EL1: arm64_sysreg = 49416;
pub const arm64_sysreg_ARM64_SYSREG_APIBKEYHI_EL1: arm64_sysreg = 49419;
pub const arm64_sysreg_ARM64_SYSREG_APIBKEYLO_EL1: arm64_sysreg = 49418;
pub const arm64_sysreg_ARM64_SYSREG_BRBCR_EL1: arm64_sysreg = 35968;
pub const arm64_sysreg_ARM64_SYSREG_BRBCR_EL12: arm64_sysreg = 44160;
pub const arm64_sysreg_ARM64_SYSREG_BRBCR_EL2: arm64_sysreg = 42112;
pub const arm64_sysreg_ARM64_SYSREG_BRBFCR_EL1: arm64_sysreg = 35969;
pub const arm64_sysreg_ARM64_SYSREG_BRBIDR0_EL1: arm64_sysreg = 35984;
pub const arm64_sysreg_ARM64_SYSREG_BRBINF0_EL1: arm64_sysreg = 35840;
pub const arm64_sysreg_ARM64_SYSREG_BRBINF10_EL1: arm64_sysreg = 35920;
pub const arm64_sysreg_ARM64_SYSREG_BRBINF11_EL1: arm64_sysreg = 35928;
pub const arm64_sysreg_ARM64_SYSREG_BRBINF12_EL1: arm64_sysreg = 35936;
pub const arm64_sysreg_ARM64_SYSREG_BRBINF13_EL1: arm64_sysreg = 35944;
pub const arm64_sysreg_ARM64_SYSREG_BRBINF14_EL1: arm64_sysreg = 35952;
pub const arm64_sysreg_ARM64_SYSREG_BRBINF15_EL1: arm64_sysreg = 35960;
pub const arm64_sysreg_ARM64_SYSREG_BRBINF16_EL1: arm64_sysreg = 35844;
pub const arm64_sysreg_ARM64_SYSREG_BRBINF17_EL1: arm64_sysreg = 35852;
pub const arm64_sysreg_ARM64_SYSREG_BRBINF18_EL1: arm64_sysreg = 35860;
pub const arm64_sysreg_ARM64_SYSREG_BRBINF19_EL1: arm64_sysreg = 35868;
pub const arm64_sysreg_ARM64_SYSREG_BRBINF1_EL1: arm64_sysreg = 35848;
pub const arm64_sysreg_ARM64_SYSREG_BRBINF20_EL1: arm64_sysreg = 35876;
pub const arm64_sysreg_ARM64_SYSREG_BRBINF21_EL1: arm64_sysreg = 35884;
pub const arm64_sysreg_ARM64_SYSREG_BRBINF22_EL1: arm64_sysreg = 35892;
pub const arm64_sysreg_ARM64_SYSREG_BRBINF23_EL1: arm64_sysreg = 35900;
pub const arm64_sysreg_ARM64_SYSREG_BRBINF24_EL1: arm64_sysreg = 35908;
pub const arm64_sysreg_ARM64_SYSREG_BRBINF25_EL1: arm64_sysreg = 35916;
pub const arm64_sysreg_ARM64_SYSREG_BRBINF26_EL1: arm64_sysreg = 35924;
pub const arm64_sysreg_ARM64_SYSREG_BRBINF27_EL1: arm64_sysreg = 35932;
pub const arm64_sysreg_ARM64_SYSREG_BRBINF28_EL1: arm64_sysreg = 35940;
pub const arm64_sysreg_ARM64_SYSREG_BRBINF29_EL1: arm64_sysreg = 35948;
pub const arm64_sysreg_ARM64_SYSREG_BRBINF2_EL1: arm64_sysreg = 35856;
pub const arm64_sysreg_ARM64_SYSREG_BRBINF30_EL1: arm64_sysreg = 35956;
pub const arm64_sysreg_ARM64_SYSREG_BRBINF31_EL1: arm64_sysreg = 35964;
pub const arm64_sysreg_ARM64_SYSREG_BRBINF3_EL1: arm64_sysreg = 35864;
pub const arm64_sysreg_ARM64_SYSREG_BRBINF4_EL1: arm64_sysreg = 35872;
pub const arm64_sysreg_ARM64_SYSREG_BRBINF5_EL1: arm64_sysreg = 35880;
pub const arm64_sysreg_ARM64_SYSREG_BRBINF6_EL1: arm64_sysreg = 35888;
pub const arm64_sysreg_ARM64_SYSREG_BRBINF7_EL1: arm64_sysreg = 35896;
pub const arm64_sysreg_ARM64_SYSREG_BRBINF8_EL1: arm64_sysreg = 35904;
pub const arm64_sysreg_ARM64_SYSREG_BRBINF9_EL1: arm64_sysreg = 35912;
pub const arm64_sysreg_ARM64_SYSREG_BRBINFINJ_EL1: arm64_sysreg = 35976;
pub const arm64_sysreg_ARM64_SYSREG_BRBSRC0_EL1: arm64_sysreg = 35841;
pub const arm64_sysreg_ARM64_SYSREG_BRBSRC10_EL1: arm64_sysreg = 35921;
pub const arm64_sysreg_ARM64_SYSREG_BRBSRC11_EL1: arm64_sysreg = 35929;
pub const arm64_sysreg_ARM64_SYSREG_BRBSRC12_EL1: arm64_sysreg = 35937;
pub const arm64_sysreg_ARM64_SYSREG_BRBSRC13_EL1: arm64_sysreg = 35945;
pub const arm64_sysreg_ARM64_SYSREG_BRBSRC14_EL1: arm64_sysreg = 35953;
pub const arm64_sysreg_ARM64_SYSREG_BRBSRC15_EL1: arm64_sysreg = 35961;
pub const arm64_sysreg_ARM64_SYSREG_BRBSRC16_EL1: arm64_sysreg = 35845;
pub const arm64_sysreg_ARM64_SYSREG_BRBSRC17_EL1: arm64_sysreg = 35853;
pub const arm64_sysreg_ARM64_SYSREG_BRBSRC18_EL1: arm64_sysreg = 35861;
pub const arm64_sysreg_ARM64_SYSREG_BRBSRC19_EL1: arm64_sysreg = 35869;
pub const arm64_sysreg_ARM64_SYSREG_BRBSRC1_EL1: arm64_sysreg = 35849;
pub const arm64_sysreg_ARM64_SYSREG_BRBSRC20_EL1: arm64_sysreg = 35877;
pub const arm64_sysreg_ARM64_SYSREG_BRBSRC21_EL1: arm64_sysreg = 35885;
pub const arm64_sysreg_ARM64_SYSREG_BRBSRC22_EL1: arm64_sysreg = 35893;
pub const arm64_sysreg_ARM64_SYSREG_BRBSRC23_EL1: arm64_sysreg = 35901;
pub const arm64_sysreg_ARM64_SYSREG_BRBSRC24_EL1: arm64_sysreg = 35909;
pub const arm64_sysreg_ARM64_SYSREG_BRBSRC25_EL1: arm64_sysreg = 35917;
pub const arm64_sysreg_ARM64_SYSREG_BRBSRC26_EL1: arm64_sysreg = 35925;
pub const arm64_sysreg_ARM64_SYSREG_BRBSRC27_EL1: arm64_sysreg = 35933;
pub const arm64_sysreg_ARM64_SYSREG_BRBSRC28_EL1: arm64_sysreg = 35941;
pub const arm64_sysreg_ARM64_SYSREG_BRBSRC29_EL1: arm64_sysreg = 35949;
pub const arm64_sysreg_ARM64_SYSREG_BRBSRC2_EL1: arm64_sysreg = 35857;
pub const arm64_sysreg_ARM64_SYSREG_BRBSRC30_EL1: arm64_sysreg = 35957;
pub const arm64_sysreg_ARM64_SYSREG_BRBSRC31_EL1: arm64_sysreg = 35965;
pub const arm64_sysreg_ARM64_SYSREG_BRBSRC3_EL1: arm64_sysreg = 35865;
pub const arm64_sysreg_ARM64_SYSREG_BRBSRC4_EL1: arm64_sysreg = 35873;
pub const arm64_sysreg_ARM64_SYSREG_BRBSRC5_EL1: arm64_sysreg = 35881;
pub const arm64_sysreg_ARM64_SYSREG_BRBSRC6_EL1: arm64_sysreg = 35889;
pub const arm64_sysreg_ARM64_SYSREG_BRBSRC7_EL1: arm64_sysreg = 35897;
pub const arm64_sysreg_ARM64_SYSREG_BRBSRC8_EL1: arm64_sysreg = 35905;
pub const arm64_sysreg_ARM64_SYSREG_BRBSRC9_EL1: arm64_sysreg = 35913;
pub const arm64_sysreg_ARM64_SYSREG_BRBSRCINJ_EL1: arm64_sysreg = 35977;
pub const arm64_sysreg_ARM64_SYSREG_BRBTGT0_EL1: arm64_sysreg = 35842;
pub const arm64_sysreg_ARM64_SYSREG_BRBTGT10_EL1: arm64_sysreg = 35922;
pub const arm64_sysreg_ARM64_SYSREG_BRBTGT11_EL1: arm64_sysreg = 35930;
pub const arm64_sysreg_ARM64_SYSREG_BRBTGT12_EL1: arm64_sysreg = 35938;
pub const arm64_sysreg_ARM64_SYSREG_BRBTGT13_EL1: arm64_sysreg = 35946;
pub const arm64_sysreg_ARM64_SYSREG_BRBTGT14_EL1: arm64_sysreg = 35954;
pub const arm64_sysreg_ARM64_SYSREG_BRBTGT15_EL1: arm64_sysreg = 35962;
pub const arm64_sysreg_ARM64_SYSREG_BRBTGT16_EL1: arm64_sysreg = 35846;
pub const arm64_sysreg_ARM64_SYSREG_BRBTGT17_EL1: arm64_sysreg = 35854;
pub const arm64_sysreg_ARM64_SYSREG_BRBTGT18_EL1: arm64_sysreg = 35862;
pub const arm64_sysreg_ARM64_SYSREG_BRBTGT19_EL1: arm64_sysreg = 35870;
pub const arm64_sysreg_ARM64_SYSREG_BRBTGT1_EL1: arm64_sysreg = 35850;
pub const arm64_sysreg_ARM64_SYSREG_BRBTGT20_EL1: arm64_sysreg = 35878;
pub const arm64_sysreg_ARM64_SYSREG_BRBTGT21_EL1: arm64_sysreg = 35886;
pub const arm64_sysreg_ARM64_SYSREG_BRBTGT22_EL1: arm64_sysreg = 35894;
pub const arm64_sysreg_ARM64_SYSREG_BRBTGT23_EL1: arm64_sysreg = 35902;
pub const arm64_sysreg_ARM64_SYSREG_BRBTGT24_EL1: arm64_sysreg = 35910;
pub const arm64_sysreg_ARM64_SYSREG_BRBTGT25_EL1: arm64_sysreg = 35918;
pub const arm64_sysreg_ARM64_SYSREG_BRBTGT26_EL1: arm64_sysreg = 35926;
pub const arm64_sysreg_ARM64_SYSREG_BRBTGT27_EL1: arm64_sysreg = 35934;
pub const arm64_sysreg_ARM64_SYSREG_BRBTGT28_EL1: arm64_sysreg = 35942;
pub const arm64_sysreg_ARM64_SYSREG_BRBTGT29_EL1: arm64_sysreg = 35950;
pub const arm64_sysreg_ARM64_SYSREG_BRBTGT2_EL1: arm64_sysreg = 35858;
pub const arm64_sysreg_ARM64_SYSREG_BRBTGT30_EL1: arm64_sysreg = 35958;
pub const arm64_sysreg_ARM64_SYSREG_BRBTGT31_EL1: arm64_sysreg = 35966;
pub const arm64_sysreg_ARM64_SYSREG_BRBTGT3_EL1: arm64_sysreg = 35866;
pub const arm64_sysreg_ARM64_SYSREG_BRBTGT4_EL1: arm64_sysreg = 35874;
pub const arm64_sysreg_ARM64_SYSREG_BRBTGT5_EL1: arm64_sysreg = 35882;
pub const arm64_sysreg_ARM64_SYSREG_BRBTGT6_EL1: arm64_sysreg = 35890;
pub const arm64_sysreg_ARM64_SYSREG_BRBTGT7_EL1: arm64_sysreg = 35898;
pub const arm64_sysreg_ARM64_SYSREG_BRBTGT8_EL1: arm64_sysreg = 35906;
pub const arm64_sysreg_ARM64_SYSREG_BRBTGT9_EL1: arm64_sysreg = 35914;
pub const arm64_sysreg_ARM64_SYSREG_BRBTGTINJ_EL1: arm64_sysreg = 35978;
pub const arm64_sysreg_ARM64_SYSREG_BRBTS_EL1: arm64_sysreg = 35970;
pub const arm64_sysreg_ARM64_SYSREG_CCSIDR2_EL1: arm64_sysreg = 51202;
pub const arm64_sysreg_ARM64_SYSREG_CCSIDR_EL1: arm64_sysreg = 51200;
pub const arm64_sysreg_ARM64_SYSREG_CLIDR_EL1: arm64_sysreg = 51201;
pub const arm64_sysreg_ARM64_SYSREG_CNTFRQ_EL0: arm64_sysreg = 57088;
pub const arm64_sysreg_ARM64_SYSREG_CNTHCTL_EL2: arm64_sysreg = 59144;
pub const arm64_sysreg_ARM64_SYSREG_CNTHPS_CTL_EL2: arm64_sysreg = 59177;
pub const arm64_sysreg_ARM64_SYSREG_CNTHPS_CVAL_EL2: arm64_sysreg = 59178;
pub const arm64_sysreg_ARM64_SYSREG_CNTHPS_TVAL_EL2: arm64_sysreg = 59176;
pub const arm64_sysreg_ARM64_SYSREG_CNTHP_CTL_EL2: arm64_sysreg = 59153;
pub const arm64_sysreg_ARM64_SYSREG_CNTHP_CVAL_EL2: arm64_sysreg = 59154;
pub const arm64_sysreg_ARM64_SYSREG_CNTHP_TVAL_EL2: arm64_sysreg = 59152;
pub const arm64_sysreg_ARM64_SYSREG_CNTHVS_CTL_EL2: arm64_sysreg = 59169;
pub const arm64_sysreg_ARM64_SYSREG_CNTHVS_CVAL_EL2: arm64_sysreg = 59170;
pub const arm64_sysreg_ARM64_SYSREG_CNTHVS_TVAL_EL2: arm64_sysreg = 59168;
pub const arm64_sysreg_ARM64_SYSREG_CNTHV_CTL_EL2: arm64_sysreg = 59161;
pub const arm64_sysreg_ARM64_SYSREG_CNTHV_CVAL_EL2: arm64_sysreg = 59162;
pub const arm64_sysreg_ARM64_SYSREG_CNTHV_TVAL_EL2: arm64_sysreg = 59160;
pub const arm64_sysreg_ARM64_SYSREG_CNTISCALE_EL2: arm64_sysreg = 59141;
pub const arm64_sysreg_ARM64_SYSREG_CNTKCTL_EL1: arm64_sysreg = 50952;
pub const arm64_sysreg_ARM64_SYSREG_CNTKCTL_EL12: arm64_sysreg = 61192;
pub const arm64_sysreg_ARM64_SYSREG_CNTPCTSS_EL0: arm64_sysreg = 57093;
pub const arm64_sysreg_ARM64_SYSREG_CNTPCT_EL0: arm64_sysreg = 57089;
pub const arm64_sysreg_ARM64_SYSREG_CNTPOFF_EL2: arm64_sysreg = 59142;
pub const arm64_sysreg_ARM64_SYSREG_CNTPS_CTL_EL1: arm64_sysreg = 65297;
pub const arm64_sysreg_ARM64_SYSREG_CNTPS_CVAL_EL1: arm64_sysreg = 65298;
pub const arm64_sysreg_ARM64_SYSREG_CNTPS_TVAL_EL1: arm64_sysreg = 65296;
pub const arm64_sysreg_ARM64_SYSREG_CNTP_CTL_EL0: arm64_sysreg = 57105;
pub const arm64_sysreg_ARM64_SYSREG_CNTP_CTL_EL02: arm64_sysreg = 61201;
pub const arm64_sysreg_ARM64_SYSREG_CNTP_CVAL_EL0: arm64_sysreg = 57106;
pub const arm64_sysreg_ARM64_SYSREG_CNTP_CVAL_EL02: arm64_sysreg = 61202;
pub const arm64_sysreg_ARM64_SYSREG_CNTP_TVAL_EL0: arm64_sysreg = 57104;
pub const arm64_sysreg_ARM64_SYSREG_CNTP_TVAL_EL02: arm64_sysreg = 61200;
pub const arm64_sysreg_ARM64_SYSREG_CNTSCALE_EL2: arm64_sysreg = 59140;
pub const arm64_sysreg_ARM64_SYSREG_CNTVCTSS_EL0: arm64_sysreg = 57094;
pub const arm64_sysreg_ARM64_SYSREG_CNTVCT_EL0: arm64_sysreg = 57090;
pub const arm64_sysreg_ARM64_SYSREG_CNTVFRQ_EL2: arm64_sysreg = 59143;
pub const arm64_sysreg_ARM64_SYSREG_CNTVOFF_EL2: arm64_sysreg = 59139;
pub const arm64_sysreg_ARM64_SYSREG_CNTV_CTL_EL0: arm64_sysreg = 57113;
pub const arm64_sysreg_ARM64_SYSREG_CNTV_CTL_EL02: arm64_sysreg = 61209;
pub const arm64_sysreg_ARM64_SYSREG_CNTV_CVAL_EL0: arm64_sysreg = 57114;
pub const arm64_sysreg_ARM64_SYSREG_CNTV_CVAL_EL02: arm64_sysreg = 61210;
pub const arm64_sysreg_ARM64_SYSREG_CNTV_TVAL_EL0: arm64_sysreg = 57112;
pub const arm64_sysreg_ARM64_SYSREG_CNTV_TVAL_EL02: arm64_sysreg = 61208;
pub const arm64_sysreg_ARM64_SYSREG_CONTEXTIDR_EL1: arm64_sysreg = 50817;
pub const arm64_sysreg_ARM64_SYSREG_CONTEXTIDR_EL12: arm64_sysreg = 61057;
pub const arm64_sysreg_ARM64_SYSREG_CONTEXTIDR_EL2: arm64_sysreg = 59009;
pub const arm64_sysreg_ARM64_SYSREG_CPACR_EL1: arm64_sysreg = 49282;
pub const arm64_sysreg_ARM64_SYSREG_CPACR_EL12: arm64_sysreg = 59522;
pub const arm64_sysreg_ARM64_SYSREG_CPM_IOACC_CTL_EL3: arm64_sysreg = 65424;
pub const arm64_sysreg_ARM64_SYSREG_CPTR_EL2: arm64_sysreg = 57482;
pub const arm64_sysreg_ARM64_SYSREG_CPTR_EL3: arm64_sysreg = 61578;
pub const arm64_sysreg_ARM64_SYSREG_CSSELR_EL1: arm64_sysreg = 53248;
pub const arm64_sysreg_ARM64_SYSREG_CTR_EL0: arm64_sysreg = 55297;
pub const arm64_sysreg_ARM64_SYSREG_CURRENTEL: arm64_sysreg = 49682;
pub const arm64_sysreg_ARM64_SYSREG_DACR32_EL2: arm64_sysreg = 57728;
pub const arm64_sysreg_ARM64_SYSREG_DAIF: arm64_sysreg = 55825;
pub const arm64_sysreg_ARM64_SYSREG_DBGAUTHSTATUS_EL1: arm64_sysreg = 33782;
pub const arm64_sysreg_ARM64_SYSREG_DBGBCR0_EL1: arm64_sysreg = 32773;
pub const arm64_sysreg_ARM64_SYSREG_DBGBCR10_EL1: arm64_sysreg = 32853;
pub const arm64_sysreg_ARM64_SYSREG_DBGBCR11_EL1: arm64_sysreg = 32861;
pub const arm64_sysreg_ARM64_SYSREG_DBGBCR12_EL1: arm64_sysreg = 32869;
pub const arm64_sysreg_ARM64_SYSREG_DBGBCR13_EL1: arm64_sysreg = 32877;
pub const arm64_sysreg_ARM64_SYSREG_DBGBCR14_EL1: arm64_sysreg = 32885;
pub const arm64_sysreg_ARM64_SYSREG_DBGBCR15_EL1: arm64_sysreg = 32893;
pub const arm64_sysreg_ARM64_SYSREG_DBGBCR1_EL1: arm64_sysreg = 32781;
pub const arm64_sysreg_ARM64_SYSREG_DBGBCR2_EL1: arm64_sysreg = 32789;
pub const arm64_sysreg_ARM64_SYSREG_DBGBCR3_EL1: arm64_sysreg = 32797;
pub const arm64_sysreg_ARM64_SYSREG_DBGBCR4_EL1: arm64_sysreg = 32805;
pub const arm64_sysreg_ARM64_SYSREG_DBGBCR5_EL1: arm64_sysreg = 32813;
pub const arm64_sysreg_ARM64_SYSREG_DBGBCR6_EL1: arm64_sysreg = 32821;
pub const arm64_sysreg_ARM64_SYSREG_DBGBCR7_EL1: arm64_sysreg = 32829;
pub const arm64_sysreg_ARM64_SYSREG_DBGBCR8_EL1: arm64_sysreg = 32837;
pub const arm64_sysreg_ARM64_SYSREG_DBGBCR9_EL1: arm64_sysreg = 32845;
pub const arm64_sysreg_ARM64_SYSREG_DBGBVR0_EL1: arm64_sysreg = 32772;
pub const arm64_sysreg_ARM64_SYSREG_DBGBVR10_EL1: arm64_sysreg = 32852;
pub const arm64_sysreg_ARM64_SYSREG_DBGBVR11_EL1: arm64_sysreg = 32860;
pub const arm64_sysreg_ARM64_SYSREG_DBGBVR12_EL1: arm64_sysreg = 32868;
pub const arm64_sysreg_ARM64_SYSREG_DBGBVR13_EL1: arm64_sysreg = 32876;
pub const arm64_sysreg_ARM64_SYSREG_DBGBVR14_EL1: arm64_sysreg = 32884;
pub const arm64_sysreg_ARM64_SYSREG_DBGBVR15_EL1: arm64_sysreg = 32892;
pub const arm64_sysreg_ARM64_SYSREG_DBGBVR1_EL1: arm64_sysreg = 32780;
pub const arm64_sysreg_ARM64_SYSREG_DBGBVR2_EL1: arm64_sysreg = 32788;
pub const arm64_sysreg_ARM64_SYSREG_DBGBVR3_EL1: arm64_sysreg = 32796;
pub const arm64_sysreg_ARM64_SYSREG_DBGBVR4_EL1: arm64_sysreg = 32804;
pub const arm64_sysreg_ARM64_SYSREG_DBGBVR5_EL1: arm64_sysreg = 32812;
pub const arm64_sysreg_ARM64_SYSREG_DBGBVR6_EL1: arm64_sysreg = 32820;
pub const arm64_sysreg_ARM64_SYSREG_DBGBVR7_EL1: arm64_sysreg = 32828;
pub const arm64_sysreg_ARM64_SYSREG_DBGBVR8_EL1: arm64_sysreg = 32836;
pub const arm64_sysreg_ARM64_SYSREG_DBGBVR9_EL1: arm64_sysreg = 32844;
pub const arm64_sysreg_ARM64_SYSREG_DBGCLAIMCLR_EL1: arm64_sysreg = 33742;
pub const arm64_sysreg_ARM64_SYSREG_DBGCLAIMSET_EL1: arm64_sysreg = 33734;
pub const arm64_sysreg_ARM64_SYSREG_DBGDTRRX_EL0: arm64_sysreg = 38952;
pub const arm64_sysreg_ARM64_SYSREG_DBGDTRTX_EL0: arm64_sysreg = 38952;
pub const arm64_sysreg_ARM64_SYSREG_DBGDTR_EL0: arm64_sysreg = 38944;
pub const arm64_sysreg_ARM64_SYSREG_DBGPRCR_EL1: arm64_sysreg = 32932;
pub const arm64_sysreg_ARM64_SYSREG_DBGVCR32_EL2: arm64_sysreg = 41016;
pub const arm64_sysreg_ARM64_SYSREG_DBGWCR0_EL1: arm64_sysreg = 32775;
pub const arm64_sysreg_ARM64_SYSREG_DBGWCR10_EL1: arm64_sysreg = 32855;
pub const arm64_sysreg_ARM64_SYSREG_DBGWCR11_EL1: arm64_sysreg = 32863;
pub const arm64_sysreg_ARM64_SYSREG_DBGWCR12_EL1: arm64_sysreg = 32871;
pub const arm64_sysreg_ARM64_SYSREG_DBGWCR13_EL1: arm64_sysreg = 32879;
pub const arm64_sysreg_ARM64_SYSREG_DBGWCR14_EL1: arm64_sysreg = 32887;
pub const arm64_sysreg_ARM64_SYSREG_DBGWCR15_EL1: arm64_sysreg = 32895;
pub const arm64_sysreg_ARM64_SYSREG_DBGWCR1_EL1: arm64_sysreg = 32783;
pub const arm64_sysreg_ARM64_SYSREG_DBGWCR2_EL1: arm64_sysreg = 32791;
pub const arm64_sysreg_ARM64_SYSREG_DBGWCR3_EL1: arm64_sysreg = 32799;
pub const arm64_sysreg_ARM64_SYSREG_DBGWCR4_EL1: arm64_sysreg = 32807;
pub const arm64_sysreg_ARM64_SYSREG_DBGWCR5_EL1: arm64_sysreg = 32815;
pub const arm64_sysreg_ARM64_SYSREG_DBGWCR6_EL1: arm64_sysreg = 32823;
pub const arm64_sysreg_ARM64_SYSREG_DBGWCR7_EL1: arm64_sysreg = 32831;
pub const arm64_sysreg_ARM64_SYSREG_DBGWCR8_EL1: arm64_sysreg = 32839;
pub const arm64_sysreg_ARM64_SYSREG_DBGWCR9_EL1: arm64_sysreg = 32847;
pub const arm64_sysreg_ARM64_SYSREG_DBGWVR0_EL1: arm64_sysreg = 32774;
pub const arm64_sysreg_ARM64_SYSREG_DBGWVR10_EL1: arm64_sysreg = 32854;
pub const arm64_sysreg_ARM64_SYSREG_DBGWVR11_EL1: arm64_sysreg = 32862;
pub const arm64_sysreg_ARM64_SYSREG_DBGWVR12_EL1: arm64_sysreg = 32870;
pub const arm64_sysreg_ARM64_SYSREG_DBGWVR13_EL1: arm64_sysreg = 32878;
pub const arm64_sysreg_ARM64_SYSREG_DBGWVR14_EL1: arm64_sysreg = 32886;
pub const arm64_sysreg_ARM64_SYSREG_DBGWVR15_EL1: arm64_sysreg = 32894;
pub const arm64_sysreg_ARM64_SYSREG_DBGWVR1_EL1: arm64_sysreg = 32782;
pub const arm64_sysreg_ARM64_SYSREG_DBGWVR2_EL1: arm64_sysreg = 32790;
pub const arm64_sysreg_ARM64_SYSREG_DBGWVR3_EL1: arm64_sysreg = 32798;
pub const arm64_sysreg_ARM64_SYSREG_DBGWVR4_EL1: arm64_sysreg = 32806;
pub const arm64_sysreg_ARM64_SYSREG_DBGWVR5_EL1: arm64_sysreg = 32814;
pub const arm64_sysreg_ARM64_SYSREG_DBGWVR6_EL1: arm64_sysreg = 32822;
pub const arm64_sysreg_ARM64_SYSREG_DBGWVR7_EL1: arm64_sysreg = 32830;
pub const arm64_sysreg_ARM64_SYSREG_DBGWVR8_EL1: arm64_sysreg = 32838;
pub const arm64_sysreg_ARM64_SYSREG_DBGWVR9_EL1: arm64_sysreg = 32846;
pub const arm64_sysreg_ARM64_SYSREG_DCZID_EL0: arm64_sysreg = 55303;
pub const arm64_sysreg_ARM64_SYSREG_DISR_EL1: arm64_sysreg = 50697;
pub const arm64_sysreg_ARM64_SYSREG_DIT: arm64_sysreg = 55829;
pub const arm64_sysreg_ARM64_SYSREG_DLR_EL0: arm64_sysreg = 55849;
pub const arm64_sysreg_ARM64_SYSREG_DSPSR_EL0: arm64_sysreg = 55848;
pub const arm64_sysreg_ARM64_SYSREG_ELR_EL1: arm64_sysreg = 49665;
pub const arm64_sysreg_ARM64_SYSREG_ELR_EL12: arm64_sysreg = 59905;
pub const arm64_sysreg_ARM64_SYSREG_ELR_EL2: arm64_sysreg = 57857;
pub const arm64_sysreg_ARM64_SYSREG_ELR_EL3: arm64_sysreg = 61953;
pub const arm64_sysreg_ARM64_SYSREG_ERRIDR_EL1: arm64_sysreg = 49816;
pub const arm64_sysreg_ARM64_SYSREG_ERRSELR_EL1: arm64_sysreg = 49817;
pub const arm64_sysreg_ARM64_SYSREG_ERXADDR_EL1: arm64_sysreg = 49827;
pub const arm64_sysreg_ARM64_SYSREG_ERXCTLR_EL1: arm64_sysreg = 49825;
pub const arm64_sysreg_ARM64_SYSREG_ERXFR_EL1: arm64_sysreg = 49824;
pub const arm64_sysreg_ARM64_SYSREG_ERXMISC0_EL1: arm64_sysreg = 49832;
pub const arm64_sysreg_ARM64_SYSREG_ERXMISC1_EL1: arm64_sysreg = 49833;
pub const arm64_sysreg_ARM64_SYSREG_ERXMISC2_EL1: arm64_sysreg = 49834;
pub const arm64_sysreg_ARM64_SYSREG_ERXMISC3_EL1: arm64_sysreg = 49835;
pub const arm64_sysreg_ARM64_SYSREG_ERXPFGCDN_EL1: arm64_sysreg = 49830;
pub const arm64_sysreg_ARM64_SYSREG_ERXPFGCTL_EL1: arm64_sysreg = 49829;
pub const arm64_sysreg_ARM64_SYSREG_ERXPFGF_EL1: arm64_sysreg = 49828;
pub const arm64_sysreg_ARM64_SYSREG_ERXSTATUS_EL1: arm64_sysreg = 49826;
pub const arm64_sysreg_ARM64_SYSREG_ESR_EL1: arm64_sysreg = 49808;
pub const arm64_sysreg_ARM64_SYSREG_ESR_EL12: arm64_sysreg = 60048;
pub const arm64_sysreg_ARM64_SYSREG_ESR_EL2: arm64_sysreg = 58000;
pub const arm64_sysreg_ARM64_SYSREG_ESR_EL3: arm64_sysreg = 62096;
pub const arm64_sysreg_ARM64_SYSREG_FAR_EL1: arm64_sysreg = 49920;
pub const arm64_sysreg_ARM64_SYSREG_FAR_EL12: arm64_sysreg = 60160;
pub const arm64_sysreg_ARM64_SYSREG_FAR_EL2: arm64_sysreg = 58112;
pub const arm64_sysreg_ARM64_SYSREG_FAR_EL3: arm64_sysreg = 62208;
pub const arm64_sysreg_ARM64_SYSREG_FPCR: arm64_sysreg = 55840;
pub const arm64_sysreg_ARM64_SYSREG_FPEXC32_EL2: arm64_sysreg = 58008;
pub const arm64_sysreg_ARM64_SYSREG_FPSR: arm64_sysreg = 55841;
pub const arm64_sysreg_ARM64_SYSREG_GCR_EL1: arm64_sysreg = 49286;
pub const arm64_sysreg_ARM64_SYSREG_GMID_EL1: arm64_sysreg = 51204;
pub const arm64_sysreg_ARM64_SYSREG_GPCCR_EL3: arm64_sysreg = 61710;
pub const arm64_sysreg_ARM64_SYSREG_GPTBR_EL3: arm64_sysreg = 61708;
pub const arm64_sysreg_ARM64_SYSREG_HACR_EL2: arm64_sysreg = 57487;
pub const arm64_sysreg_ARM64_SYSREG_HCRX_EL2: arm64_sysreg = 57490;
pub const arm64_sysreg_ARM64_SYSREG_HCR_EL2: arm64_sysreg = 57480;
pub const arm64_sysreg_ARM64_SYSREG_HDFGRTR_EL2: arm64_sysreg = 57740;
pub const arm64_sysreg_ARM64_SYSREG_HDFGWTR_EL2: arm64_sysreg = 57741;
pub const arm64_sysreg_ARM64_SYSREG_HFGITR_EL2: arm64_sysreg = 57486;
pub const arm64_sysreg_ARM64_SYSREG_HFGRTR_EL2: arm64_sysreg = 57484;
pub const arm64_sysreg_ARM64_SYSREG_HFGWTR_EL2: arm64_sysreg = 57485;
pub const arm64_sysreg_ARM64_SYSREG_HPFAR_EL2: arm64_sysreg = 58116;
pub const arm64_sysreg_ARM64_SYSREG_HSTR_EL2: arm64_sysreg = 57483;
pub const arm64_sysreg_ARM64_SYSREG_ICC_AP0R0_EL1: arm64_sysreg = 50756;
pub const arm64_sysreg_ARM64_SYSREG_ICC_AP0R1_EL1: arm64_sysreg = 50757;
pub const arm64_sysreg_ARM64_SYSREG_ICC_AP0R2_EL1: arm64_sysreg = 50758;
pub const arm64_sysreg_ARM64_SYSREG_ICC_AP0R3_EL1: arm64_sysreg = 50759;
pub const arm64_sysreg_ARM64_SYSREG_ICC_AP1R0_EL1: arm64_sysreg = 50760;
pub const arm64_sysreg_ARM64_SYSREG_ICC_AP1R1_EL1: arm64_sysreg = 50761;
pub const arm64_sysreg_ARM64_SYSREG_ICC_AP1R2_EL1: arm64_sysreg = 50762;
pub const arm64_sysreg_ARM64_SYSREG_ICC_AP1R3_EL1: arm64_sysreg = 50763;
pub const arm64_sysreg_ARM64_SYSREG_ICC_ASGI1R_EL1: arm64_sysreg = 50782;
pub const arm64_sysreg_ARM64_SYSREG_ICC_BPR0_EL1: arm64_sysreg = 50755;
pub const arm64_sysreg_ARM64_SYSREG_ICC_BPR1_EL1: arm64_sysreg = 50787;
pub const arm64_sysreg_ARM64_SYSREG_ICC_CTLR_EL1: arm64_sysreg = 50788;
pub const arm64_sysreg_ARM64_SYSREG_ICC_CTLR_EL3: arm64_sysreg = 63076;
pub const arm64_sysreg_ARM64_SYSREG_ICC_DIR_EL1: arm64_sysreg = 50777;
pub const arm64_sysreg_ARM64_SYSREG_ICC_EOIR0_EL1: arm64_sysreg = 50753;
pub const arm64_sysreg_ARM64_SYSREG_ICC_EOIR1_EL1: arm64_sysreg = 50785;
pub const arm64_sysreg_ARM64_SYSREG_ICC_HPPIR0_EL1: arm64_sysreg = 50754;
pub const arm64_sysreg_ARM64_SYSREG_ICC_HPPIR1_EL1: arm64_sysreg = 50786;
pub const arm64_sysreg_ARM64_SYSREG_ICC_IAR0_EL1: arm64_sysreg = 50752;
pub const arm64_sysreg_ARM64_SYSREG_ICC_IAR1_EL1: arm64_sysreg = 50784;
pub const arm64_sysreg_ARM64_SYSREG_ICC_IGRPEN0_EL1: arm64_sysreg = 50790;
pub const arm64_sysreg_ARM64_SYSREG_ICC_IGRPEN1_EL1: arm64_sysreg = 50791;
pub const arm64_sysreg_ARM64_SYSREG_ICC_IGRPEN1_EL3: arm64_sysreg = 63079;
pub const arm64_sysreg_ARM64_SYSREG_ICC_PMR_EL1: arm64_sysreg = 49712;
pub const arm64_sysreg_ARM64_SYSREG_ICC_RPR_EL1: arm64_sysreg = 50779;
pub const arm64_sysreg_ARM64_SYSREG_ICC_SGI0R_EL1: arm64_sysreg = 50783;
pub const arm64_sysreg_ARM64_SYSREG_ICC_SGI1R_EL1: arm64_sysreg = 50781;
pub const arm64_sysreg_ARM64_SYSREG_ICC_SRE_EL1: arm64_sysreg = 50789;
pub const arm64_sysreg_ARM64_SYSREG_ICC_SRE_EL2: arm64_sysreg = 58957;
pub const arm64_sysreg_ARM64_SYSREG_ICC_SRE_EL3: arm64_sysreg = 63077;
pub const arm64_sysreg_ARM64_SYSREG_ICH_AP0R0_EL2: arm64_sysreg = 58944;
pub const arm64_sysreg_ARM64_SYSREG_ICH_AP0R1_EL2: arm64_sysreg = 58945;
pub const arm64_sysreg_ARM64_SYSREG_ICH_AP0R2_EL2: arm64_sysreg = 58946;
pub const arm64_sysreg_ARM64_SYSREG_ICH_AP0R3_EL2: arm64_sysreg = 58947;
pub const arm64_sysreg_ARM64_SYSREG_ICH_AP1R0_EL2: arm64_sysreg = 58952;
pub const arm64_sysreg_ARM64_SYSREG_ICH_AP1R1_EL2: arm64_sysreg = 58953;
pub const arm64_sysreg_ARM64_SYSREG_ICH_AP1R2_EL2: arm64_sysreg = 58954;
pub const arm64_sysreg_ARM64_SYSREG_ICH_AP1R3_EL2: arm64_sysreg = 58955;
pub const arm64_sysreg_ARM64_SYSREG_ICH_EISR_EL2: arm64_sysreg = 58971;
pub const arm64_sysreg_ARM64_SYSREG_ICH_ELRSR_EL2: arm64_sysreg = 58973;
pub const arm64_sysreg_ARM64_SYSREG_ICH_HCR_EL2: arm64_sysreg = 58968;
pub const arm64_sysreg_ARM64_SYSREG_ICH_LR0_EL2: arm64_sysreg = 58976;
pub const arm64_sysreg_ARM64_SYSREG_ICH_LR10_EL2: arm64_sysreg = 58986;
pub const arm64_sysreg_ARM64_SYSREG_ICH_LR11_EL2: arm64_sysreg = 58987;
pub const arm64_sysreg_ARM64_SYSREG_ICH_LR12_EL2: arm64_sysreg = 58988;
pub const arm64_sysreg_ARM64_SYSREG_ICH_LR13_EL2: arm64_sysreg = 58989;
pub const arm64_sysreg_ARM64_SYSREG_ICH_LR14_EL2: arm64_sysreg = 58990;
pub const arm64_sysreg_ARM64_SYSREG_ICH_LR15_EL2: arm64_sysreg = 58991;
pub const arm64_sysreg_ARM64_SYSREG_ICH_LR1_EL2: arm64_sysreg = 58977;
pub const arm64_sysreg_ARM64_SYSREG_ICH_LR2_EL2: arm64_sysreg = 58978;
pub const arm64_sysreg_ARM64_SYSREG_ICH_LR3_EL2: arm64_sysreg = 58979;
pub const arm64_sysreg_ARM64_SYSREG_ICH_LR4_EL2: arm64_sysreg = 58980;
pub const arm64_sysreg_ARM64_SYSREG_ICH_LR5_EL2: arm64_sysreg = 58981;
pub const arm64_sysreg_ARM64_SYSREG_ICH_LR6_EL2: arm64_sysreg = 58982;
pub const arm64_sysreg_ARM64_SYSREG_ICH_LR7_EL2: arm64_sysreg = 58983;
pub const arm64_sysreg_ARM64_SYSREG_ICH_LR8_EL2: arm64_sysreg = 58984;
pub const arm64_sysreg_ARM64_SYSREG_ICH_LR9_EL2: arm64_sysreg = 58985;
pub const arm64_sysreg_ARM64_SYSREG_ICH_MISR_EL2: arm64_sysreg = 58970;
pub const arm64_sysreg_ARM64_SYSREG_ICH_VMCR_EL2: arm64_sysreg = 58975;
pub const arm64_sysreg_ARM64_SYSREG_ICH_VTR_EL2: arm64_sysreg = 58969;
pub const arm64_sysreg_ARM64_SYSREG_ID_AA64AFR0_EL1: arm64_sysreg = 49196;
pub const arm64_sysreg_ARM64_SYSREG_ID_AA64AFR1_EL1: arm64_sysreg = 49197;
pub const arm64_sysreg_ARM64_SYSREG_ID_AA64DFR0_EL1: arm64_sysreg = 49192;
pub const arm64_sysreg_ARM64_SYSREG_ID_AA64DFR1_EL1: arm64_sysreg = 49193;
pub const arm64_sysreg_ARM64_SYSREG_ID_AA64ISAR0_EL1: arm64_sysreg = 49200;
pub const arm64_sysreg_ARM64_SYSREG_ID_AA64ISAR1_EL1: arm64_sysreg = 49201;
pub const arm64_sysreg_ARM64_SYSREG_ID_AA64ISAR2_EL1: arm64_sysreg = 49202;
pub const arm64_sysreg_ARM64_SYSREG_ID_AA64MMFR0_EL1: arm64_sysreg = 49208;
pub const arm64_sysreg_ARM64_SYSREG_ID_AA64MMFR1_EL1: arm64_sysreg = 49209;
pub const arm64_sysreg_ARM64_SYSREG_ID_AA64MMFR2_EL1: arm64_sysreg = 49210;
pub const arm64_sysreg_ARM64_SYSREG_ID_AA64PFR0_EL1: arm64_sysreg = 49184;
pub const arm64_sysreg_ARM64_SYSREG_ID_AA64PFR1_EL1: arm64_sysreg = 49185;
pub const arm64_sysreg_ARM64_SYSREG_ID_AA64SMFR0_EL1: arm64_sysreg = 49189;
pub const arm64_sysreg_ARM64_SYSREG_ID_AA64ZFR0_EL1: arm64_sysreg = 49188;
pub const arm64_sysreg_ARM64_SYSREG_ID_AFR0_EL1: arm64_sysreg = 49163;
pub const arm64_sysreg_ARM64_SYSREG_ID_DFR0_EL1: arm64_sysreg = 49162;
pub const arm64_sysreg_ARM64_SYSREG_ID_ISAR0_EL1: arm64_sysreg = 49168;
pub const arm64_sysreg_ARM64_SYSREG_ID_ISAR1_EL1: arm64_sysreg = 49169;
pub const arm64_sysreg_ARM64_SYSREG_ID_ISAR2_EL1: arm64_sysreg = 49170;
pub const arm64_sysreg_ARM64_SYSREG_ID_ISAR3_EL1: arm64_sysreg = 49171;
pub const arm64_sysreg_ARM64_SYSREG_ID_ISAR4_EL1: arm64_sysreg = 49172;
pub const arm64_sysreg_ARM64_SYSREG_ID_ISAR5_EL1: arm64_sysreg = 49173;
pub const arm64_sysreg_ARM64_SYSREG_ID_ISAR6_EL1: arm64_sysreg = 49175;
pub const arm64_sysreg_ARM64_SYSREG_ID_MMFR0_EL1: arm64_sysreg = 49164;
pub const arm64_sysreg_ARM64_SYSREG_ID_MMFR1_EL1: arm64_sysreg = 49165;
pub const arm64_sysreg_ARM64_SYSREG_ID_MMFR2_EL1: arm64_sysreg = 49166;
pub const arm64_sysreg_ARM64_SYSREG_ID_MMFR3_EL1: arm64_sysreg = 49167;
pub const arm64_sysreg_ARM64_SYSREG_ID_MMFR4_EL1: arm64_sysreg = 49174;
pub const arm64_sysreg_ARM64_SYSREG_ID_MMFR5_EL1: arm64_sysreg = 49182;
pub const arm64_sysreg_ARM64_SYSREG_ID_PFR0_EL1: arm64_sysreg = 49160;
pub const arm64_sysreg_ARM64_SYSREG_ID_PFR1_EL1: arm64_sysreg = 49161;
pub const arm64_sysreg_ARM64_SYSREG_ID_PFR2_EL1: arm64_sysreg = 49180;
pub const arm64_sysreg_ARM64_SYSREG_IFSR32_EL2: arm64_sysreg = 57985;
pub const arm64_sysreg_ARM64_SYSREG_ISR_EL1: arm64_sysreg = 50696;
pub const arm64_sysreg_ARM64_SYSREG_LORC_EL1: arm64_sysreg = 50467;
pub const arm64_sysreg_ARM64_SYSREG_LOREA_EL1: arm64_sysreg = 50465;
pub const arm64_sysreg_ARM64_SYSREG_LORID_EL1: arm64_sysreg = 50471;
pub const arm64_sysreg_ARM64_SYSREG_LORN_EL1: arm64_sysreg = 50466;
pub const arm64_sysreg_ARM64_SYSREG_LORSA_EL1: arm64_sysreg = 50464;
pub const arm64_sysreg_ARM64_SYSREG_MAIR_EL1: arm64_sysreg = 50448;
pub const arm64_sysreg_ARM64_SYSREG_MAIR_EL12: arm64_sysreg = 60688;
pub const arm64_sysreg_ARM64_SYSREG_MAIR_EL2: arm64_sysreg = 58640;
pub const arm64_sysreg_ARM64_SYSREG_MAIR_EL3: arm64_sysreg = 62736;
pub const arm64_sysreg_ARM64_SYSREG_MDCCINT_EL1: arm64_sysreg = 32784;
pub const arm64_sysreg_ARM64_SYSREG_MDCCSR_EL0: arm64_sysreg = 38920;
pub const arm64_sysreg_ARM64_SYSREG_MDCR_EL2: arm64_sysreg = 57481;
pub const arm64_sysreg_ARM64_SYSREG_MDCR_EL3: arm64_sysreg = 61593;
pub const arm64_sysreg_ARM64_SYSREG_MDRAR_EL1: arm64_sysreg = 32896;
pub const arm64_sysreg_ARM64_SYSREG_MDSCR_EL1: arm64_sysreg = 32786;
pub const arm64_sysreg_ARM64_SYSREG_MFAR_EL3: arm64_sysreg = 62213;
pub const arm64_sysreg_ARM64_SYSREG_MIDR_EL1: arm64_sysreg = 49152;
pub const arm64_sysreg_ARM64_SYSREG_MPAM0_EL1: arm64_sysreg = 50473;
pub const arm64_sysreg_ARM64_SYSREG_MPAM1_EL1: arm64_sysreg = 50472;
pub const arm64_sysreg_ARM64_SYSREG_MPAM1_EL12: arm64_sysreg = 60712;
pub const arm64_sysreg_ARM64_SYSREG_MPAM2_EL2: arm64_sysreg = 58664;
pub const arm64_sysreg_ARM64_SYSREG_MPAM3_EL3: arm64_sysreg = 62760;
pub const arm64_sysreg_ARM64_SYSREG_MPAMHCR_EL2: arm64_sysreg = 58656;
pub const arm64_sysreg_ARM64_SYSREG_MPAMIDR_EL1: arm64_sysreg = 50468;
pub const arm64_sysreg_ARM64_SYSREG_MPAMSM_EL1: arm64_sysreg = 50475;
pub const arm64_sysreg_ARM64_SYSREG_MPAMVPM0_EL2: arm64_sysreg = 58672;
pub const arm64_sysreg_ARM64_SYSREG_MPAMVPM1_EL2: arm64_sysreg = 58673;
pub const arm64_sysreg_ARM64_SYSREG_MPAMVPM2_EL2: arm64_sysreg = 58674;
pub const arm64_sysreg_ARM64_SYSREG_MPAMVPM3_EL2: arm64_sysreg = 58675;
pub const arm64_sysreg_ARM64_SYSREG_MPAMVPM4_EL2: arm64_sysreg = 58676;
pub const arm64_sysreg_ARM64_SYSREG_MPAMVPM5_EL2: arm64_sysreg = 58677;
pub const arm64_sysreg_ARM64_SYSREG_MPAMVPM6_EL2: arm64_sysreg = 58678;
pub const arm64_sysreg_ARM64_SYSREG_MPAMVPM7_EL2: arm64_sysreg = 58679;
pub const arm64_sysreg_ARM64_SYSREG_MPAMVPMV_EL2: arm64_sysreg = 58657;
pub const arm64_sysreg_ARM64_SYSREG_MPIDR_EL1: arm64_sysreg = 49157;
pub const arm64_sysreg_ARM64_SYSREG_MPUIR_EL1: arm64_sysreg = 49156;
pub const arm64_sysreg_ARM64_SYSREG_MPUIR_EL2: arm64_sysreg = 57348;
pub const arm64_sysreg_ARM64_SYSREG_MVFR0_EL1: arm64_sysreg = 49176;
pub const arm64_sysreg_ARM64_SYSREG_MVFR1_EL1: arm64_sysreg = 49177;
pub const arm64_sysreg_ARM64_SYSREG_MVFR2_EL1: arm64_sysreg = 49178;
pub const arm64_sysreg_ARM64_SYSREG_NZCV: arm64_sysreg = 55824;
pub const arm64_sysreg_ARM64_SYSREG_OSDLR_EL1: arm64_sysreg = 32924;
pub const arm64_sysreg_ARM64_SYSREG_OSDTRRX_EL1: arm64_sysreg = 32770;
pub const arm64_sysreg_ARM64_SYSREG_OSDTRTX_EL1: arm64_sysreg = 32794;
pub const arm64_sysreg_ARM64_SYSREG_OSECCR_EL1: arm64_sysreg = 32818;
pub const arm64_sysreg_ARM64_SYSREG_OSLAR_EL1: arm64_sysreg = 32900;
pub const arm64_sysreg_ARM64_SYSREG_OSLSR_EL1: arm64_sysreg = 32908;
pub const arm64_sysreg_ARM64_SYSREG_PAN: arm64_sysreg = 49683;
pub const arm64_sysreg_ARM64_SYSREG_PAR_EL1: arm64_sysreg = 50080;
pub const arm64_sysreg_ARM64_SYSREG_PMBIDR_EL1: arm64_sysreg = 50391;
pub const arm64_sysreg_ARM64_SYSREG_PMBLIMITR_EL1: arm64_sysreg = 50384;
pub const arm64_sysreg_ARM64_SYSREG_PMBPTR_EL1: arm64_sysreg = 50385;
pub const arm64_sysreg_ARM64_SYSREG_PMBSR_EL1: arm64_sysreg = 50387;
pub const arm64_sysreg_ARM64_SYSREG_PMCCFILTR_EL0: arm64_sysreg = 57215;
pub const arm64_sysreg_ARM64_SYSREG_PMCCNTR_EL0: arm64_sysreg = 56552;
pub const arm64_sysreg_ARM64_SYSREG_PMCEID0_EL0: arm64_sysreg = 56550;
pub const arm64_sysreg_ARM64_SYSREG_PMCEID1_EL0: arm64_sysreg = 56551;
pub const arm64_sysreg_ARM64_SYSREG_PMCNTENCLR_EL0: arm64_sysreg = 56546;
pub const arm64_sysreg_ARM64_SYSREG_PMCNTENSET_EL0: arm64_sysreg = 56545;
pub const arm64_sysreg_ARM64_SYSREG_PMCR_EL0: arm64_sysreg = 56544;
pub const arm64_sysreg_ARM64_SYSREG_PMEVCNTR0_EL0: arm64_sysreg = 57152;
pub const arm64_sysreg_ARM64_SYSREG_PMEVCNTR10_EL0: arm64_sysreg = 57162;
pub const arm64_sysreg_ARM64_SYSREG_PMEVCNTR11_EL0: arm64_sysreg = 57163;
pub const arm64_sysreg_ARM64_SYSREG_PMEVCNTR12_EL0: arm64_sysreg = 57164;
pub const arm64_sysreg_ARM64_SYSREG_PMEVCNTR13_EL0: arm64_sysreg = 57165;
pub const arm64_sysreg_ARM64_SYSREG_PMEVCNTR14_EL0: arm64_sysreg = 57166;
pub const arm64_sysreg_ARM64_SYSREG_PMEVCNTR15_EL0: arm64_sysreg = 57167;
pub const arm64_sysreg_ARM64_SYSREG_PMEVCNTR16_EL0: arm64_sysreg = 57168;
pub const arm64_sysreg_ARM64_SYSREG_PMEVCNTR17_EL0: arm64_sysreg = 57169;
pub const arm64_sysreg_ARM64_SYSREG_PMEVCNTR18_EL0: arm64_sysreg = 57170;
pub const arm64_sysreg_ARM64_SYSREG_PMEVCNTR19_EL0: arm64_sysreg = 57171;
pub const arm64_sysreg_ARM64_SYSREG_PMEVCNTR1_EL0: arm64_sysreg = 57153;
pub const arm64_sysreg_ARM64_SYSREG_PMEVCNTR20_EL0: arm64_sysreg = 57172;
pub const arm64_sysreg_ARM64_SYSREG_PMEVCNTR21_EL0: arm64_sysreg = 57173;
pub const arm64_sysreg_ARM64_SYSREG_PMEVCNTR22_EL0: arm64_sysreg = 57174;
pub const arm64_sysreg_ARM64_SYSREG_PMEVCNTR23_EL0: arm64_sysreg = 57175;
pub const arm64_sysreg_ARM64_SYSREG_PMEVCNTR24_EL0: arm64_sysreg = 57176;
pub const arm64_sysreg_ARM64_SYSREG_PMEVCNTR25_EL0: arm64_sysreg = 57177;
pub const arm64_sysreg_ARM64_SYSREG_PMEVCNTR26_EL0: arm64_sysreg = 57178;
pub const arm64_sysreg_ARM64_SYSREG_PMEVCNTR27_EL0: arm64_sysreg = 57179;
pub const arm64_sysreg_ARM64_SYSREG_PMEVCNTR28_EL0: arm64_sysreg = 57180;
pub const arm64_sysreg_ARM64_SYSREG_PMEVCNTR29_EL0: arm64_sysreg = 57181;
pub const arm64_sysreg_ARM64_SYSREG_PMEVCNTR2_EL0: arm64_sysreg = 57154;
pub const arm64_sysreg_ARM64_SYSREG_PMEVCNTR30_EL0: arm64_sysreg = 57182;
pub const arm64_sysreg_ARM64_SYSREG_PMEVCNTR3_EL0: arm64_sysreg = 57155;
pub const arm64_sysreg_ARM64_SYSREG_PMEVCNTR4_EL0: arm64_sysreg = 57156;
pub const arm64_sysreg_ARM64_SYSREG_PMEVCNTR5_EL0: arm64_sysreg = 57157;
pub const arm64_sysreg_ARM64_SYSREG_PMEVCNTR6_EL0: arm64_sysreg = 57158;
pub const arm64_sysreg_ARM64_SYSREG_PMEVCNTR7_EL0: arm64_sysreg = 57159;
pub const arm64_sysreg_ARM64_SYSREG_PMEVCNTR8_EL0: arm64_sysreg = 57160;
pub const arm64_sysreg_ARM64_SYSREG_PMEVCNTR9_EL0: arm64_sysreg = 57161;
pub const arm64_sysreg_ARM64_SYSREG_PMEVTYPER0_EL0: arm64_sysreg = 57184;
pub const arm64_sysreg_ARM64_SYSREG_PMEVTYPER10_EL0: arm64_sysreg = 57194;
pub const arm64_sysreg_ARM64_SYSREG_PMEVTYPER11_EL0: arm64_sysreg = 57195;
pub const arm64_sysreg_ARM64_SYSREG_PMEVTYPER12_EL0: arm64_sysreg = 57196;
pub const arm64_sysreg_ARM64_SYSREG_PMEVTYPER13_EL0: arm64_sysreg = 57197;
pub const arm64_sysreg_ARM64_SYSREG_PMEVTYPER14_EL0: arm64_sysreg = 57198;
pub const arm64_sysreg_ARM64_SYSREG_PMEVTYPER15_EL0: arm64_sysreg = 57199;
pub const arm64_sysreg_ARM64_SYSREG_PMEVTYPER16_EL0: arm64_sysreg = 57200;
pub const arm64_sysreg_ARM64_SYSREG_PMEVTYPER17_EL0: arm64_sysreg = 57201;
pub const arm64_sysreg_ARM64_SYSREG_PMEVTYPER18_EL0: arm64_sysreg = 57202;
pub const arm64_sysreg_ARM64_SYSREG_PMEVTYPER19_EL0: arm64_sysreg = 57203;
pub const arm64_sysreg_ARM64_SYSREG_PMEVTYPER1_EL0: arm64_sysreg = 57185;
pub const arm64_sysreg_ARM64_SYSREG_PMEVTYPER20_EL0: arm64_sysreg = 57204;
pub const arm64_sysreg_ARM64_SYSREG_PMEVTYPER21_EL0: arm64_sysreg = 57205;
pub const arm64_sysreg_ARM64_SYSREG_PMEVTYPER22_EL0: arm64_sysreg = 57206;
pub const arm64_sysreg_ARM64_SYSREG_PMEVTYPER23_EL0: arm64_sysreg = 57207;
pub const arm64_sysreg_ARM64_SYSREG_PMEVTYPER24_EL0: arm64_sysreg = 57208;
pub const arm64_sysreg_ARM64_SYSREG_PMEVTYPER25_EL0: arm64_sysreg = 57209;
pub const arm64_sysreg_ARM64_SYSREG_PMEVTYPER26_EL0: arm64_sysreg = 57210;
pub const arm64_sysreg_ARM64_SYSREG_PMEVTYPER27_EL0: arm64_sysreg = 57211;
pub const arm64_sysreg_ARM64_SYSREG_PMEVTYPER28_EL0: arm64_sysreg = 57212;
pub const arm64_sysreg_ARM64_SYSREG_PMEVTYPER29_EL0: arm64_sysreg = 57213;
pub const arm64_sysreg_ARM64_SYSREG_PMEVTYPER2_EL0: arm64_sysreg = 57186;
pub const arm64_sysreg_ARM64_SYSREG_PMEVTYPER30_EL0: arm64_sysreg = 57214;
pub const arm64_sysreg_ARM64_SYSREG_PMEVTYPER3_EL0: arm64_sysreg = 57187;
pub const arm64_sysreg_ARM64_SYSREG_PMEVTYPER4_EL0: arm64_sysreg = 57188;
pub const arm64_sysreg_ARM64_SYSREG_PMEVTYPER5_EL0: arm64_sysreg = 57189;
pub const arm64_sysreg_ARM64_SYSREG_PMEVTYPER6_EL0: arm64_sysreg = 57190;
pub const arm64_sysreg_ARM64_SYSREG_PMEVTYPER7_EL0: arm64_sysreg = 57191;
pub const arm64_sysreg_ARM64_SYSREG_PMEVTYPER8_EL0: arm64_sysreg = 57192;
pub const arm64_sysreg_ARM64_SYSREG_PMEVTYPER9_EL0: arm64_sysreg = 57193;
pub const arm64_sysreg_ARM64_SYSREG_PMINTENCLR_EL1: arm64_sysreg = 50418;
pub const arm64_sysreg_ARM64_SYSREG_PMINTENSET_EL1: arm64_sysreg = 50417;
pub const arm64_sysreg_ARM64_SYSREG_PMMIR_EL1: arm64_sysreg = 50422;
pub const arm64_sysreg_ARM64_SYSREG_PMOVSCLR_EL0: arm64_sysreg = 56547;
pub const arm64_sysreg_ARM64_SYSREG_PMOVSSET_EL0: arm64_sysreg = 56563;
pub const arm64_sysreg_ARM64_SYSREG_PMSCR_EL1: arm64_sysreg = 50376;
pub const arm64_sysreg_ARM64_SYSREG_PMSCR_EL12: arm64_sysreg = 60616;
pub const arm64_sysreg_ARM64_SYSREG_PMSCR_EL2: arm64_sysreg = 58568;
pub const arm64_sysreg_ARM64_SYSREG_PMSELR_EL0: arm64_sysreg = 56549;
pub const arm64_sysreg_ARM64_SYSREG_PMSEVFR_EL1: arm64_sysreg = 50381;
pub const arm64_sysreg_ARM64_SYSREG_PMSFCR_EL1: arm64_sysreg = 50380;
pub const arm64_sysreg_ARM64_SYSREG_PMSICR_EL1: arm64_sysreg = 50378;
pub const arm64_sysreg_ARM64_SYSREG_PMSIDR_EL1: arm64_sysreg = 50383;
pub const arm64_sysreg_ARM64_SYSREG_PMSIRR_EL1: arm64_sysreg = 50379;
pub const arm64_sysreg_ARM64_SYSREG_PMSLATFR_EL1: arm64_sysreg = 50382;
pub const arm64_sysreg_ARM64_SYSREG_PMSNEVFR_EL1: arm64_sysreg = 50377;
pub const arm64_sysreg_ARM64_SYSREG_PMSWINC_EL0: arm64_sysreg = 56548;
pub const arm64_sysreg_ARM64_SYSREG_PMUSERENR_EL0: arm64_sysreg = 56560;
pub const arm64_sysreg_ARM64_SYSREG_PMXEVCNTR_EL0: arm64_sysreg = 56554;
pub const arm64_sysreg_ARM64_SYSREG_PMXEVTYPER_EL0: arm64_sysreg = 56553;
pub const arm64_sysreg_ARM64_SYSREG_PRBAR10_EL1: arm64_sysreg = 50024;
pub const arm64_sysreg_ARM64_SYSREG_PRBAR10_EL2: arm64_sysreg = 58216;
pub const arm64_sysreg_ARM64_SYSREG_PRBAR11_EL1: arm64_sysreg = 50028;
pub const arm64_sysreg_ARM64_SYSREG_PRBAR11_EL2: arm64_sysreg = 58220;
pub const arm64_sysreg_ARM64_SYSREG_PRBAR12_EL1: arm64_sysreg = 50032;
pub const arm64_sysreg_ARM64_SYSREG_PRBAR12_EL2: arm64_sysreg = 58224;
pub const arm64_sysreg_ARM64_SYSREG_PRBAR13_EL1: arm64_sysreg = 50036;
pub const arm64_sysreg_ARM64_SYSREG_PRBAR13_EL2: arm64_sysreg = 58228;
pub const arm64_sysreg_ARM64_SYSREG_PRBAR14_EL1: arm64_sysreg = 50040;
pub const arm64_sysreg_ARM64_SYSREG_PRBAR14_EL2: arm64_sysreg = 58232;
pub const arm64_sysreg_ARM64_SYSREG_PRBAR15_EL1: arm64_sysreg = 50044;
pub const arm64_sysreg_ARM64_SYSREG_PRBAR15_EL2: arm64_sysreg = 58236;
pub const arm64_sysreg_ARM64_SYSREG_PRBAR1_EL1: arm64_sysreg = 49988;
pub const arm64_sysreg_ARM64_SYSREG_PRBAR1_EL2: arm64_sysreg = 58180;
pub const arm64_sysreg_ARM64_SYSREG_PRBAR2_EL1: arm64_sysreg = 49992;
pub const arm64_sysreg_ARM64_SYSREG_PRBAR2_EL2: arm64_sysreg = 58184;
pub const arm64_sysreg_ARM64_SYSREG_PRBAR3_EL1: arm64_sysreg = 49996;
pub const arm64_sysreg_ARM64_SYSREG_PRBAR3_EL2: arm64_sysreg = 58188;
pub const arm64_sysreg_ARM64_SYSREG_PRBAR4_EL1: arm64_sysreg = 50000;
pub const arm64_sysreg_ARM64_SYSREG_PRBAR4_EL2: arm64_sysreg = 58192;
pub const arm64_sysreg_ARM64_SYSREG_PRBAR5_EL1: arm64_sysreg = 50004;
pub const arm64_sysreg_ARM64_SYSREG_PRBAR5_EL2: arm64_sysreg = 58196;
pub const arm64_sysreg_ARM64_SYSREG_PRBAR6_EL1: arm64_sysreg = 50008;
pub const arm64_sysreg_ARM64_SYSREG_PRBAR6_EL2: arm64_sysreg = 58200;
pub const arm64_sysreg_ARM64_SYSREG_PRBAR7_EL1: arm64_sysreg = 50012;
pub const arm64_sysreg_ARM64_SYSREG_PRBAR7_EL2: arm64_sysreg = 58204;
pub const arm64_sysreg_ARM64_SYSREG_PRBAR8_EL1: arm64_sysreg = 50016;
pub const arm64_sysreg_ARM64_SYSREG_PRBAR8_EL2: arm64_sysreg = 58208;
pub const arm64_sysreg_ARM64_SYSREG_PRBAR9_EL1: arm64_sysreg = 50020;
pub const arm64_sysreg_ARM64_SYSREG_PRBAR9_EL2: arm64_sysreg = 58212;
pub const arm64_sysreg_ARM64_SYSREG_PRBAR_EL1: arm64_sysreg = 49984;
pub const arm64_sysreg_ARM64_SYSREG_PRBAR_EL2: arm64_sysreg = 58176;
pub const arm64_sysreg_ARM64_SYSREG_PRENR_EL1: arm64_sysreg = 49929;
pub const arm64_sysreg_ARM64_SYSREG_PRENR_EL2: arm64_sysreg = 58121;
pub const arm64_sysreg_ARM64_SYSREG_PRLAR10_EL1: arm64_sysreg = 50025;
pub const arm64_sysreg_ARM64_SYSREG_PRLAR10_EL2: arm64_sysreg = 58217;
pub const arm64_sysreg_ARM64_SYSREG_PRLAR11_EL1: arm64_sysreg = 50029;
pub const arm64_sysreg_ARM64_SYSREG_PRLAR11_EL2: arm64_sysreg = 58221;
pub const arm64_sysreg_ARM64_SYSREG_PRLAR12_EL1: arm64_sysreg = 50033;
pub const arm64_sysreg_ARM64_SYSREG_PRLAR12_EL2: arm64_sysreg = 58225;
pub const arm64_sysreg_ARM64_SYSREG_PRLAR13_EL1: arm64_sysreg = 50037;
pub const arm64_sysreg_ARM64_SYSREG_PRLAR13_EL2: arm64_sysreg = 58229;
pub const arm64_sysreg_ARM64_SYSREG_PRLAR14_EL1: arm64_sysreg = 50041;
pub const arm64_sysreg_ARM64_SYSREG_PRLAR14_EL2: arm64_sysreg = 58233;
pub const arm64_sysreg_ARM64_SYSREG_PRLAR15_EL1: arm64_sysreg = 50045;
pub const arm64_sysreg_ARM64_SYSREG_PRLAR15_EL2: arm64_sysreg = 58237;
pub const arm64_sysreg_ARM64_SYSREG_PRLAR1_EL1: arm64_sysreg = 49989;
pub const arm64_sysreg_ARM64_SYSREG_PRLAR1_EL2: arm64_sysreg = 58181;
pub const arm64_sysreg_ARM64_SYSREG_PRLAR2_EL1: arm64_sysreg = 49993;
pub const arm64_sysreg_ARM64_SYSREG_PRLAR2_EL2: arm64_sysreg = 58185;
pub const arm64_sysreg_ARM64_SYSREG_PRLAR3_EL1: arm64_sysreg = 49997;
pub const arm64_sysreg_ARM64_SYSREG_PRLAR3_EL2: arm64_sysreg = 58189;
pub const arm64_sysreg_ARM64_SYSREG_PRLAR4_EL1: arm64_sysreg = 50001;
pub const arm64_sysreg_ARM64_SYSREG_PRLAR4_EL2: arm64_sysreg = 58193;
pub const arm64_sysreg_ARM64_SYSREG_PRLAR5_EL1: arm64_sysreg = 50005;
pub const arm64_sysreg_ARM64_SYSREG_PRLAR5_EL2: arm64_sysreg = 58197;
pub const arm64_sysreg_ARM64_SYSREG_PRLAR6_EL1: arm64_sysreg = 50009;
pub const arm64_sysreg_ARM64_SYSREG_PRLAR6_EL2: arm64_sysreg = 58201;
pub const arm64_sysreg_ARM64_SYSREG_PRLAR7_EL1: arm64_sysreg = 50013;
pub const arm64_sysreg_ARM64_SYSREG_PRLAR7_EL2: arm64_sysreg = 58205;
pub const arm64_sysreg_ARM64_SYSREG_PRLAR8_EL1: arm64_sysreg = 50017;
pub const arm64_sysreg_ARM64_SYSREG_PRLAR8_EL2: arm64_sysreg = 58209;
pub const arm64_sysreg_ARM64_SYSREG_PRLAR9_EL1: arm64_sysreg = 50021;
pub const arm64_sysreg_ARM64_SYSREG_PRLAR9_EL2: arm64_sysreg = 58213;
pub const arm64_sysreg_ARM64_SYSREG_PRLAR_EL1: arm64_sysreg = 49985;
pub const arm64_sysreg_ARM64_SYSREG_PRLAR_EL2: arm64_sysreg = 58177;
pub const arm64_sysreg_ARM64_SYSREG_PRSELR_EL1: arm64_sysreg = 49937;
pub const arm64_sysreg_ARM64_SYSREG_PRSELR_EL2: arm64_sysreg = 58129;
pub const arm64_sysreg_ARM64_SYSREG_REVIDR_EL1: arm64_sysreg = 49158;
pub const arm64_sysreg_ARM64_SYSREG_RGSR_EL1: arm64_sysreg = 49285;
pub const arm64_sysreg_ARM64_SYSREG_RMR_EL1: arm64_sysreg = 50690;
pub const arm64_sysreg_ARM64_SYSREG_RMR_EL2: arm64_sysreg = 58882;
pub const arm64_sysreg_ARM64_SYSREG_RMR_EL3: arm64_sysreg = 62978;
pub const arm64_sysreg_ARM64_SYSREG_RNDR: arm64_sysreg = 55584;
pub const arm64_sysreg_ARM64_SYSREG_RNDRRS: arm64_sysreg = 55585;
pub const arm64_sysreg_ARM64_SYSREG_RVBAR_EL1: arm64_sysreg = 50689;
pub const arm64_sysreg_ARM64_SYSREG_RVBAR_EL2: arm64_sysreg = 58881;
pub const arm64_sysreg_ARM64_SYSREG_RVBAR_EL3: arm64_sysreg = 62977;
pub const arm64_sysreg_ARM64_SYSREG_SCR_EL3: arm64_sysreg = 61576;
pub const arm64_sysreg_ARM64_SYSREG_SCTLR_EL1: arm64_sysreg = 49280;
pub const arm64_sysreg_ARM64_SYSREG_SCTLR_EL12: arm64_sysreg = 59520;
pub const arm64_sysreg_ARM64_SYSREG_SCTLR_EL2: arm64_sysreg = 57472;
pub const arm64_sysreg_ARM64_SYSREG_SCTLR_EL3: arm64_sysreg = 61568;
pub const arm64_sysreg_ARM64_SYSREG_SCXTNUM_EL0: arm64_sysreg = 56967;
pub const arm64_sysreg_ARM64_SYSREG_SCXTNUM_EL1: arm64_sysreg = 50823;
pub const arm64_sysreg_ARM64_SYSREG_SCXTNUM_EL12: arm64_sysreg = 61063;
pub const arm64_sysreg_ARM64_SYSREG_SCXTNUM_EL2: arm64_sysreg = 59015;
pub const arm64_sysreg_ARM64_SYSREG_SCXTNUM_EL3: arm64_sysreg = 63111;
pub const arm64_sysreg_ARM64_SYSREG_SDER32_EL2: arm64_sysreg = 57497;
pub const arm64_sysreg_ARM64_SYSREG_SDER32_EL3: arm64_sysreg = 61577;
pub const arm64_sysreg_ARM64_SYSREG_SMCR_EL1: arm64_sysreg = 49302;
pub const arm64_sysreg_ARM64_SYSREG_SMCR_EL12: arm64_sysreg = 59542;
pub const arm64_sysreg_ARM64_SYSREG_SMCR_EL2: arm64_sysreg = 57494;
pub const arm64_sysreg_ARM64_SYSREG_SMCR_EL3: arm64_sysreg = 61590;
pub const arm64_sysreg_ARM64_SYSREG_SMIDR_EL1: arm64_sysreg = 51206;
pub const arm64_sysreg_ARM64_SYSREG_SMPRIMAP_EL2: arm64_sysreg = 57493;
pub const arm64_sysreg_ARM64_SYSREG_SMPRI_EL1: arm64_sysreg = 49300;
pub const arm64_sysreg_ARM64_SYSREG_SPSEL: arm64_sysreg = 49680;
pub const arm64_sysreg_ARM64_SYSREG_SPSR_ABT: arm64_sysreg = 57881;
pub const arm64_sysreg_ARM64_SYSREG_SPSR_EL1: arm64_sysreg = 49664;
pub const arm64_sysreg_ARM64_SYSREG_SPSR_EL12: arm64_sysreg = 59904;
pub const arm64_sysreg_ARM64_SYSREG_SPSR_EL2: arm64_sysreg = 57856;
pub const arm64_sysreg_ARM64_SYSREG_SPSR_EL3: arm64_sysreg = 61952;
pub const arm64_sysreg_ARM64_SYSREG_SPSR_FIQ: arm64_sysreg = 57883;
pub const arm64_sysreg_ARM64_SYSREG_SPSR_IRQ: arm64_sysreg = 57880;
pub const arm64_sysreg_ARM64_SYSREG_SPSR_UND: arm64_sysreg = 57882;
pub const arm64_sysreg_ARM64_SYSREG_SP_EL0: arm64_sysreg = 49672;
pub const arm64_sysreg_ARM64_SYSREG_SP_EL1: arm64_sysreg = 57864;
pub const arm64_sysreg_ARM64_SYSREG_SP_EL2: arm64_sysreg = 61960;
pub const arm64_sysreg_ARM64_SYSREG_SSBS: arm64_sysreg = 55830;
pub const arm64_sysreg_ARM64_SYSREG_SVCR: arm64_sysreg = 55826;
pub const arm64_sysreg_ARM64_SYSREG_TCO: arm64_sysreg = 55831;
pub const arm64_sysreg_ARM64_SYSREG_TCR_EL1: arm64_sysreg = 49410;
pub const arm64_sysreg_ARM64_SYSREG_TCR_EL12: arm64_sysreg = 59650;
pub const arm64_sysreg_ARM64_SYSREG_TCR_EL2: arm64_sysreg = 57602;
pub const arm64_sysreg_ARM64_SYSREG_TCR_EL3: arm64_sysreg = 61698;
pub const arm64_sysreg_ARM64_SYSREG_TEECR32_EL1: arm64_sysreg = 36864;
pub const arm64_sysreg_ARM64_SYSREG_TEEHBR32_EL1: arm64_sysreg = 36992;
pub const arm64_sysreg_ARM64_SYSREG_TFSRE0_EL1: arm64_sysreg = 49841;
pub const arm64_sysreg_ARM64_SYSREG_TFSR_EL1: arm64_sysreg = 49840;
pub const arm64_sysreg_ARM64_SYSREG_TFSR_EL12: arm64_sysreg = 60080;
pub const arm64_sysreg_ARM64_SYSREG_TFSR_EL2: arm64_sysreg = 58032;
pub const arm64_sysreg_ARM64_SYSREG_TFSR_EL3: arm64_sysreg = 62128;
pub const arm64_sysreg_ARM64_SYSREG_TPIDR2_EL0: arm64_sysreg = 56965;
pub const arm64_sysreg_ARM64_SYSREG_TPIDRRO_EL0: arm64_sysreg = 56963;
pub const arm64_sysreg_ARM64_SYSREG_TPIDR_EL0: arm64_sysreg = 56962;
pub const arm64_sysreg_ARM64_SYSREG_TPIDR_EL1: arm64_sysreg = 50820;
pub const arm64_sysreg_ARM64_SYSREG_TPIDR_EL2: arm64_sysreg = 59010;
pub const arm64_sysreg_ARM64_SYSREG_TPIDR_EL3: arm64_sysreg = 63106;
pub const arm64_sysreg_ARM64_SYSREG_TRBBASER_EL1: arm64_sysreg = 50394;
pub const arm64_sysreg_ARM64_SYSREG_TRBIDR_EL1: arm64_sysreg = 50399;
pub const arm64_sysreg_ARM64_SYSREG_TRBLIMITR_EL1: arm64_sysreg = 50392;
pub const arm64_sysreg_ARM64_SYSREG_TRBMAR_EL1: arm64_sysreg = 50396;
pub const arm64_sysreg_ARM64_SYSREG_TRBPTR_EL1: arm64_sysreg = 50393;
pub const arm64_sysreg_ARM64_SYSREG_TRBSR_EL1: arm64_sysreg = 50395;
pub const arm64_sysreg_ARM64_SYSREG_TRBTRG_EL1: arm64_sysreg = 50398;
pub const arm64_sysreg_ARM64_SYSREG_TRCACATR0: arm64_sysreg = 35074;
pub const arm64_sysreg_ARM64_SYSREG_TRCACATR1: arm64_sysreg = 35090;
pub const arm64_sysreg_ARM64_SYSREG_TRCACATR10: arm64_sysreg = 35107;
pub const arm64_sysreg_ARM64_SYSREG_TRCACATR11: arm64_sysreg = 35123;
pub const arm64_sysreg_ARM64_SYSREG_TRCACATR12: arm64_sysreg = 35139;
pub const arm64_sysreg_ARM64_SYSREG_TRCACATR13: arm64_sysreg = 35155;
pub const arm64_sysreg_ARM64_SYSREG_TRCACATR14: arm64_sysreg = 35171;
pub const arm64_sysreg_ARM64_SYSREG_TRCACATR15: arm64_sysreg = 35187;
pub const arm64_sysreg_ARM64_SYSREG_TRCACATR2: arm64_sysreg = 35106;
pub const arm64_sysreg_ARM64_SYSREG_TRCACATR3: arm64_sysreg = 35122;
pub const arm64_sysreg_ARM64_SYSREG_TRCACATR4: arm64_sysreg = 35138;
pub const arm64_sysreg_ARM64_SYSREG_TRCACATR5: arm64_sysreg = 35154;
pub const arm64_sysreg_ARM64_SYSREG_TRCACATR6: arm64_sysreg = 35170;
pub const arm64_sysreg_ARM64_SYSREG_TRCACATR7: arm64_sysreg = 35186;
pub const arm64_sysreg_ARM64_SYSREG_TRCACATR8: arm64_sysreg = 35075;
pub const arm64_sysreg_ARM64_SYSREG_TRCACATR9: arm64_sysreg = 35091;
pub const arm64_sysreg_ARM64_SYSREG_TRCACVR0: arm64_sysreg = 35072;
pub const arm64_sysreg_ARM64_SYSREG_TRCACVR1: arm64_sysreg = 35088;
pub const arm64_sysreg_ARM64_SYSREG_TRCACVR10: arm64_sysreg = 35105;
pub const arm64_sysreg_ARM64_SYSREG_TRCACVR11: arm64_sysreg = 35121;
pub const arm64_sysreg_ARM64_SYSREG_TRCACVR12: arm64_sysreg = 35137;
pub const arm64_sysreg_ARM64_SYSREG_TRCACVR13: arm64_sysreg = 35153;
pub const arm64_sysreg_ARM64_SYSREG_TRCACVR14: arm64_sysreg = 35169;
pub const arm64_sysreg_ARM64_SYSREG_TRCACVR15: arm64_sysreg = 35185;
pub const arm64_sysreg_ARM64_SYSREG_TRCACVR2: arm64_sysreg = 35104;
pub const arm64_sysreg_ARM64_SYSREG_TRCACVR3: arm64_sysreg = 35120;
pub const arm64_sysreg_ARM64_SYSREG_TRCACVR4: arm64_sysreg = 35136;
pub const arm64_sysreg_ARM64_SYSREG_TRCACVR5: arm64_sysreg = 35152;
pub const arm64_sysreg_ARM64_SYSREG_TRCACVR6: arm64_sysreg = 35168;
pub const arm64_sysreg_ARM64_SYSREG_TRCACVR7: arm64_sysreg = 35184;
pub const arm64_sysreg_ARM64_SYSREG_TRCACVR8: arm64_sysreg = 35073;
pub const arm64_sysreg_ARM64_SYSREG_TRCACVR9: arm64_sysreg = 35089;
pub const arm64_sysreg_ARM64_SYSREG_TRCAUTHSTATUS: arm64_sysreg = 35830;
pub const arm64_sysreg_ARM64_SYSREG_TRCAUXCTLR: arm64_sysreg = 34864;
pub const arm64_sysreg_ARM64_SYSREG_TRCBBCTLR: arm64_sysreg = 34936;
pub const arm64_sysreg_ARM64_SYSREG_TRCCCCTLR: arm64_sysreg = 34928;
pub const arm64_sysreg_ARM64_SYSREG_TRCCIDCCTLR0: arm64_sysreg = 35202;
pub const arm64_sysreg_ARM64_SYSREG_TRCCIDCCTLR1: arm64_sysreg = 35210;
pub const arm64_sysreg_ARM64_SYSREG_TRCCIDCVR0: arm64_sysreg = 35200;
pub const arm64_sysreg_ARM64_SYSREG_TRCCIDCVR1: arm64_sysreg = 35216;
pub const arm64_sysreg_ARM64_SYSREG_TRCCIDCVR2: arm64_sysreg = 35232;
pub const arm64_sysreg_ARM64_SYSREG_TRCCIDCVR3: arm64_sysreg = 35248;
pub const arm64_sysreg_ARM64_SYSREG_TRCCIDCVR4: arm64_sysreg = 35264;
pub const arm64_sysreg_ARM64_SYSREG_TRCCIDCVR5: arm64_sysreg = 35280;
pub const arm64_sysreg_ARM64_SYSREG_TRCCIDCVR6: arm64_sysreg = 35296;
pub const arm64_sysreg_ARM64_SYSREG_TRCCIDCVR7: arm64_sysreg = 35312;
pub const arm64_sysreg_ARM64_SYSREG_TRCCIDR0: arm64_sysreg = 35815;
pub const arm64_sysreg_ARM64_SYSREG_TRCCIDR1: arm64_sysreg = 35823;
pub const arm64_sysreg_ARM64_SYSREG_TRCCIDR2: arm64_sysreg = 35831;
pub const arm64_sysreg_ARM64_SYSREG_TRCCIDR3: arm64_sysreg = 35839;
pub const arm64_sysreg_ARM64_SYSREG_TRCCLAIMCLR: arm64_sysreg = 35790;
pub const arm64_sysreg_ARM64_SYSREG_TRCCLAIMSET: arm64_sysreg = 35782;
pub const arm64_sysreg_ARM64_SYSREG_TRCCNTCTLR0: arm64_sysreg = 34853;
pub const arm64_sysreg_ARM64_SYSREG_TRCCNTCTLR1: arm64_sysreg = 34861;
pub const arm64_sysreg_ARM64_SYSREG_TRCCNTCTLR2: arm64_sysreg = 34869;
pub const arm64_sysreg_ARM64_SYSREG_TRCCNTCTLR3: arm64_sysreg = 34877;
pub const arm64_sysreg_ARM64_SYSREG_TRCCNTRLDVR0: arm64_sysreg = 34821;
pub const arm64_sysreg_ARM64_SYSREG_TRCCNTRLDVR1: arm64_sysreg = 34829;
pub const arm64_sysreg_ARM64_SYSREG_TRCCNTRLDVR2: arm64_sysreg = 34837;
pub const arm64_sysreg_ARM64_SYSREG_TRCCNTRLDVR3: arm64_sysreg = 34845;
pub const arm64_sysreg_ARM64_SYSREG_TRCCNTVR0: arm64_sysreg = 34885;
pub const arm64_sysreg_ARM64_SYSREG_TRCCNTVR1: arm64_sysreg = 34893;
pub const arm64_sysreg_ARM64_SYSREG_TRCCNTVR2: arm64_sysreg = 34901;
pub const arm64_sysreg_ARM64_SYSREG_TRCCNTVR3: arm64_sysreg = 34909;
pub const arm64_sysreg_ARM64_SYSREG_TRCCONFIGR: arm64_sysreg = 34848;
pub const arm64_sysreg_ARM64_SYSREG_TRCDEVAFF0: arm64_sysreg = 35798;
pub const arm64_sysreg_ARM64_SYSREG_TRCDEVAFF1: arm64_sysreg = 35806;
pub const arm64_sysreg_ARM64_SYSREG_TRCDEVARCH: arm64_sysreg = 35838;
pub const arm64_sysreg_ARM64_SYSREG_TRCDEVID: arm64_sysreg = 35735;
pub const arm64_sysreg_ARM64_SYSREG_TRCDEVTYPE: arm64_sysreg = 35743;
pub const arm64_sysreg_ARM64_SYSREG_TRCDVCMR0: arm64_sysreg = 35078;
pub const arm64_sysreg_ARM64_SYSREG_TRCDVCMR1: arm64_sysreg = 35110;
pub const arm64_sysreg_ARM64_SYSREG_TRCDVCMR2: arm64_sysreg = 35142;
pub const arm64_sysreg_ARM64_SYSREG_TRCDVCMR3: arm64_sysreg = 35174;
pub const arm64_sysreg_ARM64_SYSREG_TRCDVCMR4: arm64_sysreg = 35079;
pub const arm64_sysreg_ARM64_SYSREG_TRCDVCMR5: arm64_sysreg = 35111;
pub const arm64_sysreg_ARM64_SYSREG_TRCDVCMR6: arm64_sysreg = 35143;
pub const arm64_sysreg_ARM64_SYSREG_TRCDVCMR7: arm64_sysreg = 35175;
pub const arm64_sysreg_ARM64_SYSREG_TRCDVCVR0: arm64_sysreg = 35076;
pub const arm64_sysreg_ARM64_SYSREG_TRCDVCVR1: arm64_sysreg = 35108;
pub const arm64_sysreg_ARM64_SYSREG_TRCDVCVR2: arm64_sysreg = 35140;
pub const arm64_sysreg_ARM64_SYSREG_TRCDVCVR3: arm64_sysreg = 35172;
pub const arm64_sysreg_ARM64_SYSREG_TRCDVCVR4: arm64_sysreg = 35077;
pub const arm64_sysreg_ARM64_SYSREG_TRCDVCVR5: arm64_sysreg = 35109;
pub const arm64_sysreg_ARM64_SYSREG_TRCDVCVR6: arm64_sysreg = 35141;
pub const arm64_sysreg_ARM64_SYSREG_TRCDVCVR7: arm64_sysreg = 35173;
pub const arm64_sysreg_ARM64_SYSREG_TRCEVENTCTL0R: arm64_sysreg = 34880;
pub const arm64_sysreg_ARM64_SYSREG_TRCEVENTCTL1R: arm64_sysreg = 34888;
pub const arm64_sysreg_ARM64_SYSREG_TRCEXTINSELR: arm64_sysreg = 34884;
pub const arm64_sysreg_ARM64_SYSREG_TRCEXTINSELR0: arm64_sysreg = 34884;
pub const arm64_sysreg_ARM64_SYSREG_TRCEXTINSELR1: arm64_sysreg = 34892;
pub const arm64_sysreg_ARM64_SYSREG_TRCEXTINSELR2: arm64_sysreg = 34900;
pub const arm64_sysreg_ARM64_SYSREG_TRCEXTINSELR3: arm64_sysreg = 34908;
pub const arm64_sysreg_ARM64_SYSREG_TRCIDR0: arm64_sysreg = 34887;
pub const arm64_sysreg_ARM64_SYSREG_TRCIDR1: arm64_sysreg = 34895;
pub const arm64_sysreg_ARM64_SYSREG_TRCIDR10: arm64_sysreg = 34838;
pub const arm64_sysreg_ARM64_SYSREG_TRCIDR11: arm64_sysreg = 34846;
pub const arm64_sysreg_ARM64_SYSREG_TRCIDR12: arm64_sysreg = 34854;
pub const arm64_sysreg_ARM64_SYSREG_TRCIDR13: arm64_sysreg = 34862;
pub const arm64_sysreg_ARM64_SYSREG_TRCIDR2: arm64_sysreg = 34903;
pub const arm64_sysreg_ARM64_SYSREG_TRCIDR3: arm64_sysreg = 34911;
pub const arm64_sysreg_ARM64_SYSREG_TRCIDR4: arm64_sysreg = 34919;
pub const arm64_sysreg_ARM64_SYSREG_TRCIDR5: arm64_sysreg = 34927;
pub const arm64_sysreg_ARM64_SYSREG_TRCIDR6: arm64_sysreg = 34935;
pub const arm64_sysreg_ARM64_SYSREG_TRCIDR7: arm64_sysreg = 34943;
pub const arm64_sysreg_ARM64_SYSREG_TRCIDR8: arm64_sysreg = 34822;
pub const arm64_sysreg_ARM64_SYSREG_TRCIDR9: arm64_sysreg = 34830;
pub const arm64_sysreg_ARM64_SYSREG_TRCIMSPEC0: arm64_sysreg = 34823;
pub const arm64_sysreg_ARM64_SYSREG_TRCIMSPEC1: arm64_sysreg = 34831;
pub const arm64_sysreg_ARM64_SYSREG_TRCIMSPEC2: arm64_sysreg = 34839;
pub const arm64_sysreg_ARM64_SYSREG_TRCIMSPEC3: arm64_sysreg = 34847;
pub const arm64_sysreg_ARM64_SYSREG_TRCIMSPEC4: arm64_sysreg = 34855;
pub const arm64_sysreg_ARM64_SYSREG_TRCIMSPEC5: arm64_sysreg = 34863;
pub const arm64_sysreg_ARM64_SYSREG_TRCIMSPEC6: arm64_sysreg = 34871;
pub const arm64_sysreg_ARM64_SYSREG_TRCIMSPEC7: arm64_sysreg = 34879;
pub const arm64_sysreg_ARM64_SYSREG_TRCITCTRL: arm64_sysreg = 35716;
pub const arm64_sysreg_ARM64_SYSREG_TRCLAR: arm64_sysreg = 35814;
pub const arm64_sysreg_ARM64_SYSREG_TRCLSR: arm64_sysreg = 35822;
pub const arm64_sysreg_ARM64_SYSREG_TRCOSLAR: arm64_sysreg = 34948;
pub const arm64_sysreg_ARM64_SYSREG_TRCOSLSR: arm64_sysreg = 34956;
pub const arm64_sysreg_ARM64_SYSREG_TRCPDCR: arm64_sysreg = 34980;
pub const arm64_sysreg_ARM64_SYSREG_TRCPDSR: arm64_sysreg = 34988;
pub const arm64_sysreg_ARM64_SYSREG_TRCPIDR0: arm64_sysreg = 35783;
pub const arm64_sysreg_ARM64_SYSREG_TRCPIDR1: arm64_sysreg = 35791;
pub const arm64_sysreg_ARM64_SYSREG_TRCPIDR2: arm64_sysreg = 35799;
pub const arm64_sysreg_ARM64_SYSREG_TRCPIDR3: arm64_sysreg = 35807;
pub const arm64_sysreg_ARM64_SYSREG_TRCPIDR4: arm64_sysreg = 35751;
pub const arm64_sysreg_ARM64_SYSREG_TRCPIDR5: arm64_sysreg = 35759;
pub const arm64_sysreg_ARM64_SYSREG_TRCPIDR6: arm64_sysreg = 35767;
pub const arm64_sysreg_ARM64_SYSREG_TRCPIDR7: arm64_sysreg = 35775;
pub const arm64_sysreg_ARM64_SYSREG_TRCPRGCTLR: arm64_sysreg = 34824;
pub const arm64_sysreg_ARM64_SYSREG_TRCPROCSELR: arm64_sysreg = 34832;
pub const arm64_sysreg_ARM64_SYSREG_TRCQCTLR: arm64_sysreg = 34825;
pub const arm64_sysreg_ARM64_SYSREG_TRCRSCTLR10: arm64_sysreg = 35024;
pub const arm64_sysreg_ARM64_SYSREG_TRCRSCTLR11: arm64_sysreg = 35032;
pub const arm64_sysreg_ARM64_SYSREG_TRCRSCTLR12: arm64_sysreg = 35040;
pub const arm64_sysreg_ARM64_SYSREG_TRCRSCTLR13: arm64_sysreg = 35048;
pub const arm64_sysreg_ARM64_SYSREG_TRCRSCTLR14: arm64_sysreg = 35056;
pub const arm64_sysreg_ARM64_SYSREG_TRCRSCTLR15: arm64_sysreg = 35064;
pub const arm64_sysreg_ARM64_SYSREG_TRCRSCTLR16: arm64_sysreg = 34945;
pub const arm64_sysreg_ARM64_SYSREG_TRCRSCTLR17: arm64_sysreg = 34953;
pub const arm64_sysreg_ARM64_SYSREG_TRCRSCTLR18: arm64_sysreg = 34961;
pub const arm64_sysreg_ARM64_SYSREG_TRCRSCTLR19: arm64_sysreg = 34969;
pub const arm64_sysreg_ARM64_SYSREG_TRCRSCTLR2: arm64_sysreg = 34960;
pub const arm64_sysreg_ARM64_SYSREG_TRCRSCTLR20: arm64_sysreg = 34977;
pub const arm64_sysreg_ARM64_SYSREG_TRCRSCTLR21: arm64_sysreg = 34985;
pub const arm64_sysreg_ARM64_SYSREG_TRCRSCTLR22: arm64_sysreg = 34993;
pub const arm64_sysreg_ARM64_SYSREG_TRCRSCTLR23: arm64_sysreg = 35001;
pub const arm64_sysreg_ARM64_SYSREG_TRCRSCTLR24: arm64_sysreg = 35009;
pub const arm64_sysreg_ARM64_SYSREG_TRCRSCTLR25: arm64_sysreg = 35017;
pub const arm64_sysreg_ARM64_SYSREG_TRCRSCTLR26: arm64_sysreg = 35025;
pub const arm64_sysreg_ARM64_SYSREG_TRCRSCTLR27: arm64_sysreg = 35033;
pub const arm64_sysreg_ARM64_SYSREG_TRCRSCTLR28: arm64_sysreg = 35041;
pub const arm64_sysreg_ARM64_SYSREG_TRCRSCTLR29: arm64_sysreg = 35049;
pub const arm64_sysreg_ARM64_SYSREG_TRCRSCTLR3: arm64_sysreg = 34968;
pub const arm64_sysreg_ARM64_SYSREG_TRCRSCTLR30: arm64_sysreg = 35057;
pub const arm64_sysreg_ARM64_SYSREG_TRCRSCTLR31: arm64_sysreg = 35065;
pub const arm64_sysreg_ARM64_SYSREG_TRCRSCTLR4: arm64_sysreg = 34976;
pub const arm64_sysreg_ARM64_SYSREG_TRCRSCTLR5: arm64_sysreg = 34984;
pub const arm64_sysreg_ARM64_SYSREG_TRCRSCTLR6: arm64_sysreg = 34992;
pub const arm64_sysreg_ARM64_SYSREG_TRCRSCTLR7: arm64_sysreg = 35000;
pub const arm64_sysreg_ARM64_SYSREG_TRCRSCTLR8: arm64_sysreg = 35008;
pub const arm64_sysreg_ARM64_SYSREG_TRCRSCTLR9: arm64_sysreg = 35016;
pub const arm64_sysreg_ARM64_SYSREG_TRCRSR: arm64_sysreg = 34896;
pub const arm64_sysreg_ARM64_SYSREG_TRCSEQEVR0: arm64_sysreg = 34820;
pub const arm64_sysreg_ARM64_SYSREG_TRCSEQEVR1: arm64_sysreg = 34828;
pub const arm64_sysreg_ARM64_SYSREG_TRCSEQEVR2: arm64_sysreg = 34836;
pub const arm64_sysreg_ARM64_SYSREG_TRCSEQRSTEVR: arm64_sysreg = 34868;
pub const arm64_sysreg_ARM64_SYSREG_TRCSEQSTR: arm64_sysreg = 34876;
pub const arm64_sysreg_ARM64_SYSREG_TRCSSCCR0: arm64_sysreg = 34946;
pub const arm64_sysreg_ARM64_SYSREG_TRCSSCCR1: arm64_sysreg = 34954;
pub const arm64_sysreg_ARM64_SYSREG_TRCSSCCR2: arm64_sysreg = 34962;
pub const arm64_sysreg_ARM64_SYSREG_TRCSSCCR3: arm64_sysreg = 34970;
pub const arm64_sysreg_ARM64_SYSREG_TRCSSCCR4: arm64_sysreg = 34978;
pub const arm64_sysreg_ARM64_SYSREG_TRCSSCCR5: arm64_sysreg = 34986;
pub const arm64_sysreg_ARM64_SYSREG_TRCSSCCR6: arm64_sysreg = 34994;
pub const arm64_sysreg_ARM64_SYSREG_TRCSSCCR7: arm64_sysreg = 35002;
pub const arm64_sysreg_ARM64_SYSREG_TRCSSCSR0: arm64_sysreg = 35010;
pub const arm64_sysreg_ARM64_SYSREG_TRCSSCSR1: arm64_sysreg = 35018;
pub const arm64_sysreg_ARM64_SYSREG_TRCSSCSR2: arm64_sysreg = 35026;
pub const arm64_sysreg_ARM64_SYSREG_TRCSSCSR3: arm64_sysreg = 35034;
pub const arm64_sysreg_ARM64_SYSREG_TRCSSCSR4: arm64_sysreg = 35042;
pub const arm64_sysreg_ARM64_SYSREG_TRCSSCSR5: arm64_sysreg = 35050;
pub const arm64_sysreg_ARM64_SYSREG_TRCSSCSR6: arm64_sysreg = 35058;
pub const arm64_sysreg_ARM64_SYSREG_TRCSSCSR7: arm64_sysreg = 35066;
pub const arm64_sysreg_ARM64_SYSREG_TRCSSPCICR0: arm64_sysreg = 34947;
pub const arm64_sysreg_ARM64_SYSREG_TRCSSPCICR1: arm64_sysreg = 34955;
pub const arm64_sysreg_ARM64_SYSREG_TRCSSPCICR2: arm64_sysreg = 34963;
pub const arm64_sysreg_ARM64_SYSREG_TRCSSPCICR3: arm64_sysreg = 34971;
pub const arm64_sysreg_ARM64_SYSREG_TRCSSPCICR4: arm64_sysreg = 34979;
pub const arm64_sysreg_ARM64_SYSREG_TRCSSPCICR5: arm64_sysreg = 34987;
pub const arm64_sysreg_ARM64_SYSREG_TRCSSPCICR6: arm64_sysreg = 34995;
pub const arm64_sysreg_ARM64_SYSREG_TRCSSPCICR7: arm64_sysreg = 35003;
pub const arm64_sysreg_ARM64_SYSREG_TRCSTALLCTLR: arm64_sysreg = 34904;
pub const arm64_sysreg_ARM64_SYSREG_TRCSTATR: arm64_sysreg = 34840;
pub const arm64_sysreg_ARM64_SYSREG_TRCSYNCPR: arm64_sysreg = 34920;
pub const arm64_sysreg_ARM64_SYSREG_TRCTRACEIDR: arm64_sysreg = 34817;
pub const arm64_sysreg_ARM64_SYSREG_TRCTSCTLR: arm64_sysreg = 34912;
pub const arm64_sysreg_ARM64_SYSREG_TRCVDARCCTLR: arm64_sysreg = 34898;
pub const arm64_sysreg_ARM64_SYSREG_TRCVDCTLR: arm64_sysreg = 34882;
pub const arm64_sysreg_ARM64_SYSREG_TRCVDSACCTLR: arm64_sysreg = 34890;
pub const arm64_sysreg_ARM64_SYSREG_TRCVICTLR: arm64_sysreg = 34818;
pub const arm64_sysreg_ARM64_SYSREG_TRCVIIECTLR: arm64_sysreg = 34826;
pub const arm64_sysreg_ARM64_SYSREG_TRCVIPCSSCTLR: arm64_sysreg = 34842;
pub const arm64_sysreg_ARM64_SYSREG_TRCVISSCTLR: arm64_sysreg = 34834;
pub const arm64_sysreg_ARM64_SYSREG_TRCVMIDCCTLR0: arm64_sysreg = 35218;
pub const arm64_sysreg_ARM64_SYSREG_TRCVMIDCCTLR1: arm64_sysreg = 35226;
pub const arm64_sysreg_ARM64_SYSREG_TRCVMIDCVR0: arm64_sysreg = 35201;
pub const arm64_sysreg_ARM64_SYSREG_TRCVMIDCVR1: arm64_sysreg = 35217;
pub const arm64_sysreg_ARM64_SYSREG_TRCVMIDCVR2: arm64_sysreg = 35233;
pub const arm64_sysreg_ARM64_SYSREG_TRCVMIDCVR3: arm64_sysreg = 35249;
pub const arm64_sysreg_ARM64_SYSREG_TRCVMIDCVR4: arm64_sysreg = 35265;
pub const arm64_sysreg_ARM64_SYSREG_TRCVMIDCVR5: arm64_sysreg = 35281;
pub const arm64_sysreg_ARM64_SYSREG_TRCVMIDCVR6: arm64_sysreg = 35297;
pub const arm64_sysreg_ARM64_SYSREG_TRCVMIDCVR7: arm64_sysreg = 35313;
pub const arm64_sysreg_ARM64_SYSREG_TRFCR_EL1: arm64_sysreg = 49297;
pub const arm64_sysreg_ARM64_SYSREG_TRFCR_EL12: arm64_sysreg = 59537;
pub const arm64_sysreg_ARM64_SYSREG_TRFCR_EL2: arm64_sysreg = 57489;
pub const arm64_sysreg_ARM64_SYSREG_TTBR0_EL1: arm64_sysreg = 49408;
pub const arm64_sysreg_ARM64_SYSREG_TTBR0_EL12: arm64_sysreg = 59648;
pub const arm64_sysreg_ARM64_SYSREG_TTBR0_EL2: arm64_sysreg = 57600;
pub const arm64_sysreg_ARM64_SYSREG_TTBR0_EL3: arm64_sysreg = 61696;
pub const arm64_sysreg_ARM64_SYSREG_TTBR1_EL1: arm64_sysreg = 49409;
pub const arm64_sysreg_ARM64_SYSREG_TTBR1_EL12: arm64_sysreg = 59649;
pub const arm64_sysreg_ARM64_SYSREG_TTBR1_EL2: arm64_sysreg = 57601;
pub const arm64_sysreg_ARM64_SYSREG_UAO: arm64_sysreg = 49684;
pub const arm64_sysreg_ARM64_SYSREG_VBAR_EL1: arm64_sysreg = 50688;
pub const arm64_sysreg_ARM64_SYSREG_VBAR_EL12: arm64_sysreg = 60928;
pub const arm64_sysreg_ARM64_SYSREG_VBAR_EL2: arm64_sysreg = 58880;
pub const arm64_sysreg_ARM64_SYSREG_VBAR_EL3: arm64_sysreg = 62976;
pub const arm64_sysreg_ARM64_SYSREG_VDISR_EL2: arm64_sysreg = 58889;
pub const arm64_sysreg_ARM64_SYSREG_VMPIDR_EL2: arm64_sysreg = 57349;
pub const arm64_sysreg_ARM64_SYSREG_VNCR_EL2: arm64_sysreg = 57616;
pub const arm64_sysreg_ARM64_SYSREG_VPIDR_EL2: arm64_sysreg = 57344;
pub const arm64_sysreg_ARM64_SYSREG_VSCTLR_EL2: arm64_sysreg = 57600;
pub const arm64_sysreg_ARM64_SYSREG_VSESR_EL2: arm64_sysreg = 58003;
pub const arm64_sysreg_ARM64_SYSREG_VSTCR_EL2: arm64_sysreg = 57650;
pub const arm64_sysreg_ARM64_SYSREG_VSTTBR_EL2: arm64_sysreg = 57648;
pub const arm64_sysreg_ARM64_SYSREG_VTCR_EL2: arm64_sysreg = 57610;
pub const arm64_sysreg_ARM64_SYSREG_VTTBR_EL2: arm64_sysreg = 57608;
pub const arm64_sysreg_ARM64_SYSREG_ZCR_EL1: arm64_sysreg = 49296;
pub const arm64_sysreg_ARM64_SYSREG_ZCR_EL12: arm64_sysreg = 59536;
pub const arm64_sysreg_ARM64_SYSREG_ZCR_EL2: arm64_sysreg = 57488;
pub const arm64_sysreg_ARM64_SYSREG_ZCR_EL3: arm64_sysreg = 61584;
pub type arm64_sysreg = ::core::ffi::c_uint;
pub const arm64_pstate_ARM64_PSTATE_INVALID: arm64_pstate = 0;
pub const arm64_pstate_ARM64_PSTATE_SPSEL: arm64_pstate = 5;
pub const arm64_pstate_ARM64_PSTATE_DAIFSET: arm64_pstate = 30;
pub const arm64_pstate_ARM64_PSTATE_DAIFCLR: arm64_pstate = 31;
pub const arm64_pstate_ARM64_PSTATE_PAN: arm64_pstate = 4;
pub const arm64_pstate_ARM64_PSTATE_UAO: arm64_pstate = 3;
pub const arm64_pstate_ARM64_PSTATE_DIT: arm64_pstate = 26;
pub type arm64_pstate = ::core::ffi::c_uint;
pub const arm64_vas_ARM64_VAS_INVALID: arm64_vas = 0;
pub const arm64_vas_ARM64_VAS_16B: arm64_vas = 1;
pub const arm64_vas_ARM64_VAS_8B: arm64_vas = 2;
pub const arm64_vas_ARM64_VAS_4B: arm64_vas = 3;
pub const arm64_vas_ARM64_VAS_1B: arm64_vas = 4;
pub const arm64_vas_ARM64_VAS_8H: arm64_vas = 5;
pub const arm64_vas_ARM64_VAS_4H: arm64_vas = 6;
pub const arm64_vas_ARM64_VAS_2H: arm64_vas = 7;
pub const arm64_vas_ARM64_VAS_1H: arm64_vas = 8;
pub const arm64_vas_ARM64_VAS_4S: arm64_vas = 9;
pub const arm64_vas_ARM64_VAS_2S: arm64_vas = 10;
pub const arm64_vas_ARM64_VAS_1S: arm64_vas = 11;
pub const arm64_vas_ARM64_VAS_2D: arm64_vas = 12;
pub const arm64_vas_ARM64_VAS_1D: arm64_vas = 13;
pub const arm64_vas_ARM64_VAS_1Q: arm64_vas = 14;
pub type arm64_vas = ::core::ffi::c_uint;
pub const arm64_barrier_op_ARM64_BARRIER_INVALID: arm64_barrier_op = 0;
pub const arm64_barrier_op_ARM64_BARRIER_OSHLD: arm64_barrier_op = 1;
pub const arm64_barrier_op_ARM64_BARRIER_OSHST: arm64_barrier_op = 2;
pub const arm64_barrier_op_ARM64_BARRIER_OSH: arm64_barrier_op = 3;
pub const arm64_barrier_op_ARM64_BARRIER_NSHLD: arm64_barrier_op = 5;
pub const arm64_barrier_op_ARM64_BARRIER_NSHST: arm64_barrier_op = 6;
pub const arm64_barrier_op_ARM64_BARRIER_NSH: arm64_barrier_op = 7;
pub const arm64_barrier_op_ARM64_BARRIER_ISHLD: arm64_barrier_op = 9;
pub const arm64_barrier_op_ARM64_BARRIER_ISHST: arm64_barrier_op = 10;
pub const arm64_barrier_op_ARM64_BARRIER_ISH: arm64_barrier_op = 11;
pub const arm64_barrier_op_ARM64_BARRIER_LD: arm64_barrier_op = 13;
pub const arm64_barrier_op_ARM64_BARRIER_ST: arm64_barrier_op = 14;
pub const arm64_barrier_op_ARM64_BARRIER_SY: arm64_barrier_op = 15;
pub type arm64_barrier_op = ::core::ffi::c_uint;
pub const arm64_op_type_ARM64_OP_INVALID: arm64_op_type = 0;
pub const arm64_op_type_ARM64_OP_REG: arm64_op_type = 1;
pub const arm64_op_type_ARM64_OP_IMM: arm64_op_type = 2;
pub const arm64_op_type_ARM64_OP_MEM: arm64_op_type = 3;
pub const arm64_op_type_ARM64_OP_FP: arm64_op_type = 4;
pub const arm64_op_type_ARM64_OP_CIMM: arm64_op_type = 64;
pub const arm64_op_type_ARM64_OP_REG_MRS: arm64_op_type = 65;
pub const arm64_op_type_ARM64_OP_REG_MSR: arm64_op_type = 66;
pub const arm64_op_type_ARM64_OP_PSTATE: arm64_op_type = 67;
pub const arm64_op_type_ARM64_OP_SYS: arm64_op_type = 68;
pub const arm64_op_type_ARM64_OP_SVCR: arm64_op_type = 69;
pub const arm64_op_type_ARM64_OP_PREFETCH: arm64_op_type = 70;
pub const arm64_op_type_ARM64_OP_BARRIER: arm64_op_type = 71;
pub const arm64_op_type_ARM64_OP_SME_INDEX: arm64_op_type = 72;
pub type arm64_op_type = ::core::ffi::c_uint;
pub const arm64_sys_op_ARM64_SYS_INVALID: arm64_sys_op = 0;
pub const arm64_sys_op_ARM64_TLBI_ALLE1: arm64_sys_op = 1;
pub const arm64_sys_op_ARM64_TLBI_ALLE1IS: arm64_sys_op = 2;
pub const arm64_sys_op_ARM64_TLBI_ALLE1ISNXS: arm64_sys_op = 3;
pub const arm64_sys_op_ARM64_TLBI_ALLE1NXS: arm64_sys_op = 4;
pub const arm64_sys_op_ARM64_TLBI_ALLE1OS: arm64_sys_op = 5;
pub const arm64_sys_op_ARM64_TLBI_ALLE1OSNXS: arm64_sys_op = 6;
pub const arm64_sys_op_ARM64_TLBI_ALLE2: arm64_sys_op = 7;
pub const arm64_sys_op_ARM64_TLBI_ALLE2IS: arm64_sys_op = 8;
pub const arm64_sys_op_ARM64_TLBI_ALLE2ISNXS: arm64_sys_op = 9;
pub const arm64_sys_op_ARM64_TLBI_ALLE2NXS: arm64_sys_op = 10;
pub const arm64_sys_op_ARM64_TLBI_ALLE2OS: arm64_sys_op = 11;
pub const arm64_sys_op_ARM64_TLBI_ALLE2OSNXS: arm64_sys_op = 12;
pub const arm64_sys_op_ARM64_TLBI_ALLE3: arm64_sys_op = 13;
pub const arm64_sys_op_ARM64_TLBI_ALLE3IS: arm64_sys_op = 14;
pub const arm64_sys_op_ARM64_TLBI_ALLE3ISNXS: arm64_sys_op = 15;
pub const arm64_sys_op_ARM64_TLBI_ALLE3NXS: arm64_sys_op = 16;
pub const arm64_sys_op_ARM64_TLBI_ALLE3OS: arm64_sys_op = 17;
pub const arm64_sys_op_ARM64_TLBI_ALLE3OSNXS: arm64_sys_op = 18;
pub const arm64_sys_op_ARM64_TLBI_ASIDE1: arm64_sys_op = 19;
pub const arm64_sys_op_ARM64_TLBI_ASIDE1IS: arm64_sys_op = 20;
pub const arm64_sys_op_ARM64_TLBI_ASIDE1ISNXS: arm64_sys_op = 21;
pub const arm64_sys_op_ARM64_TLBI_ASIDE1NXS: arm64_sys_op = 22;
pub const arm64_sys_op_ARM64_TLBI_ASIDE1OS: arm64_sys_op = 23;
pub const arm64_sys_op_ARM64_TLBI_ASIDE1OSNXS: arm64_sys_op = 24;
pub const arm64_sys_op_ARM64_TLBI_IPAS2E1: arm64_sys_op = 25;
pub const arm64_sys_op_ARM64_TLBI_IPAS2E1IS: arm64_sys_op = 26;
pub const arm64_sys_op_ARM64_TLBI_IPAS2E1ISNXS: arm64_sys_op = 27;
pub const arm64_sys_op_ARM64_TLBI_IPAS2E1NXS: arm64_sys_op = 28;
pub const arm64_sys_op_ARM64_TLBI_IPAS2E1OS: arm64_sys_op = 29;
pub const arm64_sys_op_ARM64_TLBI_IPAS2E1OSNXS: arm64_sys_op = 30;
pub const arm64_sys_op_ARM64_TLBI_IPAS2LE1: arm64_sys_op = 31;
pub const arm64_sys_op_ARM64_TLBI_IPAS2LE1IS: arm64_sys_op = 32;
pub const arm64_sys_op_ARM64_TLBI_IPAS2LE1ISNXS: arm64_sys_op = 33;
pub const arm64_sys_op_ARM64_TLBI_IPAS2LE1NXS: arm64_sys_op = 34;
pub const arm64_sys_op_ARM64_TLBI_IPAS2LE1OS: arm64_sys_op = 35;
pub const arm64_sys_op_ARM64_TLBI_IPAS2LE1OSNXS: arm64_sys_op = 36;
pub const arm64_sys_op_ARM64_TLBI_PAALL: arm64_sys_op = 37;
pub const arm64_sys_op_ARM64_TLBI_PAALLNXS: arm64_sys_op = 38;
pub const arm64_sys_op_ARM64_TLBI_PAALLOS: arm64_sys_op = 39;
pub const arm64_sys_op_ARM64_TLBI_PAALLOSNXS: arm64_sys_op = 40;
pub const arm64_sys_op_ARM64_TLBI_RIPAS2E1: arm64_sys_op = 41;
pub const arm64_sys_op_ARM64_TLBI_RIPAS2E1IS: arm64_sys_op = 42;
pub const arm64_sys_op_ARM64_TLBI_RIPAS2E1ISNXS: arm64_sys_op = 43;
pub const arm64_sys_op_ARM64_TLBI_RIPAS2E1NXS: arm64_sys_op = 44;
pub const arm64_sys_op_ARM64_TLBI_RIPAS2E1OS: arm64_sys_op = 45;
pub const arm64_sys_op_ARM64_TLBI_RIPAS2E1OSNXS: arm64_sys_op = 46;
pub const arm64_sys_op_ARM64_TLBI_RIPAS2LE1: arm64_sys_op = 47;
pub const arm64_sys_op_ARM64_TLBI_RIPAS2LE1IS: arm64_sys_op = 48;
pub const arm64_sys_op_ARM64_TLBI_RIPAS2LE1ISNXS: arm64_sys_op = 49;
pub const arm64_sys_op_ARM64_TLBI_RIPAS2LE1NXS: arm64_sys_op = 50;
pub const arm64_sys_op_ARM64_TLBI_RIPAS2LE1OS: arm64_sys_op = 51;
pub const arm64_sys_op_ARM64_TLBI_RIPAS2LE1OSNXS: arm64_sys_op = 52;
pub const arm64_sys_op_ARM64_TLBI_RPALOS: arm64_sys_op = 53;
pub const arm64_sys_op_ARM64_TLBI_RPALOSNXS: arm64_sys_op = 54;
pub const arm64_sys_op_ARM64_TLBI_RPAOS: arm64_sys_op = 55;
pub const arm64_sys_op_ARM64_TLBI_RPAOSNXS: arm64_sys_op = 56;
pub const arm64_sys_op_ARM64_TLBI_RVAAE1: arm64_sys_op = 57;
pub const arm64_sys_op_ARM64_TLBI_RVAAE1IS: arm64_sys_op = 58;
pub const arm64_sys_op_ARM64_TLBI_RVAAE1ISNXS: arm64_sys_op = 59;
pub const arm64_sys_op_ARM64_TLBI_RVAAE1NXS: arm64_sys_op = 60;
pub const arm64_sys_op_ARM64_TLBI_RVAAE1OS: arm64_sys_op = 61;
pub const arm64_sys_op_ARM64_TLBI_RVAAE1OSNXS: arm64_sys_op = 62;
pub const arm64_sys_op_ARM64_TLBI_RVAALE1: arm64_sys_op = 63;
pub const arm64_sys_op_ARM64_TLBI_RVAALE1IS: arm64_sys_op = 64;
pub const arm64_sys_op_ARM64_TLBI_RVAALE1ISNXS: arm64_sys_op = 65;
pub const arm64_sys_op_ARM64_TLBI_RVAALE1NXS: arm64_sys_op = 66;
pub const arm64_sys_op_ARM64_TLBI_RVAALE1OS: arm64_sys_op = 67;
pub const arm64_sys_op_ARM64_TLBI_RVAALE1OSNXS: arm64_sys_op = 68;
pub const arm64_sys_op_ARM64_TLBI_RVAE1: arm64_sys_op = 69;
pub const arm64_sys_op_ARM64_TLBI_RVAE1IS: arm64_sys_op = 70;
pub const arm64_sys_op_ARM64_TLBI_RVAE1ISNXS: arm64_sys_op = 71;
pub const arm64_sys_op_ARM64_TLBI_RVAE1NXS: arm64_sys_op = 72;
pub const arm64_sys_op_ARM64_TLBI_RVAE1OS: arm64_sys_op = 73;
pub const arm64_sys_op_ARM64_TLBI_RVAE1OSNXS: arm64_sys_op = 74;
pub const arm64_sys_op_ARM64_TLBI_RVAE2: arm64_sys_op = 75;
pub const arm64_sys_op_ARM64_TLBI_RVAE2IS: arm64_sys_op = 76;
pub const arm64_sys_op_ARM64_TLBI_RVAE2ISNXS: arm64_sys_op = 77;
pub const arm64_sys_op_ARM64_TLBI_RVAE2NXS: arm64_sys_op = 78;
pub const arm64_sys_op_ARM64_TLBI_RVAE2OS: arm64_sys_op = 79;
pub const arm64_sys_op_ARM64_TLBI_RVAE2OSNXS: arm64_sys_op = 80;
pub const arm64_sys_op_ARM64_TLBI_RVAE3: arm64_sys_op = 81;
pub const arm64_sys_op_ARM64_TLBI_RVAE3IS: arm64_sys_op = 82;
pub const arm64_sys_op_ARM64_TLBI_RVAE3ISNXS: arm64_sys_op = 83;
pub const arm64_sys_op_ARM64_TLBI_RVAE3NXS: arm64_sys_op = 84;
pub const arm64_sys_op_ARM64_TLBI_RVAE3OS: arm64_sys_op = 85;
pub const arm64_sys_op_ARM64_TLBI_RVAE3OSNXS: arm64_sys_op = 86;
pub const arm64_sys_op_ARM64_TLBI_RVALE1: arm64_sys_op = 87;
pub const arm64_sys_op_ARM64_TLBI_RVALE1IS: arm64_sys_op = 88;
pub const arm64_sys_op_ARM64_TLBI_RVALE1ISNXS: arm64_sys_op = 89;
pub const arm64_sys_op_ARM64_TLBI_RVALE1NXS: arm64_sys_op = 90;
pub const arm64_sys_op_ARM64_TLBI_RVALE1OS: arm64_sys_op = 91;
pub const arm64_sys_op_ARM64_TLBI_RVALE1OSNXS: arm64_sys_op = 92;
pub const arm64_sys_op_ARM64_TLBI_RVALE2: arm64_sys_op = 93;
pub const arm64_sys_op_ARM64_TLBI_RVALE2IS: arm64_sys_op = 94;
pub const arm64_sys_op_ARM64_TLBI_RVALE2ISNXS: arm64_sys_op = 95;
pub const arm64_sys_op_ARM64_TLBI_RVALE2NXS: arm64_sys_op = 96;
pub const arm64_sys_op_ARM64_TLBI_RVALE2OS: arm64_sys_op = 97;
pub const arm64_sys_op_ARM64_TLBI_RVALE2OSNXS: arm64_sys_op = 98;
pub const arm64_sys_op_ARM64_TLBI_RVALE3: arm64_sys_op = 99;
pub const arm64_sys_op_ARM64_TLBI_RVALE3IS: arm64_sys_op = 100;
pub const arm64_sys_op_ARM64_TLBI_RVALE3ISNXS: arm64_sys_op = 101;
pub const arm64_sys_op_ARM64_TLBI_RVALE3NXS: arm64_sys_op = 102;
pub const arm64_sys_op_ARM64_TLBI_RVALE3OS: arm64_sys_op = 103;
pub const arm64_sys_op_ARM64_TLBI_RVALE3OSNXS: arm64_sys_op = 104;
pub const arm64_sys_op_ARM64_TLBI_VAAE1: arm64_sys_op = 105;
pub const arm64_sys_op_ARM64_TLBI_VAAE1IS: arm64_sys_op = 106;
pub const arm64_sys_op_ARM64_TLBI_VAAE1ISNXS: arm64_sys_op = 107;
pub const arm64_sys_op_ARM64_TLBI_VAAE1NXS: arm64_sys_op = 108;
pub const arm64_sys_op_ARM64_TLBI_VAAE1OS: arm64_sys_op = 109;
pub const arm64_sys_op_ARM64_TLBI_VAAE1OSNXS: arm64_sys_op = 110;
pub const arm64_sys_op_ARM64_TLBI_VAALE1: arm64_sys_op = 111;
pub const arm64_sys_op_ARM64_TLBI_VAALE1IS: arm64_sys_op = 112;
pub const arm64_sys_op_ARM64_TLBI_VAALE1ISNXS: arm64_sys_op = 113;
pub const arm64_sys_op_ARM64_TLBI_VAALE1NXS: arm64_sys_op = 114;
pub const arm64_sys_op_ARM64_TLBI_VAALE1OS: arm64_sys_op = 115;
pub const arm64_sys_op_ARM64_TLBI_VAALE1OSNXS: arm64_sys_op = 116;
pub const arm64_sys_op_ARM64_TLBI_VAE1: arm64_sys_op = 117;
pub const arm64_sys_op_ARM64_TLBI_VAE1IS: arm64_sys_op = 118;
pub const arm64_sys_op_ARM64_TLBI_VAE1ISNXS: arm64_sys_op = 119;
pub const arm64_sys_op_ARM64_TLBI_VAE1NXS: arm64_sys_op = 120;
pub const arm64_sys_op_ARM64_TLBI_VAE1OS: arm64_sys_op = 121;
pub const arm64_sys_op_ARM64_TLBI_VAE1OSNXS: arm64_sys_op = 122;
pub const arm64_sys_op_ARM64_TLBI_VAE2: arm64_sys_op = 123;
pub const arm64_sys_op_ARM64_TLBI_VAE2IS: arm64_sys_op = 124;
pub const arm64_sys_op_ARM64_TLBI_VAE2ISNXS: arm64_sys_op = 125;
pub const arm64_sys_op_ARM64_TLBI_VAE2NXS: arm64_sys_op = 126;
pub const arm64_sys_op_ARM64_TLBI_VAE2OS: arm64_sys_op = 127;
pub const arm64_sys_op_ARM64_TLBI_VAE2OSNXS: arm64_sys_op = 128;
pub const arm64_sys_op_ARM64_TLBI_VAE3: arm64_sys_op = 129;
pub const arm64_sys_op_ARM64_TLBI_VAE3IS: arm64_sys_op = 130;
pub const arm64_sys_op_ARM64_TLBI_VAE3ISNXS: arm64_sys_op = 131;
pub const arm64_sys_op_ARM64_TLBI_VAE3NXS: arm64_sys_op = 132;
pub const arm64_sys_op_ARM64_TLBI_VAE3OS: arm64_sys_op = 133;
pub const arm64_sys_op_ARM64_TLBI_VAE3OSNXS: arm64_sys_op = 134;
pub const arm64_sys_op_ARM64_TLBI_VALE1: arm64_sys_op = 135;
pub const arm64_sys_op_ARM64_TLBI_VALE1IS: arm64_sys_op = 136;
pub const arm64_sys_op_ARM64_TLBI_VALE1ISNXS: arm64_sys_op = 137;
pub const arm64_sys_op_ARM64_TLBI_VALE1NXS: arm64_sys_op = 138;
pub const arm64_sys_op_ARM64_TLBI_VALE1OS: arm64_sys_op = 139;
pub const arm64_sys_op_ARM64_TLBI_VALE1OSNXS: arm64_sys_op = 140;
pub const arm64_sys_op_ARM64_TLBI_VALE2: arm64_sys_op = 141;
pub const arm64_sys_op_ARM64_TLBI_VALE2IS: arm64_sys_op = 142;
pub const arm64_sys_op_ARM64_TLBI_VALE2ISNXS: arm64_sys_op = 143;
pub const arm64_sys_op_ARM64_TLBI_VALE2NXS: arm64_sys_op = 144;
pub const arm64_sys_op_ARM64_TLBI_VALE2OS: arm64_sys_op = 145;
pub const arm64_sys_op_ARM64_TLBI_VALE2OSNXS: arm64_sys_op = 146;
pub const arm64_sys_op_ARM64_TLBI_VALE3: arm64_sys_op = 147;
pub const arm64_sys_op_ARM64_TLBI_VALE3IS: arm64_sys_op = 148;
pub const arm64_sys_op_ARM64_TLBI_VALE3ISNXS: arm64_sys_op = 149;
pub const arm64_sys_op_ARM64_TLBI_VALE3NXS: arm64_sys_op = 150;
pub const arm64_sys_op_ARM64_TLBI_VALE3OS: arm64_sys_op = 151;
pub const arm64_sys_op_ARM64_TLBI_VALE3OSNXS: arm64_sys_op = 152;
pub const arm64_sys_op_ARM64_TLBI_VMALLE1: arm64_sys_op = 153;
pub const arm64_sys_op_ARM64_TLBI_VMALLE1IS: arm64_sys_op = 154;
pub const arm64_sys_op_ARM64_TLBI_VMALLE1ISNXS: arm64_sys_op = 155;
pub const arm64_sys_op_ARM64_TLBI_VMALLE1NXS: arm64_sys_op = 156;
pub const arm64_sys_op_ARM64_TLBI_VMALLE1OS: arm64_sys_op = 157;
pub const arm64_sys_op_ARM64_TLBI_VMALLE1OSNXS: arm64_sys_op = 158;
pub const arm64_sys_op_ARM64_TLBI_VMALLS12E1: arm64_sys_op = 159;
pub const arm64_sys_op_ARM64_TLBI_VMALLS12E1IS: arm64_sys_op = 160;
pub const arm64_sys_op_ARM64_TLBI_VMALLS12E1ISNXS: arm64_sys_op = 161;
pub const arm64_sys_op_ARM64_TLBI_VMALLS12E1NXS: arm64_sys_op = 162;
pub const arm64_sys_op_ARM64_TLBI_VMALLS12E1OS: arm64_sys_op = 163;
pub const arm64_sys_op_ARM64_TLBI_VMALLS12E1OSNXS: arm64_sys_op = 164;
pub const arm64_sys_op_ARM64_AT_S1E1R: arm64_sys_op = 165;
pub const arm64_sys_op_ARM64_AT_S1E2R: arm64_sys_op = 166;
pub const arm64_sys_op_ARM64_AT_S1E3R: arm64_sys_op = 167;
pub const arm64_sys_op_ARM64_AT_S1E1W: arm64_sys_op = 168;
pub const arm64_sys_op_ARM64_AT_S1E2W: arm64_sys_op = 169;
pub const arm64_sys_op_ARM64_AT_S1E3W: arm64_sys_op = 170;
pub const arm64_sys_op_ARM64_AT_S1E0R: arm64_sys_op = 171;
pub const arm64_sys_op_ARM64_AT_S1E0W: arm64_sys_op = 172;
pub const arm64_sys_op_ARM64_AT_S12E1R: arm64_sys_op = 173;
pub const arm64_sys_op_ARM64_AT_S12E1W: arm64_sys_op = 174;
pub const arm64_sys_op_ARM64_AT_S12E0R: arm64_sys_op = 175;
pub const arm64_sys_op_ARM64_AT_S12E0W: arm64_sys_op = 176;
pub const arm64_sys_op_ARM64_AT_S1E1RP: arm64_sys_op = 177;
pub const arm64_sys_op_ARM64_AT_S1E1WP: arm64_sys_op = 178;
pub const arm64_sys_op_ARM64_DC_CGDSW: arm64_sys_op = 179;
pub const arm64_sys_op_ARM64_DC_CGDVAC: arm64_sys_op = 180;
pub const arm64_sys_op_ARM64_DC_CGDVADP: arm64_sys_op = 181;
pub const arm64_sys_op_ARM64_DC_CGDVAP: arm64_sys_op = 182;
pub const arm64_sys_op_ARM64_DC_CGSW: arm64_sys_op = 183;
pub const arm64_sys_op_ARM64_DC_CGVAC: arm64_sys_op = 184;
pub const arm64_sys_op_ARM64_DC_CGVADP: arm64_sys_op = 185;
pub const arm64_sys_op_ARM64_DC_CGVAP: arm64_sys_op = 186;
pub const arm64_sys_op_ARM64_DC_CIGDSW: arm64_sys_op = 187;
pub const arm64_sys_op_ARM64_DC_CIGDVAC: arm64_sys_op = 188;
pub const arm64_sys_op_ARM64_DC_CIGSW: arm64_sys_op = 189;
pub const arm64_sys_op_ARM64_DC_CIGVAC: arm64_sys_op = 190;
pub const arm64_sys_op_ARM64_DC_CISW: arm64_sys_op = 191;
pub const arm64_sys_op_ARM64_DC_CIVAC: arm64_sys_op = 192;
pub const arm64_sys_op_ARM64_DC_CSW: arm64_sys_op = 193;
pub const arm64_sys_op_ARM64_DC_CVAC: arm64_sys_op = 194;
pub const arm64_sys_op_ARM64_DC_CVADP: arm64_sys_op = 195;
pub const arm64_sys_op_ARM64_DC_CVAP: arm64_sys_op = 196;
pub const arm64_sys_op_ARM64_DC_CVAU: arm64_sys_op = 197;
pub const arm64_sys_op_ARM64_DC_GVA: arm64_sys_op = 198;
pub const arm64_sys_op_ARM64_DC_GZVA: arm64_sys_op = 199;
pub const arm64_sys_op_ARM64_DC_IGDSW: arm64_sys_op = 200;
pub const arm64_sys_op_ARM64_DC_IGDVAC: arm64_sys_op = 201;
pub const arm64_sys_op_ARM64_DC_IGSW: arm64_sys_op = 202;
pub const arm64_sys_op_ARM64_DC_IGVAC: arm64_sys_op = 203;
pub const arm64_sys_op_ARM64_DC_ISW: arm64_sys_op = 204;
pub const arm64_sys_op_ARM64_DC_IVAC: arm64_sys_op = 205;
pub const arm64_sys_op_ARM64_DC_ZVA: arm64_sys_op = 206;
pub const arm64_sys_op_ARM64_IC_IALLUIS: arm64_sys_op = 207;
pub const arm64_sys_op_ARM64_IC_IALLU: arm64_sys_op = 208;
pub const arm64_sys_op_ARM64_IC_IVAU: arm64_sys_op = 209;
pub type arm64_sys_op = ::core::ffi::c_uint;
pub const arm64_svcr_op_ARM64_SVCR_INVALID: arm64_svcr_op = 0;
pub const arm64_svcr_op_ARM64_SVCR_SVCRSM: arm64_svcr_op = 1;
pub const arm64_svcr_op_ARM64_SVCR_SVCRSMZA: arm64_svcr_op = 3;
pub const arm64_svcr_op_ARM64_SVCR_SVCRZA: arm64_svcr_op = 2;
pub type arm64_svcr_op = ::core::ffi::c_uint;
pub const arm64_prefetch_op_ARM64_PRFM_INVALID: arm64_prefetch_op = 0;
pub const arm64_prefetch_op_ARM64_PRFM_PLDL1KEEP: arm64_prefetch_op = 1;
pub const arm64_prefetch_op_ARM64_PRFM_PLDL1STRM: arm64_prefetch_op = 2;
pub const arm64_prefetch_op_ARM64_PRFM_PLDL2KEEP: arm64_prefetch_op = 3;
pub const arm64_prefetch_op_ARM64_PRFM_PLDL2STRM: arm64_prefetch_op = 4;
pub const arm64_prefetch_op_ARM64_PRFM_PLDL3KEEP: arm64_prefetch_op = 5;
pub const arm64_prefetch_op_ARM64_PRFM_PLDL3STRM: arm64_prefetch_op = 6;
pub const arm64_prefetch_op_ARM64_PRFM_PLIL1KEEP: arm64_prefetch_op = 9;
pub const arm64_prefetch_op_ARM64_PRFM_PLIL1STRM: arm64_prefetch_op = 10;
pub const arm64_prefetch_op_ARM64_PRFM_PLIL2KEEP: arm64_prefetch_op = 11;
pub const arm64_prefetch_op_ARM64_PRFM_PLIL2STRM: arm64_prefetch_op = 12;
pub const arm64_prefetch_op_ARM64_PRFM_PLIL3KEEP: arm64_prefetch_op = 13;
pub const arm64_prefetch_op_ARM64_PRFM_PLIL3STRM: arm64_prefetch_op = 14;
pub const arm64_prefetch_op_ARM64_PRFM_PSTL1KEEP: arm64_prefetch_op = 17;
pub const arm64_prefetch_op_ARM64_PRFM_PSTL1STRM: arm64_prefetch_op = 18;
pub const arm64_prefetch_op_ARM64_PRFM_PSTL2KEEP: arm64_prefetch_op = 19;
pub const arm64_prefetch_op_ARM64_PRFM_PSTL2STRM: arm64_prefetch_op = 20;
pub const arm64_prefetch_op_ARM64_PRFM_PSTL3KEEP: arm64_prefetch_op = 21;
pub const arm64_prefetch_op_ARM64_PRFM_PSTL3STRM: arm64_prefetch_op = 22;
pub type arm64_prefetch_op = ::core::ffi::c_uint;
pub const arm64_reg_ARM64_REG_INVALID: arm64_reg = 0;
pub const arm64_reg_ARM64_REG_FFR: arm64_reg = 1;
pub const arm64_reg_ARM64_REG_FP: arm64_reg = 2;
pub const arm64_reg_ARM64_REG_LR: arm64_reg = 3;
pub const arm64_reg_ARM64_REG_NZCV: arm64_reg = 4;
pub const arm64_reg_ARM64_REG_SP: arm64_reg = 5;
pub const arm64_reg_ARM64_REG_VG: arm64_reg = 6;
pub const arm64_reg_ARM64_REG_WSP: arm64_reg = 7;
pub const arm64_reg_ARM64_REG_WZR: arm64_reg = 8;
pub const arm64_reg_ARM64_REG_XZR: arm64_reg = 9;
pub const arm64_reg_ARM64_REG_ZA: arm64_reg = 10;
pub const arm64_reg_ARM64_REG_B0: arm64_reg = 11;
pub const arm64_reg_ARM64_REG_B1: arm64_reg = 12;
pub const arm64_reg_ARM64_REG_B2: arm64_reg = 13;
pub const arm64_reg_ARM64_REG_B3: arm64_reg = 14;
pub const arm64_reg_ARM64_REG_B4: arm64_reg = 15;
pub const arm64_reg_ARM64_REG_B5: arm64_reg = 16;
pub const arm64_reg_ARM64_REG_B6: arm64_reg = 17;
pub const arm64_reg_ARM64_REG_B7: arm64_reg = 18;
pub const arm64_reg_ARM64_REG_B8: arm64_reg = 19;
pub const arm64_reg_ARM64_REG_B9: arm64_reg = 20;
pub const arm64_reg_ARM64_REG_B10: arm64_reg = 21;
pub const arm64_reg_ARM64_REG_B11: arm64_reg = 22;
pub const arm64_reg_ARM64_REG_B12: arm64_reg = 23;
pub const arm64_reg_ARM64_REG_B13: arm64_reg = 24;
pub const arm64_reg_ARM64_REG_B14: arm64_reg = 25;
pub const arm64_reg_ARM64_REG_B15: arm64_reg = 26;
pub const arm64_reg_ARM64_REG_B16: arm64_reg = 27;
pub const arm64_reg_ARM64_REG_B17: arm64_reg = 28;
pub const arm64_reg_ARM64_REG_B18: arm64_reg = 29;
pub const arm64_reg_ARM64_REG_B19: arm64_reg = 30;
pub const arm64_reg_ARM64_REG_B20: arm64_reg = 31;
pub const arm64_reg_ARM64_REG_B21: arm64_reg = 32;
pub const arm64_reg_ARM64_REG_B22: arm64_reg = 33;
pub const arm64_reg_ARM64_REG_B23: arm64_reg = 34;
pub const arm64_reg_ARM64_REG_B24: arm64_reg = 35;
pub const arm64_reg_ARM64_REG_B25: arm64_reg = 36;
pub const arm64_reg_ARM64_REG_B26: arm64_reg = 37;
pub const arm64_reg_ARM64_REG_B27: arm64_reg = 38;
pub const arm64_reg_ARM64_REG_B28: arm64_reg = 39;
pub const arm64_reg_ARM64_REG_B29: arm64_reg = 40;
pub const arm64_reg_ARM64_REG_B30: arm64_reg = 41;
pub const arm64_reg_ARM64_REG_B31: arm64_reg = 42;
pub const arm64_reg_ARM64_REG_D0: arm64_reg = 43;
pub const arm64_reg_ARM64_REG_D1: arm64_reg = 44;
pub const arm64_reg_ARM64_REG_D2: arm64_reg = 45;
pub const arm64_reg_ARM64_REG_D3: arm64_reg = 46;
pub const arm64_reg_ARM64_REG_D4: arm64_reg = 47;
pub const arm64_reg_ARM64_REG_D5: arm64_reg = 48;
pub const arm64_reg_ARM64_REG_D6: arm64_reg = 49;
pub const arm64_reg_ARM64_REG_D7: arm64_reg = 50;
pub const arm64_reg_ARM64_REG_D8: arm64_reg = 51;
pub const arm64_reg_ARM64_REG_D9: arm64_reg = 52;
pub const arm64_reg_ARM64_REG_D10: arm64_reg = 53;
pub const arm64_reg_ARM64_REG_D11: arm64_reg = 54;
pub const arm64_reg_ARM64_REG_D12: arm64_reg = 55;
pub const arm64_reg_ARM64_REG_D13: arm64_reg = 56;
pub const arm64_reg_ARM64_REG_D14: arm64_reg = 57;
pub const arm64_reg_ARM64_REG_D15: arm64_reg = 58;
pub const arm64_reg_ARM64_REG_D16: arm64_reg = 59;
pub const arm64_reg_ARM64_REG_D17: arm64_reg = 60;
pub const arm64_reg_ARM64_REG_D18: arm64_reg = 61;
pub const arm64_reg_ARM64_REG_D19: arm64_reg = 62;
pub const arm64_reg_ARM64_REG_D20: arm64_reg = 63;
pub const arm64_reg_ARM64_REG_D21: arm64_reg = 64;
pub const arm64_reg_ARM64_REG_D22: arm64_reg = 65;
pub const arm64_reg_ARM64_REG_D23: arm64_reg = 66;
pub const arm64_reg_ARM64_REG_D24: arm64_reg = 67;
pub const arm64_reg_ARM64_REG_D25: arm64_reg = 68;
pub const arm64_reg_ARM64_REG_D26: arm64_reg = 69;
pub const arm64_reg_ARM64_REG_D27: arm64_reg = 70;
pub const arm64_reg_ARM64_REG_D28: arm64_reg = 71;
pub const arm64_reg_ARM64_REG_D29: arm64_reg = 72;
pub const arm64_reg_ARM64_REG_D30: arm64_reg = 73;
pub const arm64_reg_ARM64_REG_D31: arm64_reg = 74;
pub const arm64_reg_ARM64_REG_H0: arm64_reg = 75;
pub const arm64_reg_ARM64_REG_H1: arm64_reg = 76;
pub const arm64_reg_ARM64_REG_H2: arm64_reg = 77;
pub const arm64_reg_ARM64_REG_H3: arm64_reg = 78;
pub const arm64_reg_ARM64_REG_H4: arm64_reg = 79;
pub const arm64_reg_ARM64_REG_H5: arm64_reg = 80;
pub const arm64_reg_ARM64_REG_H6: arm64_reg = 81;
pub const arm64_reg_ARM64_REG_H7: arm64_reg = 82;
pub const arm64_reg_ARM64_REG_H8: arm64_reg = 83;
pub const arm64_reg_ARM64_REG_H9: arm64_reg = 84;
pub const arm64_reg_ARM64_REG_H10: arm64_reg = 85;
pub const arm64_reg_ARM64_REG_H11: arm64_reg = 86;
pub const arm64_reg_ARM64_REG_H12: arm64_reg = 87;
pub const arm64_reg_ARM64_REG_H13: arm64_reg = 88;
pub const arm64_reg_ARM64_REG_H14: arm64_reg = 89;
pub const arm64_reg_ARM64_REG_H15: arm64_reg = 90;
pub const arm64_reg_ARM64_REG_H16: arm64_reg = 91;
pub const arm64_reg_ARM64_REG_H17: arm64_reg = 92;
pub const arm64_reg_ARM64_REG_H18: arm64_reg = 93;
pub const arm64_reg_ARM64_REG_H19: arm64_reg = 94;
pub const arm64_reg_ARM64_REG_H20: arm64_reg = 95;
pub const arm64_reg_ARM64_REG_H21: arm64_reg = 96;
pub const arm64_reg_ARM64_REG_H22: arm64_reg = 97;
pub const arm64_reg_ARM64_REG_H23: arm64_reg = 98;
pub const arm64_reg_ARM64_REG_H24: arm64_reg = 99;
pub const arm64_reg_ARM64_REG_H25: arm64_reg = 100;
pub const arm64_reg_ARM64_REG_H26: arm64_reg = 101;
pub const arm64_reg_ARM64_REG_H27: arm64_reg = 102;
pub const arm64_reg_ARM64_REG_H28: arm64_reg = 103;
pub const arm64_reg_ARM64_REG_H29: arm64_reg = 104;
pub const arm64_reg_ARM64_REG_H30: arm64_reg = 105;
pub const arm64_reg_ARM64_REG_H31: arm64_reg = 106;
pub const arm64_reg_ARM64_REG_P0: arm64_reg = 107;
pub const arm64_reg_ARM64_REG_P1: arm64_reg = 108;
pub const arm64_reg_ARM64_REG_P2: arm64_reg = 109;
pub const arm64_reg_ARM64_REG_P3: arm64_reg = 110;
pub const arm64_reg_ARM64_REG_P4: arm64_reg = 111;
pub const arm64_reg_ARM64_REG_P5: arm64_reg = 112;
pub const arm64_reg_ARM64_REG_P6: arm64_reg = 113;
pub const arm64_reg_ARM64_REG_P7: arm64_reg = 114;
pub const arm64_reg_ARM64_REG_P8: arm64_reg = 115;
pub const arm64_reg_ARM64_REG_P9: arm64_reg = 116;
pub const arm64_reg_ARM64_REG_P10: arm64_reg = 117;
pub const arm64_reg_ARM64_REG_P11: arm64_reg = 118;
pub const arm64_reg_ARM64_REG_P12: arm64_reg = 119;
pub const arm64_reg_ARM64_REG_P13: arm64_reg = 120;
pub const arm64_reg_ARM64_REG_P14: arm64_reg = 121;
pub const arm64_reg_ARM64_REG_P15: arm64_reg = 122;
pub const arm64_reg_ARM64_REG_Q0: arm64_reg = 123;
pub const arm64_reg_ARM64_REG_Q1: arm64_reg = 124;
pub const arm64_reg_ARM64_REG_Q2: arm64_reg = 125;
pub const arm64_reg_ARM64_REG_Q3: arm64_reg = 126;
pub const arm64_reg_ARM64_REG_Q4: arm64_reg = 127;
pub const arm64_reg_ARM64_REG_Q5: arm64_reg = 128;
pub const arm64_reg_ARM64_REG_Q6: arm64_reg = 129;
pub const arm64_reg_ARM64_REG_Q7: arm64_reg = 130;
pub const arm64_reg_ARM64_REG_Q8: arm64_reg = 131;
pub const arm64_reg_ARM64_REG_Q9: arm64_reg = 132;
pub const arm64_reg_ARM64_REG_Q10: arm64_reg = 133;
pub const arm64_reg_ARM64_REG_Q11: arm64_reg = 134;
pub const arm64_reg_ARM64_REG_Q12: arm64_reg = 135;
pub const arm64_reg_ARM64_REG_Q13: arm64_reg = 136;
pub const arm64_reg_ARM64_REG_Q14: arm64_reg = 137;
pub const arm64_reg_ARM64_REG_Q15: arm64_reg = 138;
pub const arm64_reg_ARM64_REG_Q16: arm64_reg = 139;
pub const arm64_reg_ARM64_REG_Q17: arm64_reg = 140;
pub const arm64_reg_ARM64_REG_Q18: arm64_reg = 141;
pub const arm64_reg_ARM64_REG_Q19: arm64_reg = 142;
pub const arm64_reg_ARM64_REG_Q20: arm64_reg = 143;
pub const arm64_reg_ARM64_REG_Q21: arm64_reg = 144;
pub const arm64_reg_ARM64_REG_Q22: arm64_reg = 145;
pub const arm64_reg_ARM64_REG_Q23: arm64_reg = 146;
pub const arm64_reg_ARM64_REG_Q24: arm64_reg = 147;
pub const arm64_reg_ARM64_REG_Q25: arm64_reg = 148;
pub const arm64_reg_ARM64_REG_Q26: arm64_reg = 149;
pub const arm64_reg_ARM64_REG_Q27: arm64_reg = 150;
pub const arm64_reg_ARM64_REG_Q28: arm64_reg = 151;
pub const arm64_reg_ARM64_REG_Q29: arm64_reg = 152;
pub const arm64_reg_ARM64_REG_Q30: arm64_reg = 153;
pub const arm64_reg_ARM64_REG_Q31: arm64_reg = 154;
pub const arm64_reg_ARM64_REG_S0: arm64_reg = 155;
pub const arm64_reg_ARM64_REG_S1: arm64_reg = 156;
pub const arm64_reg_ARM64_REG_S2: arm64_reg = 157;
pub const arm64_reg_ARM64_REG_S3: arm64_reg = 158;
pub const arm64_reg_ARM64_REG_S4: arm64_reg = 159;
pub const arm64_reg_ARM64_REG_S5: arm64_reg = 160;
pub const arm64_reg_ARM64_REG_S6: arm64_reg = 161;
pub const arm64_reg_ARM64_REG_S7: arm64_reg = 162;
pub const arm64_reg_ARM64_REG_S8: arm64_reg = 163;
pub const arm64_reg_ARM64_REG_S9: arm64_reg = 164;
pub const arm64_reg_ARM64_REG_S10: arm64_reg = 165;
pub const arm64_reg_ARM64_REG_S11: arm64_reg = 166;
pub const arm64_reg_ARM64_REG_S12: arm64_reg = 167;
pub const arm64_reg_ARM64_REG_S13: arm64_reg = 168;
pub const arm64_reg_ARM64_REG_S14: arm64_reg = 169;
pub const arm64_reg_ARM64_REG_S15: arm64_reg = 170;
pub const arm64_reg_ARM64_REG_S16: arm64_reg = 171;
pub const arm64_reg_ARM64_REG_S17: arm64_reg = 172;
pub const arm64_reg_ARM64_REG_S18: arm64_reg = 173;
pub const arm64_reg_ARM64_REG_S19: arm64_reg = 174;
pub const arm64_reg_ARM64_REG_S20: arm64_reg = 175;
pub const arm64_reg_ARM64_REG_S21: arm64_reg = 176;
pub const arm64_reg_ARM64_REG_S22: arm64_reg = 177;
pub const arm64_reg_ARM64_REG_S23: arm64_reg = 178;
pub const arm64_reg_ARM64_REG_S24: arm64_reg = 179;
pub const arm64_reg_ARM64_REG_S25: arm64_reg = 180;
pub const arm64_reg_ARM64_REG_S26: arm64_reg = 181;
pub const arm64_reg_ARM64_REG_S27: arm64_reg = 182;
pub const arm64_reg_ARM64_REG_S28: arm64_reg = 183;
pub const arm64_reg_ARM64_REG_S29: arm64_reg = 184;
pub const arm64_reg_ARM64_REG_S30: arm64_reg = 185;
pub const arm64_reg_ARM64_REG_S31: arm64_reg = 186;
pub const arm64_reg_ARM64_REG_W0: arm64_reg = 187;
pub const arm64_reg_ARM64_REG_W1: arm64_reg = 188;
pub const arm64_reg_ARM64_REG_W2: arm64_reg = 189;
pub const arm64_reg_ARM64_REG_W3: arm64_reg = 190;
pub const arm64_reg_ARM64_REG_W4: arm64_reg = 191;
pub const arm64_reg_ARM64_REG_W5: arm64_reg = 192;
pub const arm64_reg_ARM64_REG_W6: arm64_reg = 193;
pub const arm64_reg_ARM64_REG_W7: arm64_reg = 194;
pub const arm64_reg_ARM64_REG_W8: arm64_reg = 195;
pub const arm64_reg_ARM64_REG_W9: arm64_reg = 196;
pub const arm64_reg_ARM64_REG_W10: arm64_reg = 197;
pub const arm64_reg_ARM64_REG_W11: arm64_reg = 198;
pub const arm64_reg_ARM64_REG_W12: arm64_reg = 199;
pub const arm64_reg_ARM64_REG_W13: arm64_reg = 200;
pub const arm64_reg_ARM64_REG_W14: arm64_reg = 201;
pub const arm64_reg_ARM64_REG_W15: arm64_reg = 202;
pub const arm64_reg_ARM64_REG_W16: arm64_reg = 203;
pub const arm64_reg_ARM64_REG_W17: arm64_reg = 204;
pub const arm64_reg_ARM64_REG_W18: arm64_reg = 205;
pub const arm64_reg_ARM64_REG_W19: arm64_reg = 206;
pub const arm64_reg_ARM64_REG_W20: arm64_reg = 207;
pub const arm64_reg_ARM64_REG_W21: arm64_reg = 208;
pub const arm64_reg_ARM64_REG_W22: arm64_reg = 209;
pub const arm64_reg_ARM64_REG_W23: arm64_reg = 210;
pub const arm64_reg_ARM64_REG_W24: arm64_reg = 211;
pub const arm64_reg_ARM64_REG_W25: arm64_reg = 212;
pub const arm64_reg_ARM64_REG_W26: arm64_reg = 213;
pub const arm64_reg_ARM64_REG_W27: arm64_reg = 214;
pub const arm64_reg_ARM64_REG_W28: arm64_reg = 215;
pub const arm64_reg_ARM64_REG_W29: arm64_reg = 216;
pub const arm64_reg_ARM64_REG_W30: arm64_reg = 217;
pub const arm64_reg_ARM64_REG_X0: arm64_reg = 218;
pub const arm64_reg_ARM64_REG_X1: arm64_reg = 219;
pub const arm64_reg_ARM64_REG_X2: arm64_reg = 220;
pub const arm64_reg_ARM64_REG_X3: arm64_reg = 221;
pub const arm64_reg_ARM64_REG_X4: arm64_reg = 222;
pub const arm64_reg_ARM64_REG_X5: arm64_reg = 223;
pub const arm64_reg_ARM64_REG_X6: arm64_reg = 224;
pub const arm64_reg_ARM64_REG_X7: arm64_reg = 225;
pub const arm64_reg_ARM64_REG_X8: arm64_reg = 226;
pub const arm64_reg_ARM64_REG_X9: arm64_reg = 227;
pub const arm64_reg_ARM64_REG_X10: arm64_reg = 228;
pub const arm64_reg_ARM64_REG_X11: arm64_reg = 229;
pub const arm64_reg_ARM64_REG_X12: arm64_reg = 230;
pub const arm64_reg_ARM64_REG_X13: arm64_reg = 231;
pub const arm64_reg_ARM64_REG_X14: arm64_reg = 232;
pub const arm64_reg_ARM64_REG_X15: arm64_reg = 233;
pub const arm64_reg_ARM64_REG_X16: arm64_reg = 234;
pub const arm64_reg_ARM64_REG_X17: arm64_reg = 235;
pub const arm64_reg_ARM64_REG_X18: arm64_reg = 236;
pub const arm64_reg_ARM64_REG_X19: arm64_reg = 237;
pub const arm64_reg_ARM64_REG_X20: arm64_reg = 238;
pub const arm64_reg_ARM64_REG_X21: arm64_reg = 239;
pub const arm64_reg_ARM64_REG_X22: arm64_reg = 240;
pub const arm64_reg_ARM64_REG_X23: arm64_reg = 241;
pub const arm64_reg_ARM64_REG_X24: arm64_reg = 242;
pub const arm64_reg_ARM64_REG_X25: arm64_reg = 243;
pub const arm64_reg_ARM64_REG_X26: arm64_reg = 244;
pub const arm64_reg_ARM64_REG_X27: arm64_reg = 245;
pub const arm64_reg_ARM64_REG_X28: arm64_reg = 246;
pub const arm64_reg_ARM64_REG_Z0: arm64_reg = 247;
pub const arm64_reg_ARM64_REG_Z1: arm64_reg = 248;
pub const arm64_reg_ARM64_REG_Z2: arm64_reg = 249;
pub const arm64_reg_ARM64_REG_Z3: arm64_reg = 250;
pub const arm64_reg_ARM64_REG_Z4: arm64_reg = 251;
pub const arm64_reg_ARM64_REG_Z5: arm64_reg = 252;
pub const arm64_reg_ARM64_REG_Z6: arm64_reg = 253;
pub const arm64_reg_ARM64_REG_Z7: arm64_reg = 254;
pub const arm64_reg_ARM64_REG_Z8: arm64_reg = 255;
pub const arm64_reg_ARM64_REG_Z9: arm64_reg = 256;
pub const arm64_reg_ARM64_REG_Z10: arm64_reg = 257;
pub const arm64_reg_ARM64_REG_Z11: arm64_reg = 258;
pub const arm64_reg_ARM64_REG_Z12: arm64_reg = 259;
pub const arm64_reg_ARM64_REG_Z13: arm64_reg = 260;
pub const arm64_reg_ARM64_REG_Z14: arm64_reg = 261;
pub const arm64_reg_ARM64_REG_Z15: arm64_reg = 262;
pub const arm64_reg_ARM64_REG_Z16: arm64_reg = 263;
pub const arm64_reg_ARM64_REG_Z17: arm64_reg = 264;
pub const arm64_reg_ARM64_REG_Z18: arm64_reg = 265;
pub const arm64_reg_ARM64_REG_Z19: arm64_reg = 266;
pub const arm64_reg_ARM64_REG_Z20: arm64_reg = 267;
pub const arm64_reg_ARM64_REG_Z21: arm64_reg = 268;
pub const arm64_reg_ARM64_REG_Z22: arm64_reg = 269;
pub const arm64_reg_ARM64_REG_Z23: arm64_reg = 270;
pub const arm64_reg_ARM64_REG_Z24: arm64_reg = 271;
pub const arm64_reg_ARM64_REG_Z25: arm64_reg = 272;
pub const arm64_reg_ARM64_REG_Z26: arm64_reg = 273;
pub const arm64_reg_ARM64_REG_Z27: arm64_reg = 274;
pub const arm64_reg_ARM64_REG_Z28: arm64_reg = 275;
pub const arm64_reg_ARM64_REG_Z29: arm64_reg = 276;
pub const arm64_reg_ARM64_REG_Z30: arm64_reg = 277;
pub const arm64_reg_ARM64_REG_Z31: arm64_reg = 278;
pub const arm64_reg_ARM64_REG_ZAB0: arm64_reg = 279;
pub const arm64_reg_ARM64_REG_ZAD0: arm64_reg = 280;
pub const arm64_reg_ARM64_REG_ZAD1: arm64_reg = 281;
pub const arm64_reg_ARM64_REG_ZAD2: arm64_reg = 282;
pub const arm64_reg_ARM64_REG_ZAD3: arm64_reg = 283;
pub const arm64_reg_ARM64_REG_ZAD4: arm64_reg = 284;
pub const arm64_reg_ARM64_REG_ZAD5: arm64_reg = 285;
pub const arm64_reg_ARM64_REG_ZAD6: arm64_reg = 286;
pub const arm64_reg_ARM64_REG_ZAD7: arm64_reg = 287;
pub const arm64_reg_ARM64_REG_ZAH0: arm64_reg = 288;
pub const arm64_reg_ARM64_REG_ZAH1: arm64_reg = 289;
pub const arm64_reg_ARM64_REG_ZAQ0: arm64_reg = 290;
pub const arm64_reg_ARM64_REG_ZAQ1: arm64_reg = 291;
pub const arm64_reg_ARM64_REG_ZAQ2: arm64_reg = 292;
pub const arm64_reg_ARM64_REG_ZAQ3: arm64_reg = 293;
pub const arm64_reg_ARM64_REG_ZAQ4: arm64_reg = 294;
pub const arm64_reg_ARM64_REG_ZAQ5: arm64_reg = 295;
pub const arm64_reg_ARM64_REG_ZAQ6: arm64_reg = 296;
pub const arm64_reg_ARM64_REG_ZAQ7: arm64_reg = 297;
pub const arm64_reg_ARM64_REG_ZAQ8: arm64_reg = 298;
pub const arm64_reg_ARM64_REG_ZAQ9: arm64_reg = 299;
pub const arm64_reg_ARM64_REG_ZAQ10: arm64_reg = 300;
pub const arm64_reg_ARM64_REG_ZAQ11: arm64_reg = 301;
pub const arm64_reg_ARM64_REG_ZAQ12: arm64_reg = 302;
pub const arm64_reg_ARM64_REG_ZAQ13: arm64_reg = 303;
pub const arm64_reg_ARM64_REG_ZAQ14: arm64_reg = 304;
pub const arm64_reg_ARM64_REG_ZAQ15: arm64_reg = 305;
pub const arm64_reg_ARM64_REG_ZAS0: arm64_reg = 306;
pub const arm64_reg_ARM64_REG_ZAS1: arm64_reg = 307;
pub const arm64_reg_ARM64_REG_ZAS2: arm64_reg = 308;
pub const arm64_reg_ARM64_REG_ZAS3: arm64_reg = 309;
pub const arm64_reg_ARM64_REG_V0: arm64_reg = 310;
pub const arm64_reg_ARM64_REG_V1: arm64_reg = 311;
pub const arm64_reg_ARM64_REG_V2: arm64_reg = 312;
pub const arm64_reg_ARM64_REG_V3: arm64_reg = 313;
pub const arm64_reg_ARM64_REG_V4: arm64_reg = 314;
pub const arm64_reg_ARM64_REG_V5: arm64_reg = 315;
pub const arm64_reg_ARM64_REG_V6: arm64_reg = 316;
pub const arm64_reg_ARM64_REG_V7: arm64_reg = 317;
pub const arm64_reg_ARM64_REG_V8: arm64_reg = 318;
pub const arm64_reg_ARM64_REG_V9: arm64_reg = 319;
pub const arm64_reg_ARM64_REG_V10: arm64_reg = 320;
pub const arm64_reg_ARM64_REG_V11: arm64_reg = 321;
pub const arm64_reg_ARM64_REG_V12: arm64_reg = 322;
pub const arm64_reg_ARM64_REG_V13: arm64_reg = 323;
pub const arm64_reg_ARM64_REG_V14: arm64_reg = 324;
pub const arm64_reg_ARM64_REG_V15: arm64_reg = 325;
pub const arm64_reg_ARM64_REG_V16: arm64_reg = 326;
pub const arm64_reg_ARM64_REG_V17: arm64_reg = 327;
pub const arm64_reg_ARM64_REG_V18: arm64_reg = 328;
pub const arm64_reg_ARM64_REG_V19: arm64_reg = 329;
pub const arm64_reg_ARM64_REG_V20: arm64_reg = 330;
pub const arm64_reg_ARM64_REG_V21: arm64_reg = 331;
pub const arm64_reg_ARM64_REG_V22: arm64_reg = 332;
pub const arm64_reg_ARM64_REG_V23: arm64_reg = 333;
pub const arm64_reg_ARM64_REG_V24: arm64_reg = 334;
pub const arm64_reg_ARM64_REG_V25: arm64_reg = 335;
pub const arm64_reg_ARM64_REG_V26: arm64_reg = 336;
pub const arm64_reg_ARM64_REG_V27: arm64_reg = 337;
pub const arm64_reg_ARM64_REG_V28: arm64_reg = 338;
pub const arm64_reg_ARM64_REG_V29: arm64_reg = 339;
pub const arm64_reg_ARM64_REG_V30: arm64_reg = 340;
pub const arm64_reg_ARM64_REG_V31: arm64_reg = 341;
pub const arm64_reg_ARM64_REG_ENDING: arm64_reg = 342;
pub const arm64_reg_ARM64_REG_IP0: arm64_reg = 234;
pub const arm64_reg_ARM64_REG_IP1: arm64_reg = 235;
pub const arm64_reg_ARM64_REG_X29: arm64_reg = 2;
pub const arm64_reg_ARM64_REG_X30: arm64_reg = 3;
pub type arm64_reg = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arm64_op_mem {
    pub base: arm64_reg,
    pub index: arm64_reg,
    pub disp: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arm64_op_sme_index {
    pub reg: arm64_reg,
    pub base: arm64_reg,
    pub disp: i32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_arm64_op {
    pub vector_index: ::core::ffi::c_int,
    pub vas: arm64_vas,
    pub shift: cs_arm64_op__bindgen_ty_1,
    pub ext: arm64_extender,
    pub type_: arm64_op_type,
    pub svcr: arm64_svcr_op,
    pub __bindgen_anon_1: cs_arm64_op__bindgen_ty_2,
    pub access: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cs_arm64_op__bindgen_ty_1 {
    pub type_: arm64_shifter,
    pub value: ::core::ffi::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_arm64_op__bindgen_ty_2 {
    pub reg: arm64_reg,
    pub imm: i64,
    pub fp: f64,
    pub mem: arm64_op_mem,
    pub pstate: arm64_pstate,
    pub sys: arm64_sys_op,
    pub prefetch: arm64_prefetch_op,
    pub barrier: arm64_barrier_op,
    pub sme_index: arm64_op_sme_index,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_arm64 {
    pub cc: arm64_cc,
    pub update_flags: bool,
    pub writeback: bool,
    pub post_index: bool,
    pub op_count: u8,
    pub operands: [cs_arm64_op; 8usize],
}
pub const arm64_insn_ARM64_INS_INVALID: arm64_insn = 0;
pub const arm64_insn_ARM64_INS_ABS: arm64_insn = 1;
pub const arm64_insn_ARM64_INS_ADC: arm64_insn = 2;
pub const arm64_insn_ARM64_INS_ADCLB: arm64_insn = 3;
pub const arm64_insn_ARM64_INS_ADCLT: arm64_insn = 4;
pub const arm64_insn_ARM64_INS_ADCS: arm64_insn = 5;
pub const arm64_insn_ARM64_INS_ADD: arm64_insn = 6;
pub const arm64_insn_ARM64_INS_ADDG: arm64_insn = 7;
pub const arm64_insn_ARM64_INS_ADDHA: arm64_insn = 8;
pub const arm64_insn_ARM64_INS_ADDHN: arm64_insn = 9;
pub const arm64_insn_ARM64_INS_ADDHN2: arm64_insn = 10;
pub const arm64_insn_ARM64_INS_ADDHNB: arm64_insn = 11;
pub const arm64_insn_ARM64_INS_ADDHNT: arm64_insn = 12;
pub const arm64_insn_ARM64_INS_ADDP: arm64_insn = 13;
pub const arm64_insn_ARM64_INS_ADDPL: arm64_insn = 14;
pub const arm64_insn_ARM64_INS_ADDS: arm64_insn = 15;
pub const arm64_insn_ARM64_INS_ADDV: arm64_insn = 16;
pub const arm64_insn_ARM64_INS_ADDVA: arm64_insn = 17;
pub const arm64_insn_ARM64_INS_ADDVL: arm64_insn = 18;
pub const arm64_insn_ARM64_INS_ADR: arm64_insn = 19;
pub const arm64_insn_ARM64_INS_ADRP: arm64_insn = 20;
pub const arm64_insn_ARM64_INS_AESD: arm64_insn = 21;
pub const arm64_insn_ARM64_INS_AESE: arm64_insn = 22;
pub const arm64_insn_ARM64_INS_AESIMC: arm64_insn = 23;
pub const arm64_insn_ARM64_INS_AESMC: arm64_insn = 24;
pub const arm64_insn_ARM64_INS_AND: arm64_insn = 25;
pub const arm64_insn_ARM64_INS_ANDS: arm64_insn = 26;
pub const arm64_insn_ARM64_INS_ANDV: arm64_insn = 27;
pub const arm64_insn_ARM64_INS_ASR: arm64_insn = 28;
pub const arm64_insn_ARM64_INS_ASRD: arm64_insn = 29;
pub const arm64_insn_ARM64_INS_ASRR: arm64_insn = 30;
pub const arm64_insn_ARM64_INS_ASRV: arm64_insn = 31;
pub const arm64_insn_ARM64_INS_AUTDA: arm64_insn = 32;
pub const arm64_insn_ARM64_INS_AUTDB: arm64_insn = 33;
pub const arm64_insn_ARM64_INS_AUTDZA: arm64_insn = 34;
pub const arm64_insn_ARM64_INS_AUTDZB: arm64_insn = 35;
pub const arm64_insn_ARM64_INS_AUTIA: arm64_insn = 36;
pub const arm64_insn_ARM64_INS_AUTIA1716: arm64_insn = 37;
pub const arm64_insn_ARM64_INS_AUTIASP: arm64_insn = 38;
pub const arm64_insn_ARM64_INS_AUTIAZ: arm64_insn = 39;
pub const arm64_insn_ARM64_INS_AUTIB: arm64_insn = 40;
pub const arm64_insn_ARM64_INS_AUTIB1716: arm64_insn = 41;
pub const arm64_insn_ARM64_INS_AUTIBSP: arm64_insn = 42;
pub const arm64_insn_ARM64_INS_AUTIBZ: arm64_insn = 43;
pub const arm64_insn_ARM64_INS_AUTIZA: arm64_insn = 44;
pub const arm64_insn_ARM64_INS_AUTIZB: arm64_insn = 45;
pub const arm64_insn_ARM64_INS_AXFLAG: arm64_insn = 46;
pub const arm64_insn_ARM64_INS_B: arm64_insn = 47;
pub const arm64_insn_ARM64_INS_BC: arm64_insn = 48;
pub const arm64_insn_ARM64_INS_BCAX: arm64_insn = 49;
pub const arm64_insn_ARM64_INS_BDEP: arm64_insn = 50;
pub const arm64_insn_ARM64_INS_BEXT: arm64_insn = 51;
pub const arm64_insn_ARM64_INS_BFCVT: arm64_insn = 52;
pub const arm64_insn_ARM64_INS_BFCVTN: arm64_insn = 53;
pub const arm64_insn_ARM64_INS_BFCVTN2: arm64_insn = 54;
pub const arm64_insn_ARM64_INS_BFCVTNT: arm64_insn = 55;
pub const arm64_insn_ARM64_INS_BFDOT: arm64_insn = 56;
pub const arm64_insn_ARM64_INS_BFM: arm64_insn = 57;
pub const arm64_insn_ARM64_INS_BFMLALB: arm64_insn = 58;
pub const arm64_insn_ARM64_INS_BFMLALT: arm64_insn = 59;
pub const arm64_insn_ARM64_INS_BFMMLA: arm64_insn = 60;
pub const arm64_insn_ARM64_INS_BFMOPA: arm64_insn = 61;
pub const arm64_insn_ARM64_INS_BFMOPS: arm64_insn = 62;
pub const arm64_insn_ARM64_INS_BGRP: arm64_insn = 63;
pub const arm64_insn_ARM64_INS_BIC: arm64_insn = 64;
pub const arm64_insn_ARM64_INS_BICS: arm64_insn = 65;
pub const arm64_insn_ARM64_INS_BIF: arm64_insn = 66;
pub const arm64_insn_ARM64_INS_BIT: arm64_insn = 67;
pub const arm64_insn_ARM64_INS_BL: arm64_insn = 68;
pub const arm64_insn_ARM64_INS_BLR: arm64_insn = 69;
pub const arm64_insn_ARM64_INS_BLRAA: arm64_insn = 70;
pub const arm64_insn_ARM64_INS_BLRAAZ: arm64_insn = 71;
pub const arm64_insn_ARM64_INS_BLRAB: arm64_insn = 72;
pub const arm64_insn_ARM64_INS_BLRABZ: arm64_insn = 73;
pub const arm64_insn_ARM64_INS_BR: arm64_insn = 74;
pub const arm64_insn_ARM64_INS_BRAA: arm64_insn = 75;
pub const arm64_insn_ARM64_INS_BRAAZ: arm64_insn = 76;
pub const arm64_insn_ARM64_INS_BRAB: arm64_insn = 77;
pub const arm64_insn_ARM64_INS_BRABZ: arm64_insn = 78;
pub const arm64_insn_ARM64_INS_BRB: arm64_insn = 79;
pub const arm64_insn_ARM64_INS_BRK: arm64_insn = 80;
pub const arm64_insn_ARM64_INS_BRKA: arm64_insn = 81;
pub const arm64_insn_ARM64_INS_BRKAS: arm64_insn = 82;
pub const arm64_insn_ARM64_INS_BRKB: arm64_insn = 83;
pub const arm64_insn_ARM64_INS_BRKBS: arm64_insn = 84;
pub const arm64_insn_ARM64_INS_BRKN: arm64_insn = 85;
pub const arm64_insn_ARM64_INS_BRKNS: arm64_insn = 86;
pub const arm64_insn_ARM64_INS_BRKPA: arm64_insn = 87;
pub const arm64_insn_ARM64_INS_BRKPAS: arm64_insn = 88;
pub const arm64_insn_ARM64_INS_BRKPB: arm64_insn = 89;
pub const arm64_insn_ARM64_INS_BRKPBS: arm64_insn = 90;
pub const arm64_insn_ARM64_INS_BSL: arm64_insn = 91;
pub const arm64_insn_ARM64_INS_BSL1N: arm64_insn = 92;
pub const arm64_insn_ARM64_INS_BSL2N: arm64_insn = 93;
pub const arm64_insn_ARM64_INS_BTI: arm64_insn = 94;
pub const arm64_insn_ARM64_INS_CADD: arm64_insn = 95;
pub const arm64_insn_ARM64_INS_CAS: arm64_insn = 96;
pub const arm64_insn_ARM64_INS_CASA: arm64_insn = 97;
pub const arm64_insn_ARM64_INS_CASAB: arm64_insn = 98;
pub const arm64_insn_ARM64_INS_CASAH: arm64_insn = 99;
pub const arm64_insn_ARM64_INS_CASAL: arm64_insn = 100;
pub const arm64_insn_ARM64_INS_CASALB: arm64_insn = 101;
pub const arm64_insn_ARM64_INS_CASALH: arm64_insn = 102;
pub const arm64_insn_ARM64_INS_CASB: arm64_insn = 103;
pub const arm64_insn_ARM64_INS_CASH: arm64_insn = 104;
pub const arm64_insn_ARM64_INS_CASL: arm64_insn = 105;
pub const arm64_insn_ARM64_INS_CASLB: arm64_insn = 106;
pub const arm64_insn_ARM64_INS_CASLH: arm64_insn = 107;
pub const arm64_insn_ARM64_INS_CASP: arm64_insn = 108;
pub const arm64_insn_ARM64_INS_CASPA: arm64_insn = 109;
pub const arm64_insn_ARM64_INS_CASPAL: arm64_insn = 110;
pub const arm64_insn_ARM64_INS_CASPL: arm64_insn = 111;
pub const arm64_insn_ARM64_INS_CBNZ: arm64_insn = 112;
pub const arm64_insn_ARM64_INS_CBZ: arm64_insn = 113;
pub const arm64_insn_ARM64_INS_CCMN: arm64_insn = 114;
pub const arm64_insn_ARM64_INS_CCMP: arm64_insn = 115;
pub const arm64_insn_ARM64_INS_CDOT: arm64_insn = 116;
pub const arm64_insn_ARM64_INS_CFINV: arm64_insn = 117;
pub const arm64_insn_ARM64_INS_CINC: arm64_insn = 118;
pub const arm64_insn_ARM64_INS_CINV: arm64_insn = 119;
pub const arm64_insn_ARM64_INS_CLASTA: arm64_insn = 120;
pub const arm64_insn_ARM64_INS_CLASTB: arm64_insn = 121;
pub const arm64_insn_ARM64_INS_CLREX: arm64_insn = 122;
pub const arm64_insn_ARM64_INS_CLS: arm64_insn = 123;
pub const arm64_insn_ARM64_INS_CLZ: arm64_insn = 124;
pub const arm64_insn_ARM64_INS_CMEQ: arm64_insn = 125;
pub const arm64_insn_ARM64_INS_CMGE: arm64_insn = 126;
pub const arm64_insn_ARM64_INS_CMGT: arm64_insn = 127;
pub const arm64_insn_ARM64_INS_CMHI: arm64_insn = 128;
pub const arm64_insn_ARM64_INS_CMHS: arm64_insn = 129;
pub const arm64_insn_ARM64_INS_CMLA: arm64_insn = 130;
pub const arm64_insn_ARM64_INS_CMLE: arm64_insn = 131;
pub const arm64_insn_ARM64_INS_CMLO: arm64_insn = 132;
pub const arm64_insn_ARM64_INS_CMLS: arm64_insn = 133;
pub const arm64_insn_ARM64_INS_CMLT: arm64_insn = 134;
pub const arm64_insn_ARM64_INS_CMN: arm64_insn = 135;
pub const arm64_insn_ARM64_INS_CMP: arm64_insn = 136;
pub const arm64_insn_ARM64_INS_CMPEQ: arm64_insn = 137;
pub const arm64_insn_ARM64_INS_CMPGE: arm64_insn = 138;
pub const arm64_insn_ARM64_INS_CMPGT: arm64_insn = 139;
pub const arm64_insn_ARM64_INS_CMPHI: arm64_insn = 140;
pub const arm64_insn_ARM64_INS_CMPHS: arm64_insn = 141;
pub const arm64_insn_ARM64_INS_CMPLE: arm64_insn = 142;
pub const arm64_insn_ARM64_INS_CMPLO: arm64_insn = 143;
pub const arm64_insn_ARM64_INS_CMPLS: arm64_insn = 144;
pub const arm64_insn_ARM64_INS_CMPLT: arm64_insn = 145;
pub const arm64_insn_ARM64_INS_CMPNE: arm64_insn = 146;
pub const arm64_insn_ARM64_INS_CMPP: arm64_insn = 147;
pub const arm64_insn_ARM64_INS_CMTST: arm64_insn = 148;
pub const arm64_insn_ARM64_INS_CNEG: arm64_insn = 149;
pub const arm64_insn_ARM64_INS_CNOT: arm64_insn = 150;
pub const arm64_insn_ARM64_INS_CNT: arm64_insn = 151;
pub const arm64_insn_ARM64_INS_CNTB: arm64_insn = 152;
pub const arm64_insn_ARM64_INS_CNTD: arm64_insn = 153;
pub const arm64_insn_ARM64_INS_CNTH: arm64_insn = 154;
pub const arm64_insn_ARM64_INS_CNTP: arm64_insn = 155;
pub const arm64_insn_ARM64_INS_CNTW: arm64_insn = 156;
pub const arm64_insn_ARM64_INS_COMPACT: arm64_insn = 157;
pub const arm64_insn_ARM64_INS_CPY: arm64_insn = 158;
pub const arm64_insn_ARM64_INS_CPYE: arm64_insn = 159;
pub const arm64_insn_ARM64_INS_CPYEN: arm64_insn = 160;
pub const arm64_insn_ARM64_INS_CPYERN: arm64_insn = 161;
pub const arm64_insn_ARM64_INS_CPYERT: arm64_insn = 162;
pub const arm64_insn_ARM64_INS_CPYERTN: arm64_insn = 163;
pub const arm64_insn_ARM64_INS_CPYERTRN: arm64_insn = 164;
pub const arm64_insn_ARM64_INS_CPYERTWN: arm64_insn = 165;
pub const arm64_insn_ARM64_INS_CPYET: arm64_insn = 166;
pub const arm64_insn_ARM64_INS_CPYETN: arm64_insn = 167;
pub const arm64_insn_ARM64_INS_CPYETRN: arm64_insn = 168;
pub const arm64_insn_ARM64_INS_CPYETWN: arm64_insn = 169;
pub const arm64_insn_ARM64_INS_CPYEWN: arm64_insn = 170;
pub const arm64_insn_ARM64_INS_CPYEWT: arm64_insn = 171;
pub const arm64_insn_ARM64_INS_CPYEWTN: arm64_insn = 172;
pub const arm64_insn_ARM64_INS_CPYEWTRN: arm64_insn = 173;
pub const arm64_insn_ARM64_INS_CPYEWTWN: arm64_insn = 174;
pub const arm64_insn_ARM64_INS_CPYFE: arm64_insn = 175;
pub const arm64_insn_ARM64_INS_CPYFEN: arm64_insn = 176;
pub const arm64_insn_ARM64_INS_CPYFERN: arm64_insn = 177;
pub const arm64_insn_ARM64_INS_CPYFERT: arm64_insn = 178;
pub const arm64_insn_ARM64_INS_CPYFERTN: arm64_insn = 179;
pub const arm64_insn_ARM64_INS_CPYFERTRN: arm64_insn = 180;
pub const arm64_insn_ARM64_INS_CPYFERTWN: arm64_insn = 181;
pub const arm64_insn_ARM64_INS_CPYFET: arm64_insn = 182;
pub const arm64_insn_ARM64_INS_CPYFETN: arm64_insn = 183;
pub const arm64_insn_ARM64_INS_CPYFETRN: arm64_insn = 184;
pub const arm64_insn_ARM64_INS_CPYFETWN: arm64_insn = 185;
pub const arm64_insn_ARM64_INS_CPYFEWN: arm64_insn = 186;
pub const arm64_insn_ARM64_INS_CPYFEWT: arm64_insn = 187;
pub const arm64_insn_ARM64_INS_CPYFEWTN: arm64_insn = 188;
pub const arm64_insn_ARM64_INS_CPYFEWTRN: arm64_insn = 189;
pub const arm64_insn_ARM64_INS_CPYFEWTWN: arm64_insn = 190;
pub const arm64_insn_ARM64_INS_CPYFM: arm64_insn = 191;
pub const arm64_insn_ARM64_INS_CPYFMN: arm64_insn = 192;
pub const arm64_insn_ARM64_INS_CPYFMRN: arm64_insn = 193;
pub const arm64_insn_ARM64_INS_CPYFMRT: arm64_insn = 194;
pub const arm64_insn_ARM64_INS_CPYFMRTN: arm64_insn = 195;
pub const arm64_insn_ARM64_INS_CPYFMRTRN: arm64_insn = 196;
pub const arm64_insn_ARM64_INS_CPYFMRTWN: arm64_insn = 197;
pub const arm64_insn_ARM64_INS_CPYFMT: arm64_insn = 198;
pub const arm64_insn_ARM64_INS_CPYFMTN: arm64_insn = 199;
pub const arm64_insn_ARM64_INS_CPYFMTRN: arm64_insn = 200;
pub const arm64_insn_ARM64_INS_CPYFMTWN: arm64_insn = 201;
pub const arm64_insn_ARM64_INS_CPYFMWN: arm64_insn = 202;
pub const arm64_insn_ARM64_INS_CPYFMWT: arm64_insn = 203;
pub const arm64_insn_ARM64_INS_CPYFMWTN: arm64_insn = 204;
pub const arm64_insn_ARM64_INS_CPYFMWTRN: arm64_insn = 205;
pub const arm64_insn_ARM64_INS_CPYFMWTWN: arm64_insn = 206;
pub const arm64_insn_ARM64_INS_CPYFP: arm64_insn = 207;
pub const arm64_insn_ARM64_INS_CPYFPN: arm64_insn = 208;
pub const arm64_insn_ARM64_INS_CPYFPRN: arm64_insn = 209;
pub const arm64_insn_ARM64_INS_CPYFPRT: arm64_insn = 210;
pub const arm64_insn_ARM64_INS_CPYFPRTN: arm64_insn = 211;
pub const arm64_insn_ARM64_INS_CPYFPRTRN: arm64_insn = 212;
pub const arm64_insn_ARM64_INS_CPYFPRTWN: arm64_insn = 213;
pub const arm64_insn_ARM64_INS_CPYFPT: arm64_insn = 214;
pub const arm64_insn_ARM64_INS_CPYFPTN: arm64_insn = 215;
pub const arm64_insn_ARM64_INS_CPYFPTRN: arm64_insn = 216;
pub const arm64_insn_ARM64_INS_CPYFPTWN: arm64_insn = 217;
pub const arm64_insn_ARM64_INS_CPYFPWN: arm64_insn = 218;
pub const arm64_insn_ARM64_INS_CPYFPWT: arm64_insn = 219;
pub const arm64_insn_ARM64_INS_CPYFPWTN: arm64_insn = 220;
pub const arm64_insn_ARM64_INS_CPYFPWTRN: arm64_insn = 221;
pub const arm64_insn_ARM64_INS_CPYFPWTWN: arm64_insn = 222;
pub const arm64_insn_ARM64_INS_CPYM: arm64_insn = 223;
pub const arm64_insn_ARM64_INS_CPYMN: arm64_insn = 224;
pub const arm64_insn_ARM64_INS_CPYMRN: arm64_insn = 225;
pub const arm64_insn_ARM64_INS_CPYMRT: arm64_insn = 226;
pub const arm64_insn_ARM64_INS_CPYMRTN: arm64_insn = 227;
pub const arm64_insn_ARM64_INS_CPYMRTRN: arm64_insn = 228;
pub const arm64_insn_ARM64_INS_CPYMRTWN: arm64_insn = 229;
pub const arm64_insn_ARM64_INS_CPYMT: arm64_insn = 230;
pub const arm64_insn_ARM64_INS_CPYMTN: arm64_insn = 231;
pub const arm64_insn_ARM64_INS_CPYMTRN: arm64_insn = 232;
pub const arm64_insn_ARM64_INS_CPYMTWN: arm64_insn = 233;
pub const arm64_insn_ARM64_INS_CPYMWN: arm64_insn = 234;
pub const arm64_insn_ARM64_INS_CPYMWT: arm64_insn = 235;
pub const arm64_insn_ARM64_INS_CPYMWTN: arm64_insn = 236;
pub const arm64_insn_ARM64_INS_CPYMWTRN: arm64_insn = 237;
pub const arm64_insn_ARM64_INS_CPYMWTWN: arm64_insn = 238;
pub const arm64_insn_ARM64_INS_CPYP: arm64_insn = 239;
pub const arm64_insn_ARM64_INS_CPYPN: arm64_insn = 240;
pub const arm64_insn_ARM64_INS_CPYPRN: arm64_insn = 241;
pub const arm64_insn_ARM64_INS_CPYPRT: arm64_insn = 242;
pub const arm64_insn_ARM64_INS_CPYPRTN: arm64_insn = 243;
pub const arm64_insn_ARM64_INS_CPYPRTRN: arm64_insn = 244;
pub const arm64_insn_ARM64_INS_CPYPRTWN: arm64_insn = 245;
pub const arm64_insn_ARM64_INS_CPYPT: arm64_insn = 246;
pub const arm64_insn_ARM64_INS_CPYPTN: arm64_insn = 247;
pub const arm64_insn_ARM64_INS_CPYPTRN: arm64_insn = 248;
pub const arm64_insn_ARM64_INS_CPYPTWN: arm64_insn = 249;
pub const arm64_insn_ARM64_INS_CPYPWN: arm64_insn = 250;
pub const arm64_insn_ARM64_INS_CPYPWT: arm64_insn = 251;
pub const arm64_insn_ARM64_INS_CPYPWTN: arm64_insn = 252;
pub const arm64_insn_ARM64_INS_CPYPWTRN: arm64_insn = 253;
pub const arm64_insn_ARM64_INS_CPYPWTWN: arm64_insn = 254;
pub const arm64_insn_ARM64_INS_CRC32B: arm64_insn = 255;
pub const arm64_insn_ARM64_INS_CRC32CB: arm64_insn = 256;
pub const arm64_insn_ARM64_INS_CRC32CH: arm64_insn = 257;
pub const arm64_insn_ARM64_INS_CRC32CW: arm64_insn = 258;
pub const arm64_insn_ARM64_INS_CRC32CX: arm64_insn = 259;
pub const arm64_insn_ARM64_INS_CRC32H: arm64_insn = 260;
pub const arm64_insn_ARM64_INS_CRC32W: arm64_insn = 261;
pub const arm64_insn_ARM64_INS_CRC32X: arm64_insn = 262;
pub const arm64_insn_ARM64_INS_CSDB: arm64_insn = 263;
pub const arm64_insn_ARM64_INS_CSEL: arm64_insn = 264;
pub const arm64_insn_ARM64_INS_CSET: arm64_insn = 265;
pub const arm64_insn_ARM64_INS_CSETM: arm64_insn = 266;
pub const arm64_insn_ARM64_INS_CSINC: arm64_insn = 267;
pub const arm64_insn_ARM64_INS_CSINV: arm64_insn = 268;
pub const arm64_insn_ARM64_INS_CSNEG: arm64_insn = 269;
pub const arm64_insn_ARM64_INS_CTERMEQ: arm64_insn = 270;
pub const arm64_insn_ARM64_INS_CTERMNE: arm64_insn = 271;
pub const arm64_insn_ARM64_INS_DCPS1: arm64_insn = 272;
pub const arm64_insn_ARM64_INS_DCPS2: arm64_insn = 273;
pub const arm64_insn_ARM64_INS_DCPS3: arm64_insn = 274;
pub const arm64_insn_ARM64_INS_DECB: arm64_insn = 275;
pub const arm64_insn_ARM64_INS_DECD: arm64_insn = 276;
pub const arm64_insn_ARM64_INS_DECH: arm64_insn = 277;
pub const arm64_insn_ARM64_INS_DECP: arm64_insn = 278;
pub const arm64_insn_ARM64_INS_DECW: arm64_insn = 279;
pub const arm64_insn_ARM64_INS_DFB: arm64_insn = 280;
pub const arm64_insn_ARM64_INS_DGH: arm64_insn = 281;
pub const arm64_insn_ARM64_INS_DMB: arm64_insn = 282;
pub const arm64_insn_ARM64_INS_DRPS: arm64_insn = 283;
pub const arm64_insn_ARM64_INS_DSB: arm64_insn = 284;
pub const arm64_insn_ARM64_INS_DUP: arm64_insn = 285;
pub const arm64_insn_ARM64_INS_DUPM: arm64_insn = 286;
pub const arm64_insn_ARM64_INS_EON: arm64_insn = 287;
pub const arm64_insn_ARM64_INS_EOR: arm64_insn = 288;
pub const arm64_insn_ARM64_INS_EOR3: arm64_insn = 289;
pub const arm64_insn_ARM64_INS_EORBT: arm64_insn = 290;
pub const arm64_insn_ARM64_INS_EORS: arm64_insn = 291;
pub const arm64_insn_ARM64_INS_EORTB: arm64_insn = 292;
pub const arm64_insn_ARM64_INS_EORV: arm64_insn = 293;
pub const arm64_insn_ARM64_INS_ERET: arm64_insn = 294;
pub const arm64_insn_ARM64_INS_ERETAA: arm64_insn = 295;
pub const arm64_insn_ARM64_INS_ERETAB: arm64_insn = 296;
pub const arm64_insn_ARM64_INS_ESB: arm64_insn = 297;
pub const arm64_insn_ARM64_INS_EXT: arm64_insn = 298;
pub const arm64_insn_ARM64_INS_EXTR: arm64_insn = 299;
pub const arm64_insn_ARM64_INS_FABD: arm64_insn = 300;
pub const arm64_insn_ARM64_INS_FABS: arm64_insn = 301;
pub const arm64_insn_ARM64_INS_FACGE: arm64_insn = 302;
pub const arm64_insn_ARM64_INS_FACGT: arm64_insn = 303;
pub const arm64_insn_ARM64_INS_FACLE: arm64_insn = 304;
pub const arm64_insn_ARM64_INS_FACLT: arm64_insn = 305;
pub const arm64_insn_ARM64_INS_FADD: arm64_insn = 306;
pub const arm64_insn_ARM64_INS_FADDA: arm64_insn = 307;
pub const arm64_insn_ARM64_INS_FADDP: arm64_insn = 308;
pub const arm64_insn_ARM64_INS_FADDV: arm64_insn = 309;
pub const arm64_insn_ARM64_INS_FCADD: arm64_insn = 310;
pub const arm64_insn_ARM64_INS_FCCMP: arm64_insn = 311;
pub const arm64_insn_ARM64_INS_FCCMPE: arm64_insn = 312;
pub const arm64_insn_ARM64_INS_FCMEQ: arm64_insn = 313;
pub const arm64_insn_ARM64_INS_FCMGE: arm64_insn = 314;
pub const arm64_insn_ARM64_INS_FCMGT: arm64_insn = 315;
pub const arm64_insn_ARM64_INS_FCMLA: arm64_insn = 316;
pub const arm64_insn_ARM64_INS_FCMLE: arm64_insn = 317;
pub const arm64_insn_ARM64_INS_FCMLT: arm64_insn = 318;
pub const arm64_insn_ARM64_INS_FCMNE: arm64_insn = 319;
pub const arm64_insn_ARM64_INS_FCMP: arm64_insn = 320;
pub const arm64_insn_ARM64_INS_FCMPE: arm64_insn = 321;
pub const arm64_insn_ARM64_INS_FCMUO: arm64_insn = 322;
pub const arm64_insn_ARM64_INS_FCPY: arm64_insn = 323;
pub const arm64_insn_ARM64_INS_FCSEL: arm64_insn = 324;
pub const arm64_insn_ARM64_INS_FCVT: arm64_insn = 325;
pub const arm64_insn_ARM64_INS_FCVTAS: arm64_insn = 326;
pub const arm64_insn_ARM64_INS_FCVTAU: arm64_insn = 327;
pub const arm64_insn_ARM64_INS_FCVTL: arm64_insn = 328;
pub const arm64_insn_ARM64_INS_FCVTL2: arm64_insn = 329;
pub const arm64_insn_ARM64_INS_FCVTLT: arm64_insn = 330;
pub const arm64_insn_ARM64_INS_FCVTMS: arm64_insn = 331;
pub const arm64_insn_ARM64_INS_FCVTMU: arm64_insn = 332;
pub const arm64_insn_ARM64_INS_FCVTN: arm64_insn = 333;
pub const arm64_insn_ARM64_INS_FCVTN2: arm64_insn = 334;
pub const arm64_insn_ARM64_INS_FCVTNS: arm64_insn = 335;
pub const arm64_insn_ARM64_INS_FCVTNT: arm64_insn = 336;
pub const arm64_insn_ARM64_INS_FCVTNU: arm64_insn = 337;
pub const arm64_insn_ARM64_INS_FCVTPS: arm64_insn = 338;
pub const arm64_insn_ARM64_INS_FCVTPU: arm64_insn = 339;
pub const arm64_insn_ARM64_INS_FCVTX: arm64_insn = 340;
pub const arm64_insn_ARM64_INS_FCVTXN: arm64_insn = 341;
pub const arm64_insn_ARM64_INS_FCVTXN2: arm64_insn = 342;
pub const arm64_insn_ARM64_INS_FCVTXNT: arm64_insn = 343;
pub const arm64_insn_ARM64_INS_FCVTZS: arm64_insn = 344;
pub const arm64_insn_ARM64_INS_FCVTZU: arm64_insn = 345;
pub const arm64_insn_ARM64_INS_FDIV: arm64_insn = 346;
pub const arm64_insn_ARM64_INS_FDIVR: arm64_insn = 347;
pub const arm64_insn_ARM64_INS_FDUP: arm64_insn = 348;
pub const arm64_insn_ARM64_INS_FEXPA: arm64_insn = 349;
pub const arm64_insn_ARM64_INS_FJCVTZS: arm64_insn = 350;
pub const arm64_insn_ARM64_INS_FLOGB: arm64_insn = 351;
pub const arm64_insn_ARM64_INS_FMAD: arm64_insn = 352;
pub const arm64_insn_ARM64_INS_FMADD: arm64_insn = 353;
pub const arm64_insn_ARM64_INS_FMAX: arm64_insn = 354;
pub const arm64_insn_ARM64_INS_FMAXNM: arm64_insn = 355;
pub const arm64_insn_ARM64_INS_FMAXNMP: arm64_insn = 356;
pub const arm64_insn_ARM64_INS_FMAXNMV: arm64_insn = 357;
pub const arm64_insn_ARM64_INS_FMAXP: arm64_insn = 358;
pub const arm64_insn_ARM64_INS_FMAXV: arm64_insn = 359;
pub const arm64_insn_ARM64_INS_FMIN: arm64_insn = 360;
pub const arm64_insn_ARM64_INS_FMINNM: arm64_insn = 361;
pub const arm64_insn_ARM64_INS_FMINNMP: arm64_insn = 362;
pub const arm64_insn_ARM64_INS_FMINNMV: arm64_insn = 363;
pub const arm64_insn_ARM64_INS_FMINP: arm64_insn = 364;
pub const arm64_insn_ARM64_INS_FMINV: arm64_insn = 365;
pub const arm64_insn_ARM64_INS_FMLA: arm64_insn = 366;
pub const arm64_insn_ARM64_INS_FMLAL: arm64_insn = 367;
pub const arm64_insn_ARM64_INS_FMLAL2: arm64_insn = 368;
pub const arm64_insn_ARM64_INS_FMLALB: arm64_insn = 369;
pub const arm64_insn_ARM64_INS_FMLALT: arm64_insn = 370;
pub const arm64_insn_ARM64_INS_FMLS: arm64_insn = 371;
pub const arm64_insn_ARM64_INS_FMLSL: arm64_insn = 372;
pub const arm64_insn_ARM64_INS_FMLSL2: arm64_insn = 373;
pub const arm64_insn_ARM64_INS_FMLSLB: arm64_insn = 374;
pub const arm64_insn_ARM64_INS_FMLSLT: arm64_insn = 375;
pub const arm64_insn_ARM64_INS_FMMLA: arm64_insn = 376;
pub const arm64_insn_ARM64_INS_FMOPA: arm64_insn = 377;
pub const arm64_insn_ARM64_INS_FMOPS: arm64_insn = 378;
pub const arm64_insn_ARM64_INS_FMOV: arm64_insn = 379;
pub const arm64_insn_ARM64_INS_FMSB: arm64_insn = 380;
pub const arm64_insn_ARM64_INS_FMSUB: arm64_insn = 381;
pub const arm64_insn_ARM64_INS_FMUL: arm64_insn = 382;
pub const arm64_insn_ARM64_INS_FMULX: arm64_insn = 383;
pub const arm64_insn_ARM64_INS_FNEG: arm64_insn = 384;
pub const arm64_insn_ARM64_INS_FNMAD: arm64_insn = 385;
pub const arm64_insn_ARM64_INS_FNMADD: arm64_insn = 386;
pub const arm64_insn_ARM64_INS_FNMLA: arm64_insn = 387;
pub const arm64_insn_ARM64_INS_FNMLS: arm64_insn = 388;
pub const arm64_insn_ARM64_INS_FNMSB: arm64_insn = 389;
pub const arm64_insn_ARM64_INS_FNMSUB: arm64_insn = 390;
pub const arm64_insn_ARM64_INS_FNMUL: arm64_insn = 391;
pub const arm64_insn_ARM64_INS_FRECPE: arm64_insn = 392;
pub const arm64_insn_ARM64_INS_FRECPS: arm64_insn = 393;
pub const arm64_insn_ARM64_INS_FRECPX: arm64_insn = 394;
pub const arm64_insn_ARM64_INS_FRINT32X: arm64_insn = 395;
pub const arm64_insn_ARM64_INS_FRINT32Z: arm64_insn = 396;
pub const arm64_insn_ARM64_INS_FRINT64X: arm64_insn = 397;
pub const arm64_insn_ARM64_INS_FRINT64Z: arm64_insn = 398;
pub const arm64_insn_ARM64_INS_FRINTA: arm64_insn = 399;
pub const arm64_insn_ARM64_INS_FRINTI: arm64_insn = 400;
pub const arm64_insn_ARM64_INS_FRINTM: arm64_insn = 401;
pub const arm64_insn_ARM64_INS_FRINTN: arm64_insn = 402;
pub const arm64_insn_ARM64_INS_FRINTP: arm64_insn = 403;
pub const arm64_insn_ARM64_INS_FRINTX: arm64_insn = 404;
pub const arm64_insn_ARM64_INS_FRINTZ: arm64_insn = 405;
pub const arm64_insn_ARM64_INS_FRSQRTE: arm64_insn = 406;
pub const arm64_insn_ARM64_INS_FRSQRTS: arm64_insn = 407;
pub const arm64_insn_ARM64_INS_FSCALE: arm64_insn = 408;
pub const arm64_insn_ARM64_INS_FSQRT: arm64_insn = 409;
pub const arm64_insn_ARM64_INS_FSUB: arm64_insn = 410;
pub const arm64_insn_ARM64_INS_FSUBR: arm64_insn = 411;
pub const arm64_insn_ARM64_INS_FTMAD: arm64_insn = 412;
pub const arm64_insn_ARM64_INS_FTSMUL: arm64_insn = 413;
pub const arm64_insn_ARM64_INS_FTSSEL: arm64_insn = 414;
pub const arm64_insn_ARM64_INS_GMI: arm64_insn = 415;
pub const arm64_insn_ARM64_INS_HINT: arm64_insn = 416;
pub const arm64_insn_ARM64_INS_HISTCNT: arm64_insn = 417;
pub const arm64_insn_ARM64_INS_HISTSEG: arm64_insn = 418;
pub const arm64_insn_ARM64_INS_HLT: arm64_insn = 419;
pub const arm64_insn_ARM64_INS_HVC: arm64_insn = 420;
pub const arm64_insn_ARM64_INS_INCB: arm64_insn = 421;
pub const arm64_insn_ARM64_INS_INCD: arm64_insn = 422;
pub const arm64_insn_ARM64_INS_INCH: arm64_insn = 423;
pub const arm64_insn_ARM64_INS_INCP: arm64_insn = 424;
pub const arm64_insn_ARM64_INS_INCW: arm64_insn = 425;
pub const arm64_insn_ARM64_INS_INDEX: arm64_insn = 426;
pub const arm64_insn_ARM64_INS_INS: arm64_insn = 427;
pub const arm64_insn_ARM64_INS_INSR: arm64_insn = 428;
pub const arm64_insn_ARM64_INS_IRG: arm64_insn = 429;
pub const arm64_insn_ARM64_INS_ISB: arm64_insn = 430;
pub const arm64_insn_ARM64_INS_LASTA: arm64_insn = 431;
pub const arm64_insn_ARM64_INS_LASTB: arm64_insn = 432;
pub const arm64_insn_ARM64_INS_LD1: arm64_insn = 433;
pub const arm64_insn_ARM64_INS_LD1B: arm64_insn = 434;
pub const arm64_insn_ARM64_INS_LD1D: arm64_insn = 435;
pub const arm64_insn_ARM64_INS_LD1H: arm64_insn = 436;
pub const arm64_insn_ARM64_INS_LD1Q: arm64_insn = 437;
pub const arm64_insn_ARM64_INS_LD1R: arm64_insn = 438;
pub const arm64_insn_ARM64_INS_LD1RB: arm64_insn = 439;
pub const arm64_insn_ARM64_INS_LD1RD: arm64_insn = 440;
pub const arm64_insn_ARM64_INS_LD1RH: arm64_insn = 441;
pub const arm64_insn_ARM64_INS_LD1ROB: arm64_insn = 442;
pub const arm64_insn_ARM64_INS_LD1ROD: arm64_insn = 443;
pub const arm64_insn_ARM64_INS_LD1ROH: arm64_insn = 444;
pub const arm64_insn_ARM64_INS_LD1ROW: arm64_insn = 445;
pub const arm64_insn_ARM64_INS_LD1RQB: arm64_insn = 446;
pub const arm64_insn_ARM64_INS_LD1RQD: arm64_insn = 447;
pub const arm64_insn_ARM64_INS_LD1RQH: arm64_insn = 448;
pub const arm64_insn_ARM64_INS_LD1RQW: arm64_insn = 449;
pub const arm64_insn_ARM64_INS_LD1RSB: arm64_insn = 450;
pub const arm64_insn_ARM64_INS_LD1RSH: arm64_insn = 451;
pub const arm64_insn_ARM64_INS_LD1RSW: arm64_insn = 452;
pub const arm64_insn_ARM64_INS_LD1RW: arm64_insn = 453;
pub const arm64_insn_ARM64_INS_LD1SB: arm64_insn = 454;
pub const arm64_insn_ARM64_INS_LD1SH: arm64_insn = 455;
pub const arm64_insn_ARM64_INS_LD1SW: arm64_insn = 456;
pub const arm64_insn_ARM64_INS_LD1W: arm64_insn = 457;
pub const arm64_insn_ARM64_INS_LD2: arm64_insn = 458;
pub const arm64_insn_ARM64_INS_LD2B: arm64_insn = 459;
pub const arm64_insn_ARM64_INS_LD2D: arm64_insn = 460;
pub const arm64_insn_ARM64_INS_LD2H: arm64_insn = 461;
pub const arm64_insn_ARM64_INS_LD2R: arm64_insn = 462;
pub const arm64_insn_ARM64_INS_LD2W: arm64_insn = 463;
pub const arm64_insn_ARM64_INS_LD3: arm64_insn = 464;
pub const arm64_insn_ARM64_INS_LD3B: arm64_insn = 465;
pub const arm64_insn_ARM64_INS_LD3D: arm64_insn = 466;
pub const arm64_insn_ARM64_INS_LD3H: arm64_insn = 467;
pub const arm64_insn_ARM64_INS_LD3R: arm64_insn = 468;
pub const arm64_insn_ARM64_INS_LD3W: arm64_insn = 469;
pub const arm64_insn_ARM64_INS_LD4: arm64_insn = 470;
pub const arm64_insn_ARM64_INS_LD4B: arm64_insn = 471;
pub const arm64_insn_ARM64_INS_LD4D: arm64_insn = 472;
pub const arm64_insn_ARM64_INS_LD4H: arm64_insn = 473;
pub const arm64_insn_ARM64_INS_LD4R: arm64_insn = 474;
pub const arm64_insn_ARM64_INS_LD4W: arm64_insn = 475;
pub const arm64_insn_ARM64_INS_LD64B: arm64_insn = 476;
pub const arm64_insn_ARM64_INS_LDADD: arm64_insn = 477;
pub const arm64_insn_ARM64_INS_LDADDA: arm64_insn = 478;
pub const arm64_insn_ARM64_INS_LDADDAB: arm64_insn = 479;
pub const arm64_insn_ARM64_INS_LDADDAH: arm64_insn = 480;
pub const arm64_insn_ARM64_INS_LDADDAL: arm64_insn = 481;
pub const arm64_insn_ARM64_INS_LDADDALB: arm64_insn = 482;
pub const arm64_insn_ARM64_INS_LDADDALH: arm64_insn = 483;
pub const arm64_insn_ARM64_INS_LDADDB: arm64_insn = 484;
pub const arm64_insn_ARM64_INS_LDADDH: arm64_insn = 485;
pub const arm64_insn_ARM64_INS_LDADDL: arm64_insn = 486;
pub const arm64_insn_ARM64_INS_LDADDLB: arm64_insn = 487;
pub const arm64_insn_ARM64_INS_LDADDLH: arm64_insn = 488;
pub const arm64_insn_ARM64_INS_LDAPR: arm64_insn = 489;
pub const arm64_insn_ARM64_INS_LDAPRB: arm64_insn = 490;
pub const arm64_insn_ARM64_INS_LDAPRH: arm64_insn = 491;
pub const arm64_insn_ARM64_INS_LDAPUR: arm64_insn = 492;
pub const arm64_insn_ARM64_INS_LDAPURB: arm64_insn = 493;
pub const arm64_insn_ARM64_INS_LDAPURH: arm64_insn = 494;
pub const arm64_insn_ARM64_INS_LDAPURSB: arm64_insn = 495;
pub const arm64_insn_ARM64_INS_LDAPURSH: arm64_insn = 496;
pub const arm64_insn_ARM64_INS_LDAPURSW: arm64_insn = 497;
pub const arm64_insn_ARM64_INS_LDAR: arm64_insn = 498;
pub const arm64_insn_ARM64_INS_LDARB: arm64_insn = 499;
pub const arm64_insn_ARM64_INS_LDARH: arm64_insn = 500;
pub const arm64_insn_ARM64_INS_LDAXP: arm64_insn = 501;
pub const arm64_insn_ARM64_INS_LDAXR: arm64_insn = 502;
pub const arm64_insn_ARM64_INS_LDAXRB: arm64_insn = 503;
pub const arm64_insn_ARM64_INS_LDAXRH: arm64_insn = 504;
pub const arm64_insn_ARM64_INS_LDCLR: arm64_insn = 505;
pub const arm64_insn_ARM64_INS_LDCLRA: arm64_insn = 506;
pub const arm64_insn_ARM64_INS_LDCLRAB: arm64_insn = 507;
pub const arm64_insn_ARM64_INS_LDCLRAH: arm64_insn = 508;
pub const arm64_insn_ARM64_INS_LDCLRAL: arm64_insn = 509;
pub const arm64_insn_ARM64_INS_LDCLRALB: arm64_insn = 510;
pub const arm64_insn_ARM64_INS_LDCLRALH: arm64_insn = 511;
pub const arm64_insn_ARM64_INS_LDCLRB: arm64_insn = 512;
pub const arm64_insn_ARM64_INS_LDCLRH: arm64_insn = 513;
pub const arm64_insn_ARM64_INS_LDCLRL: arm64_insn = 514;
pub const arm64_insn_ARM64_INS_LDCLRLB: arm64_insn = 515;
pub const arm64_insn_ARM64_INS_LDCLRLH: arm64_insn = 516;
pub const arm64_insn_ARM64_INS_LDEOR: arm64_insn = 517;
pub const arm64_insn_ARM64_INS_LDEORA: arm64_insn = 518;
pub const arm64_insn_ARM64_INS_LDEORAB: arm64_insn = 519;
pub const arm64_insn_ARM64_INS_LDEORAH: arm64_insn = 520;
pub const arm64_insn_ARM64_INS_LDEORAL: arm64_insn = 521;
pub const arm64_insn_ARM64_INS_LDEORALB: arm64_insn = 522;
pub const arm64_insn_ARM64_INS_LDEORALH: arm64_insn = 523;
pub const arm64_insn_ARM64_INS_LDEORB: arm64_insn = 524;
pub const arm64_insn_ARM64_INS_LDEORH: arm64_insn = 525;
pub const arm64_insn_ARM64_INS_LDEORL: arm64_insn = 526;
pub const arm64_insn_ARM64_INS_LDEORLB: arm64_insn = 527;
pub const arm64_insn_ARM64_INS_LDEORLH: arm64_insn = 528;
pub const arm64_insn_ARM64_INS_LDFF1B: arm64_insn = 529;
pub const arm64_insn_ARM64_INS_LDFF1D: arm64_insn = 530;
pub const arm64_insn_ARM64_INS_LDFF1H: arm64_insn = 531;
pub const arm64_insn_ARM64_INS_LDFF1SB: arm64_insn = 532;
pub const arm64_insn_ARM64_INS_LDFF1SH: arm64_insn = 533;
pub const arm64_insn_ARM64_INS_LDFF1SW: arm64_insn = 534;
pub const arm64_insn_ARM64_INS_LDFF1W: arm64_insn = 535;
pub const arm64_insn_ARM64_INS_LDG: arm64_insn = 536;
pub const arm64_insn_ARM64_INS_LDGM: arm64_insn = 537;
pub const arm64_insn_ARM64_INS_LDLAR: arm64_insn = 538;
pub const arm64_insn_ARM64_INS_LDLARB: arm64_insn = 539;
pub const arm64_insn_ARM64_INS_LDLARH: arm64_insn = 540;
pub const arm64_insn_ARM64_INS_LDNF1B: arm64_insn = 541;
pub const arm64_insn_ARM64_INS_LDNF1D: arm64_insn = 542;
pub const arm64_insn_ARM64_INS_LDNF1H: arm64_insn = 543;
pub const arm64_insn_ARM64_INS_LDNF1SB: arm64_insn = 544;
pub const arm64_insn_ARM64_INS_LDNF1SH: arm64_insn = 545;
pub const arm64_insn_ARM64_INS_LDNF1SW: arm64_insn = 546;
pub const arm64_insn_ARM64_INS_LDNF1W: arm64_insn = 547;
pub const arm64_insn_ARM64_INS_LDNP: arm64_insn = 548;
pub const arm64_insn_ARM64_INS_LDNT1B: arm64_insn = 549;
pub const arm64_insn_ARM64_INS_LDNT1D: arm64_insn = 550;
pub const arm64_insn_ARM64_INS_LDNT1H: arm64_insn = 551;
pub const arm64_insn_ARM64_INS_LDNT1SB: arm64_insn = 552;
pub const arm64_insn_ARM64_INS_LDNT1SH: arm64_insn = 553;
pub const arm64_insn_ARM64_INS_LDNT1SW: arm64_insn = 554;
pub const arm64_insn_ARM64_INS_LDNT1W: arm64_insn = 555;
pub const arm64_insn_ARM64_INS_LDP: arm64_insn = 556;
pub const arm64_insn_ARM64_INS_LDPSW: arm64_insn = 557;
pub const arm64_insn_ARM64_INS_LDR: arm64_insn = 558;
pub const arm64_insn_ARM64_INS_LDRAA: arm64_insn = 559;
pub const arm64_insn_ARM64_INS_LDRAB: arm64_insn = 560;
pub const arm64_insn_ARM64_INS_LDRB: arm64_insn = 561;
pub const arm64_insn_ARM64_INS_LDRH: arm64_insn = 562;
pub const arm64_insn_ARM64_INS_LDRSB: arm64_insn = 563;
pub const arm64_insn_ARM64_INS_LDRSH: arm64_insn = 564;
pub const arm64_insn_ARM64_INS_LDRSW: arm64_insn = 565;
pub const arm64_insn_ARM64_INS_LDSET: arm64_insn = 566;
pub const arm64_insn_ARM64_INS_LDSETA: arm64_insn = 567;
pub const arm64_insn_ARM64_INS_LDSETAB: arm64_insn = 568;
pub const arm64_insn_ARM64_INS_LDSETAH: arm64_insn = 569;
pub const arm64_insn_ARM64_INS_LDSETAL: arm64_insn = 570;
pub const arm64_insn_ARM64_INS_LDSETALB: arm64_insn = 571;
pub const arm64_insn_ARM64_INS_LDSETALH: arm64_insn = 572;
pub const arm64_insn_ARM64_INS_LDSETB: arm64_insn = 573;
pub const arm64_insn_ARM64_INS_LDSETH: arm64_insn = 574;
pub const arm64_insn_ARM64_INS_LDSETL: arm64_insn = 575;
pub const arm64_insn_ARM64_INS_LDSETLB: arm64_insn = 576;
pub const arm64_insn_ARM64_INS_LDSETLH: arm64_insn = 577;
pub const arm64_insn_ARM64_INS_LDSMAX: arm64_insn = 578;
pub const arm64_insn_ARM64_INS_LDSMAXA: arm64_insn = 579;
pub const arm64_insn_ARM64_INS_LDSMAXAB: arm64_insn = 580;
pub const arm64_insn_ARM64_INS_LDSMAXAH: arm64_insn = 581;
pub const arm64_insn_ARM64_INS_LDSMAXAL: arm64_insn = 582;
pub const arm64_insn_ARM64_INS_LDSMAXALB: arm64_insn = 583;
pub const arm64_insn_ARM64_INS_LDSMAXALH: arm64_insn = 584;
pub const arm64_insn_ARM64_INS_LDSMAXB: arm64_insn = 585;
pub const arm64_insn_ARM64_INS_LDSMAXH: arm64_insn = 586;
pub const arm64_insn_ARM64_INS_LDSMAXL: arm64_insn = 587;
pub const arm64_insn_ARM64_INS_LDSMAXLB: arm64_insn = 588;
pub const arm64_insn_ARM64_INS_LDSMAXLH: arm64_insn = 589;
pub const arm64_insn_ARM64_INS_LDSMIN: arm64_insn = 590;
pub const arm64_insn_ARM64_INS_LDSMINA: arm64_insn = 591;
pub const arm64_insn_ARM64_INS_LDSMINAB: arm64_insn = 592;
pub const arm64_insn_ARM64_INS_LDSMINAH: arm64_insn = 593;
pub const arm64_insn_ARM64_INS_LDSMINAL: arm64_insn = 594;
pub const arm64_insn_ARM64_INS_LDSMINALB: arm64_insn = 595;
pub const arm64_insn_ARM64_INS_LDSMINALH: arm64_insn = 596;
pub const arm64_insn_ARM64_INS_LDSMINB: arm64_insn = 597;
pub const arm64_insn_ARM64_INS_LDSMINH: arm64_insn = 598;
pub const arm64_insn_ARM64_INS_LDSMINL: arm64_insn = 599;
pub const arm64_insn_ARM64_INS_LDSMINLB: arm64_insn = 600;
pub const arm64_insn_ARM64_INS_LDSMINLH: arm64_insn = 601;
pub const arm64_insn_ARM64_INS_LDTR: arm64_insn = 602;
pub const arm64_insn_ARM64_INS_LDTRB: arm64_insn = 603;
pub const arm64_insn_ARM64_INS_LDTRH: arm64_insn = 604;
pub const arm64_insn_ARM64_INS_LDTRSB: arm64_insn = 605;
pub const arm64_insn_ARM64_INS_LDTRSH: arm64_insn = 606;
pub const arm64_insn_ARM64_INS_LDTRSW: arm64_insn = 607;
pub const arm64_insn_ARM64_INS_LDUMAX: arm64_insn = 608;
pub const arm64_insn_ARM64_INS_LDUMAXA: arm64_insn = 609;
pub const arm64_insn_ARM64_INS_LDUMAXAB: arm64_insn = 610;
pub const arm64_insn_ARM64_INS_LDUMAXAH: arm64_insn = 611;
pub const arm64_insn_ARM64_INS_LDUMAXAL: arm64_insn = 612;
pub const arm64_insn_ARM64_INS_LDUMAXALB: arm64_insn = 613;
pub const arm64_insn_ARM64_INS_LDUMAXALH: arm64_insn = 614;
pub const arm64_insn_ARM64_INS_LDUMAXB: arm64_insn = 615;
pub const arm64_insn_ARM64_INS_LDUMAXH: arm64_insn = 616;
pub const arm64_insn_ARM64_INS_LDUMAXL: arm64_insn = 617;
pub const arm64_insn_ARM64_INS_LDUMAXLB: arm64_insn = 618;
pub const arm64_insn_ARM64_INS_LDUMAXLH: arm64_insn = 619;
pub const arm64_insn_ARM64_INS_LDUMIN: arm64_insn = 620;
pub const arm64_insn_ARM64_INS_LDUMINA: arm64_insn = 621;
pub const arm64_insn_ARM64_INS_LDUMINAB: arm64_insn = 622;
pub const arm64_insn_ARM64_INS_LDUMINAH: arm64_insn = 623;
pub const arm64_insn_ARM64_INS_LDUMINAL: arm64_insn = 624;
pub const arm64_insn_ARM64_INS_LDUMINALB: arm64_insn = 625;
pub const arm64_insn_ARM64_INS_LDUMINALH: arm64_insn = 626;
pub const arm64_insn_ARM64_INS_LDUMINB: arm64_insn = 627;
pub const arm64_insn_ARM64_INS_LDUMINH: arm64_insn = 628;
pub const arm64_insn_ARM64_INS_LDUMINL: arm64_insn = 629;
pub const arm64_insn_ARM64_INS_LDUMINLB: arm64_insn = 630;
pub const arm64_insn_ARM64_INS_LDUMINLH: arm64_insn = 631;
pub const arm64_insn_ARM64_INS_LDUR: arm64_insn = 632;
pub const arm64_insn_ARM64_INS_LDURB: arm64_insn = 633;
pub const arm64_insn_ARM64_INS_LDURH: arm64_insn = 634;
pub const arm64_insn_ARM64_INS_LDURSB: arm64_insn = 635;
pub const arm64_insn_ARM64_INS_LDURSH: arm64_insn = 636;
pub const arm64_insn_ARM64_INS_LDURSW: arm64_insn = 637;
pub const arm64_insn_ARM64_INS_LDXP: arm64_insn = 638;
pub const arm64_insn_ARM64_INS_LDXR: arm64_insn = 639;
pub const arm64_insn_ARM64_INS_LDXRB: arm64_insn = 640;
pub const arm64_insn_ARM64_INS_LDXRH: arm64_insn = 641;
pub const arm64_insn_ARM64_INS_LSL: arm64_insn = 642;
pub const arm64_insn_ARM64_INS_LSLR: arm64_insn = 643;
pub const arm64_insn_ARM64_INS_LSLV: arm64_insn = 644;
pub const arm64_insn_ARM64_INS_LSR: arm64_insn = 645;
pub const arm64_insn_ARM64_INS_LSRR: arm64_insn = 646;
pub const arm64_insn_ARM64_INS_LSRV: arm64_insn = 647;
pub const arm64_insn_ARM64_INS_MAD: arm64_insn = 648;
pub const arm64_insn_ARM64_INS_MADD: arm64_insn = 649;
pub const arm64_insn_ARM64_INS_MATCH: arm64_insn = 650;
pub const arm64_insn_ARM64_INS_MLA: arm64_insn = 651;
pub const arm64_insn_ARM64_INS_MLS: arm64_insn = 652;
pub const arm64_insn_ARM64_INS_MNEG: arm64_insn = 653;
pub const arm64_insn_ARM64_INS_MOV: arm64_insn = 654;
pub const arm64_insn_ARM64_INS_MOVA: arm64_insn = 655;
pub const arm64_insn_ARM64_INS_MOVI: arm64_insn = 656;
pub const arm64_insn_ARM64_INS_MOVK: arm64_insn = 657;
pub const arm64_insn_ARM64_INS_MOVN: arm64_insn = 658;
pub const arm64_insn_ARM64_INS_MOVPRFX: arm64_insn = 659;
pub const arm64_insn_ARM64_INS_MOVS: arm64_insn = 660;
pub const arm64_insn_ARM64_INS_MOVZ: arm64_insn = 661;
pub const arm64_insn_ARM64_INS_MRS: arm64_insn = 662;
pub const arm64_insn_ARM64_INS_MSB: arm64_insn = 663;
pub const arm64_insn_ARM64_INS_MSR: arm64_insn = 664;
pub const arm64_insn_ARM64_INS_MSUB: arm64_insn = 665;
pub const arm64_insn_ARM64_INS_MUL: arm64_insn = 666;
pub const arm64_insn_ARM64_INS_MVN: arm64_insn = 667;
pub const arm64_insn_ARM64_INS_MVNI: arm64_insn = 668;
pub const arm64_insn_ARM64_INS_NAND: arm64_insn = 669;
pub const arm64_insn_ARM64_INS_NANDS: arm64_insn = 670;
pub const arm64_insn_ARM64_INS_NBSL: arm64_insn = 671;
pub const arm64_insn_ARM64_INS_NEG: arm64_insn = 672;
pub const arm64_insn_ARM64_INS_NEGS: arm64_insn = 673;
pub const arm64_insn_ARM64_INS_NGC: arm64_insn = 674;
pub const arm64_insn_ARM64_INS_NGCS: arm64_insn = 675;
pub const arm64_insn_ARM64_INS_NMATCH: arm64_insn = 676;
pub const arm64_insn_ARM64_INS_NOP: arm64_insn = 677;
pub const arm64_insn_ARM64_INS_NOR: arm64_insn = 678;
pub const arm64_insn_ARM64_INS_NORS: arm64_insn = 679;
pub const arm64_insn_ARM64_INS_NOT: arm64_insn = 680;
pub const arm64_insn_ARM64_INS_NOTS: arm64_insn = 681;
pub const arm64_insn_ARM64_INS_ORN: arm64_insn = 682;
pub const arm64_insn_ARM64_INS_ORNS: arm64_insn = 683;
pub const arm64_insn_ARM64_INS_ORR: arm64_insn = 684;
pub const arm64_insn_ARM64_INS_ORRS: arm64_insn = 685;
pub const arm64_insn_ARM64_INS_ORV: arm64_insn = 686;
pub const arm64_insn_ARM64_INS_PACDA: arm64_insn = 687;
pub const arm64_insn_ARM64_INS_PACDB: arm64_insn = 688;
pub const arm64_insn_ARM64_INS_PACDZA: arm64_insn = 689;
pub const arm64_insn_ARM64_INS_PACDZB: arm64_insn = 690;
pub const arm64_insn_ARM64_INS_PACGA: arm64_insn = 691;
pub const arm64_insn_ARM64_INS_PACIA: arm64_insn = 692;
pub const arm64_insn_ARM64_INS_PACIA1716: arm64_insn = 693;
pub const arm64_insn_ARM64_INS_PACIASP: arm64_insn = 694;
pub const arm64_insn_ARM64_INS_PACIAZ: arm64_insn = 695;
pub const arm64_insn_ARM64_INS_PACIB: arm64_insn = 696;
pub const arm64_insn_ARM64_INS_PACIB1716: arm64_insn = 697;
pub const arm64_insn_ARM64_INS_PACIBSP: arm64_insn = 698;
pub const arm64_insn_ARM64_INS_PACIBZ: arm64_insn = 699;
pub const arm64_insn_ARM64_INS_PACIZA: arm64_insn = 700;
pub const arm64_insn_ARM64_INS_PACIZB: arm64_insn = 701;
pub const arm64_insn_ARM64_INS_PFALSE: arm64_insn = 702;
pub const arm64_insn_ARM64_INS_PFIRST: arm64_insn = 703;
pub const arm64_insn_ARM64_INS_PMUL: arm64_insn = 704;
pub const arm64_insn_ARM64_INS_PMULL: arm64_insn = 705;
pub const arm64_insn_ARM64_INS_PMULL2: arm64_insn = 706;
pub const arm64_insn_ARM64_INS_PMULLB: arm64_insn = 707;
pub const arm64_insn_ARM64_INS_PMULLT: arm64_insn = 708;
pub const arm64_insn_ARM64_INS_PNEXT: arm64_insn = 709;
pub const arm64_insn_ARM64_INS_PRFB: arm64_insn = 710;
pub const arm64_insn_ARM64_INS_PRFD: arm64_insn = 711;
pub const arm64_insn_ARM64_INS_PRFH: arm64_insn = 712;
pub const arm64_insn_ARM64_INS_PRFM: arm64_insn = 713;
pub const arm64_insn_ARM64_INS_PRFUM: arm64_insn = 714;
pub const arm64_insn_ARM64_INS_PRFW: arm64_insn = 715;
pub const arm64_insn_ARM64_INS_PSB: arm64_insn = 716;
pub const arm64_insn_ARM64_INS_PSEL: arm64_insn = 717;
pub const arm64_insn_ARM64_INS_PSSBB: arm64_insn = 718;
pub const arm64_insn_ARM64_INS_PTEST: arm64_insn = 719;
pub const arm64_insn_ARM64_INS_PTRUE: arm64_insn = 720;
pub const arm64_insn_ARM64_INS_PTRUES: arm64_insn = 721;
pub const arm64_insn_ARM64_INS_PUNPKHI: arm64_insn = 722;
pub const arm64_insn_ARM64_INS_PUNPKLO: arm64_insn = 723;
pub const arm64_insn_ARM64_INS_RADDHN: arm64_insn = 724;
pub const arm64_insn_ARM64_INS_RADDHN2: arm64_insn = 725;
pub const arm64_insn_ARM64_INS_RADDHNB: arm64_insn = 726;
pub const arm64_insn_ARM64_INS_RADDHNT: arm64_insn = 727;
pub const arm64_insn_ARM64_INS_RAX1: arm64_insn = 728;
pub const arm64_insn_ARM64_INS_RBIT: arm64_insn = 729;
pub const arm64_insn_ARM64_INS_RDFFR: arm64_insn = 730;
pub const arm64_insn_ARM64_INS_RDFFRS: arm64_insn = 731;
pub const arm64_insn_ARM64_INS_RDVL: arm64_insn = 732;
pub const arm64_insn_ARM64_INS_RET: arm64_insn = 733;
pub const arm64_insn_ARM64_INS_RETAA: arm64_insn = 734;
pub const arm64_insn_ARM64_INS_RETAB: arm64_insn = 735;
pub const arm64_insn_ARM64_INS_REV: arm64_insn = 736;
pub const arm64_insn_ARM64_INS_REV16: arm64_insn = 737;
pub const arm64_insn_ARM64_INS_REV32: arm64_insn = 738;
pub const arm64_insn_ARM64_INS_REV64: arm64_insn = 739;
pub const arm64_insn_ARM64_INS_REVB: arm64_insn = 740;
pub const arm64_insn_ARM64_INS_REVD: arm64_insn = 741;
pub const arm64_insn_ARM64_INS_REVH: arm64_insn = 742;
pub const arm64_insn_ARM64_INS_REVW: arm64_insn = 743;
pub const arm64_insn_ARM64_INS_RMIF: arm64_insn = 744;
pub const arm64_insn_ARM64_INS_ROR: arm64_insn = 745;
pub const arm64_insn_ARM64_INS_RORV: arm64_insn = 746;
pub const arm64_insn_ARM64_INS_RSHRN: arm64_insn = 747;
pub const arm64_insn_ARM64_INS_RSHRN2: arm64_insn = 748;
pub const arm64_insn_ARM64_INS_RSHRNB: arm64_insn = 749;
pub const arm64_insn_ARM64_INS_RSHRNT: arm64_insn = 750;
pub const arm64_insn_ARM64_INS_RSUBHN: arm64_insn = 751;
pub const arm64_insn_ARM64_INS_RSUBHN2: arm64_insn = 752;
pub const arm64_insn_ARM64_INS_RSUBHNB: arm64_insn = 753;
pub const arm64_insn_ARM64_INS_RSUBHNT: arm64_insn = 754;
pub const arm64_insn_ARM64_INS_SABA: arm64_insn = 755;
pub const arm64_insn_ARM64_INS_SABAL: arm64_insn = 756;
pub const arm64_insn_ARM64_INS_SABAL2: arm64_insn = 757;
pub const arm64_insn_ARM64_INS_SABALB: arm64_insn = 758;
pub const arm64_insn_ARM64_INS_SABALT: arm64_insn = 759;
pub const arm64_insn_ARM64_INS_SABD: arm64_insn = 760;
pub const arm64_insn_ARM64_INS_SABDL: arm64_insn = 761;
pub const arm64_insn_ARM64_INS_SABDL2: arm64_insn = 762;
pub const arm64_insn_ARM64_INS_SABDLB: arm64_insn = 763;
pub const arm64_insn_ARM64_INS_SABDLT: arm64_insn = 764;
pub const arm64_insn_ARM64_INS_SADALP: arm64_insn = 765;
pub const arm64_insn_ARM64_INS_SADDL: arm64_insn = 766;
pub const arm64_insn_ARM64_INS_SADDL2: arm64_insn = 767;
pub const arm64_insn_ARM64_INS_SADDLB: arm64_insn = 768;
pub const arm64_insn_ARM64_INS_SADDLBT: arm64_insn = 769;
pub const arm64_insn_ARM64_INS_SADDLP: arm64_insn = 770;
pub const arm64_insn_ARM64_INS_SADDLT: arm64_insn = 771;
pub const arm64_insn_ARM64_INS_SADDLV: arm64_insn = 772;
pub const arm64_insn_ARM64_INS_SADDV: arm64_insn = 773;
pub const arm64_insn_ARM64_INS_SADDW: arm64_insn = 774;
pub const arm64_insn_ARM64_INS_SADDW2: arm64_insn = 775;
pub const arm64_insn_ARM64_INS_SADDWB: arm64_insn = 776;
pub const arm64_insn_ARM64_INS_SADDWT: arm64_insn = 777;
pub const arm64_insn_ARM64_INS_SB: arm64_insn = 778;
pub const arm64_insn_ARM64_INS_SBC: arm64_insn = 779;
pub const arm64_insn_ARM64_INS_SBCLB: arm64_insn = 780;
pub const arm64_insn_ARM64_INS_SBCLT: arm64_insn = 781;
pub const arm64_insn_ARM64_INS_SBCS: arm64_insn = 782;
pub const arm64_insn_ARM64_INS_SBFM: arm64_insn = 783;
pub const arm64_insn_ARM64_INS_SCLAMP: arm64_insn = 784;
pub const arm64_insn_ARM64_INS_SCVTF: arm64_insn = 785;
pub const arm64_insn_ARM64_INS_SDIV: arm64_insn = 786;
pub const arm64_insn_ARM64_INS_SDIVR: arm64_insn = 787;
pub const arm64_insn_ARM64_INS_SDOT: arm64_insn = 788;
pub const arm64_insn_ARM64_INS_SEL: arm64_insn = 789;
pub const arm64_insn_ARM64_INS_SETE: arm64_insn = 790;
pub const arm64_insn_ARM64_INS_SETEN: arm64_insn = 791;
pub const arm64_insn_ARM64_INS_SETET: arm64_insn = 792;
pub const arm64_insn_ARM64_INS_SETETN: arm64_insn = 793;
pub const arm64_insn_ARM64_INS_SETF16: arm64_insn = 794;
pub const arm64_insn_ARM64_INS_SETF8: arm64_insn = 795;
pub const arm64_insn_ARM64_INS_SETFFR: arm64_insn = 796;
pub const arm64_insn_ARM64_INS_SETGE: arm64_insn = 797;
pub const arm64_insn_ARM64_INS_SETGEN: arm64_insn = 798;
pub const arm64_insn_ARM64_INS_SETGET: arm64_insn = 799;
pub const arm64_insn_ARM64_INS_SETGETN: arm64_insn = 800;
pub const arm64_insn_ARM64_INS_SETGM: arm64_insn = 801;
pub const arm64_insn_ARM64_INS_SETGMN: arm64_insn = 802;
pub const arm64_insn_ARM64_INS_SETGMT: arm64_insn = 803;
pub const arm64_insn_ARM64_INS_SETGMTN: arm64_insn = 804;
pub const arm64_insn_ARM64_INS_SETGP: arm64_insn = 805;
pub const arm64_insn_ARM64_INS_SETGPN: arm64_insn = 806;
pub const arm64_insn_ARM64_INS_SETGPT: arm64_insn = 807;
pub const arm64_insn_ARM64_INS_SETGPTN: arm64_insn = 808;
pub const arm64_insn_ARM64_INS_SETM: arm64_insn = 809;
pub const arm64_insn_ARM64_INS_SETMN: arm64_insn = 810;
pub const arm64_insn_ARM64_INS_SETMT: arm64_insn = 811;
pub const arm64_insn_ARM64_INS_SETMTN: arm64_insn = 812;
pub const arm64_insn_ARM64_INS_SETP: arm64_insn = 813;
pub const arm64_insn_ARM64_INS_SETPN: arm64_insn = 814;
pub const arm64_insn_ARM64_INS_SETPT: arm64_insn = 815;
pub const arm64_insn_ARM64_INS_SETPTN: arm64_insn = 816;
pub const arm64_insn_ARM64_INS_SEV: arm64_insn = 817;
pub const arm64_insn_ARM64_INS_SEVL: arm64_insn = 818;
pub const arm64_insn_ARM64_INS_SHA1C: arm64_insn = 819;
pub const arm64_insn_ARM64_INS_SHA1H: arm64_insn = 820;
pub const arm64_insn_ARM64_INS_SHA1M: arm64_insn = 821;
pub const arm64_insn_ARM64_INS_SHA1P: arm64_insn = 822;
pub const arm64_insn_ARM64_INS_SHA1SU0: arm64_insn = 823;
pub const arm64_insn_ARM64_INS_SHA1SU1: arm64_insn = 824;
pub const arm64_insn_ARM64_INS_SHA256H: arm64_insn = 825;
pub const arm64_insn_ARM64_INS_SHA256H2: arm64_insn = 826;
pub const arm64_insn_ARM64_INS_SHA256SU0: arm64_insn = 827;
pub const arm64_insn_ARM64_INS_SHA256SU1: arm64_insn = 828;
pub const arm64_insn_ARM64_INS_SHA512H: arm64_insn = 829;
pub const arm64_insn_ARM64_INS_SHA512H2: arm64_insn = 830;
pub const arm64_insn_ARM64_INS_SHA512SU0: arm64_insn = 831;
pub const arm64_insn_ARM64_INS_SHA512SU1: arm64_insn = 832;
pub const arm64_insn_ARM64_INS_SHADD: arm64_insn = 833;
pub const arm64_insn_ARM64_INS_SHL: arm64_insn = 834;
pub const arm64_insn_ARM64_INS_SHLL: arm64_insn = 835;
pub const arm64_insn_ARM64_INS_SHLL2: arm64_insn = 836;
pub const arm64_insn_ARM64_INS_SHRN: arm64_insn = 837;
pub const arm64_insn_ARM64_INS_SHRN2: arm64_insn = 838;
pub const arm64_insn_ARM64_INS_SHRNB: arm64_insn = 839;
pub const arm64_insn_ARM64_INS_SHRNT: arm64_insn = 840;
pub const arm64_insn_ARM64_INS_SHSUB: arm64_insn = 841;
pub const arm64_insn_ARM64_INS_SHSUBR: arm64_insn = 842;
pub const arm64_insn_ARM64_INS_SLI: arm64_insn = 843;
pub const arm64_insn_ARM64_INS_SM3PARTW1: arm64_insn = 844;
pub const arm64_insn_ARM64_INS_SM3PARTW2: arm64_insn = 845;
pub const arm64_insn_ARM64_INS_SM3SS1: arm64_insn = 846;
pub const arm64_insn_ARM64_INS_SM3TT1A: arm64_insn = 847;
pub const arm64_insn_ARM64_INS_SM3TT1B: arm64_insn = 848;
pub const arm64_insn_ARM64_INS_SM3TT2A: arm64_insn = 849;
pub const arm64_insn_ARM64_INS_SM3TT2B: arm64_insn = 850;
pub const arm64_insn_ARM64_INS_SM4E: arm64_insn = 851;
pub const arm64_insn_ARM64_INS_SM4EKEY: arm64_insn = 852;
pub const arm64_insn_ARM64_INS_SMADDL: arm64_insn = 853;
pub const arm64_insn_ARM64_INS_SMAX: arm64_insn = 854;
pub const arm64_insn_ARM64_INS_SMAXP: arm64_insn = 855;
pub const arm64_insn_ARM64_INS_SMAXV: arm64_insn = 856;
pub const arm64_insn_ARM64_INS_SMC: arm64_insn = 857;
pub const arm64_insn_ARM64_INS_SMIN: arm64_insn = 858;
pub const arm64_insn_ARM64_INS_SMINP: arm64_insn = 859;
pub const arm64_insn_ARM64_INS_SMINV: arm64_insn = 860;
pub const arm64_insn_ARM64_INS_SMLAL: arm64_insn = 861;
pub const arm64_insn_ARM64_INS_SMLAL2: arm64_insn = 862;
pub const arm64_insn_ARM64_INS_SMLALB: arm64_insn = 863;
pub const arm64_insn_ARM64_INS_SMLALT: arm64_insn = 864;
pub const arm64_insn_ARM64_INS_SMLSL: arm64_insn = 865;
pub const arm64_insn_ARM64_INS_SMLSL2: arm64_insn = 866;
pub const arm64_insn_ARM64_INS_SMLSLB: arm64_insn = 867;
pub const arm64_insn_ARM64_INS_SMLSLT: arm64_insn = 868;
pub const arm64_insn_ARM64_INS_SMMLA: arm64_insn = 869;
pub const arm64_insn_ARM64_INS_SMNEGL: arm64_insn = 870;
pub const arm64_insn_ARM64_INS_SMOPA: arm64_insn = 871;
pub const arm64_insn_ARM64_INS_SMOPS: arm64_insn = 872;
pub const arm64_insn_ARM64_INS_SMOV: arm64_insn = 873;
pub const arm64_insn_ARM64_INS_SMSTART: arm64_insn = 874;
pub const arm64_insn_ARM64_INS_SMSTOP: arm64_insn = 875;
pub const arm64_insn_ARM64_INS_SMSUBL: arm64_insn = 876;
pub const arm64_insn_ARM64_INS_SMULH: arm64_insn = 877;
pub const arm64_insn_ARM64_INS_SMULL: arm64_insn = 878;
pub const arm64_insn_ARM64_INS_SMULL2: arm64_insn = 879;
pub const arm64_insn_ARM64_INS_SMULLB: arm64_insn = 880;
pub const arm64_insn_ARM64_INS_SMULLT: arm64_insn = 881;
pub const arm64_insn_ARM64_INS_SPLICE: arm64_insn = 882;
pub const arm64_insn_ARM64_INS_SQABS: arm64_insn = 883;
pub const arm64_insn_ARM64_INS_SQADD: arm64_insn = 884;
pub const arm64_insn_ARM64_INS_SQCADD: arm64_insn = 885;
pub const arm64_insn_ARM64_INS_SQDECB: arm64_insn = 886;
pub const arm64_insn_ARM64_INS_SQDECD: arm64_insn = 887;
pub const arm64_insn_ARM64_INS_SQDECH: arm64_insn = 888;
pub const arm64_insn_ARM64_INS_SQDECP: arm64_insn = 889;
pub const arm64_insn_ARM64_INS_SQDECW: arm64_insn = 890;
pub const arm64_insn_ARM64_INS_SQDMLAL: arm64_insn = 891;
pub const arm64_insn_ARM64_INS_SQDMLAL2: arm64_insn = 892;
pub const arm64_insn_ARM64_INS_SQDMLALB: arm64_insn = 893;
pub const arm64_insn_ARM64_INS_SQDMLALBT: arm64_insn = 894;
pub const arm64_insn_ARM64_INS_SQDMLALT: arm64_insn = 895;
pub const arm64_insn_ARM64_INS_SQDMLSL: arm64_insn = 896;
pub const arm64_insn_ARM64_INS_SQDMLSL2: arm64_insn = 897;
pub const arm64_insn_ARM64_INS_SQDMLSLB: arm64_insn = 898;
pub const arm64_insn_ARM64_INS_SQDMLSLBT: arm64_insn = 899;
pub const arm64_insn_ARM64_INS_SQDMLSLT: arm64_insn = 900;
pub const arm64_insn_ARM64_INS_SQDMULH: arm64_insn = 901;
pub const arm64_insn_ARM64_INS_SQDMULL: arm64_insn = 902;
pub const arm64_insn_ARM64_INS_SQDMULL2: arm64_insn = 903;
pub const arm64_insn_ARM64_INS_SQDMULLB: arm64_insn = 904;
pub const arm64_insn_ARM64_INS_SQDMULLT: arm64_insn = 905;
pub const arm64_insn_ARM64_INS_SQINCB: arm64_insn = 906;
pub const arm64_insn_ARM64_INS_SQINCD: arm64_insn = 907;
pub const arm64_insn_ARM64_INS_SQINCH: arm64_insn = 908;
pub const arm64_insn_ARM64_INS_SQINCP: arm64_insn = 909;
pub const arm64_insn_ARM64_INS_SQINCW: arm64_insn = 910;
pub const arm64_insn_ARM64_INS_SQNEG: arm64_insn = 911;
pub const arm64_insn_ARM64_INS_SQRDCMLAH: arm64_insn = 912;
pub const arm64_insn_ARM64_INS_SQRDMLAH: arm64_insn = 913;
pub const arm64_insn_ARM64_INS_SQRDMLSH: arm64_insn = 914;
pub const arm64_insn_ARM64_INS_SQRDMULH: arm64_insn = 915;
pub const arm64_insn_ARM64_INS_SQRSHL: arm64_insn = 916;
pub const arm64_insn_ARM64_INS_SQRSHLR: arm64_insn = 917;
pub const arm64_insn_ARM64_INS_SQRSHRN: arm64_insn = 918;
pub const arm64_insn_ARM64_INS_SQRSHRN2: arm64_insn = 919;
pub const arm64_insn_ARM64_INS_SQRSHRNB: arm64_insn = 920;
pub const arm64_insn_ARM64_INS_SQRSHRNT: arm64_insn = 921;
pub const arm64_insn_ARM64_INS_SQRSHRUN: arm64_insn = 922;
pub const arm64_insn_ARM64_INS_SQRSHRUN2: arm64_insn = 923;
pub const arm64_insn_ARM64_INS_SQRSHRUNB: arm64_insn = 924;
pub const arm64_insn_ARM64_INS_SQRSHRUNT: arm64_insn = 925;
pub const arm64_insn_ARM64_INS_SQSHL: arm64_insn = 926;
pub const arm64_insn_ARM64_INS_SQSHLR: arm64_insn = 927;
pub const arm64_insn_ARM64_INS_SQSHLU: arm64_insn = 928;
pub const arm64_insn_ARM64_INS_SQSHRN: arm64_insn = 929;
pub const arm64_insn_ARM64_INS_SQSHRN2: arm64_insn = 930;
pub const arm64_insn_ARM64_INS_SQSHRNB: arm64_insn = 931;
pub const arm64_insn_ARM64_INS_SQSHRNT: arm64_insn = 932;
pub const arm64_insn_ARM64_INS_SQSHRUN: arm64_insn = 933;
pub const arm64_insn_ARM64_INS_SQSHRUN2: arm64_insn = 934;
pub const arm64_insn_ARM64_INS_SQSHRUNB: arm64_insn = 935;
pub const arm64_insn_ARM64_INS_SQSHRUNT: arm64_insn = 936;
pub const arm64_insn_ARM64_INS_SQSUB: arm64_insn = 937;
pub const arm64_insn_ARM64_INS_SQSUBR: arm64_insn = 938;
pub const arm64_insn_ARM64_INS_SQXTN: arm64_insn = 939;
pub const arm64_insn_ARM64_INS_SQXTN2: arm64_insn = 940;
pub const arm64_insn_ARM64_INS_SQXTNB: arm64_insn = 941;
pub const arm64_insn_ARM64_INS_SQXTNT: arm64_insn = 942;
pub const arm64_insn_ARM64_INS_SQXTUN: arm64_insn = 943;
pub const arm64_insn_ARM64_INS_SQXTUN2: arm64_insn = 944;
pub const arm64_insn_ARM64_INS_SQXTUNB: arm64_insn = 945;
pub const arm64_insn_ARM64_INS_SQXTUNT: arm64_insn = 946;
pub const arm64_insn_ARM64_INS_SRHADD: arm64_insn = 947;
pub const arm64_insn_ARM64_INS_SRI: arm64_insn = 948;
pub const arm64_insn_ARM64_INS_SRSHL: arm64_insn = 949;
pub const arm64_insn_ARM64_INS_SRSHLR: arm64_insn = 950;
pub const arm64_insn_ARM64_INS_SRSHR: arm64_insn = 951;
pub const arm64_insn_ARM64_INS_SRSRA: arm64_insn = 952;
pub const arm64_insn_ARM64_INS_SSBB: arm64_insn = 953;
pub const arm64_insn_ARM64_INS_SSHL: arm64_insn = 954;
pub const arm64_insn_ARM64_INS_SSHLL: arm64_insn = 955;
pub const arm64_insn_ARM64_INS_SSHLL2: arm64_insn = 956;
pub const arm64_insn_ARM64_INS_SSHLLB: arm64_insn = 957;
pub const arm64_insn_ARM64_INS_SSHLLT: arm64_insn = 958;
pub const arm64_insn_ARM64_INS_SSHR: arm64_insn = 959;
pub const arm64_insn_ARM64_INS_SSRA: arm64_insn = 960;
pub const arm64_insn_ARM64_INS_SSUBL: arm64_insn = 961;
pub const arm64_insn_ARM64_INS_SSUBL2: arm64_insn = 962;
pub const arm64_insn_ARM64_INS_SSUBLB: arm64_insn = 963;
pub const arm64_insn_ARM64_INS_SSUBLBT: arm64_insn = 964;
pub const arm64_insn_ARM64_INS_SSUBLT: arm64_insn = 965;
pub const arm64_insn_ARM64_INS_SSUBLTB: arm64_insn = 966;
pub const arm64_insn_ARM64_INS_SSUBW: arm64_insn = 967;
pub const arm64_insn_ARM64_INS_SSUBW2: arm64_insn = 968;
pub const arm64_insn_ARM64_INS_SSUBWB: arm64_insn = 969;
pub const arm64_insn_ARM64_INS_SSUBWT: arm64_insn = 970;
pub const arm64_insn_ARM64_INS_ST1: arm64_insn = 971;
pub const arm64_insn_ARM64_INS_ST1B: arm64_insn = 972;
pub const arm64_insn_ARM64_INS_ST1D: arm64_insn = 973;
pub const arm64_insn_ARM64_INS_ST1H: arm64_insn = 974;
pub const arm64_insn_ARM64_INS_ST1Q: arm64_insn = 975;
pub const arm64_insn_ARM64_INS_ST1W: arm64_insn = 976;
pub const arm64_insn_ARM64_INS_ST2: arm64_insn = 977;
pub const arm64_insn_ARM64_INS_ST2B: arm64_insn = 978;
pub const arm64_insn_ARM64_INS_ST2D: arm64_insn = 979;
pub const arm64_insn_ARM64_INS_ST2G: arm64_insn = 980;
pub const arm64_insn_ARM64_INS_ST2H: arm64_insn = 981;
pub const arm64_insn_ARM64_INS_ST2W: arm64_insn = 982;
pub const arm64_insn_ARM64_INS_ST3: arm64_insn = 983;
pub const arm64_insn_ARM64_INS_ST3B: arm64_insn = 984;
pub const arm64_insn_ARM64_INS_ST3D: arm64_insn = 985;
pub const arm64_insn_ARM64_INS_ST3H: arm64_insn = 986;
pub const arm64_insn_ARM64_INS_ST3W: arm64_insn = 987;
pub const arm64_insn_ARM64_INS_ST4: arm64_insn = 988;
pub const arm64_insn_ARM64_INS_ST4B: arm64_insn = 989;
pub const arm64_insn_ARM64_INS_ST4D: arm64_insn = 990;
pub const arm64_insn_ARM64_INS_ST4H: arm64_insn = 991;
pub const arm64_insn_ARM64_INS_ST4W: arm64_insn = 992;
pub const arm64_insn_ARM64_INS_ST64B: arm64_insn = 993;
pub const arm64_insn_ARM64_INS_ST64BV: arm64_insn = 994;
pub const arm64_insn_ARM64_INS_ST64BV0: arm64_insn = 995;
pub const arm64_insn_ARM64_INS_STADD: arm64_insn = 996;
pub const arm64_insn_ARM64_INS_STADDB: arm64_insn = 997;
pub const arm64_insn_ARM64_INS_STADDH: arm64_insn = 998;
pub const arm64_insn_ARM64_INS_STADDL: arm64_insn = 999;
pub const arm64_insn_ARM64_INS_STADDLB: arm64_insn = 1000;
pub const arm64_insn_ARM64_INS_STADDLH: arm64_insn = 1001;
pub const arm64_insn_ARM64_INS_STCLR: arm64_insn = 1002;
pub const arm64_insn_ARM64_INS_STCLRB: arm64_insn = 1003;
pub const arm64_insn_ARM64_INS_STCLRH: arm64_insn = 1004;
pub const arm64_insn_ARM64_INS_STCLRL: arm64_insn = 1005;
pub const arm64_insn_ARM64_INS_STCLRLB: arm64_insn = 1006;
pub const arm64_insn_ARM64_INS_STCLRLH: arm64_insn = 1007;
pub const arm64_insn_ARM64_INS_STEOR: arm64_insn = 1008;
pub const arm64_insn_ARM64_INS_STEORB: arm64_insn = 1009;
pub const arm64_insn_ARM64_INS_STEORH: arm64_insn = 1010;
pub const arm64_insn_ARM64_INS_STEORL: arm64_insn = 1011;
pub const arm64_insn_ARM64_INS_STEORLB: arm64_insn = 1012;
pub const arm64_insn_ARM64_INS_STEORLH: arm64_insn = 1013;
pub const arm64_insn_ARM64_INS_STG: arm64_insn = 1014;
pub const arm64_insn_ARM64_INS_STGM: arm64_insn = 1015;
pub const arm64_insn_ARM64_INS_STGP: arm64_insn = 1016;
pub const arm64_insn_ARM64_INS_STLLR: arm64_insn = 1017;
pub const arm64_insn_ARM64_INS_STLLRB: arm64_insn = 1018;
pub const arm64_insn_ARM64_INS_STLLRH: arm64_insn = 1019;
pub const arm64_insn_ARM64_INS_STLR: arm64_insn = 1020;
pub const arm64_insn_ARM64_INS_STLRB: arm64_insn = 1021;
pub const arm64_insn_ARM64_INS_STLRH: arm64_insn = 1022;
pub const arm64_insn_ARM64_INS_STLUR: arm64_insn = 1023;
pub const arm64_insn_ARM64_INS_STLURB: arm64_insn = 1024;
pub const arm64_insn_ARM64_INS_STLURH: arm64_insn = 1025;
pub const arm64_insn_ARM64_INS_STLXP: arm64_insn = 1026;
pub const arm64_insn_ARM64_INS_STLXR: arm64_insn = 1027;
pub const arm64_insn_ARM64_INS_STLXRB: arm64_insn = 1028;
pub const arm64_insn_ARM64_INS_STLXRH: arm64_insn = 1029;
pub const arm64_insn_ARM64_INS_STNP: arm64_insn = 1030;
pub const arm64_insn_ARM64_INS_STNT1B: arm64_insn = 1031;
pub const arm64_insn_ARM64_INS_STNT1D: arm64_insn = 1032;
pub const arm64_insn_ARM64_INS_STNT1H: arm64_insn = 1033;
pub const arm64_insn_ARM64_INS_STNT1W: arm64_insn = 1034;
pub const arm64_insn_ARM64_INS_STP: arm64_insn = 1035;
pub const arm64_insn_ARM64_INS_STR: arm64_insn = 1036;
pub const arm64_insn_ARM64_INS_STRB: arm64_insn = 1037;
pub const arm64_insn_ARM64_INS_STRH: arm64_insn = 1038;
pub const arm64_insn_ARM64_INS_STSET: arm64_insn = 1039;
pub const arm64_insn_ARM64_INS_STSETB: arm64_insn = 1040;
pub const arm64_insn_ARM64_INS_STSETH: arm64_insn = 1041;
pub const arm64_insn_ARM64_INS_STSETL: arm64_insn = 1042;
pub const arm64_insn_ARM64_INS_STSETLB: arm64_insn = 1043;
pub const arm64_insn_ARM64_INS_STSETLH: arm64_insn = 1044;
pub const arm64_insn_ARM64_INS_STSMAX: arm64_insn = 1045;
pub const arm64_insn_ARM64_INS_STSMAXB: arm64_insn = 1046;
pub const arm64_insn_ARM64_INS_STSMAXH: arm64_insn = 1047;
pub const arm64_insn_ARM64_INS_STSMAXL: arm64_insn = 1048;
pub const arm64_insn_ARM64_INS_STSMAXLB: arm64_insn = 1049;
pub const arm64_insn_ARM64_INS_STSMAXLH: arm64_insn = 1050;
pub const arm64_insn_ARM64_INS_STSMIN: arm64_insn = 1051;
pub const arm64_insn_ARM64_INS_STSMINB: arm64_insn = 1052;
pub const arm64_insn_ARM64_INS_STSMINH: arm64_insn = 1053;
pub const arm64_insn_ARM64_INS_STSMINL: arm64_insn = 1054;
pub const arm64_insn_ARM64_INS_STSMINLB: arm64_insn = 1055;
pub const arm64_insn_ARM64_INS_STSMINLH: arm64_insn = 1056;
pub const arm64_insn_ARM64_INS_STTR: arm64_insn = 1057;
pub const arm64_insn_ARM64_INS_STTRB: arm64_insn = 1058;
pub const arm64_insn_ARM64_INS_STTRH: arm64_insn = 1059;
pub const arm64_insn_ARM64_INS_STUMAX: arm64_insn = 1060;
pub const arm64_insn_ARM64_INS_STUMAXB: arm64_insn = 1061;
pub const arm64_insn_ARM64_INS_STUMAXH: arm64_insn = 1062;
pub const arm64_insn_ARM64_INS_STUMAXL: arm64_insn = 1063;
pub const arm64_insn_ARM64_INS_STUMAXLB: arm64_insn = 1064;
pub const arm64_insn_ARM64_INS_STUMAXLH: arm64_insn = 1065;
pub const arm64_insn_ARM64_INS_STUMIN: arm64_insn = 1066;
pub const arm64_insn_ARM64_INS_STUMINB: arm64_insn = 1067;
pub const arm64_insn_ARM64_INS_STUMINH: arm64_insn = 1068;
pub const arm64_insn_ARM64_INS_STUMINL: arm64_insn = 1069;
pub const arm64_insn_ARM64_INS_STUMINLB: arm64_insn = 1070;
pub const arm64_insn_ARM64_INS_STUMINLH: arm64_insn = 1071;
pub const arm64_insn_ARM64_INS_STUR: arm64_insn = 1072;
pub const arm64_insn_ARM64_INS_STURB: arm64_insn = 1073;
pub const arm64_insn_ARM64_INS_STURH: arm64_insn = 1074;
pub const arm64_insn_ARM64_INS_STXP: arm64_insn = 1075;
pub const arm64_insn_ARM64_INS_STXR: arm64_insn = 1076;
pub const arm64_insn_ARM64_INS_STXRB: arm64_insn = 1077;
pub const arm64_insn_ARM64_INS_STXRH: arm64_insn = 1078;
pub const arm64_insn_ARM64_INS_STZ2G: arm64_insn = 1079;
pub const arm64_insn_ARM64_INS_STZG: arm64_insn = 1080;
pub const arm64_insn_ARM64_INS_STZGM: arm64_insn = 1081;
pub const arm64_insn_ARM64_INS_SUB: arm64_insn = 1082;
pub const arm64_insn_ARM64_INS_SUBG: arm64_insn = 1083;
pub const arm64_insn_ARM64_INS_SUBHN: arm64_insn = 1084;
pub const arm64_insn_ARM64_INS_SUBHN2: arm64_insn = 1085;
pub const arm64_insn_ARM64_INS_SUBHNB: arm64_insn = 1086;
pub const arm64_insn_ARM64_INS_SUBHNT: arm64_insn = 1087;
pub const arm64_insn_ARM64_INS_SUBP: arm64_insn = 1088;
pub const arm64_insn_ARM64_INS_SUBPS: arm64_insn = 1089;
pub const arm64_insn_ARM64_INS_SUBR: arm64_insn = 1090;
pub const arm64_insn_ARM64_INS_SUBS: arm64_insn = 1091;
pub const arm64_insn_ARM64_INS_SUDOT: arm64_insn = 1092;
pub const arm64_insn_ARM64_INS_SUMOPA: arm64_insn = 1093;
pub const arm64_insn_ARM64_INS_SUMOPS: arm64_insn = 1094;
pub const arm64_insn_ARM64_INS_SUNPKHI: arm64_insn = 1095;
pub const arm64_insn_ARM64_INS_SUNPKLO: arm64_insn = 1096;
pub const arm64_insn_ARM64_INS_SUQADD: arm64_insn = 1097;
pub const arm64_insn_ARM64_INS_SVC: arm64_insn = 1098;
pub const arm64_insn_ARM64_INS_SWP: arm64_insn = 1099;
pub const arm64_insn_ARM64_INS_SWPA: arm64_insn = 1100;
pub const arm64_insn_ARM64_INS_SWPAB: arm64_insn = 1101;
pub const arm64_insn_ARM64_INS_SWPAH: arm64_insn = 1102;
pub const arm64_insn_ARM64_INS_SWPAL: arm64_insn = 1103;
pub const arm64_insn_ARM64_INS_SWPALB: arm64_insn = 1104;
pub const arm64_insn_ARM64_INS_SWPALH: arm64_insn = 1105;
pub const arm64_insn_ARM64_INS_SWPB: arm64_insn = 1106;
pub const arm64_insn_ARM64_INS_SWPH: arm64_insn = 1107;
pub const arm64_insn_ARM64_INS_SWPL: arm64_insn = 1108;
pub const arm64_insn_ARM64_INS_SWPLB: arm64_insn = 1109;
pub const arm64_insn_ARM64_INS_SWPLH: arm64_insn = 1110;
pub const arm64_insn_ARM64_INS_SXTB: arm64_insn = 1111;
pub const arm64_insn_ARM64_INS_SXTH: arm64_insn = 1112;
pub const arm64_insn_ARM64_INS_SXTL: arm64_insn = 1113;
pub const arm64_insn_ARM64_INS_SXTL2: arm64_insn = 1114;
pub const arm64_insn_ARM64_INS_SXTW: arm64_insn = 1115;
pub const arm64_insn_ARM64_INS_SYS: arm64_insn = 1116;
pub const arm64_insn_ARM64_INS_SYSL: arm64_insn = 1117;
pub const arm64_insn_ARM64_INS_TBL: arm64_insn = 1118;
pub const arm64_insn_ARM64_INS_TBNZ: arm64_insn = 1119;
pub const arm64_insn_ARM64_INS_TBX: arm64_insn = 1120;
pub const arm64_insn_ARM64_INS_TBZ: arm64_insn = 1121;
pub const arm64_insn_ARM64_INS_TCANCEL: arm64_insn = 1122;
pub const arm64_insn_ARM64_INS_TCOMMIT: arm64_insn = 1123;
pub const arm64_insn_ARM64_INS_TRN1: arm64_insn = 1124;
pub const arm64_insn_ARM64_INS_TRN2: arm64_insn = 1125;
pub const arm64_insn_ARM64_INS_TSB: arm64_insn = 1126;
pub const arm64_insn_ARM64_INS_TST: arm64_insn = 1127;
pub const arm64_insn_ARM64_INS_TSTART: arm64_insn = 1128;
pub const arm64_insn_ARM64_INS_TTEST: arm64_insn = 1129;
pub const arm64_insn_ARM64_INS_UABA: arm64_insn = 1130;
pub const arm64_insn_ARM64_INS_UABAL: arm64_insn = 1131;
pub const arm64_insn_ARM64_INS_UABAL2: arm64_insn = 1132;
pub const arm64_insn_ARM64_INS_UABALB: arm64_insn = 1133;
pub const arm64_insn_ARM64_INS_UABALT: arm64_insn = 1134;
pub const arm64_insn_ARM64_INS_UABD: arm64_insn = 1135;
pub const arm64_insn_ARM64_INS_UABDL: arm64_insn = 1136;
pub const arm64_insn_ARM64_INS_UABDL2: arm64_insn = 1137;
pub const arm64_insn_ARM64_INS_UABDLB: arm64_insn = 1138;
pub const arm64_insn_ARM64_INS_UABDLT: arm64_insn = 1139;
pub const arm64_insn_ARM64_INS_UADALP: arm64_insn = 1140;
pub const arm64_insn_ARM64_INS_UADDL: arm64_insn = 1141;
pub const arm64_insn_ARM64_INS_UADDL2: arm64_insn = 1142;
pub const arm64_insn_ARM64_INS_UADDLB: arm64_insn = 1143;
pub const arm64_insn_ARM64_INS_UADDLP: arm64_insn = 1144;
pub const arm64_insn_ARM64_INS_UADDLT: arm64_insn = 1145;
pub const arm64_insn_ARM64_INS_UADDLV: arm64_insn = 1146;
pub const arm64_insn_ARM64_INS_UADDV: arm64_insn = 1147;
pub const arm64_insn_ARM64_INS_UADDW: arm64_insn = 1148;
pub const arm64_insn_ARM64_INS_UADDW2: arm64_insn = 1149;
pub const arm64_insn_ARM64_INS_UADDWB: arm64_insn = 1150;
pub const arm64_insn_ARM64_INS_UADDWT: arm64_insn = 1151;
pub const arm64_insn_ARM64_INS_UBFM: arm64_insn = 1152;
pub const arm64_insn_ARM64_INS_UCLAMP: arm64_insn = 1153;
pub const arm64_insn_ARM64_INS_UCVTF: arm64_insn = 1154;
pub const arm64_insn_ARM64_INS_UDF: arm64_insn = 1155;
pub const arm64_insn_ARM64_INS_UDIV: arm64_insn = 1156;
pub const arm64_insn_ARM64_INS_UDIVR: arm64_insn = 1157;
pub const arm64_insn_ARM64_INS_UDOT: arm64_insn = 1158;
pub const arm64_insn_ARM64_INS_UHADD: arm64_insn = 1159;
pub const arm64_insn_ARM64_INS_UHSUB: arm64_insn = 1160;
pub const arm64_insn_ARM64_INS_UHSUBR: arm64_insn = 1161;
pub const arm64_insn_ARM64_INS_UMADDL: arm64_insn = 1162;
pub const arm64_insn_ARM64_INS_UMAX: arm64_insn = 1163;
pub const arm64_insn_ARM64_INS_UMAXP: arm64_insn = 1164;
pub const arm64_insn_ARM64_INS_UMAXV: arm64_insn = 1165;
pub const arm64_insn_ARM64_INS_UMIN: arm64_insn = 1166;
pub const arm64_insn_ARM64_INS_UMINP: arm64_insn = 1167;
pub const arm64_insn_ARM64_INS_UMINV: arm64_insn = 1168;
pub const arm64_insn_ARM64_INS_UMLAL: arm64_insn = 1169;
pub const arm64_insn_ARM64_INS_UMLAL2: arm64_insn = 1170;
pub const arm64_insn_ARM64_INS_UMLALB: arm64_insn = 1171;
pub const arm64_insn_ARM64_INS_UMLALT: arm64_insn = 1172;
pub const arm64_insn_ARM64_INS_UMLSL: arm64_insn = 1173;
pub const arm64_insn_ARM64_INS_UMLSL2: arm64_insn = 1174;
pub const arm64_insn_ARM64_INS_UMLSLB: arm64_insn = 1175;
pub const arm64_insn_ARM64_INS_UMLSLT: arm64_insn = 1176;
pub const arm64_insn_ARM64_INS_UMMLA: arm64_insn = 1177;
pub const arm64_insn_ARM64_INS_UMNEGL: arm64_insn = 1178;
pub const arm64_insn_ARM64_INS_UMOPA: arm64_insn = 1179;
pub const arm64_insn_ARM64_INS_UMOPS: arm64_insn = 1180;
pub const arm64_insn_ARM64_INS_UMOV: arm64_insn = 1181;
pub const arm64_insn_ARM64_INS_UMSUBL: arm64_insn = 1182;
pub const arm64_insn_ARM64_INS_UMULH: arm64_insn = 1183;
pub const arm64_insn_ARM64_INS_UMULL: arm64_insn = 1184;
pub const arm64_insn_ARM64_INS_UMULL2: arm64_insn = 1185;
pub const arm64_insn_ARM64_INS_UMULLB: arm64_insn = 1186;
pub const arm64_insn_ARM64_INS_UMULLT: arm64_insn = 1187;
pub const arm64_insn_ARM64_INS_UQADD: arm64_insn = 1188;
pub const arm64_insn_ARM64_INS_UQDECB: arm64_insn = 1189;
pub const arm64_insn_ARM64_INS_UQDECD: arm64_insn = 1190;
pub const arm64_insn_ARM64_INS_UQDECH: arm64_insn = 1191;
pub const arm64_insn_ARM64_INS_UQDECP: arm64_insn = 1192;
pub const arm64_insn_ARM64_INS_UQDECW: arm64_insn = 1193;
pub const arm64_insn_ARM64_INS_UQINCB: arm64_insn = 1194;
pub const arm64_insn_ARM64_INS_UQINCD: arm64_insn = 1195;
pub const arm64_insn_ARM64_INS_UQINCH: arm64_insn = 1196;
pub const arm64_insn_ARM64_INS_UQINCP: arm64_insn = 1197;
pub const arm64_insn_ARM64_INS_UQINCW: arm64_insn = 1198;
pub const arm64_insn_ARM64_INS_UQRSHL: arm64_insn = 1199;
pub const arm64_insn_ARM64_INS_UQRSHLR: arm64_insn = 1200;
pub const arm64_insn_ARM64_INS_UQRSHRN: arm64_insn = 1201;
pub const arm64_insn_ARM64_INS_UQRSHRN2: arm64_insn = 1202;
pub const arm64_insn_ARM64_INS_UQRSHRNB: arm64_insn = 1203;
pub const arm64_insn_ARM64_INS_UQRSHRNT: arm64_insn = 1204;
pub const arm64_insn_ARM64_INS_UQSHL: arm64_insn = 1205;
pub const arm64_insn_ARM64_INS_UQSHLR: arm64_insn = 1206;
pub const arm64_insn_ARM64_INS_UQSHRN: arm64_insn = 1207;
pub const arm64_insn_ARM64_INS_UQSHRN2: arm64_insn = 1208;
pub const arm64_insn_ARM64_INS_UQSHRNB: arm64_insn = 1209;
pub const arm64_insn_ARM64_INS_UQSHRNT: arm64_insn = 1210;
pub const arm64_insn_ARM64_INS_UQSUB: arm64_insn = 1211;
pub const arm64_insn_ARM64_INS_UQSUBR: arm64_insn = 1212;
pub const arm64_insn_ARM64_INS_UQXTN: arm64_insn = 1213;
pub const arm64_insn_ARM64_INS_UQXTN2: arm64_insn = 1214;
pub const arm64_insn_ARM64_INS_UQXTNB: arm64_insn = 1215;
pub const arm64_insn_ARM64_INS_UQXTNT: arm64_insn = 1216;
pub const arm64_insn_ARM64_INS_URECPE: arm64_insn = 1217;
pub const arm64_insn_ARM64_INS_URHADD: arm64_insn = 1218;
pub const arm64_insn_ARM64_INS_URSHL: arm64_insn = 1219;
pub const arm64_insn_ARM64_INS_URSHLR: arm64_insn = 1220;
pub const arm64_insn_ARM64_INS_URSHR: arm64_insn = 1221;
pub const arm64_insn_ARM64_INS_URSQRTE: arm64_insn = 1222;
pub const arm64_insn_ARM64_INS_URSRA: arm64_insn = 1223;
pub const arm64_insn_ARM64_INS_USDOT: arm64_insn = 1224;
pub const arm64_insn_ARM64_INS_USHL: arm64_insn = 1225;
pub const arm64_insn_ARM64_INS_USHLL: arm64_insn = 1226;
pub const arm64_insn_ARM64_INS_USHLL2: arm64_insn = 1227;
pub const arm64_insn_ARM64_INS_USHLLB: arm64_insn = 1228;
pub const arm64_insn_ARM64_INS_USHLLT: arm64_insn = 1229;
pub const arm64_insn_ARM64_INS_USHR: arm64_insn = 1230;
pub const arm64_insn_ARM64_INS_USMMLA: arm64_insn = 1231;
pub const arm64_insn_ARM64_INS_USMOPA: arm64_insn = 1232;
pub const arm64_insn_ARM64_INS_USMOPS: arm64_insn = 1233;
pub const arm64_insn_ARM64_INS_USQADD: arm64_insn = 1234;
pub const arm64_insn_ARM64_INS_USRA: arm64_insn = 1235;
pub const arm64_insn_ARM64_INS_USUBL: arm64_insn = 1236;
pub const arm64_insn_ARM64_INS_USUBL2: arm64_insn = 1237;
pub const arm64_insn_ARM64_INS_USUBLB: arm64_insn = 1238;
pub const arm64_insn_ARM64_INS_USUBLT: arm64_insn = 1239;
pub const arm64_insn_ARM64_INS_USUBW: arm64_insn = 1240;
pub const arm64_insn_ARM64_INS_USUBW2: arm64_insn = 1241;
pub const arm64_insn_ARM64_INS_USUBWB: arm64_insn = 1242;
pub const arm64_insn_ARM64_INS_USUBWT: arm64_insn = 1243;
pub const arm64_insn_ARM64_INS_UUNPKHI: arm64_insn = 1244;
pub const arm64_insn_ARM64_INS_UUNPKLO: arm64_insn = 1245;
pub const arm64_insn_ARM64_INS_UXTB: arm64_insn = 1246;
pub const arm64_insn_ARM64_INS_UXTH: arm64_insn = 1247;
pub const arm64_insn_ARM64_INS_UXTL: arm64_insn = 1248;
pub const arm64_insn_ARM64_INS_UXTL2: arm64_insn = 1249;
pub const arm64_insn_ARM64_INS_UXTW: arm64_insn = 1250;
pub const arm64_insn_ARM64_INS_UZP1: arm64_insn = 1251;
pub const arm64_insn_ARM64_INS_UZP2: arm64_insn = 1252;
pub const arm64_insn_ARM64_INS_WFE: arm64_insn = 1253;
pub const arm64_insn_ARM64_INS_WFET: arm64_insn = 1254;
pub const arm64_insn_ARM64_INS_WFI: arm64_insn = 1255;
pub const arm64_insn_ARM64_INS_WFIT: arm64_insn = 1256;
pub const arm64_insn_ARM64_INS_WHILEGE: arm64_insn = 1257;
pub const arm64_insn_ARM64_INS_WHILEGT: arm64_insn = 1258;
pub const arm64_insn_ARM64_INS_WHILEHI: arm64_insn = 1259;
pub const arm64_insn_ARM64_INS_WHILEHS: arm64_insn = 1260;
pub const arm64_insn_ARM64_INS_WHILELE: arm64_insn = 1261;
pub const arm64_insn_ARM64_INS_WHILELO: arm64_insn = 1262;
pub const arm64_insn_ARM64_INS_WHILELS: arm64_insn = 1263;
pub const arm64_insn_ARM64_INS_WHILELT: arm64_insn = 1264;
pub const arm64_insn_ARM64_INS_WHILERW: arm64_insn = 1265;
pub const arm64_insn_ARM64_INS_WHILEWR: arm64_insn = 1266;
pub const arm64_insn_ARM64_INS_WRFFR: arm64_insn = 1267;
pub const arm64_insn_ARM64_INS_XAFLAG: arm64_insn = 1268;
pub const arm64_insn_ARM64_INS_XAR: arm64_insn = 1269;
pub const arm64_insn_ARM64_INS_XPACD: arm64_insn = 1270;
pub const arm64_insn_ARM64_INS_XPACI: arm64_insn = 1271;
pub const arm64_insn_ARM64_INS_XPACLRI: arm64_insn = 1272;
pub const arm64_insn_ARM64_INS_XTN: arm64_insn = 1273;
pub const arm64_insn_ARM64_INS_XTN2: arm64_insn = 1274;
pub const arm64_insn_ARM64_INS_YIELD: arm64_insn = 1275;
pub const arm64_insn_ARM64_INS_ZERO: arm64_insn = 1276;
pub const arm64_insn_ARM64_INS_ZIP1: arm64_insn = 1277;
pub const arm64_insn_ARM64_INS_ZIP2: arm64_insn = 1278;
pub const arm64_insn_ARM64_INS_SBFIZ: arm64_insn = 1279;
pub const arm64_insn_ARM64_INS_UBFIZ: arm64_insn = 1280;
pub const arm64_insn_ARM64_INS_SBFX: arm64_insn = 1281;
pub const arm64_insn_ARM64_INS_UBFX: arm64_insn = 1282;
pub const arm64_insn_ARM64_INS_BFI: arm64_insn = 1283;
pub const arm64_insn_ARM64_INS_BFXIL: arm64_insn = 1284;
pub const arm64_insn_ARM64_INS_IC: arm64_insn = 1285;
pub const arm64_insn_ARM64_INS_DC: arm64_insn = 1286;
pub const arm64_insn_ARM64_INS_AT: arm64_insn = 1287;
pub const arm64_insn_ARM64_INS_TLBI: arm64_insn = 1288;
pub const arm64_insn_ARM64_INS_ENDING: arm64_insn = 1289;
pub type arm64_insn = ::core::ffi::c_uint;
pub const arm64_insn_group_ARM64_GRP_INVALID: arm64_insn_group = 0;
pub const arm64_insn_group_ARM64_GRP_JUMP: arm64_insn_group = 1;
pub const arm64_insn_group_ARM64_GRP_CALL: arm64_insn_group = 2;
pub const arm64_insn_group_ARM64_GRP_RET: arm64_insn_group = 3;
pub const arm64_insn_group_ARM64_GRP_INT: arm64_insn_group = 4;
pub const arm64_insn_group_ARM64_GRP_PRIVILEGE: arm64_insn_group = 6;
pub const arm64_insn_group_ARM64_GRP_BRANCH_RELATIVE: arm64_insn_group = 7;
pub const arm64_insn_group_ARM64_GRP_PAC: arm64_insn_group = 8;
pub const arm64_insn_group_ARM64_GRP_CRYPTO: arm64_insn_group = 128;
pub const arm64_insn_group_ARM64_GRP_FPARMV8: arm64_insn_group = 129;
pub const arm64_insn_group_ARM64_GRP_NEON: arm64_insn_group = 130;
pub const arm64_insn_group_ARM64_GRP_CRC: arm64_insn_group = 131;
pub const arm64_insn_group_ARM64_GRP_AES: arm64_insn_group = 132;
pub const arm64_insn_group_ARM64_GRP_DOTPROD: arm64_insn_group = 133;
pub const arm64_insn_group_ARM64_GRP_FULLFP16: arm64_insn_group = 134;
pub const arm64_insn_group_ARM64_GRP_LSE: arm64_insn_group = 135;
pub const arm64_insn_group_ARM64_GRP_RCPC: arm64_insn_group = 136;
pub const arm64_insn_group_ARM64_GRP_RDM: arm64_insn_group = 137;
pub const arm64_insn_group_ARM64_GRP_SHA2: arm64_insn_group = 138;
pub const arm64_insn_group_ARM64_GRP_SHA3: arm64_insn_group = 139;
pub const arm64_insn_group_ARM64_GRP_SM4: arm64_insn_group = 140;
pub const arm64_insn_group_ARM64_GRP_SVE: arm64_insn_group = 141;
pub const arm64_insn_group_ARM64_GRP_SVE2: arm64_insn_group = 142;
pub const arm64_insn_group_ARM64_GRP_SVE2AES: arm64_insn_group = 143;
pub const arm64_insn_group_ARM64_GRP_SVE2BitPerm: arm64_insn_group = 144;
pub const arm64_insn_group_ARM64_GRP_SVE2SHA3: arm64_insn_group = 145;
pub const arm64_insn_group_ARM64_GRP_SVE2SM4: arm64_insn_group = 146;
pub const arm64_insn_group_ARM64_GRP_SME: arm64_insn_group = 147;
pub const arm64_insn_group_ARM64_GRP_SMEF64: arm64_insn_group = 148;
pub const arm64_insn_group_ARM64_GRP_SMEI64: arm64_insn_group = 149;
pub const arm64_insn_group_ARM64_GRP_MatMulFP32: arm64_insn_group = 150;
pub const arm64_insn_group_ARM64_GRP_MatMulFP64: arm64_insn_group = 151;
pub const arm64_insn_group_ARM64_GRP_MatMulInt8: arm64_insn_group = 152;
pub const arm64_insn_group_ARM64_GRP_V8_1A: arm64_insn_group = 153;
pub const arm64_insn_group_ARM64_GRP_V8_3A: arm64_insn_group = 154;
pub const arm64_insn_group_ARM64_GRP_V8_4A: arm64_insn_group = 155;
pub const arm64_insn_group_ARM64_GRP_ENDING: arm64_insn_group = 156;
pub type arm64_insn_group = ::core::ffi::c_uint;
pub const m68k_reg_M68K_REG_INVALID: m68k_reg = 0;
pub const m68k_reg_M68K_REG_D0: m68k_reg = 1;
pub const m68k_reg_M68K_REG_D1: m68k_reg = 2;
pub const m68k_reg_M68K_REG_D2: m68k_reg = 3;
pub const m68k_reg_M68K_REG_D3: m68k_reg = 4;
pub const m68k_reg_M68K_REG_D4: m68k_reg = 5;
pub const m68k_reg_M68K_REG_D5: m68k_reg = 6;
pub const m68k_reg_M68K_REG_D6: m68k_reg = 7;
pub const m68k_reg_M68K_REG_D7: m68k_reg = 8;
pub const m68k_reg_M68K_REG_A0: m68k_reg = 9;
pub const m68k_reg_M68K_REG_A1: m68k_reg = 10;
pub const m68k_reg_M68K_REG_A2: m68k_reg = 11;
pub const m68k_reg_M68K_REG_A3: m68k_reg = 12;
pub const m68k_reg_M68K_REG_A4: m68k_reg = 13;
pub const m68k_reg_M68K_REG_A5: m68k_reg = 14;
pub const m68k_reg_M68K_REG_A6: m68k_reg = 15;
pub const m68k_reg_M68K_REG_A7: m68k_reg = 16;
pub const m68k_reg_M68K_REG_FP0: m68k_reg = 17;
pub const m68k_reg_M68K_REG_FP1: m68k_reg = 18;
pub const m68k_reg_M68K_REG_FP2: m68k_reg = 19;
pub const m68k_reg_M68K_REG_FP3: m68k_reg = 20;
pub const m68k_reg_M68K_REG_FP4: m68k_reg = 21;
pub const m68k_reg_M68K_REG_FP5: m68k_reg = 22;
pub const m68k_reg_M68K_REG_FP6: m68k_reg = 23;
pub const m68k_reg_M68K_REG_FP7: m68k_reg = 24;
pub const m68k_reg_M68K_REG_PC: m68k_reg = 25;
pub const m68k_reg_M68K_REG_SR: m68k_reg = 26;
pub const m68k_reg_M68K_REG_CCR: m68k_reg = 27;
pub const m68k_reg_M68K_REG_SFC: m68k_reg = 28;
pub const m68k_reg_M68K_REG_DFC: m68k_reg = 29;
pub const m68k_reg_M68K_REG_USP: m68k_reg = 30;
pub const m68k_reg_M68K_REG_VBR: m68k_reg = 31;
pub const m68k_reg_M68K_REG_CACR: m68k_reg = 32;
pub const m68k_reg_M68K_REG_CAAR: m68k_reg = 33;
pub const m68k_reg_M68K_REG_MSP: m68k_reg = 34;
pub const m68k_reg_M68K_REG_ISP: m68k_reg = 35;
pub const m68k_reg_M68K_REG_TC: m68k_reg = 36;
pub const m68k_reg_M68K_REG_ITT0: m68k_reg = 37;
pub const m68k_reg_M68K_REG_ITT1: m68k_reg = 38;
pub const m68k_reg_M68K_REG_DTT0: m68k_reg = 39;
pub const m68k_reg_M68K_REG_DTT1: m68k_reg = 40;
pub const m68k_reg_M68K_REG_MMUSR: m68k_reg = 41;
pub const m68k_reg_M68K_REG_URP: m68k_reg = 42;
pub const m68k_reg_M68K_REG_SRP: m68k_reg = 43;
pub const m68k_reg_M68K_REG_FPCR: m68k_reg = 44;
pub const m68k_reg_M68K_REG_FPSR: m68k_reg = 45;
pub const m68k_reg_M68K_REG_FPIAR: m68k_reg = 46;
pub const m68k_reg_M68K_REG_ENDING: m68k_reg = 47;
pub type m68k_reg = ::core::ffi::c_uint;
pub const m68k_address_mode_M68K_AM_NONE: m68k_address_mode = 0;
pub const m68k_address_mode_M68K_AM_REG_DIRECT_DATA: m68k_address_mode = 1;
pub const m68k_address_mode_M68K_AM_REG_DIRECT_ADDR: m68k_address_mode = 2;
pub const m68k_address_mode_M68K_AM_REGI_ADDR: m68k_address_mode = 3;
pub const m68k_address_mode_M68K_AM_REGI_ADDR_POST_INC: m68k_address_mode = 4;
pub const m68k_address_mode_M68K_AM_REGI_ADDR_PRE_DEC: m68k_address_mode = 5;
pub const m68k_address_mode_M68K_AM_REGI_ADDR_DISP: m68k_address_mode = 6;
pub const m68k_address_mode_M68K_AM_AREGI_INDEX_8_BIT_DISP: m68k_address_mode = 7;
pub const m68k_address_mode_M68K_AM_AREGI_INDEX_BASE_DISP: m68k_address_mode = 8;
pub const m68k_address_mode_M68K_AM_MEMI_POST_INDEX: m68k_address_mode = 9;
pub const m68k_address_mode_M68K_AM_MEMI_PRE_INDEX: m68k_address_mode = 10;
pub const m68k_address_mode_M68K_AM_PCI_DISP: m68k_address_mode = 11;
pub const m68k_address_mode_M68K_AM_PCI_INDEX_8_BIT_DISP: m68k_address_mode = 12;
pub const m68k_address_mode_M68K_AM_PCI_INDEX_BASE_DISP: m68k_address_mode = 13;
pub const m68k_address_mode_M68K_AM_PC_MEMI_POST_INDEX: m68k_address_mode = 14;
pub const m68k_address_mode_M68K_AM_PC_MEMI_PRE_INDEX: m68k_address_mode = 15;
pub const m68k_address_mode_M68K_AM_ABSOLUTE_DATA_SHORT: m68k_address_mode = 16;
pub const m68k_address_mode_M68K_AM_ABSOLUTE_DATA_LONG: m68k_address_mode = 17;
pub const m68k_address_mode_M68K_AM_IMMEDIATE: m68k_address_mode = 18;
pub const m68k_address_mode_M68K_AM_BRANCH_DISPLACEMENT: m68k_address_mode = 19;
pub type m68k_address_mode = ::core::ffi::c_uint;
pub const m68k_op_type_M68K_OP_INVALID: m68k_op_type = 0;
pub const m68k_op_type_M68K_OP_REG: m68k_op_type = 1;
pub const m68k_op_type_M68K_OP_IMM: m68k_op_type = 2;
pub const m68k_op_type_M68K_OP_MEM: m68k_op_type = 3;
pub const m68k_op_type_M68K_OP_FP_SINGLE: m68k_op_type = 4;
pub const m68k_op_type_M68K_OP_FP_DOUBLE: m68k_op_type = 5;
pub const m68k_op_type_M68K_OP_REG_BITS: m68k_op_type = 6;
pub const m68k_op_type_M68K_OP_REG_PAIR: m68k_op_type = 7;
pub const m68k_op_type_M68K_OP_BR_DISP: m68k_op_type = 8;
pub type m68k_op_type = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m68k_op_mem {
    pub base_reg: m68k_reg,
    pub index_reg: m68k_reg,
    pub in_base_reg: m68k_reg,
    pub in_disp: u32,
    pub out_disp: u32,
    pub disp: i16,
    pub scale: u8,
    pub bitfield: u8,
    pub width: u8,
    pub offset: u8,
    pub index_size: u8,
}
pub const m68k_op_br_disp_size_M68K_OP_BR_DISP_SIZE_INVALID: m68k_op_br_disp_size = 0;
pub const m68k_op_br_disp_size_M68K_OP_BR_DISP_SIZE_BYTE: m68k_op_br_disp_size = 1;
pub const m68k_op_br_disp_size_M68K_OP_BR_DISP_SIZE_WORD: m68k_op_br_disp_size = 2;
pub const m68k_op_br_disp_size_M68K_OP_BR_DISP_SIZE_LONG: m68k_op_br_disp_size = 4;
pub type m68k_op_br_disp_size = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m68k_op_br_disp {
    pub disp: i32,
    pub disp_size: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cs_m68k_op_reg_pair {
    pub reg_0: m68k_reg,
    pub reg_1: m68k_reg,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_m68k_op {
    pub __bindgen_anon_1: cs_m68k_op__bindgen_ty_1,
    pub mem: m68k_op_mem,
    pub br_disp: m68k_op_br_disp,
    pub register_bits: u32,
    pub type_: m68k_op_type,
    pub address_mode: m68k_address_mode,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_m68k_op__bindgen_ty_1 {
    pub imm: u64,
    pub dimm: f64,
    pub simm: f32,
    pub reg: m68k_reg,
    pub reg_pair: cs_m68k_op_reg_pair,
}
pub const m68k_cpu_size_M68K_CPU_SIZE_NONE: m68k_cpu_size = 0;
pub const m68k_cpu_size_M68K_CPU_SIZE_BYTE: m68k_cpu_size = 1;
pub const m68k_cpu_size_M68K_CPU_SIZE_WORD: m68k_cpu_size = 2;
pub const m68k_cpu_size_M68K_CPU_SIZE_LONG: m68k_cpu_size = 4;
pub type m68k_cpu_size = ::core::ffi::c_uint;
pub const m68k_fpu_size_M68K_FPU_SIZE_NONE: m68k_fpu_size = 0;
pub const m68k_fpu_size_M68K_FPU_SIZE_SINGLE: m68k_fpu_size = 4;
pub const m68k_fpu_size_M68K_FPU_SIZE_DOUBLE: m68k_fpu_size = 8;
pub const m68k_fpu_size_M68K_FPU_SIZE_EXTENDED: m68k_fpu_size = 12;
pub type m68k_fpu_size = ::core::ffi::c_uint;
pub const m68k_size_type_M68K_SIZE_TYPE_INVALID: m68k_size_type = 0;
pub const m68k_size_type_M68K_SIZE_TYPE_CPU: m68k_size_type = 1;
pub const m68k_size_type_M68K_SIZE_TYPE_FPU: m68k_size_type = 2;
pub type m68k_size_type = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct m68k_op_size {
    pub type_: m68k_size_type,
    pub __bindgen_anon_1: m68k_op_size__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union m68k_op_size__bindgen_ty_1 {
    pub cpu_size: m68k_cpu_size,
    pub fpu_size: m68k_fpu_size,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_m68k {
    pub operands: [cs_m68k_op; 4usize],
    pub op_size: m68k_op_size,
    pub op_count: u8,
}
pub const m68k_insn_M68K_INS_INVALID: m68k_insn = 0;
pub const m68k_insn_M68K_INS_ABCD: m68k_insn = 1;
pub const m68k_insn_M68K_INS_ADD: m68k_insn = 2;
pub const m68k_insn_M68K_INS_ADDA: m68k_insn = 3;
pub const m68k_insn_M68K_INS_ADDI: m68k_insn = 4;
pub const m68k_insn_M68K_INS_ADDQ: m68k_insn = 5;
pub const m68k_insn_M68K_INS_ADDX: m68k_insn = 6;
pub const m68k_insn_M68K_INS_AND: m68k_insn = 7;
pub const m68k_insn_M68K_INS_ANDI: m68k_insn = 8;
pub const m68k_insn_M68K_INS_ASL: m68k_insn = 9;
pub const m68k_insn_M68K_INS_ASR: m68k_insn = 10;
pub const m68k_insn_M68K_INS_BHS: m68k_insn = 11;
pub const m68k_insn_M68K_INS_BLO: m68k_insn = 12;
pub const m68k_insn_M68K_INS_BHI: m68k_insn = 13;
pub const m68k_insn_M68K_INS_BLS: m68k_insn = 14;
pub const m68k_insn_M68K_INS_BCC: m68k_insn = 15;
pub const m68k_insn_M68K_INS_BCS: m68k_insn = 16;
pub const m68k_insn_M68K_INS_BNE: m68k_insn = 17;
pub const m68k_insn_M68K_INS_BEQ: m68k_insn = 18;
pub const m68k_insn_M68K_INS_BVC: m68k_insn = 19;
pub const m68k_insn_M68K_INS_BVS: m68k_insn = 20;
pub const m68k_insn_M68K_INS_BPL: m68k_insn = 21;
pub const m68k_insn_M68K_INS_BMI: m68k_insn = 22;
pub const m68k_insn_M68K_INS_BGE: m68k_insn = 23;
pub const m68k_insn_M68K_INS_BLT: m68k_insn = 24;
pub const m68k_insn_M68K_INS_BGT: m68k_insn = 25;
pub const m68k_insn_M68K_INS_BLE: m68k_insn = 26;
pub const m68k_insn_M68K_INS_BRA: m68k_insn = 27;
pub const m68k_insn_M68K_INS_BSR: m68k_insn = 28;
pub const m68k_insn_M68K_INS_BCHG: m68k_insn = 29;
pub const m68k_insn_M68K_INS_BCLR: m68k_insn = 30;
pub const m68k_insn_M68K_INS_BSET: m68k_insn = 31;
pub const m68k_insn_M68K_INS_BTST: m68k_insn = 32;
pub const m68k_insn_M68K_INS_BFCHG: m68k_insn = 33;
pub const m68k_insn_M68K_INS_BFCLR: m68k_insn = 34;
pub const m68k_insn_M68K_INS_BFEXTS: m68k_insn = 35;
pub const m68k_insn_M68K_INS_BFEXTU: m68k_insn = 36;
pub const m68k_insn_M68K_INS_BFFFO: m68k_insn = 37;
pub const m68k_insn_M68K_INS_BFINS: m68k_insn = 38;
pub const m68k_insn_M68K_INS_BFSET: m68k_insn = 39;
pub const m68k_insn_M68K_INS_BFTST: m68k_insn = 40;
pub const m68k_insn_M68K_INS_BKPT: m68k_insn = 41;
pub const m68k_insn_M68K_INS_CALLM: m68k_insn = 42;
pub const m68k_insn_M68K_INS_CAS: m68k_insn = 43;
pub const m68k_insn_M68K_INS_CAS2: m68k_insn = 44;
pub const m68k_insn_M68K_INS_CHK: m68k_insn = 45;
pub const m68k_insn_M68K_INS_CHK2: m68k_insn = 46;
pub const m68k_insn_M68K_INS_CLR: m68k_insn = 47;
pub const m68k_insn_M68K_INS_CMP: m68k_insn = 48;
pub const m68k_insn_M68K_INS_CMPA: m68k_insn = 49;
pub const m68k_insn_M68K_INS_CMPI: m68k_insn = 50;
pub const m68k_insn_M68K_INS_CMPM: m68k_insn = 51;
pub const m68k_insn_M68K_INS_CMP2: m68k_insn = 52;
pub const m68k_insn_M68K_INS_CINVL: m68k_insn = 53;
pub const m68k_insn_M68K_INS_CINVP: m68k_insn = 54;
pub const m68k_insn_M68K_INS_CINVA: m68k_insn = 55;
pub const m68k_insn_M68K_INS_CPUSHL: m68k_insn = 56;
pub const m68k_insn_M68K_INS_CPUSHP: m68k_insn = 57;
pub const m68k_insn_M68K_INS_CPUSHA: m68k_insn = 58;
pub const m68k_insn_M68K_INS_DBT: m68k_insn = 59;
pub const m68k_insn_M68K_INS_DBF: m68k_insn = 60;
pub const m68k_insn_M68K_INS_DBHI: m68k_insn = 61;
pub const m68k_insn_M68K_INS_DBLS: m68k_insn = 62;
pub const m68k_insn_M68K_INS_DBCC: m68k_insn = 63;
pub const m68k_insn_M68K_INS_DBCS: m68k_insn = 64;
pub const m68k_insn_M68K_INS_DBNE: m68k_insn = 65;
pub const m68k_insn_M68K_INS_DBEQ: m68k_insn = 66;
pub const m68k_insn_M68K_INS_DBVC: m68k_insn = 67;
pub const m68k_insn_M68K_INS_DBVS: m68k_insn = 68;
pub const m68k_insn_M68K_INS_DBPL: m68k_insn = 69;
pub const m68k_insn_M68K_INS_DBMI: m68k_insn = 70;
pub const m68k_insn_M68K_INS_DBGE: m68k_insn = 71;
pub const m68k_insn_M68K_INS_DBLT: m68k_insn = 72;
pub const m68k_insn_M68K_INS_DBGT: m68k_insn = 73;
pub const m68k_insn_M68K_INS_DBLE: m68k_insn = 74;
pub const m68k_insn_M68K_INS_DBRA: m68k_insn = 75;
pub const m68k_insn_M68K_INS_DIVS: m68k_insn = 76;
pub const m68k_insn_M68K_INS_DIVSL: m68k_insn = 77;
pub const m68k_insn_M68K_INS_DIVU: m68k_insn = 78;
pub const m68k_insn_M68K_INS_DIVUL: m68k_insn = 79;
pub const m68k_insn_M68K_INS_EOR: m68k_insn = 80;
pub const m68k_insn_M68K_INS_EORI: m68k_insn = 81;
pub const m68k_insn_M68K_INS_EXG: m68k_insn = 82;
pub const m68k_insn_M68K_INS_EXT: m68k_insn = 83;
pub const m68k_insn_M68K_INS_EXTB: m68k_insn = 84;
pub const m68k_insn_M68K_INS_FABS: m68k_insn = 85;
pub const m68k_insn_M68K_INS_FSABS: m68k_insn = 86;
pub const m68k_insn_M68K_INS_FDABS: m68k_insn = 87;
pub const m68k_insn_M68K_INS_FACOS: m68k_insn = 88;
pub const m68k_insn_M68K_INS_FADD: m68k_insn = 89;
pub const m68k_insn_M68K_INS_FSADD: m68k_insn = 90;
pub const m68k_insn_M68K_INS_FDADD: m68k_insn = 91;
pub const m68k_insn_M68K_INS_FASIN: m68k_insn = 92;
pub const m68k_insn_M68K_INS_FATAN: m68k_insn = 93;
pub const m68k_insn_M68K_INS_FATANH: m68k_insn = 94;
pub const m68k_insn_M68K_INS_FBF: m68k_insn = 95;
pub const m68k_insn_M68K_INS_FBEQ: m68k_insn = 96;
pub const m68k_insn_M68K_INS_FBOGT: m68k_insn = 97;
pub const m68k_insn_M68K_INS_FBOGE: m68k_insn = 98;
pub const m68k_insn_M68K_INS_FBOLT: m68k_insn = 99;
pub const m68k_insn_M68K_INS_FBOLE: m68k_insn = 100;
pub const m68k_insn_M68K_INS_FBOGL: m68k_insn = 101;
pub const m68k_insn_M68K_INS_FBOR: m68k_insn = 102;
pub const m68k_insn_M68K_INS_FBUN: m68k_insn = 103;
pub const m68k_insn_M68K_INS_FBUEQ: m68k_insn = 104;
pub const m68k_insn_M68K_INS_FBUGT: m68k_insn = 105;
pub const m68k_insn_M68K_INS_FBUGE: m68k_insn = 106;
pub const m68k_insn_M68K_INS_FBULT: m68k_insn = 107;
pub const m68k_insn_M68K_INS_FBULE: m68k_insn = 108;
pub const m68k_insn_M68K_INS_FBNE: m68k_insn = 109;
pub const m68k_insn_M68K_INS_FBT: m68k_insn = 110;
pub const m68k_insn_M68K_INS_FBSF: m68k_insn = 111;
pub const m68k_insn_M68K_INS_FBSEQ: m68k_insn = 112;
pub const m68k_insn_M68K_INS_FBGT: m68k_insn = 113;
pub const m68k_insn_M68K_INS_FBGE: m68k_insn = 114;
pub const m68k_insn_M68K_INS_FBLT: m68k_insn = 115;
pub const m68k_insn_M68K_INS_FBLE: m68k_insn = 116;
pub const m68k_insn_M68K_INS_FBGL: m68k_insn = 117;
pub const m68k_insn_M68K_INS_FBGLE: m68k_insn = 118;
pub const m68k_insn_M68K_INS_FBNGLE: m68k_insn = 119;
pub const m68k_insn_M68K_INS_FBNGL: m68k_insn = 120;
pub const m68k_insn_M68K_INS_FBNLE: m68k_insn = 121;
pub const m68k_insn_M68K_INS_FBNLT: m68k_insn = 122;
pub const m68k_insn_M68K_INS_FBNGE: m68k_insn = 123;
pub const m68k_insn_M68K_INS_FBNGT: m68k_insn = 124;
pub const m68k_insn_M68K_INS_FBSNE: m68k_insn = 125;
pub const m68k_insn_M68K_INS_FBST: m68k_insn = 126;
pub const m68k_insn_M68K_INS_FCMP: m68k_insn = 127;
pub const m68k_insn_M68K_INS_FCOS: m68k_insn = 128;
pub const m68k_insn_M68K_INS_FCOSH: m68k_insn = 129;
pub const m68k_insn_M68K_INS_FDBF: m68k_insn = 130;
pub const m68k_insn_M68K_INS_FDBEQ: m68k_insn = 131;
pub const m68k_insn_M68K_INS_FDBOGT: m68k_insn = 132;
pub const m68k_insn_M68K_INS_FDBOGE: m68k_insn = 133;
pub const m68k_insn_M68K_INS_FDBOLT: m68k_insn = 134;
pub const m68k_insn_M68K_INS_FDBOLE: m68k_insn = 135;
pub const m68k_insn_M68K_INS_FDBOGL: m68k_insn = 136;
pub const m68k_insn_M68K_INS_FDBOR: m68k_insn = 137;
pub const m68k_insn_M68K_INS_FDBUN: m68k_insn = 138;
pub const m68k_insn_M68K_INS_FDBUEQ: m68k_insn = 139;
pub const m68k_insn_M68K_INS_FDBUGT: m68k_insn = 140;
pub const m68k_insn_M68K_INS_FDBUGE: m68k_insn = 141;
pub const m68k_insn_M68K_INS_FDBULT: m68k_insn = 142;
pub const m68k_insn_M68K_INS_FDBULE: m68k_insn = 143;
pub const m68k_insn_M68K_INS_FDBNE: m68k_insn = 144;
pub const m68k_insn_M68K_INS_FDBT: m68k_insn = 145;
pub const m68k_insn_M68K_INS_FDBSF: m68k_insn = 146;
pub const m68k_insn_M68K_INS_FDBSEQ: m68k_insn = 147;
pub const m68k_insn_M68K_INS_FDBGT: m68k_insn = 148;
pub const m68k_insn_M68K_INS_FDBGE: m68k_insn = 149;
pub const m68k_insn_M68K_INS_FDBLT: m68k_insn = 150;
pub const m68k_insn_M68K_INS_FDBLE: m68k_insn = 151;
pub const m68k_insn_M68K_INS_FDBGL: m68k_insn = 152;
pub const m68k_insn_M68K_INS_FDBGLE: m68k_insn = 153;
pub const m68k_insn_M68K_INS_FDBNGLE: m68k_insn = 154;
pub const m68k_insn_M68K_INS_FDBNGL: m68k_insn = 155;
pub const m68k_insn_M68K_INS_FDBNLE: m68k_insn = 156;
pub const m68k_insn_M68K_INS_FDBNLT: m68k_insn = 157;
pub const m68k_insn_M68K_INS_FDBNGE: m68k_insn = 158;
pub const m68k_insn_M68K_INS_FDBNGT: m68k_insn = 159;
pub const m68k_insn_M68K_INS_FDBSNE: m68k_insn = 160;
pub const m68k_insn_M68K_INS_FDBST: m68k_insn = 161;
pub const m68k_insn_M68K_INS_FDIV: m68k_insn = 162;
pub const m68k_insn_M68K_INS_FSDIV: m68k_insn = 163;
pub const m68k_insn_M68K_INS_FDDIV: m68k_insn = 164;
pub const m68k_insn_M68K_INS_FETOX: m68k_insn = 165;
pub const m68k_insn_M68K_INS_FETOXM1: m68k_insn = 166;
pub const m68k_insn_M68K_INS_FGETEXP: m68k_insn = 167;
pub const m68k_insn_M68K_INS_FGETMAN: m68k_insn = 168;
pub const m68k_insn_M68K_INS_FINT: m68k_insn = 169;
pub const m68k_insn_M68K_INS_FINTRZ: m68k_insn = 170;
pub const m68k_insn_M68K_INS_FLOG10: m68k_insn = 171;
pub const m68k_insn_M68K_INS_FLOG2: m68k_insn = 172;
pub const m68k_insn_M68K_INS_FLOGN: m68k_insn = 173;
pub const m68k_insn_M68K_INS_FLOGNP1: m68k_insn = 174;
pub const m68k_insn_M68K_INS_FMOD: m68k_insn = 175;
pub const m68k_insn_M68K_INS_FMOVE: m68k_insn = 176;
pub const m68k_insn_M68K_INS_FSMOVE: m68k_insn = 177;
pub const m68k_insn_M68K_INS_FDMOVE: m68k_insn = 178;
pub const m68k_insn_M68K_INS_FMOVECR: m68k_insn = 179;
pub const m68k_insn_M68K_INS_FMOVEM: m68k_insn = 180;
pub const m68k_insn_M68K_INS_FMUL: m68k_insn = 181;
pub const m68k_insn_M68K_INS_FSMUL: m68k_insn = 182;
pub const m68k_insn_M68K_INS_FDMUL: m68k_insn = 183;
pub const m68k_insn_M68K_INS_FNEG: m68k_insn = 184;
pub const m68k_insn_M68K_INS_FSNEG: m68k_insn = 185;
pub const m68k_insn_M68K_INS_FDNEG: m68k_insn = 186;
pub const m68k_insn_M68K_INS_FNOP: m68k_insn = 187;
pub const m68k_insn_M68K_INS_FREM: m68k_insn = 188;
pub const m68k_insn_M68K_INS_FRESTORE: m68k_insn = 189;
pub const m68k_insn_M68K_INS_FSAVE: m68k_insn = 190;
pub const m68k_insn_M68K_INS_FSCALE: m68k_insn = 191;
pub const m68k_insn_M68K_INS_FSGLDIV: m68k_insn = 192;
pub const m68k_insn_M68K_INS_FSGLMUL: m68k_insn = 193;
pub const m68k_insn_M68K_INS_FSIN: m68k_insn = 194;
pub const m68k_insn_M68K_INS_FSINCOS: m68k_insn = 195;
pub const m68k_insn_M68K_INS_FSINH: m68k_insn = 196;
pub const m68k_insn_M68K_INS_FSQRT: m68k_insn = 197;
pub const m68k_insn_M68K_INS_FSSQRT: m68k_insn = 198;
pub const m68k_insn_M68K_INS_FDSQRT: m68k_insn = 199;
pub const m68k_insn_M68K_INS_FSF: m68k_insn = 200;
pub const m68k_insn_M68K_INS_FSBEQ: m68k_insn = 201;
pub const m68k_insn_M68K_INS_FSOGT: m68k_insn = 202;
pub const m68k_insn_M68K_INS_FSOGE: m68k_insn = 203;
pub const m68k_insn_M68K_INS_FSOLT: m68k_insn = 204;
pub const m68k_insn_M68K_INS_FSOLE: m68k_insn = 205;
pub const m68k_insn_M68K_INS_FSOGL: m68k_insn = 206;
pub const m68k_insn_M68K_INS_FSOR: m68k_insn = 207;
pub const m68k_insn_M68K_INS_FSUN: m68k_insn = 208;
pub const m68k_insn_M68K_INS_FSUEQ: m68k_insn = 209;
pub const m68k_insn_M68K_INS_FSUGT: m68k_insn = 210;
pub const m68k_insn_M68K_INS_FSUGE: m68k_insn = 211;
pub const m68k_insn_M68K_INS_FSULT: m68k_insn = 212;
pub const m68k_insn_M68K_INS_FSULE: m68k_insn = 213;
pub const m68k_insn_M68K_INS_FSNE: m68k_insn = 214;
pub const m68k_insn_M68K_INS_FST: m68k_insn = 215;
pub const m68k_insn_M68K_INS_FSSF: m68k_insn = 216;
pub const m68k_insn_M68K_INS_FSSEQ: m68k_insn = 217;
pub const m68k_insn_M68K_INS_FSGT: m68k_insn = 218;
pub const m68k_insn_M68K_INS_FSGE: m68k_insn = 219;
pub const m68k_insn_M68K_INS_FSLT: m68k_insn = 220;
pub const m68k_insn_M68K_INS_FSLE: m68k_insn = 221;
pub const m68k_insn_M68K_INS_FSGL: m68k_insn = 222;
pub const m68k_insn_M68K_INS_FSGLE: m68k_insn = 223;
pub const m68k_insn_M68K_INS_FSNGLE: m68k_insn = 224;
pub const m68k_insn_M68K_INS_FSNGL: m68k_insn = 225;
pub const m68k_insn_M68K_INS_FSNLE: m68k_insn = 226;
pub const m68k_insn_M68K_INS_FSNLT: m68k_insn = 227;
pub const m68k_insn_M68K_INS_FSNGE: m68k_insn = 228;
pub const m68k_insn_M68K_INS_FSNGT: m68k_insn = 229;
pub const m68k_insn_M68K_INS_FSSNE: m68k_insn = 230;
pub const m68k_insn_M68K_INS_FSST: m68k_insn = 231;
pub const m68k_insn_M68K_INS_FSUB: m68k_insn = 232;
pub const m68k_insn_M68K_INS_FSSUB: m68k_insn = 233;
pub const m68k_insn_M68K_INS_FDSUB: m68k_insn = 234;
pub const m68k_insn_M68K_INS_FTAN: m68k_insn = 235;
pub const m68k_insn_M68K_INS_FTANH: m68k_insn = 236;
pub const m68k_insn_M68K_INS_FTENTOX: m68k_insn = 237;
pub const m68k_insn_M68K_INS_FTRAPF: m68k_insn = 238;
pub const m68k_insn_M68K_INS_FTRAPEQ: m68k_insn = 239;
pub const m68k_insn_M68K_INS_FTRAPOGT: m68k_insn = 240;
pub const m68k_insn_M68K_INS_FTRAPOGE: m68k_insn = 241;
pub const m68k_insn_M68K_INS_FTRAPOLT: m68k_insn = 242;
pub const m68k_insn_M68K_INS_FTRAPOLE: m68k_insn = 243;
pub const m68k_insn_M68K_INS_FTRAPOGL: m68k_insn = 244;
pub const m68k_insn_M68K_INS_FTRAPOR: m68k_insn = 245;
pub const m68k_insn_M68K_INS_FTRAPUN: m68k_insn = 246;
pub const m68k_insn_M68K_INS_FTRAPUEQ: m68k_insn = 247;
pub const m68k_insn_M68K_INS_FTRAPUGT: m68k_insn = 248;
pub const m68k_insn_M68K_INS_FTRAPUGE: m68k_insn = 249;
pub const m68k_insn_M68K_INS_FTRAPULT: m68k_insn = 250;
pub const m68k_insn_M68K_INS_FTRAPULE: m68k_insn = 251;
pub const m68k_insn_M68K_INS_FTRAPNE: m68k_insn = 252;
pub const m68k_insn_M68K_INS_FTRAPT: m68k_insn = 253;
pub const m68k_insn_M68K_INS_FTRAPSF: m68k_insn = 254;
pub const m68k_insn_M68K_INS_FTRAPSEQ: m68k_insn = 255;
pub const m68k_insn_M68K_INS_FTRAPGT: m68k_insn = 256;
pub const m68k_insn_M68K_INS_FTRAPGE: m68k_insn = 257;
pub const m68k_insn_M68K_INS_FTRAPLT: m68k_insn = 258;
pub const m68k_insn_M68K_INS_FTRAPLE: m68k_insn = 259;
pub const m68k_insn_M68K_INS_FTRAPGL: m68k_insn = 260;
pub const m68k_insn_M68K_INS_FTRAPGLE: m68k_insn = 261;
pub const m68k_insn_M68K_INS_FTRAPNGLE: m68k_insn = 262;
pub const m68k_insn_M68K_INS_FTRAPNGL: m68k_insn = 263;
pub const m68k_insn_M68K_INS_FTRAPNLE: m68k_insn = 264;
pub const m68k_insn_M68K_INS_FTRAPNLT: m68k_insn = 265;
pub const m68k_insn_M68K_INS_FTRAPNGE: m68k_insn = 266;
pub const m68k_insn_M68K_INS_FTRAPNGT: m68k_insn = 267;
pub const m68k_insn_M68K_INS_FTRAPSNE: m68k_insn = 268;
pub const m68k_insn_M68K_INS_FTRAPST: m68k_insn = 269;
pub const m68k_insn_M68K_INS_FTST: m68k_insn = 270;
pub const m68k_insn_M68K_INS_FTWOTOX: m68k_insn = 271;
pub const m68k_insn_M68K_INS_HALT: m68k_insn = 272;
pub const m68k_insn_M68K_INS_ILLEGAL: m68k_insn = 273;
pub const m68k_insn_M68K_INS_JMP: m68k_insn = 274;
pub const m68k_insn_M68K_INS_JSR: m68k_insn = 275;
pub const m68k_insn_M68K_INS_LEA: m68k_insn = 276;
pub const m68k_insn_M68K_INS_LINK: m68k_insn = 277;
pub const m68k_insn_M68K_INS_LPSTOP: m68k_insn = 278;
pub const m68k_insn_M68K_INS_LSL: m68k_insn = 279;
pub const m68k_insn_M68K_INS_LSR: m68k_insn = 280;
pub const m68k_insn_M68K_INS_MOVE: m68k_insn = 281;
pub const m68k_insn_M68K_INS_MOVEA: m68k_insn = 282;
pub const m68k_insn_M68K_INS_MOVEC: m68k_insn = 283;
pub const m68k_insn_M68K_INS_MOVEM: m68k_insn = 284;
pub const m68k_insn_M68K_INS_MOVEP: m68k_insn = 285;
pub const m68k_insn_M68K_INS_MOVEQ: m68k_insn = 286;
pub const m68k_insn_M68K_INS_MOVES: m68k_insn = 287;
pub const m68k_insn_M68K_INS_MOVE16: m68k_insn = 288;
pub const m68k_insn_M68K_INS_MULS: m68k_insn = 289;
pub const m68k_insn_M68K_INS_MULU: m68k_insn = 290;
pub const m68k_insn_M68K_INS_NBCD: m68k_insn = 291;
pub const m68k_insn_M68K_INS_NEG: m68k_insn = 292;
pub const m68k_insn_M68K_INS_NEGX: m68k_insn = 293;
pub const m68k_insn_M68K_INS_NOP: m68k_insn = 294;
pub const m68k_insn_M68K_INS_NOT: m68k_insn = 295;
pub const m68k_insn_M68K_INS_OR: m68k_insn = 296;
pub const m68k_insn_M68K_INS_ORI: m68k_insn = 297;
pub const m68k_insn_M68K_INS_PACK: m68k_insn = 298;
pub const m68k_insn_M68K_INS_PEA: m68k_insn = 299;
pub const m68k_insn_M68K_INS_PFLUSH: m68k_insn = 300;
pub const m68k_insn_M68K_INS_PFLUSHA: m68k_insn = 301;
pub const m68k_insn_M68K_INS_PFLUSHAN: m68k_insn = 302;
pub const m68k_insn_M68K_INS_PFLUSHN: m68k_insn = 303;
pub const m68k_insn_M68K_INS_PLOADR: m68k_insn = 304;
pub const m68k_insn_M68K_INS_PLOADW: m68k_insn = 305;
pub const m68k_insn_M68K_INS_PLPAR: m68k_insn = 306;
pub const m68k_insn_M68K_INS_PLPAW: m68k_insn = 307;
pub const m68k_insn_M68K_INS_PMOVE: m68k_insn = 308;
pub const m68k_insn_M68K_INS_PMOVEFD: m68k_insn = 309;
pub const m68k_insn_M68K_INS_PTESTR: m68k_insn = 310;
pub const m68k_insn_M68K_INS_PTESTW: m68k_insn = 311;
pub const m68k_insn_M68K_INS_PULSE: m68k_insn = 312;
pub const m68k_insn_M68K_INS_REMS: m68k_insn = 313;
pub const m68k_insn_M68K_INS_REMU: m68k_insn = 314;
pub const m68k_insn_M68K_INS_RESET: m68k_insn = 315;
pub const m68k_insn_M68K_INS_ROL: m68k_insn = 316;
pub const m68k_insn_M68K_INS_ROR: m68k_insn = 317;
pub const m68k_insn_M68K_INS_ROXL: m68k_insn = 318;
pub const m68k_insn_M68K_INS_ROXR: m68k_insn = 319;
pub const m68k_insn_M68K_INS_RTD: m68k_insn = 320;
pub const m68k_insn_M68K_INS_RTE: m68k_insn = 321;
pub const m68k_insn_M68K_INS_RTM: m68k_insn = 322;
pub const m68k_insn_M68K_INS_RTR: m68k_insn = 323;
pub const m68k_insn_M68K_INS_RTS: m68k_insn = 324;
pub const m68k_insn_M68K_INS_SBCD: m68k_insn = 325;
pub const m68k_insn_M68K_INS_ST: m68k_insn = 326;
pub const m68k_insn_M68K_INS_SF: m68k_insn = 327;
pub const m68k_insn_M68K_INS_SHI: m68k_insn = 328;
pub const m68k_insn_M68K_INS_SLS: m68k_insn = 329;
pub const m68k_insn_M68K_INS_SCC: m68k_insn = 330;
pub const m68k_insn_M68K_INS_SHS: m68k_insn = 331;
pub const m68k_insn_M68K_INS_SCS: m68k_insn = 332;
pub const m68k_insn_M68K_INS_SLO: m68k_insn = 333;
pub const m68k_insn_M68K_INS_SNE: m68k_insn = 334;
pub const m68k_insn_M68K_INS_SEQ: m68k_insn = 335;
pub const m68k_insn_M68K_INS_SVC: m68k_insn = 336;
pub const m68k_insn_M68K_INS_SVS: m68k_insn = 337;
pub const m68k_insn_M68K_INS_SPL: m68k_insn = 338;
pub const m68k_insn_M68K_INS_SMI: m68k_insn = 339;
pub const m68k_insn_M68K_INS_SGE: m68k_insn = 340;
pub const m68k_insn_M68K_INS_SLT: m68k_insn = 341;
pub const m68k_insn_M68K_INS_SGT: m68k_insn = 342;
pub const m68k_insn_M68K_INS_SLE: m68k_insn = 343;
pub const m68k_insn_M68K_INS_STOP: m68k_insn = 344;
pub const m68k_insn_M68K_INS_SUB: m68k_insn = 345;
pub const m68k_insn_M68K_INS_SUBA: m68k_insn = 346;
pub const m68k_insn_M68K_INS_SUBI: m68k_insn = 347;
pub const m68k_insn_M68K_INS_SUBQ: m68k_insn = 348;
pub const m68k_insn_M68K_INS_SUBX: m68k_insn = 349;
pub const m68k_insn_M68K_INS_SWAP: m68k_insn = 350;
pub const m68k_insn_M68K_INS_TAS: m68k_insn = 351;
pub const m68k_insn_M68K_INS_TRAP: m68k_insn = 352;
pub const m68k_insn_M68K_INS_TRAPV: m68k_insn = 353;
pub const m68k_insn_M68K_INS_TRAPT: m68k_insn = 354;
pub const m68k_insn_M68K_INS_TRAPF: m68k_insn = 355;
pub const m68k_insn_M68K_INS_TRAPHI: m68k_insn = 356;
pub const m68k_insn_M68K_INS_TRAPLS: m68k_insn = 357;
pub const m68k_insn_M68K_INS_TRAPCC: m68k_insn = 358;
pub const m68k_insn_M68K_INS_TRAPHS: m68k_insn = 359;
pub const m68k_insn_M68K_INS_TRAPCS: m68k_insn = 360;
pub const m68k_insn_M68K_INS_TRAPLO: m68k_insn = 361;
pub const m68k_insn_M68K_INS_TRAPNE: m68k_insn = 362;
pub const m68k_insn_M68K_INS_TRAPEQ: m68k_insn = 363;
pub const m68k_insn_M68K_INS_TRAPVC: m68k_insn = 364;
pub const m68k_insn_M68K_INS_TRAPVS: m68k_insn = 365;
pub const m68k_insn_M68K_INS_TRAPPL: m68k_insn = 366;
pub const m68k_insn_M68K_INS_TRAPMI: m68k_insn = 367;
pub const m68k_insn_M68K_INS_TRAPGE: m68k_insn = 368;
pub const m68k_insn_M68K_INS_TRAPLT: m68k_insn = 369;
pub const m68k_insn_M68K_INS_TRAPGT: m68k_insn = 370;
pub const m68k_insn_M68K_INS_TRAPLE: m68k_insn = 371;
pub const m68k_insn_M68K_INS_TST: m68k_insn = 372;
pub const m68k_insn_M68K_INS_UNLK: m68k_insn = 373;
pub const m68k_insn_M68K_INS_UNPK: m68k_insn = 374;
pub const m68k_insn_M68K_INS_ENDING: m68k_insn = 375;
pub type m68k_insn = ::core::ffi::c_uint;
pub const m68k_group_type_M68K_GRP_INVALID: m68k_group_type = 0;
pub const m68k_group_type_M68K_GRP_JUMP: m68k_group_type = 1;
pub const m68k_group_type_M68K_GRP_RET: m68k_group_type = 3;
pub const m68k_group_type_M68K_GRP_IRET: m68k_group_type = 5;
pub const m68k_group_type_M68K_GRP_BRANCH_RELATIVE: m68k_group_type = 7;
pub const m68k_group_type_M68K_GRP_ENDING: m68k_group_type = 8;
pub type m68k_group_type = ::core::ffi::c_uint;
pub const mips_op_type_MIPS_OP_INVALID: mips_op_type = 0;
pub const mips_op_type_MIPS_OP_REG: mips_op_type = 1;
pub const mips_op_type_MIPS_OP_IMM: mips_op_type = 2;
pub const mips_op_type_MIPS_OP_MEM: mips_op_type = 3;
pub type mips_op_type = ::core::ffi::c_uint;
pub const mips_reg_MIPS_REG_INVALID: mips_reg = 0;
pub const mips_reg_MIPS_REG_PC: mips_reg = 1;
pub const mips_reg_MIPS_REG_0: mips_reg = 2;
pub const mips_reg_MIPS_REG_1: mips_reg = 3;
pub const mips_reg_MIPS_REG_2: mips_reg = 4;
pub const mips_reg_MIPS_REG_3: mips_reg = 5;
pub const mips_reg_MIPS_REG_4: mips_reg = 6;
pub const mips_reg_MIPS_REG_5: mips_reg = 7;
pub const mips_reg_MIPS_REG_6: mips_reg = 8;
pub const mips_reg_MIPS_REG_7: mips_reg = 9;
pub const mips_reg_MIPS_REG_8: mips_reg = 10;
pub const mips_reg_MIPS_REG_9: mips_reg = 11;
pub const mips_reg_MIPS_REG_10: mips_reg = 12;
pub const mips_reg_MIPS_REG_11: mips_reg = 13;
pub const mips_reg_MIPS_REG_12: mips_reg = 14;
pub const mips_reg_MIPS_REG_13: mips_reg = 15;
pub const mips_reg_MIPS_REG_14: mips_reg = 16;
pub const mips_reg_MIPS_REG_15: mips_reg = 17;
pub const mips_reg_MIPS_REG_16: mips_reg = 18;
pub const mips_reg_MIPS_REG_17: mips_reg = 19;
pub const mips_reg_MIPS_REG_18: mips_reg = 20;
pub const mips_reg_MIPS_REG_19: mips_reg = 21;
pub const mips_reg_MIPS_REG_20: mips_reg = 22;
pub const mips_reg_MIPS_REG_21: mips_reg = 23;
pub const mips_reg_MIPS_REG_22: mips_reg = 24;
pub const mips_reg_MIPS_REG_23: mips_reg = 25;
pub const mips_reg_MIPS_REG_24: mips_reg = 26;
pub const mips_reg_MIPS_REG_25: mips_reg = 27;
pub const mips_reg_MIPS_REG_26: mips_reg = 28;
pub const mips_reg_MIPS_REG_27: mips_reg = 29;
pub const mips_reg_MIPS_REG_28: mips_reg = 30;
pub const mips_reg_MIPS_REG_29: mips_reg = 31;
pub const mips_reg_MIPS_REG_30: mips_reg = 32;
pub const mips_reg_MIPS_REG_31: mips_reg = 33;
pub const mips_reg_MIPS_REG_DSPCCOND: mips_reg = 34;
pub const mips_reg_MIPS_REG_DSPCARRY: mips_reg = 35;
pub const mips_reg_MIPS_REG_DSPEFI: mips_reg = 36;
pub const mips_reg_MIPS_REG_DSPOUTFLAG: mips_reg = 37;
pub const mips_reg_MIPS_REG_DSPOUTFLAG16_19: mips_reg = 38;
pub const mips_reg_MIPS_REG_DSPOUTFLAG20: mips_reg = 39;
pub const mips_reg_MIPS_REG_DSPOUTFLAG21: mips_reg = 40;
pub const mips_reg_MIPS_REG_DSPOUTFLAG22: mips_reg = 41;
pub const mips_reg_MIPS_REG_DSPOUTFLAG23: mips_reg = 42;
pub const mips_reg_MIPS_REG_DSPPOS: mips_reg = 43;
pub const mips_reg_MIPS_REG_DSPSCOUNT: mips_reg = 44;
pub const mips_reg_MIPS_REG_AC0: mips_reg = 45;
pub const mips_reg_MIPS_REG_AC1: mips_reg = 46;
pub const mips_reg_MIPS_REG_AC2: mips_reg = 47;
pub const mips_reg_MIPS_REG_AC3: mips_reg = 48;
pub const mips_reg_MIPS_REG_CC0: mips_reg = 49;
pub const mips_reg_MIPS_REG_CC1: mips_reg = 50;
pub const mips_reg_MIPS_REG_CC2: mips_reg = 51;
pub const mips_reg_MIPS_REG_CC3: mips_reg = 52;
pub const mips_reg_MIPS_REG_CC4: mips_reg = 53;
pub const mips_reg_MIPS_REG_CC5: mips_reg = 54;
pub const mips_reg_MIPS_REG_CC6: mips_reg = 55;
pub const mips_reg_MIPS_REG_CC7: mips_reg = 56;
pub const mips_reg_MIPS_REG_F0: mips_reg = 57;
pub const mips_reg_MIPS_REG_F1: mips_reg = 58;
pub const mips_reg_MIPS_REG_F2: mips_reg = 59;
pub const mips_reg_MIPS_REG_F3: mips_reg = 60;
pub const mips_reg_MIPS_REG_F4: mips_reg = 61;
pub const mips_reg_MIPS_REG_F5: mips_reg = 62;
pub const mips_reg_MIPS_REG_F6: mips_reg = 63;
pub const mips_reg_MIPS_REG_F7: mips_reg = 64;
pub const mips_reg_MIPS_REG_F8: mips_reg = 65;
pub const mips_reg_MIPS_REG_F9: mips_reg = 66;
pub const mips_reg_MIPS_REG_F10: mips_reg = 67;
pub const mips_reg_MIPS_REG_F11: mips_reg = 68;
pub const mips_reg_MIPS_REG_F12: mips_reg = 69;
pub const mips_reg_MIPS_REG_F13: mips_reg = 70;
pub const mips_reg_MIPS_REG_F14: mips_reg = 71;
pub const mips_reg_MIPS_REG_F15: mips_reg = 72;
pub const mips_reg_MIPS_REG_F16: mips_reg = 73;
pub const mips_reg_MIPS_REG_F17: mips_reg = 74;
pub const mips_reg_MIPS_REG_F18: mips_reg = 75;
pub const mips_reg_MIPS_REG_F19: mips_reg = 76;
pub const mips_reg_MIPS_REG_F20: mips_reg = 77;
pub const mips_reg_MIPS_REG_F21: mips_reg = 78;
pub const mips_reg_MIPS_REG_F22: mips_reg = 79;
pub const mips_reg_MIPS_REG_F23: mips_reg = 80;
pub const mips_reg_MIPS_REG_F24: mips_reg = 81;
pub const mips_reg_MIPS_REG_F25: mips_reg = 82;
pub const mips_reg_MIPS_REG_F26: mips_reg = 83;
pub const mips_reg_MIPS_REG_F27: mips_reg = 84;
pub const mips_reg_MIPS_REG_F28: mips_reg = 85;
pub const mips_reg_MIPS_REG_F29: mips_reg = 86;
pub const mips_reg_MIPS_REG_F30: mips_reg = 87;
pub const mips_reg_MIPS_REG_F31: mips_reg = 88;
pub const mips_reg_MIPS_REG_FCC0: mips_reg = 89;
pub const mips_reg_MIPS_REG_FCC1: mips_reg = 90;
pub const mips_reg_MIPS_REG_FCC2: mips_reg = 91;
pub const mips_reg_MIPS_REG_FCC3: mips_reg = 92;
pub const mips_reg_MIPS_REG_FCC4: mips_reg = 93;
pub const mips_reg_MIPS_REG_FCC5: mips_reg = 94;
pub const mips_reg_MIPS_REG_FCC6: mips_reg = 95;
pub const mips_reg_MIPS_REG_FCC7: mips_reg = 96;
pub const mips_reg_MIPS_REG_W0: mips_reg = 97;
pub const mips_reg_MIPS_REG_W1: mips_reg = 98;
pub const mips_reg_MIPS_REG_W2: mips_reg = 99;
pub const mips_reg_MIPS_REG_W3: mips_reg = 100;
pub const mips_reg_MIPS_REG_W4: mips_reg = 101;
pub const mips_reg_MIPS_REG_W5: mips_reg = 102;
pub const mips_reg_MIPS_REG_W6: mips_reg = 103;
pub const mips_reg_MIPS_REG_W7: mips_reg = 104;
pub const mips_reg_MIPS_REG_W8: mips_reg = 105;
pub const mips_reg_MIPS_REG_W9: mips_reg = 106;
pub const mips_reg_MIPS_REG_W10: mips_reg = 107;
pub const mips_reg_MIPS_REG_W11: mips_reg = 108;
pub const mips_reg_MIPS_REG_W12: mips_reg = 109;
pub const mips_reg_MIPS_REG_W13: mips_reg = 110;
pub const mips_reg_MIPS_REG_W14: mips_reg = 111;
pub const mips_reg_MIPS_REG_W15: mips_reg = 112;
pub const mips_reg_MIPS_REG_W16: mips_reg = 113;
pub const mips_reg_MIPS_REG_W17: mips_reg = 114;
pub const mips_reg_MIPS_REG_W18: mips_reg = 115;
pub const mips_reg_MIPS_REG_W19: mips_reg = 116;
pub const mips_reg_MIPS_REG_W20: mips_reg = 117;
pub const mips_reg_MIPS_REG_W21: mips_reg = 118;
pub const mips_reg_MIPS_REG_W22: mips_reg = 119;
pub const mips_reg_MIPS_REG_W23: mips_reg = 120;
pub const mips_reg_MIPS_REG_W24: mips_reg = 121;
pub const mips_reg_MIPS_REG_W25: mips_reg = 122;
pub const mips_reg_MIPS_REG_W26: mips_reg = 123;
pub const mips_reg_MIPS_REG_W27: mips_reg = 124;
pub const mips_reg_MIPS_REG_W28: mips_reg = 125;
pub const mips_reg_MIPS_REG_W29: mips_reg = 126;
pub const mips_reg_MIPS_REG_W30: mips_reg = 127;
pub const mips_reg_MIPS_REG_W31: mips_reg = 128;
pub const mips_reg_MIPS_REG_HI: mips_reg = 129;
pub const mips_reg_MIPS_REG_LO: mips_reg = 130;
pub const mips_reg_MIPS_REG_P0: mips_reg = 131;
pub const mips_reg_MIPS_REG_P1: mips_reg = 132;
pub const mips_reg_MIPS_REG_P2: mips_reg = 133;
pub const mips_reg_MIPS_REG_MPL0: mips_reg = 134;
pub const mips_reg_MIPS_REG_MPL1: mips_reg = 135;
pub const mips_reg_MIPS_REG_MPL2: mips_reg = 136;
pub const mips_reg_MIPS_REG_ENDING: mips_reg = 137;
pub const mips_reg_MIPS_REG_ZERO: mips_reg = 2;
pub const mips_reg_MIPS_REG_AT: mips_reg = 3;
pub const mips_reg_MIPS_REG_V0: mips_reg = 4;
pub const mips_reg_MIPS_REG_V1: mips_reg = 5;
pub const mips_reg_MIPS_REG_A0: mips_reg = 6;
pub const mips_reg_MIPS_REG_A1: mips_reg = 7;
pub const mips_reg_MIPS_REG_A2: mips_reg = 8;
pub const mips_reg_MIPS_REG_A3: mips_reg = 9;
pub const mips_reg_MIPS_REG_T0: mips_reg = 10;
pub const mips_reg_MIPS_REG_T1: mips_reg = 11;
pub const mips_reg_MIPS_REG_T2: mips_reg = 12;
pub const mips_reg_MIPS_REG_T3: mips_reg = 13;
pub const mips_reg_MIPS_REG_T4: mips_reg = 14;
pub const mips_reg_MIPS_REG_T5: mips_reg = 15;
pub const mips_reg_MIPS_REG_T6: mips_reg = 16;
pub const mips_reg_MIPS_REG_T7: mips_reg = 17;
pub const mips_reg_MIPS_REG_S0: mips_reg = 18;
pub const mips_reg_MIPS_REG_S1: mips_reg = 19;
pub const mips_reg_MIPS_REG_S2: mips_reg = 20;
pub const mips_reg_MIPS_REG_S3: mips_reg = 21;
pub const mips_reg_MIPS_REG_S4: mips_reg = 22;
pub const mips_reg_MIPS_REG_S5: mips_reg = 23;
pub const mips_reg_MIPS_REG_S6: mips_reg = 24;
pub const mips_reg_MIPS_REG_S7: mips_reg = 25;
pub const mips_reg_MIPS_REG_T8: mips_reg = 26;
pub const mips_reg_MIPS_REG_T9: mips_reg = 27;
pub const mips_reg_MIPS_REG_K0: mips_reg = 28;
pub const mips_reg_MIPS_REG_K1: mips_reg = 29;
pub const mips_reg_MIPS_REG_GP: mips_reg = 30;
pub const mips_reg_MIPS_REG_SP: mips_reg = 31;
pub const mips_reg_MIPS_REG_FP: mips_reg = 32;
pub const mips_reg_MIPS_REG_S8: mips_reg = 32;
pub const mips_reg_MIPS_REG_RA: mips_reg = 33;
pub const mips_reg_MIPS_REG_HI0: mips_reg = 45;
pub const mips_reg_MIPS_REG_HI1: mips_reg = 46;
pub const mips_reg_MIPS_REG_HI2: mips_reg = 47;
pub const mips_reg_MIPS_REG_HI3: mips_reg = 48;
pub const mips_reg_MIPS_REG_LO0: mips_reg = 45;
pub const mips_reg_MIPS_REG_LO1: mips_reg = 46;
pub const mips_reg_MIPS_REG_LO2: mips_reg = 47;
pub const mips_reg_MIPS_REG_LO3: mips_reg = 48;
pub type mips_reg = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mips_op_mem {
    pub base: mips_reg,
    pub disp: i64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_mips_op {
    pub type_: mips_op_type,
    pub __bindgen_anon_1: cs_mips_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_mips_op__bindgen_ty_1 {
    pub reg: mips_reg,
    pub imm: i64,
    pub mem: mips_op_mem,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_mips {
    pub op_count: u8,
    pub operands: [cs_mips_op; 10usize],
}
pub const mips_insn_MIPS_INS_INVALID: mips_insn = 0;
pub const mips_insn_MIPS_INS_ABSQ_S: mips_insn = 1;
pub const mips_insn_MIPS_INS_ADD: mips_insn = 2;
pub const mips_insn_MIPS_INS_ADDIUPC: mips_insn = 3;
pub const mips_insn_MIPS_INS_ADDIUR1SP: mips_insn = 4;
pub const mips_insn_MIPS_INS_ADDIUR2: mips_insn = 5;
pub const mips_insn_MIPS_INS_ADDIUS5: mips_insn = 6;
pub const mips_insn_MIPS_INS_ADDIUSP: mips_insn = 7;
pub const mips_insn_MIPS_INS_ADDQH: mips_insn = 8;
pub const mips_insn_MIPS_INS_ADDQH_R: mips_insn = 9;
pub const mips_insn_MIPS_INS_ADDQ: mips_insn = 10;
pub const mips_insn_MIPS_INS_ADDQ_S: mips_insn = 11;
pub const mips_insn_MIPS_INS_ADDSC: mips_insn = 12;
pub const mips_insn_MIPS_INS_ADDS_A: mips_insn = 13;
pub const mips_insn_MIPS_INS_ADDS_S: mips_insn = 14;
pub const mips_insn_MIPS_INS_ADDS_U: mips_insn = 15;
pub const mips_insn_MIPS_INS_ADDU16: mips_insn = 16;
pub const mips_insn_MIPS_INS_ADDUH: mips_insn = 17;
pub const mips_insn_MIPS_INS_ADDUH_R: mips_insn = 18;
pub const mips_insn_MIPS_INS_ADDU: mips_insn = 19;
pub const mips_insn_MIPS_INS_ADDU_S: mips_insn = 20;
pub const mips_insn_MIPS_INS_ADDVI: mips_insn = 21;
pub const mips_insn_MIPS_INS_ADDV: mips_insn = 22;
pub const mips_insn_MIPS_INS_ADDWC: mips_insn = 23;
pub const mips_insn_MIPS_INS_ADD_A: mips_insn = 24;
pub const mips_insn_MIPS_INS_ADDI: mips_insn = 25;
pub const mips_insn_MIPS_INS_ADDIU: mips_insn = 26;
pub const mips_insn_MIPS_INS_ALIGN: mips_insn = 27;
pub const mips_insn_MIPS_INS_ALUIPC: mips_insn = 28;
pub const mips_insn_MIPS_INS_AND: mips_insn = 29;
pub const mips_insn_MIPS_INS_AND16: mips_insn = 30;
pub const mips_insn_MIPS_INS_ANDI16: mips_insn = 31;
pub const mips_insn_MIPS_INS_ANDI: mips_insn = 32;
pub const mips_insn_MIPS_INS_APPEND: mips_insn = 33;
pub const mips_insn_MIPS_INS_ASUB_S: mips_insn = 34;
pub const mips_insn_MIPS_INS_ASUB_U: mips_insn = 35;
pub const mips_insn_MIPS_INS_AUI: mips_insn = 36;
pub const mips_insn_MIPS_INS_AUIPC: mips_insn = 37;
pub const mips_insn_MIPS_INS_AVER_S: mips_insn = 38;
pub const mips_insn_MIPS_INS_AVER_U: mips_insn = 39;
pub const mips_insn_MIPS_INS_AVE_S: mips_insn = 40;
pub const mips_insn_MIPS_INS_AVE_U: mips_insn = 41;
pub const mips_insn_MIPS_INS_B16: mips_insn = 42;
pub const mips_insn_MIPS_INS_BADDU: mips_insn = 43;
pub const mips_insn_MIPS_INS_BAL: mips_insn = 44;
pub const mips_insn_MIPS_INS_BALC: mips_insn = 45;
pub const mips_insn_MIPS_INS_BALIGN: mips_insn = 46;
pub const mips_insn_MIPS_INS_BBIT0: mips_insn = 47;
pub const mips_insn_MIPS_INS_BBIT032: mips_insn = 48;
pub const mips_insn_MIPS_INS_BBIT1: mips_insn = 49;
pub const mips_insn_MIPS_INS_BBIT132: mips_insn = 50;
pub const mips_insn_MIPS_INS_BC: mips_insn = 51;
pub const mips_insn_MIPS_INS_BC0F: mips_insn = 52;
pub const mips_insn_MIPS_INS_BC0FL: mips_insn = 53;
pub const mips_insn_MIPS_INS_BC0T: mips_insn = 54;
pub const mips_insn_MIPS_INS_BC0TL: mips_insn = 55;
pub const mips_insn_MIPS_INS_BC1EQZ: mips_insn = 56;
pub const mips_insn_MIPS_INS_BC1F: mips_insn = 57;
pub const mips_insn_MIPS_INS_BC1FL: mips_insn = 58;
pub const mips_insn_MIPS_INS_BC1NEZ: mips_insn = 59;
pub const mips_insn_MIPS_INS_BC1T: mips_insn = 60;
pub const mips_insn_MIPS_INS_BC1TL: mips_insn = 61;
pub const mips_insn_MIPS_INS_BC2EQZ: mips_insn = 62;
pub const mips_insn_MIPS_INS_BC2F: mips_insn = 63;
pub const mips_insn_MIPS_INS_BC2FL: mips_insn = 64;
pub const mips_insn_MIPS_INS_BC2NEZ: mips_insn = 65;
pub const mips_insn_MIPS_INS_BC2T: mips_insn = 66;
pub const mips_insn_MIPS_INS_BC2TL: mips_insn = 67;
pub const mips_insn_MIPS_INS_BC3F: mips_insn = 68;
pub const mips_insn_MIPS_INS_BC3FL: mips_insn = 69;
pub const mips_insn_MIPS_INS_BC3T: mips_insn = 70;
pub const mips_insn_MIPS_INS_BC3TL: mips_insn = 71;
pub const mips_insn_MIPS_INS_BCLRI: mips_insn = 72;
pub const mips_insn_MIPS_INS_BCLR: mips_insn = 73;
pub const mips_insn_MIPS_INS_BEQ: mips_insn = 74;
pub const mips_insn_MIPS_INS_BEQC: mips_insn = 75;
pub const mips_insn_MIPS_INS_BEQL: mips_insn = 76;
pub const mips_insn_MIPS_INS_BEQZ16: mips_insn = 77;
pub const mips_insn_MIPS_INS_BEQZALC: mips_insn = 78;
pub const mips_insn_MIPS_INS_BEQZC: mips_insn = 79;
pub const mips_insn_MIPS_INS_BGEC: mips_insn = 80;
pub const mips_insn_MIPS_INS_BGEUC: mips_insn = 81;
pub const mips_insn_MIPS_INS_BGEZ: mips_insn = 82;
pub const mips_insn_MIPS_INS_BGEZAL: mips_insn = 83;
pub const mips_insn_MIPS_INS_BGEZALC: mips_insn = 84;
pub const mips_insn_MIPS_INS_BGEZALL: mips_insn = 85;
pub const mips_insn_MIPS_INS_BGEZALS: mips_insn = 86;
pub const mips_insn_MIPS_INS_BGEZC: mips_insn = 87;
pub const mips_insn_MIPS_INS_BGEZL: mips_insn = 88;
pub const mips_insn_MIPS_INS_BGTZ: mips_insn = 89;
pub const mips_insn_MIPS_INS_BGTZALC: mips_insn = 90;
pub const mips_insn_MIPS_INS_BGTZC: mips_insn = 91;
pub const mips_insn_MIPS_INS_BGTZL: mips_insn = 92;
pub const mips_insn_MIPS_INS_BINSLI: mips_insn = 93;
pub const mips_insn_MIPS_INS_BINSL: mips_insn = 94;
pub const mips_insn_MIPS_INS_BINSRI: mips_insn = 95;
pub const mips_insn_MIPS_INS_BINSR: mips_insn = 96;
pub const mips_insn_MIPS_INS_BITREV: mips_insn = 97;
pub const mips_insn_MIPS_INS_BITSWAP: mips_insn = 98;
pub const mips_insn_MIPS_INS_BLEZ: mips_insn = 99;
pub const mips_insn_MIPS_INS_BLEZALC: mips_insn = 100;
pub const mips_insn_MIPS_INS_BLEZC: mips_insn = 101;
pub const mips_insn_MIPS_INS_BLEZL: mips_insn = 102;
pub const mips_insn_MIPS_INS_BLTC: mips_insn = 103;
pub const mips_insn_MIPS_INS_BLTUC: mips_insn = 104;
pub const mips_insn_MIPS_INS_BLTZ: mips_insn = 105;
pub const mips_insn_MIPS_INS_BLTZAL: mips_insn = 106;
pub const mips_insn_MIPS_INS_BLTZALC: mips_insn = 107;
pub const mips_insn_MIPS_INS_BLTZALL: mips_insn = 108;
pub const mips_insn_MIPS_INS_BLTZALS: mips_insn = 109;
pub const mips_insn_MIPS_INS_BLTZC: mips_insn = 110;
pub const mips_insn_MIPS_INS_BLTZL: mips_insn = 111;
pub const mips_insn_MIPS_INS_BMNZI: mips_insn = 112;
pub const mips_insn_MIPS_INS_BMNZ: mips_insn = 113;
pub const mips_insn_MIPS_INS_BMZI: mips_insn = 114;
pub const mips_insn_MIPS_INS_BMZ: mips_insn = 115;
pub const mips_insn_MIPS_INS_BNE: mips_insn = 116;
pub const mips_insn_MIPS_INS_BNEC: mips_insn = 117;
pub const mips_insn_MIPS_INS_BNEGI: mips_insn = 118;
pub const mips_insn_MIPS_INS_BNEG: mips_insn = 119;
pub const mips_insn_MIPS_INS_BNEL: mips_insn = 120;
pub const mips_insn_MIPS_INS_BNEZ16: mips_insn = 121;
pub const mips_insn_MIPS_INS_BNEZALC: mips_insn = 122;
pub const mips_insn_MIPS_INS_BNEZC: mips_insn = 123;
pub const mips_insn_MIPS_INS_BNVC: mips_insn = 124;
pub const mips_insn_MIPS_INS_BNZ: mips_insn = 125;
pub const mips_insn_MIPS_INS_BOVC: mips_insn = 126;
pub const mips_insn_MIPS_INS_BPOSGE32: mips_insn = 127;
pub const mips_insn_MIPS_INS_BREAK: mips_insn = 128;
pub const mips_insn_MIPS_INS_BREAK16: mips_insn = 129;
pub const mips_insn_MIPS_INS_BSELI: mips_insn = 130;
pub const mips_insn_MIPS_INS_BSEL: mips_insn = 131;
pub const mips_insn_MIPS_INS_BSETI: mips_insn = 132;
pub const mips_insn_MIPS_INS_BSET: mips_insn = 133;
pub const mips_insn_MIPS_INS_BZ: mips_insn = 134;
pub const mips_insn_MIPS_INS_BEQZ: mips_insn = 135;
pub const mips_insn_MIPS_INS_B: mips_insn = 136;
pub const mips_insn_MIPS_INS_BNEZ: mips_insn = 137;
pub const mips_insn_MIPS_INS_BTEQZ: mips_insn = 138;
pub const mips_insn_MIPS_INS_BTNEZ: mips_insn = 139;
pub const mips_insn_MIPS_INS_CACHE: mips_insn = 140;
pub const mips_insn_MIPS_INS_CEIL: mips_insn = 141;
pub const mips_insn_MIPS_INS_CEQI: mips_insn = 142;
pub const mips_insn_MIPS_INS_CEQ: mips_insn = 143;
pub const mips_insn_MIPS_INS_CFC1: mips_insn = 144;
pub const mips_insn_MIPS_INS_CFCMSA: mips_insn = 145;
pub const mips_insn_MIPS_INS_CINS: mips_insn = 146;
pub const mips_insn_MIPS_INS_CINS32: mips_insn = 147;
pub const mips_insn_MIPS_INS_CLASS: mips_insn = 148;
pub const mips_insn_MIPS_INS_CLEI_S: mips_insn = 149;
pub const mips_insn_MIPS_INS_CLEI_U: mips_insn = 150;
pub const mips_insn_MIPS_INS_CLE_S: mips_insn = 151;
pub const mips_insn_MIPS_INS_CLE_U: mips_insn = 152;
pub const mips_insn_MIPS_INS_CLO: mips_insn = 153;
pub const mips_insn_MIPS_INS_CLTI_S: mips_insn = 154;
pub const mips_insn_MIPS_INS_CLTI_U: mips_insn = 155;
pub const mips_insn_MIPS_INS_CLT_S: mips_insn = 156;
pub const mips_insn_MIPS_INS_CLT_U: mips_insn = 157;
pub const mips_insn_MIPS_INS_CLZ: mips_insn = 158;
pub const mips_insn_MIPS_INS_CMPGDU: mips_insn = 159;
pub const mips_insn_MIPS_INS_CMPGU: mips_insn = 160;
pub const mips_insn_MIPS_INS_CMPU: mips_insn = 161;
pub const mips_insn_MIPS_INS_CMP: mips_insn = 162;
pub const mips_insn_MIPS_INS_COPY_S: mips_insn = 163;
pub const mips_insn_MIPS_INS_COPY_U: mips_insn = 164;
pub const mips_insn_MIPS_INS_CTC1: mips_insn = 165;
pub const mips_insn_MIPS_INS_CTCMSA: mips_insn = 166;
pub const mips_insn_MIPS_INS_CVT: mips_insn = 167;
pub const mips_insn_MIPS_INS_C: mips_insn = 168;
pub const mips_insn_MIPS_INS_CMPI: mips_insn = 169;
pub const mips_insn_MIPS_INS_DADD: mips_insn = 170;
pub const mips_insn_MIPS_INS_DADDI: mips_insn = 171;
pub const mips_insn_MIPS_INS_DADDIU: mips_insn = 172;
pub const mips_insn_MIPS_INS_DADDU: mips_insn = 173;
pub const mips_insn_MIPS_INS_DAHI: mips_insn = 174;
pub const mips_insn_MIPS_INS_DALIGN: mips_insn = 175;
pub const mips_insn_MIPS_INS_DATI: mips_insn = 176;
pub const mips_insn_MIPS_INS_DAUI: mips_insn = 177;
pub const mips_insn_MIPS_INS_DBITSWAP: mips_insn = 178;
pub const mips_insn_MIPS_INS_DCLO: mips_insn = 179;
pub const mips_insn_MIPS_INS_DCLZ: mips_insn = 180;
pub const mips_insn_MIPS_INS_DDIV: mips_insn = 181;
pub const mips_insn_MIPS_INS_DDIVU: mips_insn = 182;
pub const mips_insn_MIPS_INS_DERET: mips_insn = 183;
pub const mips_insn_MIPS_INS_DEXT: mips_insn = 184;
pub const mips_insn_MIPS_INS_DEXTM: mips_insn = 185;
pub const mips_insn_MIPS_INS_DEXTU: mips_insn = 186;
pub const mips_insn_MIPS_INS_DI: mips_insn = 187;
pub const mips_insn_MIPS_INS_DINS: mips_insn = 188;
pub const mips_insn_MIPS_INS_DINSM: mips_insn = 189;
pub const mips_insn_MIPS_INS_DINSU: mips_insn = 190;
pub const mips_insn_MIPS_INS_DIV: mips_insn = 191;
pub const mips_insn_MIPS_INS_DIVU: mips_insn = 192;
pub const mips_insn_MIPS_INS_DIV_S: mips_insn = 193;
pub const mips_insn_MIPS_INS_DIV_U: mips_insn = 194;
pub const mips_insn_MIPS_INS_DLSA: mips_insn = 195;
pub const mips_insn_MIPS_INS_DMFC0: mips_insn = 196;
pub const mips_insn_MIPS_INS_DMFC1: mips_insn = 197;
pub const mips_insn_MIPS_INS_DMFC2: mips_insn = 198;
pub const mips_insn_MIPS_INS_DMOD: mips_insn = 199;
pub const mips_insn_MIPS_INS_DMODU: mips_insn = 200;
pub const mips_insn_MIPS_INS_DMTC0: mips_insn = 201;
pub const mips_insn_MIPS_INS_DMTC1: mips_insn = 202;
pub const mips_insn_MIPS_INS_DMTC2: mips_insn = 203;
pub const mips_insn_MIPS_INS_DMUH: mips_insn = 204;
pub const mips_insn_MIPS_INS_DMUHU: mips_insn = 205;
pub const mips_insn_MIPS_INS_DMUL: mips_insn = 206;
pub const mips_insn_MIPS_INS_DMULT: mips_insn = 207;
pub const mips_insn_MIPS_INS_DMULTU: mips_insn = 208;
pub const mips_insn_MIPS_INS_DMULU: mips_insn = 209;
pub const mips_insn_MIPS_INS_DOTP_S: mips_insn = 210;
pub const mips_insn_MIPS_INS_DOTP_U: mips_insn = 211;
pub const mips_insn_MIPS_INS_DPADD_S: mips_insn = 212;
pub const mips_insn_MIPS_INS_DPADD_U: mips_insn = 213;
pub const mips_insn_MIPS_INS_DPAQX_SA: mips_insn = 214;
pub const mips_insn_MIPS_INS_DPAQX_S: mips_insn = 215;
pub const mips_insn_MIPS_INS_DPAQ_SA: mips_insn = 216;
pub const mips_insn_MIPS_INS_DPAQ_S: mips_insn = 217;
pub const mips_insn_MIPS_INS_DPAU: mips_insn = 218;
pub const mips_insn_MIPS_INS_DPAX: mips_insn = 219;
pub const mips_insn_MIPS_INS_DPA: mips_insn = 220;
pub const mips_insn_MIPS_INS_DPOP: mips_insn = 221;
pub const mips_insn_MIPS_INS_DPSQX_SA: mips_insn = 222;
pub const mips_insn_MIPS_INS_DPSQX_S: mips_insn = 223;
pub const mips_insn_MIPS_INS_DPSQ_SA: mips_insn = 224;
pub const mips_insn_MIPS_INS_DPSQ_S: mips_insn = 225;
pub const mips_insn_MIPS_INS_DPSUB_S: mips_insn = 226;
pub const mips_insn_MIPS_INS_DPSUB_U: mips_insn = 227;
pub const mips_insn_MIPS_INS_DPSU: mips_insn = 228;
pub const mips_insn_MIPS_INS_DPSX: mips_insn = 229;
pub const mips_insn_MIPS_INS_DPS: mips_insn = 230;
pub const mips_insn_MIPS_INS_DROTR: mips_insn = 231;
pub const mips_insn_MIPS_INS_DROTR32: mips_insn = 232;
pub const mips_insn_MIPS_INS_DROTRV: mips_insn = 233;
pub const mips_insn_MIPS_INS_DSBH: mips_insn = 234;
pub const mips_insn_MIPS_INS_DSHD: mips_insn = 235;
pub const mips_insn_MIPS_INS_DSLL: mips_insn = 236;
pub const mips_insn_MIPS_INS_DSLL32: mips_insn = 237;
pub const mips_insn_MIPS_INS_DSLLV: mips_insn = 238;
pub const mips_insn_MIPS_INS_DSRA: mips_insn = 239;
pub const mips_insn_MIPS_INS_DSRA32: mips_insn = 240;
pub const mips_insn_MIPS_INS_DSRAV: mips_insn = 241;
pub const mips_insn_MIPS_INS_DSRL: mips_insn = 242;
pub const mips_insn_MIPS_INS_DSRL32: mips_insn = 243;
pub const mips_insn_MIPS_INS_DSRLV: mips_insn = 244;
pub const mips_insn_MIPS_INS_DSUB: mips_insn = 245;
pub const mips_insn_MIPS_INS_DSUBU: mips_insn = 246;
pub const mips_insn_MIPS_INS_EHB: mips_insn = 247;
pub const mips_insn_MIPS_INS_EI: mips_insn = 248;
pub const mips_insn_MIPS_INS_ERET: mips_insn = 249;
pub const mips_insn_MIPS_INS_EXT: mips_insn = 250;
pub const mips_insn_MIPS_INS_EXTP: mips_insn = 251;
pub const mips_insn_MIPS_INS_EXTPDP: mips_insn = 252;
pub const mips_insn_MIPS_INS_EXTPDPV: mips_insn = 253;
pub const mips_insn_MIPS_INS_EXTPV: mips_insn = 254;
pub const mips_insn_MIPS_INS_EXTRV_RS: mips_insn = 255;
pub const mips_insn_MIPS_INS_EXTRV_R: mips_insn = 256;
pub const mips_insn_MIPS_INS_EXTRV_S: mips_insn = 257;
pub const mips_insn_MIPS_INS_EXTRV: mips_insn = 258;
pub const mips_insn_MIPS_INS_EXTR_RS: mips_insn = 259;
pub const mips_insn_MIPS_INS_EXTR_R: mips_insn = 260;
pub const mips_insn_MIPS_INS_EXTR_S: mips_insn = 261;
pub const mips_insn_MIPS_INS_EXTR: mips_insn = 262;
pub const mips_insn_MIPS_INS_EXTS: mips_insn = 263;
pub const mips_insn_MIPS_INS_EXTS32: mips_insn = 264;
pub const mips_insn_MIPS_INS_ABS: mips_insn = 265;
pub const mips_insn_MIPS_INS_FADD: mips_insn = 266;
pub const mips_insn_MIPS_INS_FCAF: mips_insn = 267;
pub const mips_insn_MIPS_INS_FCEQ: mips_insn = 268;
pub const mips_insn_MIPS_INS_FCLASS: mips_insn = 269;
pub const mips_insn_MIPS_INS_FCLE: mips_insn = 270;
pub const mips_insn_MIPS_INS_FCLT: mips_insn = 271;
pub const mips_insn_MIPS_INS_FCNE: mips_insn = 272;
pub const mips_insn_MIPS_INS_FCOR: mips_insn = 273;
pub const mips_insn_MIPS_INS_FCUEQ: mips_insn = 274;
pub const mips_insn_MIPS_INS_FCULE: mips_insn = 275;
pub const mips_insn_MIPS_INS_FCULT: mips_insn = 276;
pub const mips_insn_MIPS_INS_FCUNE: mips_insn = 277;
pub const mips_insn_MIPS_INS_FCUN: mips_insn = 278;
pub const mips_insn_MIPS_INS_FDIV: mips_insn = 279;
pub const mips_insn_MIPS_INS_FEXDO: mips_insn = 280;
pub const mips_insn_MIPS_INS_FEXP2: mips_insn = 281;
pub const mips_insn_MIPS_INS_FEXUPL: mips_insn = 282;
pub const mips_insn_MIPS_INS_FEXUPR: mips_insn = 283;
pub const mips_insn_MIPS_INS_FFINT_S: mips_insn = 284;
pub const mips_insn_MIPS_INS_FFINT_U: mips_insn = 285;
pub const mips_insn_MIPS_INS_FFQL: mips_insn = 286;
pub const mips_insn_MIPS_INS_FFQR: mips_insn = 287;
pub const mips_insn_MIPS_INS_FILL: mips_insn = 288;
pub const mips_insn_MIPS_INS_FLOG2: mips_insn = 289;
pub const mips_insn_MIPS_INS_FLOOR: mips_insn = 290;
pub const mips_insn_MIPS_INS_FMADD: mips_insn = 291;
pub const mips_insn_MIPS_INS_FMAX_A: mips_insn = 292;
pub const mips_insn_MIPS_INS_FMAX: mips_insn = 293;
pub const mips_insn_MIPS_INS_FMIN_A: mips_insn = 294;
pub const mips_insn_MIPS_INS_FMIN: mips_insn = 295;
pub const mips_insn_MIPS_INS_MOV: mips_insn = 296;
pub const mips_insn_MIPS_INS_FMSUB: mips_insn = 297;
pub const mips_insn_MIPS_INS_FMUL: mips_insn = 298;
pub const mips_insn_MIPS_INS_MUL: mips_insn = 299;
pub const mips_insn_MIPS_INS_NEG: mips_insn = 300;
pub const mips_insn_MIPS_INS_FRCP: mips_insn = 301;
pub const mips_insn_MIPS_INS_FRINT: mips_insn = 302;
pub const mips_insn_MIPS_INS_FRSQRT: mips_insn = 303;
pub const mips_insn_MIPS_INS_FSAF: mips_insn = 304;
pub const mips_insn_MIPS_INS_FSEQ: mips_insn = 305;
pub const mips_insn_MIPS_INS_FSLE: mips_insn = 306;
pub const mips_insn_MIPS_INS_FSLT: mips_insn = 307;
pub const mips_insn_MIPS_INS_FSNE: mips_insn = 308;
pub const mips_insn_MIPS_INS_FSOR: mips_insn = 309;
pub const mips_insn_MIPS_INS_FSQRT: mips_insn = 310;
pub const mips_insn_MIPS_INS_SQRT: mips_insn = 311;
pub const mips_insn_MIPS_INS_FSUB: mips_insn = 312;
pub const mips_insn_MIPS_INS_SUB: mips_insn = 313;
pub const mips_insn_MIPS_INS_FSUEQ: mips_insn = 314;
pub const mips_insn_MIPS_INS_FSULE: mips_insn = 315;
pub const mips_insn_MIPS_INS_FSULT: mips_insn = 316;
pub const mips_insn_MIPS_INS_FSUNE: mips_insn = 317;
pub const mips_insn_MIPS_INS_FSUN: mips_insn = 318;
pub const mips_insn_MIPS_INS_FTINT_S: mips_insn = 319;
pub const mips_insn_MIPS_INS_FTINT_U: mips_insn = 320;
pub const mips_insn_MIPS_INS_FTQ: mips_insn = 321;
pub const mips_insn_MIPS_INS_FTRUNC_S: mips_insn = 322;
pub const mips_insn_MIPS_INS_FTRUNC_U: mips_insn = 323;
pub const mips_insn_MIPS_INS_HADD_S: mips_insn = 324;
pub const mips_insn_MIPS_INS_HADD_U: mips_insn = 325;
pub const mips_insn_MIPS_INS_HSUB_S: mips_insn = 326;
pub const mips_insn_MIPS_INS_HSUB_U: mips_insn = 327;
pub const mips_insn_MIPS_INS_ILVEV: mips_insn = 328;
pub const mips_insn_MIPS_INS_ILVL: mips_insn = 329;
pub const mips_insn_MIPS_INS_ILVOD: mips_insn = 330;
pub const mips_insn_MIPS_INS_ILVR: mips_insn = 331;
pub const mips_insn_MIPS_INS_INS: mips_insn = 332;
pub const mips_insn_MIPS_INS_INSERT: mips_insn = 333;
pub const mips_insn_MIPS_INS_INSV: mips_insn = 334;
pub const mips_insn_MIPS_INS_INSVE: mips_insn = 335;
pub const mips_insn_MIPS_INS_J: mips_insn = 336;
pub const mips_insn_MIPS_INS_JAL: mips_insn = 337;
pub const mips_insn_MIPS_INS_JALR: mips_insn = 338;
pub const mips_insn_MIPS_INS_JALRS16: mips_insn = 339;
pub const mips_insn_MIPS_INS_JALRS: mips_insn = 340;
pub const mips_insn_MIPS_INS_JALS: mips_insn = 341;
pub const mips_insn_MIPS_INS_JALX: mips_insn = 342;
pub const mips_insn_MIPS_INS_JIALC: mips_insn = 343;
pub const mips_insn_MIPS_INS_JIC: mips_insn = 344;
pub const mips_insn_MIPS_INS_JR: mips_insn = 345;
pub const mips_insn_MIPS_INS_JR16: mips_insn = 346;
pub const mips_insn_MIPS_INS_JRADDIUSP: mips_insn = 347;
pub const mips_insn_MIPS_INS_JRC: mips_insn = 348;
pub const mips_insn_MIPS_INS_JALRC: mips_insn = 349;
pub const mips_insn_MIPS_INS_LB: mips_insn = 350;
pub const mips_insn_MIPS_INS_LBU16: mips_insn = 351;
pub const mips_insn_MIPS_INS_LBUX: mips_insn = 352;
pub const mips_insn_MIPS_INS_LBU: mips_insn = 353;
pub const mips_insn_MIPS_INS_LD: mips_insn = 354;
pub const mips_insn_MIPS_INS_LDC1: mips_insn = 355;
pub const mips_insn_MIPS_INS_LDC2: mips_insn = 356;
pub const mips_insn_MIPS_INS_LDC3: mips_insn = 357;
pub const mips_insn_MIPS_INS_LDI: mips_insn = 358;
pub const mips_insn_MIPS_INS_LDL: mips_insn = 359;
pub const mips_insn_MIPS_INS_LDPC: mips_insn = 360;
pub const mips_insn_MIPS_INS_LDR: mips_insn = 361;
pub const mips_insn_MIPS_INS_LDXC1: mips_insn = 362;
pub const mips_insn_MIPS_INS_LH: mips_insn = 363;
pub const mips_insn_MIPS_INS_LHU16: mips_insn = 364;
pub const mips_insn_MIPS_INS_LHX: mips_insn = 365;
pub const mips_insn_MIPS_INS_LHU: mips_insn = 366;
pub const mips_insn_MIPS_INS_LI16: mips_insn = 367;
pub const mips_insn_MIPS_INS_LL: mips_insn = 368;
pub const mips_insn_MIPS_INS_LLD: mips_insn = 369;
pub const mips_insn_MIPS_INS_LSA: mips_insn = 370;
pub const mips_insn_MIPS_INS_LUXC1: mips_insn = 371;
pub const mips_insn_MIPS_INS_LUI: mips_insn = 372;
pub const mips_insn_MIPS_INS_LW: mips_insn = 373;
pub const mips_insn_MIPS_INS_LW16: mips_insn = 374;
pub const mips_insn_MIPS_INS_LWC1: mips_insn = 375;
pub const mips_insn_MIPS_INS_LWC2: mips_insn = 376;
pub const mips_insn_MIPS_INS_LWC3: mips_insn = 377;
pub const mips_insn_MIPS_INS_LWL: mips_insn = 378;
pub const mips_insn_MIPS_INS_LWM16: mips_insn = 379;
pub const mips_insn_MIPS_INS_LWM32: mips_insn = 380;
pub const mips_insn_MIPS_INS_LWPC: mips_insn = 381;
pub const mips_insn_MIPS_INS_LWP: mips_insn = 382;
pub const mips_insn_MIPS_INS_LWR: mips_insn = 383;
pub const mips_insn_MIPS_INS_LWUPC: mips_insn = 384;
pub const mips_insn_MIPS_INS_LWU: mips_insn = 385;
pub const mips_insn_MIPS_INS_LWX: mips_insn = 386;
pub const mips_insn_MIPS_INS_LWXC1: mips_insn = 387;
pub const mips_insn_MIPS_INS_LWXS: mips_insn = 388;
pub const mips_insn_MIPS_INS_LI: mips_insn = 389;
pub const mips_insn_MIPS_INS_MADD: mips_insn = 390;
pub const mips_insn_MIPS_INS_MADDF: mips_insn = 391;
pub const mips_insn_MIPS_INS_MADDR_Q: mips_insn = 392;
pub const mips_insn_MIPS_INS_MADDU: mips_insn = 393;
pub const mips_insn_MIPS_INS_MADDV: mips_insn = 394;
pub const mips_insn_MIPS_INS_MADD_Q: mips_insn = 395;
pub const mips_insn_MIPS_INS_MAQ_SA: mips_insn = 396;
pub const mips_insn_MIPS_INS_MAQ_S: mips_insn = 397;
pub const mips_insn_MIPS_INS_MAXA: mips_insn = 398;
pub const mips_insn_MIPS_INS_MAXI_S: mips_insn = 399;
pub const mips_insn_MIPS_INS_MAXI_U: mips_insn = 400;
pub const mips_insn_MIPS_INS_MAX_A: mips_insn = 401;
pub const mips_insn_MIPS_INS_MAX: mips_insn = 402;
pub const mips_insn_MIPS_INS_MAX_S: mips_insn = 403;
pub const mips_insn_MIPS_INS_MAX_U: mips_insn = 404;
pub const mips_insn_MIPS_INS_MFC0: mips_insn = 405;
pub const mips_insn_MIPS_INS_MFC1: mips_insn = 406;
pub const mips_insn_MIPS_INS_MFC2: mips_insn = 407;
pub const mips_insn_MIPS_INS_MFHC1: mips_insn = 408;
pub const mips_insn_MIPS_INS_MFHI: mips_insn = 409;
pub const mips_insn_MIPS_INS_MFLO: mips_insn = 410;
pub const mips_insn_MIPS_INS_MINA: mips_insn = 411;
pub const mips_insn_MIPS_INS_MINI_S: mips_insn = 412;
pub const mips_insn_MIPS_INS_MINI_U: mips_insn = 413;
pub const mips_insn_MIPS_INS_MIN_A: mips_insn = 414;
pub const mips_insn_MIPS_INS_MIN: mips_insn = 415;
pub const mips_insn_MIPS_INS_MIN_S: mips_insn = 416;
pub const mips_insn_MIPS_INS_MIN_U: mips_insn = 417;
pub const mips_insn_MIPS_INS_MOD: mips_insn = 418;
pub const mips_insn_MIPS_INS_MODSUB: mips_insn = 419;
pub const mips_insn_MIPS_INS_MODU: mips_insn = 420;
pub const mips_insn_MIPS_INS_MOD_S: mips_insn = 421;
pub const mips_insn_MIPS_INS_MOD_U: mips_insn = 422;
pub const mips_insn_MIPS_INS_MOVE: mips_insn = 423;
pub const mips_insn_MIPS_INS_MOVEP: mips_insn = 424;
pub const mips_insn_MIPS_INS_MOVF: mips_insn = 425;
pub const mips_insn_MIPS_INS_MOVN: mips_insn = 426;
pub const mips_insn_MIPS_INS_MOVT: mips_insn = 427;
pub const mips_insn_MIPS_INS_MOVZ: mips_insn = 428;
pub const mips_insn_MIPS_INS_MSUB: mips_insn = 429;
pub const mips_insn_MIPS_INS_MSUBF: mips_insn = 430;
pub const mips_insn_MIPS_INS_MSUBR_Q: mips_insn = 431;
pub const mips_insn_MIPS_INS_MSUBU: mips_insn = 432;
pub const mips_insn_MIPS_INS_MSUBV: mips_insn = 433;
pub const mips_insn_MIPS_INS_MSUB_Q: mips_insn = 434;
pub const mips_insn_MIPS_INS_MTC0: mips_insn = 435;
pub const mips_insn_MIPS_INS_MTC1: mips_insn = 436;
pub const mips_insn_MIPS_INS_MTC2: mips_insn = 437;
pub const mips_insn_MIPS_INS_MTHC1: mips_insn = 438;
pub const mips_insn_MIPS_INS_MTHI: mips_insn = 439;
pub const mips_insn_MIPS_INS_MTHLIP: mips_insn = 440;
pub const mips_insn_MIPS_INS_MTLO: mips_insn = 441;
pub const mips_insn_MIPS_INS_MTM0: mips_insn = 442;
pub const mips_insn_MIPS_INS_MTM1: mips_insn = 443;
pub const mips_insn_MIPS_INS_MTM2: mips_insn = 444;
pub const mips_insn_MIPS_INS_MTP0: mips_insn = 445;
pub const mips_insn_MIPS_INS_MTP1: mips_insn = 446;
pub const mips_insn_MIPS_INS_MTP2: mips_insn = 447;
pub const mips_insn_MIPS_INS_MUH: mips_insn = 448;
pub const mips_insn_MIPS_INS_MUHU: mips_insn = 449;
pub const mips_insn_MIPS_INS_MULEQ_S: mips_insn = 450;
pub const mips_insn_MIPS_INS_MULEU_S: mips_insn = 451;
pub const mips_insn_MIPS_INS_MULQ_RS: mips_insn = 452;
pub const mips_insn_MIPS_INS_MULQ_S: mips_insn = 453;
pub const mips_insn_MIPS_INS_MULR_Q: mips_insn = 454;
pub const mips_insn_MIPS_INS_MULSAQ_S: mips_insn = 455;
pub const mips_insn_MIPS_INS_MULSA: mips_insn = 456;
pub const mips_insn_MIPS_INS_MULT: mips_insn = 457;
pub const mips_insn_MIPS_INS_MULTU: mips_insn = 458;
pub const mips_insn_MIPS_INS_MULU: mips_insn = 459;
pub const mips_insn_MIPS_INS_MULV: mips_insn = 460;
pub const mips_insn_MIPS_INS_MUL_Q: mips_insn = 461;
pub const mips_insn_MIPS_INS_MUL_S: mips_insn = 462;
pub const mips_insn_MIPS_INS_NLOC: mips_insn = 463;
pub const mips_insn_MIPS_INS_NLZC: mips_insn = 464;
pub const mips_insn_MIPS_INS_NMADD: mips_insn = 465;
pub const mips_insn_MIPS_INS_NMSUB: mips_insn = 466;
pub const mips_insn_MIPS_INS_NOR: mips_insn = 467;
pub const mips_insn_MIPS_INS_NORI: mips_insn = 468;
pub const mips_insn_MIPS_INS_NOT16: mips_insn = 469;
pub const mips_insn_MIPS_INS_NOT: mips_insn = 470;
pub const mips_insn_MIPS_INS_OR: mips_insn = 471;
pub const mips_insn_MIPS_INS_OR16: mips_insn = 472;
pub const mips_insn_MIPS_INS_ORI: mips_insn = 473;
pub const mips_insn_MIPS_INS_PACKRL: mips_insn = 474;
pub const mips_insn_MIPS_INS_PAUSE: mips_insn = 475;
pub const mips_insn_MIPS_INS_PCKEV: mips_insn = 476;
pub const mips_insn_MIPS_INS_PCKOD: mips_insn = 477;
pub const mips_insn_MIPS_INS_PCNT: mips_insn = 478;
pub const mips_insn_MIPS_INS_PICK: mips_insn = 479;
pub const mips_insn_MIPS_INS_POP: mips_insn = 480;
pub const mips_insn_MIPS_INS_PRECEQU: mips_insn = 481;
pub const mips_insn_MIPS_INS_PRECEQ: mips_insn = 482;
pub const mips_insn_MIPS_INS_PRECEU: mips_insn = 483;
pub const mips_insn_MIPS_INS_PRECRQU_S: mips_insn = 484;
pub const mips_insn_MIPS_INS_PRECRQ: mips_insn = 485;
pub const mips_insn_MIPS_INS_PRECRQ_RS: mips_insn = 486;
pub const mips_insn_MIPS_INS_PRECR: mips_insn = 487;
pub const mips_insn_MIPS_INS_PRECR_SRA: mips_insn = 488;
pub const mips_insn_MIPS_INS_PRECR_SRA_R: mips_insn = 489;
pub const mips_insn_MIPS_INS_PREF: mips_insn = 490;
pub const mips_insn_MIPS_INS_PREPEND: mips_insn = 491;
pub const mips_insn_MIPS_INS_RADDU: mips_insn = 492;
pub const mips_insn_MIPS_INS_RDDSP: mips_insn = 493;
pub const mips_insn_MIPS_INS_RDHWR: mips_insn = 494;
pub const mips_insn_MIPS_INS_REPLV: mips_insn = 495;
pub const mips_insn_MIPS_INS_REPL: mips_insn = 496;
pub const mips_insn_MIPS_INS_RINT: mips_insn = 497;
pub const mips_insn_MIPS_INS_ROTR: mips_insn = 498;
pub const mips_insn_MIPS_INS_ROTRV: mips_insn = 499;
pub const mips_insn_MIPS_INS_ROUND: mips_insn = 500;
pub const mips_insn_MIPS_INS_SAT_S: mips_insn = 501;
pub const mips_insn_MIPS_INS_SAT_U: mips_insn = 502;
pub const mips_insn_MIPS_INS_SB: mips_insn = 503;
pub const mips_insn_MIPS_INS_SB16: mips_insn = 504;
pub const mips_insn_MIPS_INS_SC: mips_insn = 505;
pub const mips_insn_MIPS_INS_SCD: mips_insn = 506;
pub const mips_insn_MIPS_INS_SD: mips_insn = 507;
pub const mips_insn_MIPS_INS_SDBBP: mips_insn = 508;
pub const mips_insn_MIPS_INS_SDBBP16: mips_insn = 509;
pub const mips_insn_MIPS_INS_SDC1: mips_insn = 510;
pub const mips_insn_MIPS_INS_SDC2: mips_insn = 511;
pub const mips_insn_MIPS_INS_SDC3: mips_insn = 512;
pub const mips_insn_MIPS_INS_SDL: mips_insn = 513;
pub const mips_insn_MIPS_INS_SDR: mips_insn = 514;
pub const mips_insn_MIPS_INS_SDXC1: mips_insn = 515;
pub const mips_insn_MIPS_INS_SEB: mips_insn = 516;
pub const mips_insn_MIPS_INS_SEH: mips_insn = 517;
pub const mips_insn_MIPS_INS_SELEQZ: mips_insn = 518;
pub const mips_insn_MIPS_INS_SELNEZ: mips_insn = 519;
pub const mips_insn_MIPS_INS_SEL: mips_insn = 520;
pub const mips_insn_MIPS_INS_SEQ: mips_insn = 521;
pub const mips_insn_MIPS_INS_SEQI: mips_insn = 522;
pub const mips_insn_MIPS_INS_SH: mips_insn = 523;
pub const mips_insn_MIPS_INS_SH16: mips_insn = 524;
pub const mips_insn_MIPS_INS_SHF: mips_insn = 525;
pub const mips_insn_MIPS_INS_SHILO: mips_insn = 526;
pub const mips_insn_MIPS_INS_SHILOV: mips_insn = 527;
pub const mips_insn_MIPS_INS_SHLLV: mips_insn = 528;
pub const mips_insn_MIPS_INS_SHLLV_S: mips_insn = 529;
pub const mips_insn_MIPS_INS_SHLL: mips_insn = 530;
pub const mips_insn_MIPS_INS_SHLL_S: mips_insn = 531;
pub const mips_insn_MIPS_INS_SHRAV: mips_insn = 532;
pub const mips_insn_MIPS_INS_SHRAV_R: mips_insn = 533;
pub const mips_insn_MIPS_INS_SHRA: mips_insn = 534;
pub const mips_insn_MIPS_INS_SHRA_R: mips_insn = 535;
pub const mips_insn_MIPS_INS_SHRLV: mips_insn = 536;
pub const mips_insn_MIPS_INS_SHRL: mips_insn = 537;
pub const mips_insn_MIPS_INS_SLDI: mips_insn = 538;
pub const mips_insn_MIPS_INS_SLD: mips_insn = 539;
pub const mips_insn_MIPS_INS_SLL: mips_insn = 540;
pub const mips_insn_MIPS_INS_SLL16: mips_insn = 541;
pub const mips_insn_MIPS_INS_SLLI: mips_insn = 542;
pub const mips_insn_MIPS_INS_SLLV: mips_insn = 543;
pub const mips_insn_MIPS_INS_SLT: mips_insn = 544;
pub const mips_insn_MIPS_INS_SLTI: mips_insn = 545;
pub const mips_insn_MIPS_INS_SLTIU: mips_insn = 546;
pub const mips_insn_MIPS_INS_SLTU: mips_insn = 547;
pub const mips_insn_MIPS_INS_SNE: mips_insn = 548;
pub const mips_insn_MIPS_INS_SNEI: mips_insn = 549;
pub const mips_insn_MIPS_INS_SPLATI: mips_insn = 550;
pub const mips_insn_MIPS_INS_SPLAT: mips_insn = 551;
pub const mips_insn_MIPS_INS_SRA: mips_insn = 552;
pub const mips_insn_MIPS_INS_SRAI: mips_insn = 553;
pub const mips_insn_MIPS_INS_SRARI: mips_insn = 554;
pub const mips_insn_MIPS_INS_SRAR: mips_insn = 555;
pub const mips_insn_MIPS_INS_SRAV: mips_insn = 556;
pub const mips_insn_MIPS_INS_SRL: mips_insn = 557;
pub const mips_insn_MIPS_INS_SRL16: mips_insn = 558;
pub const mips_insn_MIPS_INS_SRLI: mips_insn = 559;
pub const mips_insn_MIPS_INS_SRLRI: mips_insn = 560;
pub const mips_insn_MIPS_INS_SRLR: mips_insn = 561;
pub const mips_insn_MIPS_INS_SRLV: mips_insn = 562;
pub const mips_insn_MIPS_INS_SSNOP: mips_insn = 563;
pub const mips_insn_MIPS_INS_ST: mips_insn = 564;
pub const mips_insn_MIPS_INS_SUBQH: mips_insn = 565;
pub const mips_insn_MIPS_INS_SUBQH_R: mips_insn = 566;
pub const mips_insn_MIPS_INS_SUBQ: mips_insn = 567;
pub const mips_insn_MIPS_INS_SUBQ_S: mips_insn = 568;
pub const mips_insn_MIPS_INS_SUBSUS_U: mips_insn = 569;
pub const mips_insn_MIPS_INS_SUBSUU_S: mips_insn = 570;
pub const mips_insn_MIPS_INS_SUBS_S: mips_insn = 571;
pub const mips_insn_MIPS_INS_SUBS_U: mips_insn = 572;
pub const mips_insn_MIPS_INS_SUBU16: mips_insn = 573;
pub const mips_insn_MIPS_INS_SUBUH: mips_insn = 574;
pub const mips_insn_MIPS_INS_SUBUH_R: mips_insn = 575;
pub const mips_insn_MIPS_INS_SUBU: mips_insn = 576;
pub const mips_insn_MIPS_INS_SUBU_S: mips_insn = 577;
pub const mips_insn_MIPS_INS_SUBVI: mips_insn = 578;
pub const mips_insn_MIPS_INS_SUBV: mips_insn = 579;
pub const mips_insn_MIPS_INS_SUXC1: mips_insn = 580;
pub const mips_insn_MIPS_INS_SW: mips_insn = 581;
pub const mips_insn_MIPS_INS_SW16: mips_insn = 582;
pub const mips_insn_MIPS_INS_SWC1: mips_insn = 583;
pub const mips_insn_MIPS_INS_SWC2: mips_insn = 584;
pub const mips_insn_MIPS_INS_SWC3: mips_insn = 585;
pub const mips_insn_MIPS_INS_SWL: mips_insn = 586;
pub const mips_insn_MIPS_INS_SWM16: mips_insn = 587;
pub const mips_insn_MIPS_INS_SWM32: mips_insn = 588;
pub const mips_insn_MIPS_INS_SWP: mips_insn = 589;
pub const mips_insn_MIPS_INS_SWR: mips_insn = 590;
pub const mips_insn_MIPS_INS_SWXC1: mips_insn = 591;
pub const mips_insn_MIPS_INS_SYNC: mips_insn = 592;
pub const mips_insn_MIPS_INS_SYNCI: mips_insn = 593;
pub const mips_insn_MIPS_INS_SYSCALL: mips_insn = 594;
pub const mips_insn_MIPS_INS_TEQ: mips_insn = 595;
pub const mips_insn_MIPS_INS_TEQI: mips_insn = 596;
pub const mips_insn_MIPS_INS_TGE: mips_insn = 597;
pub const mips_insn_MIPS_INS_TGEI: mips_insn = 598;
pub const mips_insn_MIPS_INS_TGEIU: mips_insn = 599;
pub const mips_insn_MIPS_INS_TGEU: mips_insn = 600;
pub const mips_insn_MIPS_INS_TLBP: mips_insn = 601;
pub const mips_insn_MIPS_INS_TLBR: mips_insn = 602;
pub const mips_insn_MIPS_INS_TLBWI: mips_insn = 603;
pub const mips_insn_MIPS_INS_TLBWR: mips_insn = 604;
pub const mips_insn_MIPS_INS_TLT: mips_insn = 605;
pub const mips_insn_MIPS_INS_TLTI: mips_insn = 606;
pub const mips_insn_MIPS_INS_TLTIU: mips_insn = 607;
pub const mips_insn_MIPS_INS_TLTU: mips_insn = 608;
pub const mips_insn_MIPS_INS_TNE: mips_insn = 609;
pub const mips_insn_MIPS_INS_TNEI: mips_insn = 610;
pub const mips_insn_MIPS_INS_TRUNC: mips_insn = 611;
pub const mips_insn_MIPS_INS_V3MULU: mips_insn = 612;
pub const mips_insn_MIPS_INS_VMM0: mips_insn = 613;
pub const mips_insn_MIPS_INS_VMULU: mips_insn = 614;
pub const mips_insn_MIPS_INS_VSHF: mips_insn = 615;
pub const mips_insn_MIPS_INS_WAIT: mips_insn = 616;
pub const mips_insn_MIPS_INS_WRDSP: mips_insn = 617;
pub const mips_insn_MIPS_INS_WSBH: mips_insn = 618;
pub const mips_insn_MIPS_INS_XOR: mips_insn = 619;
pub const mips_insn_MIPS_INS_XOR16: mips_insn = 620;
pub const mips_insn_MIPS_INS_XORI: mips_insn = 621;
pub const mips_insn_MIPS_INS_NOP: mips_insn = 622;
pub const mips_insn_MIPS_INS_NEGU: mips_insn = 623;
pub const mips_insn_MIPS_INS_JALR_HB: mips_insn = 624;
pub const mips_insn_MIPS_INS_JR_HB: mips_insn = 625;
pub const mips_insn_MIPS_INS_ENDING: mips_insn = 626;
pub type mips_insn = ::core::ffi::c_uint;
pub const mips_insn_group_MIPS_GRP_INVALID: mips_insn_group = 0;
pub const mips_insn_group_MIPS_GRP_JUMP: mips_insn_group = 1;
pub const mips_insn_group_MIPS_GRP_CALL: mips_insn_group = 2;
pub const mips_insn_group_MIPS_GRP_RET: mips_insn_group = 3;
pub const mips_insn_group_MIPS_GRP_INT: mips_insn_group = 4;
pub const mips_insn_group_MIPS_GRP_IRET: mips_insn_group = 5;
pub const mips_insn_group_MIPS_GRP_PRIVILEGE: mips_insn_group = 6;
pub const mips_insn_group_MIPS_GRP_BRANCH_RELATIVE: mips_insn_group = 7;
pub const mips_insn_group_MIPS_GRP_BITCOUNT: mips_insn_group = 128;
pub const mips_insn_group_MIPS_GRP_DSP: mips_insn_group = 129;
pub const mips_insn_group_MIPS_GRP_DSPR2: mips_insn_group = 130;
pub const mips_insn_group_MIPS_GRP_FPIDX: mips_insn_group = 131;
pub const mips_insn_group_MIPS_GRP_MSA: mips_insn_group = 132;
pub const mips_insn_group_MIPS_GRP_MIPS32R2: mips_insn_group = 133;
pub const mips_insn_group_MIPS_GRP_MIPS64: mips_insn_group = 134;
pub const mips_insn_group_MIPS_GRP_MIPS64R2: mips_insn_group = 135;
pub const mips_insn_group_MIPS_GRP_SEINREG: mips_insn_group = 136;
pub const mips_insn_group_MIPS_GRP_STDENC: mips_insn_group = 137;
pub const mips_insn_group_MIPS_GRP_SWAP: mips_insn_group = 138;
pub const mips_insn_group_MIPS_GRP_MICROMIPS: mips_insn_group = 139;
pub const mips_insn_group_MIPS_GRP_MIPS16MODE: mips_insn_group = 140;
pub const mips_insn_group_MIPS_GRP_FP64BIT: mips_insn_group = 141;
pub const mips_insn_group_MIPS_GRP_NONANSFPMATH: mips_insn_group = 142;
pub const mips_insn_group_MIPS_GRP_NOTFP64BIT: mips_insn_group = 143;
pub const mips_insn_group_MIPS_GRP_NOTINMICROMIPS: mips_insn_group = 144;
pub const mips_insn_group_MIPS_GRP_NOTNACL: mips_insn_group = 145;
pub const mips_insn_group_MIPS_GRP_NOTMIPS32R6: mips_insn_group = 146;
pub const mips_insn_group_MIPS_GRP_NOTMIPS64R6: mips_insn_group = 147;
pub const mips_insn_group_MIPS_GRP_CNMIPS: mips_insn_group = 148;
pub const mips_insn_group_MIPS_GRP_MIPS32: mips_insn_group = 149;
pub const mips_insn_group_MIPS_GRP_MIPS32R6: mips_insn_group = 150;
pub const mips_insn_group_MIPS_GRP_MIPS64R6: mips_insn_group = 151;
pub const mips_insn_group_MIPS_GRP_MIPS2: mips_insn_group = 152;
pub const mips_insn_group_MIPS_GRP_MIPS3: mips_insn_group = 153;
pub const mips_insn_group_MIPS_GRP_MIPS3_32: mips_insn_group = 154;
pub const mips_insn_group_MIPS_GRP_MIPS3_32R2: mips_insn_group = 155;
pub const mips_insn_group_MIPS_GRP_MIPS4_32: mips_insn_group = 156;
pub const mips_insn_group_MIPS_GRP_MIPS4_32R2: mips_insn_group = 157;
pub const mips_insn_group_MIPS_GRP_MIPS5_32R2: mips_insn_group = 158;
pub const mips_insn_group_MIPS_GRP_GP32BIT: mips_insn_group = 159;
pub const mips_insn_group_MIPS_GRP_GP64BIT: mips_insn_group = 160;
pub const mips_insn_group_MIPS_GRP_ENDING: mips_insn_group = 161;
pub type mips_insn_group = ::core::ffi::c_uint;
pub const ppc_bc_PPC_BC_INVALID: ppc_bc = 0;
pub const ppc_bc_PPC_BC_LT: ppc_bc = 12;
pub const ppc_bc_PPC_BC_LE: ppc_bc = 36;
pub const ppc_bc_PPC_BC_EQ: ppc_bc = 76;
pub const ppc_bc_PPC_BC_GE: ppc_bc = 4;
pub const ppc_bc_PPC_BC_GT: ppc_bc = 44;
pub const ppc_bc_PPC_BC_NE: ppc_bc = 68;
pub const ppc_bc_PPC_BC_UN: ppc_bc = 108;
pub const ppc_bc_PPC_BC_NU: ppc_bc = 100;
pub const ppc_bc_PPC_BC_SO: ppc_bc = 140;
pub const ppc_bc_PPC_BC_NS: ppc_bc = 132;
pub type ppc_bc = ::core::ffi::c_uint;
pub const ppc_bh_PPC_BH_INVALID: ppc_bh = 0;
pub const ppc_bh_PPC_BH_PLUS: ppc_bh = 1;
pub const ppc_bh_PPC_BH_MINUS: ppc_bh = 2;
pub type ppc_bh = ::core::ffi::c_uint;
pub const ppc_op_type_PPC_OP_INVALID: ppc_op_type = 0;
pub const ppc_op_type_PPC_OP_REG: ppc_op_type = 1;
pub const ppc_op_type_PPC_OP_IMM: ppc_op_type = 2;
pub const ppc_op_type_PPC_OP_MEM: ppc_op_type = 3;
pub const ppc_op_type_PPC_OP_CRX: ppc_op_type = 64;
pub type ppc_op_type = ::core::ffi::c_uint;
pub const ppc_reg_PPC_REG_INVALID: ppc_reg = 0;
pub const ppc_reg_PPC_REG_CARRY: ppc_reg = 2;
pub const ppc_reg_PPC_REG_CTR: ppc_reg = 3;
pub const ppc_reg_PPC_REG_LR: ppc_reg = 5;
pub const ppc_reg_PPC_REG_RM: ppc_reg = 6;
pub const ppc_reg_PPC_REG_VRSAVE: ppc_reg = 8;
pub const ppc_reg_PPC_REG_XER: ppc_reg = 9;
pub const ppc_reg_PPC_REG_ZERO: ppc_reg = 10;
pub const ppc_reg_PPC_REG_CR0: ppc_reg = 12;
pub const ppc_reg_PPC_REG_CR1: ppc_reg = 13;
pub const ppc_reg_PPC_REG_CR2: ppc_reg = 14;
pub const ppc_reg_PPC_REG_CR3: ppc_reg = 15;
pub const ppc_reg_PPC_REG_CR4: ppc_reg = 16;
pub const ppc_reg_PPC_REG_CR5: ppc_reg = 17;
pub const ppc_reg_PPC_REG_CR6: ppc_reg = 18;
pub const ppc_reg_PPC_REG_CR7: ppc_reg = 19;
pub const ppc_reg_PPC_REG_CTR8: ppc_reg = 20;
pub const ppc_reg_PPC_REG_F0: ppc_reg = 21;
pub const ppc_reg_PPC_REG_F1: ppc_reg = 22;
pub const ppc_reg_PPC_REG_F2: ppc_reg = 23;
pub const ppc_reg_PPC_REG_F3: ppc_reg = 24;
pub const ppc_reg_PPC_REG_F4: ppc_reg = 25;
pub const ppc_reg_PPC_REG_F5: ppc_reg = 26;
pub const ppc_reg_PPC_REG_F6: ppc_reg = 27;
pub const ppc_reg_PPC_REG_F7: ppc_reg = 28;
pub const ppc_reg_PPC_REG_F8: ppc_reg = 29;
pub const ppc_reg_PPC_REG_F9: ppc_reg = 30;
pub const ppc_reg_PPC_REG_F10: ppc_reg = 31;
pub const ppc_reg_PPC_REG_F11: ppc_reg = 32;
pub const ppc_reg_PPC_REG_F12: ppc_reg = 33;
pub const ppc_reg_PPC_REG_F13: ppc_reg = 34;
pub const ppc_reg_PPC_REG_F14: ppc_reg = 35;
pub const ppc_reg_PPC_REG_F15: ppc_reg = 36;
pub const ppc_reg_PPC_REG_F16: ppc_reg = 37;
pub const ppc_reg_PPC_REG_F17: ppc_reg = 38;
pub const ppc_reg_PPC_REG_F18: ppc_reg = 39;
pub const ppc_reg_PPC_REG_F19: ppc_reg = 40;
pub const ppc_reg_PPC_REG_F20: ppc_reg = 41;
pub const ppc_reg_PPC_REG_F21: ppc_reg = 42;
pub const ppc_reg_PPC_REG_F22: ppc_reg = 43;
pub const ppc_reg_PPC_REG_F23: ppc_reg = 44;
pub const ppc_reg_PPC_REG_F24: ppc_reg = 45;
pub const ppc_reg_PPC_REG_F25: ppc_reg = 46;
pub const ppc_reg_PPC_REG_F26: ppc_reg = 47;
pub const ppc_reg_PPC_REG_F27: ppc_reg = 48;
pub const ppc_reg_PPC_REG_F28: ppc_reg = 49;
pub const ppc_reg_PPC_REG_F29: ppc_reg = 50;
pub const ppc_reg_PPC_REG_F30: ppc_reg = 51;
pub const ppc_reg_PPC_REG_F31: ppc_reg = 52;
pub const ppc_reg_PPC_REG_LR8: ppc_reg = 54;
pub const ppc_reg_PPC_REG_Q0: ppc_reg = 55;
pub const ppc_reg_PPC_REG_Q1: ppc_reg = 56;
pub const ppc_reg_PPC_REG_Q2: ppc_reg = 57;
pub const ppc_reg_PPC_REG_Q3: ppc_reg = 58;
pub const ppc_reg_PPC_REG_Q4: ppc_reg = 59;
pub const ppc_reg_PPC_REG_Q5: ppc_reg = 60;
pub const ppc_reg_PPC_REG_Q6: ppc_reg = 61;
pub const ppc_reg_PPC_REG_Q7: ppc_reg = 62;
pub const ppc_reg_PPC_REG_Q8: ppc_reg = 63;
pub const ppc_reg_PPC_REG_Q9: ppc_reg = 64;
pub const ppc_reg_PPC_REG_Q10: ppc_reg = 65;
pub const ppc_reg_PPC_REG_Q11: ppc_reg = 66;
pub const ppc_reg_PPC_REG_Q12: ppc_reg = 67;
pub const ppc_reg_PPC_REG_Q13: ppc_reg = 68;
pub const ppc_reg_PPC_REG_Q14: ppc_reg = 69;
pub const ppc_reg_PPC_REG_Q15: ppc_reg = 70;
pub const ppc_reg_PPC_REG_Q16: ppc_reg = 71;
pub const ppc_reg_PPC_REG_Q17: ppc_reg = 72;
pub const ppc_reg_PPC_REG_Q18: ppc_reg = 73;
pub const ppc_reg_PPC_REG_Q19: ppc_reg = 74;
pub const ppc_reg_PPC_REG_Q20: ppc_reg = 75;
pub const ppc_reg_PPC_REG_Q21: ppc_reg = 76;
pub const ppc_reg_PPC_REG_Q22: ppc_reg = 77;
pub const ppc_reg_PPC_REG_Q23: ppc_reg = 78;
pub const ppc_reg_PPC_REG_Q24: ppc_reg = 79;
pub const ppc_reg_PPC_REG_Q25: ppc_reg = 80;
pub const ppc_reg_PPC_REG_Q26: ppc_reg = 81;
pub const ppc_reg_PPC_REG_Q27: ppc_reg = 82;
pub const ppc_reg_PPC_REG_Q28: ppc_reg = 83;
pub const ppc_reg_PPC_REG_Q29: ppc_reg = 84;
pub const ppc_reg_PPC_REG_Q30: ppc_reg = 85;
pub const ppc_reg_PPC_REG_Q31: ppc_reg = 86;
pub const ppc_reg_PPC_REG_R0: ppc_reg = 87;
pub const ppc_reg_PPC_REG_R1: ppc_reg = 88;
pub const ppc_reg_PPC_REG_R2: ppc_reg = 89;
pub const ppc_reg_PPC_REG_R3: ppc_reg = 90;
pub const ppc_reg_PPC_REG_R4: ppc_reg = 91;
pub const ppc_reg_PPC_REG_R5: ppc_reg = 92;
pub const ppc_reg_PPC_REG_R6: ppc_reg = 93;
pub const ppc_reg_PPC_REG_R7: ppc_reg = 94;
pub const ppc_reg_PPC_REG_R8: ppc_reg = 95;
pub const ppc_reg_PPC_REG_R9: ppc_reg = 96;
pub const ppc_reg_PPC_REG_R10: ppc_reg = 97;
pub const ppc_reg_PPC_REG_R11: ppc_reg = 98;
pub const ppc_reg_PPC_REG_R12: ppc_reg = 99;
pub const ppc_reg_PPC_REG_R13: ppc_reg = 100;
pub const ppc_reg_PPC_REG_R14: ppc_reg = 101;
pub const ppc_reg_PPC_REG_R15: ppc_reg = 102;
pub const ppc_reg_PPC_REG_R16: ppc_reg = 103;
pub const ppc_reg_PPC_REG_R17: ppc_reg = 104;
pub const ppc_reg_PPC_REG_R18: ppc_reg = 105;
pub const ppc_reg_PPC_REG_R19: ppc_reg = 106;
pub const ppc_reg_PPC_REG_R20: ppc_reg = 107;
pub const ppc_reg_PPC_REG_R21: ppc_reg = 108;
pub const ppc_reg_PPC_REG_R22: ppc_reg = 109;
pub const ppc_reg_PPC_REG_R23: ppc_reg = 110;
pub const ppc_reg_PPC_REG_R24: ppc_reg = 111;
pub const ppc_reg_PPC_REG_R25: ppc_reg = 112;
pub const ppc_reg_PPC_REG_R26: ppc_reg = 113;
pub const ppc_reg_PPC_REG_R27: ppc_reg = 114;
pub const ppc_reg_PPC_REG_R28: ppc_reg = 115;
pub const ppc_reg_PPC_REG_R29: ppc_reg = 116;
pub const ppc_reg_PPC_REG_R30: ppc_reg = 117;
pub const ppc_reg_PPC_REG_R31: ppc_reg = 118;
pub const ppc_reg_PPC_REG_V0: ppc_reg = 151;
pub const ppc_reg_PPC_REG_V1: ppc_reg = 152;
pub const ppc_reg_PPC_REG_V2: ppc_reg = 153;
pub const ppc_reg_PPC_REG_V3: ppc_reg = 154;
pub const ppc_reg_PPC_REG_V4: ppc_reg = 155;
pub const ppc_reg_PPC_REG_V5: ppc_reg = 156;
pub const ppc_reg_PPC_REG_V6: ppc_reg = 157;
pub const ppc_reg_PPC_REG_V7: ppc_reg = 158;
pub const ppc_reg_PPC_REG_V8: ppc_reg = 159;
pub const ppc_reg_PPC_REG_V9: ppc_reg = 160;
pub const ppc_reg_PPC_REG_V10: ppc_reg = 161;
pub const ppc_reg_PPC_REG_V11: ppc_reg = 162;
pub const ppc_reg_PPC_REG_V12: ppc_reg = 163;
pub const ppc_reg_PPC_REG_V13: ppc_reg = 164;
pub const ppc_reg_PPC_REG_V14: ppc_reg = 165;
pub const ppc_reg_PPC_REG_V15: ppc_reg = 166;
pub const ppc_reg_PPC_REG_V16: ppc_reg = 167;
pub const ppc_reg_PPC_REG_V17: ppc_reg = 168;
pub const ppc_reg_PPC_REG_V18: ppc_reg = 169;
pub const ppc_reg_PPC_REG_V19: ppc_reg = 170;
pub const ppc_reg_PPC_REG_V20: ppc_reg = 171;
pub const ppc_reg_PPC_REG_V21: ppc_reg = 172;
pub const ppc_reg_PPC_REG_V22: ppc_reg = 173;
pub const ppc_reg_PPC_REG_V23: ppc_reg = 174;
pub const ppc_reg_PPC_REG_V24: ppc_reg = 175;
pub const ppc_reg_PPC_REG_V25: ppc_reg = 176;
pub const ppc_reg_PPC_REG_V26: ppc_reg = 177;
pub const ppc_reg_PPC_REG_V27: ppc_reg = 178;
pub const ppc_reg_PPC_REG_V28: ppc_reg = 179;
pub const ppc_reg_PPC_REG_V29: ppc_reg = 180;
pub const ppc_reg_PPC_REG_V30: ppc_reg = 181;
pub const ppc_reg_PPC_REG_V31: ppc_reg = 182;
pub const ppc_reg_PPC_REG_VS0: ppc_reg = 215;
pub const ppc_reg_PPC_REG_VS1: ppc_reg = 216;
pub const ppc_reg_PPC_REG_VS2: ppc_reg = 217;
pub const ppc_reg_PPC_REG_VS3: ppc_reg = 218;
pub const ppc_reg_PPC_REG_VS4: ppc_reg = 219;
pub const ppc_reg_PPC_REG_VS5: ppc_reg = 220;
pub const ppc_reg_PPC_REG_VS6: ppc_reg = 221;
pub const ppc_reg_PPC_REG_VS7: ppc_reg = 222;
pub const ppc_reg_PPC_REG_VS8: ppc_reg = 223;
pub const ppc_reg_PPC_REG_VS9: ppc_reg = 224;
pub const ppc_reg_PPC_REG_VS10: ppc_reg = 225;
pub const ppc_reg_PPC_REG_VS11: ppc_reg = 226;
pub const ppc_reg_PPC_REG_VS12: ppc_reg = 227;
pub const ppc_reg_PPC_REG_VS13: ppc_reg = 228;
pub const ppc_reg_PPC_REG_VS14: ppc_reg = 229;
pub const ppc_reg_PPC_REG_VS15: ppc_reg = 230;
pub const ppc_reg_PPC_REG_VS16: ppc_reg = 231;
pub const ppc_reg_PPC_REG_VS17: ppc_reg = 232;
pub const ppc_reg_PPC_REG_VS18: ppc_reg = 233;
pub const ppc_reg_PPC_REG_VS19: ppc_reg = 234;
pub const ppc_reg_PPC_REG_VS20: ppc_reg = 235;
pub const ppc_reg_PPC_REG_VS21: ppc_reg = 236;
pub const ppc_reg_PPC_REG_VS22: ppc_reg = 237;
pub const ppc_reg_PPC_REG_VS23: ppc_reg = 238;
pub const ppc_reg_PPC_REG_VS24: ppc_reg = 239;
pub const ppc_reg_PPC_REG_VS25: ppc_reg = 240;
pub const ppc_reg_PPC_REG_VS26: ppc_reg = 241;
pub const ppc_reg_PPC_REG_VS27: ppc_reg = 242;
pub const ppc_reg_PPC_REG_VS28: ppc_reg = 243;
pub const ppc_reg_PPC_REG_VS29: ppc_reg = 244;
pub const ppc_reg_PPC_REG_VS30: ppc_reg = 245;
pub const ppc_reg_PPC_REG_VS31: ppc_reg = 246;
pub const ppc_reg_PPC_REG_VS32: ppc_reg = 247;
pub const ppc_reg_PPC_REG_VS33: ppc_reg = 248;
pub const ppc_reg_PPC_REG_VS34: ppc_reg = 249;
pub const ppc_reg_PPC_REG_VS35: ppc_reg = 250;
pub const ppc_reg_PPC_REG_VS36: ppc_reg = 251;
pub const ppc_reg_PPC_REG_VS37: ppc_reg = 252;
pub const ppc_reg_PPC_REG_VS38: ppc_reg = 253;
pub const ppc_reg_PPC_REG_VS39: ppc_reg = 254;
pub const ppc_reg_PPC_REG_VS40: ppc_reg = 255;
pub const ppc_reg_PPC_REG_VS41: ppc_reg = 256;
pub const ppc_reg_PPC_REG_VS42: ppc_reg = 257;
pub const ppc_reg_PPC_REG_VS43: ppc_reg = 258;
pub const ppc_reg_PPC_REG_VS44: ppc_reg = 259;
pub const ppc_reg_PPC_REG_VS45: ppc_reg = 260;
pub const ppc_reg_PPC_REG_VS46: ppc_reg = 261;
pub const ppc_reg_PPC_REG_VS47: ppc_reg = 262;
pub const ppc_reg_PPC_REG_VS48: ppc_reg = 263;
pub const ppc_reg_PPC_REG_VS49: ppc_reg = 264;
pub const ppc_reg_PPC_REG_VS50: ppc_reg = 265;
pub const ppc_reg_PPC_REG_VS51: ppc_reg = 266;
pub const ppc_reg_PPC_REG_VS52: ppc_reg = 267;
pub const ppc_reg_PPC_REG_VS53: ppc_reg = 268;
pub const ppc_reg_PPC_REG_VS54: ppc_reg = 269;
pub const ppc_reg_PPC_REG_VS55: ppc_reg = 270;
pub const ppc_reg_PPC_REG_VS56: ppc_reg = 271;
pub const ppc_reg_PPC_REG_VS57: ppc_reg = 272;
pub const ppc_reg_PPC_REG_VS58: ppc_reg = 273;
pub const ppc_reg_PPC_REG_VS59: ppc_reg = 274;
pub const ppc_reg_PPC_REG_VS60: ppc_reg = 275;
pub const ppc_reg_PPC_REG_VS61: ppc_reg = 276;
pub const ppc_reg_PPC_REG_VS62: ppc_reg = 277;
pub const ppc_reg_PPC_REG_VS63: ppc_reg = 278;
pub const ppc_reg_PPC_REG_CR0EQ: ppc_reg = 312;
pub const ppc_reg_PPC_REG_CR1EQ: ppc_reg = 313;
pub const ppc_reg_PPC_REG_CR2EQ: ppc_reg = 314;
pub const ppc_reg_PPC_REG_CR3EQ: ppc_reg = 315;
pub const ppc_reg_PPC_REG_CR4EQ: ppc_reg = 316;
pub const ppc_reg_PPC_REG_CR5EQ: ppc_reg = 317;
pub const ppc_reg_PPC_REG_CR6EQ: ppc_reg = 318;
pub const ppc_reg_PPC_REG_CR7EQ: ppc_reg = 319;
pub const ppc_reg_PPC_REG_CR0GT: ppc_reg = 320;
pub const ppc_reg_PPC_REG_CR1GT: ppc_reg = 321;
pub const ppc_reg_PPC_REG_CR2GT: ppc_reg = 322;
pub const ppc_reg_PPC_REG_CR3GT: ppc_reg = 323;
pub const ppc_reg_PPC_REG_CR4GT: ppc_reg = 324;
pub const ppc_reg_PPC_REG_CR5GT: ppc_reg = 325;
pub const ppc_reg_PPC_REG_CR6GT: ppc_reg = 326;
pub const ppc_reg_PPC_REG_CR7GT: ppc_reg = 327;
pub const ppc_reg_PPC_REG_CR0LT: ppc_reg = 328;
pub const ppc_reg_PPC_REG_CR1LT: ppc_reg = 329;
pub const ppc_reg_PPC_REG_CR2LT: ppc_reg = 330;
pub const ppc_reg_PPC_REG_CR3LT: ppc_reg = 331;
pub const ppc_reg_PPC_REG_CR4LT: ppc_reg = 332;
pub const ppc_reg_PPC_REG_CR5LT: ppc_reg = 333;
pub const ppc_reg_PPC_REG_CR6LT: ppc_reg = 334;
pub const ppc_reg_PPC_REG_CR7LT: ppc_reg = 335;
pub const ppc_reg_PPC_REG_CR0UN: ppc_reg = 336;
pub const ppc_reg_PPC_REG_CR1UN: ppc_reg = 337;
pub const ppc_reg_PPC_REG_CR2UN: ppc_reg = 338;
pub const ppc_reg_PPC_REG_CR3UN: ppc_reg = 339;
pub const ppc_reg_PPC_REG_CR4UN: ppc_reg = 340;
pub const ppc_reg_PPC_REG_CR5UN: ppc_reg = 341;
pub const ppc_reg_PPC_REG_CR6UN: ppc_reg = 342;
pub const ppc_reg_PPC_REG_CR7UN: ppc_reg = 343;
pub const ppc_reg_PPC_REG_ENDING: ppc_reg = 344;
pub type ppc_reg = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ppc_op_mem {
    pub base: ppc_reg,
    pub disp: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ppc_op_crx {
    pub scale: ::core::ffi::c_uint,
    pub reg: ppc_reg,
    pub cond: ppc_bc,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_ppc_op {
    pub type_: ppc_op_type,
    pub __bindgen_anon_1: cs_ppc_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_ppc_op__bindgen_ty_1 {
    pub reg: ppc_reg,
    pub imm: i64,
    pub mem: ppc_op_mem,
    pub crx: ppc_op_crx,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_ppc {
    pub bc: ppc_bc,
    pub bh: ppc_bh,
    pub update_cr0: bool,
    pub op_count: u8,
    pub operands: [cs_ppc_op; 8usize],
}
pub const ppc_insn_PPC_INS_INVALID: ppc_insn = 0;
pub const ppc_insn_PPC_INS_ADD: ppc_insn = 1;
pub const ppc_insn_PPC_INS_ADDC: ppc_insn = 2;
pub const ppc_insn_PPC_INS_ADDE: ppc_insn = 3;
pub const ppc_insn_PPC_INS_ADDI: ppc_insn = 4;
pub const ppc_insn_PPC_INS_ADDIC: ppc_insn = 5;
pub const ppc_insn_PPC_INS_ADDIS: ppc_insn = 6;
pub const ppc_insn_PPC_INS_ADDME: ppc_insn = 7;
pub const ppc_insn_PPC_INS_ADDPCIS: ppc_insn = 8;
pub const ppc_insn_PPC_INS_ADDZE: ppc_insn = 9;
pub const ppc_insn_PPC_INS_AND: ppc_insn = 10;
pub const ppc_insn_PPC_INS_ANDC: ppc_insn = 11;
pub const ppc_insn_PPC_INS_ANDI: ppc_insn = 12;
pub const ppc_insn_PPC_INS_ANDIS: ppc_insn = 13;
pub const ppc_insn_PPC_INS_ATTN: ppc_insn = 14;
pub const ppc_insn_PPC_INS_B: ppc_insn = 15;
pub const ppc_insn_PPC_INS_BA: ppc_insn = 16;
pub const ppc_insn_PPC_INS_BC: ppc_insn = 17;
pub const ppc_insn_PPC_INS_BCA: ppc_insn = 18;
pub const ppc_insn_PPC_INS_BCCTR: ppc_insn = 19;
pub const ppc_insn_PPC_INS_BCCTRL: ppc_insn = 20;
pub const ppc_insn_PPC_INS_BCDCFN: ppc_insn = 21;
pub const ppc_insn_PPC_INS_BCDCFSQ: ppc_insn = 22;
pub const ppc_insn_PPC_INS_BCDCFZ: ppc_insn = 23;
pub const ppc_insn_PPC_INS_BCDCPSGN: ppc_insn = 24;
pub const ppc_insn_PPC_INS_BCDCTN: ppc_insn = 25;
pub const ppc_insn_PPC_INS_BCDCTSQ: ppc_insn = 26;
pub const ppc_insn_PPC_INS_BCDCTZ: ppc_insn = 27;
pub const ppc_insn_PPC_INS_BCDS: ppc_insn = 28;
pub const ppc_insn_PPC_INS_BCDSETSGN: ppc_insn = 29;
pub const ppc_insn_PPC_INS_BCDSR: ppc_insn = 30;
pub const ppc_insn_PPC_INS_BCDTRUNC: ppc_insn = 31;
pub const ppc_insn_PPC_INS_BCDUS: ppc_insn = 32;
pub const ppc_insn_PPC_INS_BCDUTRUNC: ppc_insn = 33;
pub const ppc_insn_PPC_INS_BCL: ppc_insn = 34;
pub const ppc_insn_PPC_INS_BCLA: ppc_insn = 35;
pub const ppc_insn_PPC_INS_BCLR: ppc_insn = 36;
pub const ppc_insn_PPC_INS_BCLRL: ppc_insn = 37;
pub const ppc_insn_PPC_INS_BCTR: ppc_insn = 38;
pub const ppc_insn_PPC_INS_BCTRL: ppc_insn = 39;
pub const ppc_insn_PPC_INS_BDNZ: ppc_insn = 40;
pub const ppc_insn_PPC_INS_BDNZA: ppc_insn = 41;
pub const ppc_insn_PPC_INS_BDNZF: ppc_insn = 42;
pub const ppc_insn_PPC_INS_BDNZFA: ppc_insn = 43;
pub const ppc_insn_PPC_INS_BDNZFL: ppc_insn = 44;
pub const ppc_insn_PPC_INS_BDNZFLA: ppc_insn = 45;
pub const ppc_insn_PPC_INS_BDNZFLR: ppc_insn = 46;
pub const ppc_insn_PPC_INS_BDNZFLRL: ppc_insn = 47;
pub const ppc_insn_PPC_INS_BDNZL: ppc_insn = 48;
pub const ppc_insn_PPC_INS_BDNZLA: ppc_insn = 49;
pub const ppc_insn_PPC_INS_BDNZLR: ppc_insn = 50;
pub const ppc_insn_PPC_INS_BDNZLRL: ppc_insn = 51;
pub const ppc_insn_PPC_INS_BDNZT: ppc_insn = 52;
pub const ppc_insn_PPC_INS_BDNZTA: ppc_insn = 53;
pub const ppc_insn_PPC_INS_BDNZTL: ppc_insn = 54;
pub const ppc_insn_PPC_INS_BDNZTLA: ppc_insn = 55;
pub const ppc_insn_PPC_INS_BDNZTLR: ppc_insn = 56;
pub const ppc_insn_PPC_INS_BDNZTLRL: ppc_insn = 57;
pub const ppc_insn_PPC_INS_BDZ: ppc_insn = 58;
pub const ppc_insn_PPC_INS_BDZA: ppc_insn = 59;
pub const ppc_insn_PPC_INS_BDZF: ppc_insn = 60;
pub const ppc_insn_PPC_INS_BDZFA: ppc_insn = 61;
pub const ppc_insn_PPC_INS_BDZFL: ppc_insn = 62;
pub const ppc_insn_PPC_INS_BDZFLA: ppc_insn = 63;
pub const ppc_insn_PPC_INS_BDZFLR: ppc_insn = 64;
pub const ppc_insn_PPC_INS_BDZFLRL: ppc_insn = 65;
pub const ppc_insn_PPC_INS_BDZL: ppc_insn = 66;
pub const ppc_insn_PPC_INS_BDZLA: ppc_insn = 67;
pub const ppc_insn_PPC_INS_BDZLR: ppc_insn = 68;
pub const ppc_insn_PPC_INS_BDZLRL: ppc_insn = 69;
pub const ppc_insn_PPC_INS_BDZT: ppc_insn = 70;
pub const ppc_insn_PPC_INS_BDZTA: ppc_insn = 71;
pub const ppc_insn_PPC_INS_BDZTL: ppc_insn = 72;
pub const ppc_insn_PPC_INS_BDZTLA: ppc_insn = 73;
pub const ppc_insn_PPC_INS_BDZTLR: ppc_insn = 74;
pub const ppc_insn_PPC_INS_BDZTLRL: ppc_insn = 75;
pub const ppc_insn_PPC_INS_BEQ: ppc_insn = 76;
pub const ppc_insn_PPC_INS_BEQA: ppc_insn = 77;
pub const ppc_insn_PPC_INS_BEQCTR: ppc_insn = 78;
pub const ppc_insn_PPC_INS_BEQCTRL: ppc_insn = 79;
pub const ppc_insn_PPC_INS_BEQL: ppc_insn = 80;
pub const ppc_insn_PPC_INS_BEQLA: ppc_insn = 81;
pub const ppc_insn_PPC_INS_BEQLR: ppc_insn = 82;
pub const ppc_insn_PPC_INS_BEQLRL: ppc_insn = 83;
pub const ppc_insn_PPC_INS_BF: ppc_insn = 84;
pub const ppc_insn_PPC_INS_BFA: ppc_insn = 85;
pub const ppc_insn_PPC_INS_BFCTR: ppc_insn = 86;
pub const ppc_insn_PPC_INS_BFCTRL: ppc_insn = 87;
pub const ppc_insn_PPC_INS_BFL: ppc_insn = 88;
pub const ppc_insn_PPC_INS_BFLA: ppc_insn = 89;
pub const ppc_insn_PPC_INS_BFLR: ppc_insn = 90;
pub const ppc_insn_PPC_INS_BFLRL: ppc_insn = 91;
pub const ppc_insn_PPC_INS_BGE: ppc_insn = 92;
pub const ppc_insn_PPC_INS_BGEA: ppc_insn = 93;
pub const ppc_insn_PPC_INS_BGECTR: ppc_insn = 94;
pub const ppc_insn_PPC_INS_BGECTRL: ppc_insn = 95;
pub const ppc_insn_PPC_INS_BGEL: ppc_insn = 96;
pub const ppc_insn_PPC_INS_BGELA: ppc_insn = 97;
pub const ppc_insn_PPC_INS_BGELR: ppc_insn = 98;
pub const ppc_insn_PPC_INS_BGELRL: ppc_insn = 99;
pub const ppc_insn_PPC_INS_BGT: ppc_insn = 100;
pub const ppc_insn_PPC_INS_BGTA: ppc_insn = 101;
pub const ppc_insn_PPC_INS_BGTCTR: ppc_insn = 102;
pub const ppc_insn_PPC_INS_BGTCTRL: ppc_insn = 103;
pub const ppc_insn_PPC_INS_BGTL: ppc_insn = 104;
pub const ppc_insn_PPC_INS_BGTLA: ppc_insn = 105;
pub const ppc_insn_PPC_INS_BGTLR: ppc_insn = 106;
pub const ppc_insn_PPC_INS_BGTLRL: ppc_insn = 107;
pub const ppc_insn_PPC_INS_BL: ppc_insn = 108;
pub const ppc_insn_PPC_INS_BLA: ppc_insn = 109;
pub const ppc_insn_PPC_INS_BLE: ppc_insn = 110;
pub const ppc_insn_PPC_INS_BLEA: ppc_insn = 111;
pub const ppc_insn_PPC_INS_BLECTR: ppc_insn = 112;
pub const ppc_insn_PPC_INS_BLECTRL: ppc_insn = 113;
pub const ppc_insn_PPC_INS_BLEL: ppc_insn = 114;
pub const ppc_insn_PPC_INS_BLELA: ppc_insn = 115;
pub const ppc_insn_PPC_INS_BLELR: ppc_insn = 116;
pub const ppc_insn_PPC_INS_BLELRL: ppc_insn = 117;
pub const ppc_insn_PPC_INS_BLR: ppc_insn = 118;
pub const ppc_insn_PPC_INS_BLRL: ppc_insn = 119;
pub const ppc_insn_PPC_INS_BLT: ppc_insn = 120;
pub const ppc_insn_PPC_INS_BLTA: ppc_insn = 121;
pub const ppc_insn_PPC_INS_BLTCTR: ppc_insn = 122;
pub const ppc_insn_PPC_INS_BLTCTRL: ppc_insn = 123;
pub const ppc_insn_PPC_INS_BLTL: ppc_insn = 124;
pub const ppc_insn_PPC_INS_BLTLA: ppc_insn = 125;
pub const ppc_insn_PPC_INS_BLTLR: ppc_insn = 126;
pub const ppc_insn_PPC_INS_BLTLRL: ppc_insn = 127;
pub const ppc_insn_PPC_INS_BNE: ppc_insn = 128;
pub const ppc_insn_PPC_INS_BNEA: ppc_insn = 129;
pub const ppc_insn_PPC_INS_BNECTR: ppc_insn = 130;
pub const ppc_insn_PPC_INS_BNECTRL: ppc_insn = 131;
pub const ppc_insn_PPC_INS_BNEL: ppc_insn = 132;
pub const ppc_insn_PPC_INS_BNELA: ppc_insn = 133;
pub const ppc_insn_PPC_INS_BNELR: ppc_insn = 134;
pub const ppc_insn_PPC_INS_BNELRL: ppc_insn = 135;
pub const ppc_insn_PPC_INS_BNG: ppc_insn = 136;
pub const ppc_insn_PPC_INS_BNGA: ppc_insn = 137;
pub const ppc_insn_PPC_INS_BNGCTR: ppc_insn = 138;
pub const ppc_insn_PPC_INS_BNGCTRL: ppc_insn = 139;
pub const ppc_insn_PPC_INS_BNGL: ppc_insn = 140;
pub const ppc_insn_PPC_INS_BNGLA: ppc_insn = 141;
pub const ppc_insn_PPC_INS_BNGLR: ppc_insn = 142;
pub const ppc_insn_PPC_INS_BNGLRL: ppc_insn = 143;
pub const ppc_insn_PPC_INS_BNL: ppc_insn = 144;
pub const ppc_insn_PPC_INS_BNLA: ppc_insn = 145;
pub const ppc_insn_PPC_INS_BNLCTR: ppc_insn = 146;
pub const ppc_insn_PPC_INS_BNLCTRL: ppc_insn = 147;
pub const ppc_insn_PPC_INS_BNLL: ppc_insn = 148;
pub const ppc_insn_PPC_INS_BNLLA: ppc_insn = 149;
pub const ppc_insn_PPC_INS_BNLLR: ppc_insn = 150;
pub const ppc_insn_PPC_INS_BNLLRL: ppc_insn = 151;
pub const ppc_insn_PPC_INS_BNS: ppc_insn = 152;
pub const ppc_insn_PPC_INS_BNSA: ppc_insn = 153;
pub const ppc_insn_PPC_INS_BNSCTR: ppc_insn = 154;
pub const ppc_insn_PPC_INS_BNSCTRL: ppc_insn = 155;
pub const ppc_insn_PPC_INS_BNSL: ppc_insn = 156;
pub const ppc_insn_PPC_INS_BNSLA: ppc_insn = 157;
pub const ppc_insn_PPC_INS_BNSLR: ppc_insn = 158;
pub const ppc_insn_PPC_INS_BNSLRL: ppc_insn = 159;
pub const ppc_insn_PPC_INS_BNU: ppc_insn = 160;
pub const ppc_insn_PPC_INS_BNUA: ppc_insn = 161;
pub const ppc_insn_PPC_INS_BNUCTR: ppc_insn = 162;
pub const ppc_insn_PPC_INS_BNUCTRL: ppc_insn = 163;
pub const ppc_insn_PPC_INS_BNUL: ppc_insn = 164;
pub const ppc_insn_PPC_INS_BNULA: ppc_insn = 165;
pub const ppc_insn_PPC_INS_BNULR: ppc_insn = 166;
pub const ppc_insn_PPC_INS_BNULRL: ppc_insn = 167;
pub const ppc_insn_PPC_INS_BPERMD: ppc_insn = 168;
pub const ppc_insn_PPC_INS_BRINC: ppc_insn = 169;
pub const ppc_insn_PPC_INS_BSO: ppc_insn = 170;
pub const ppc_insn_PPC_INS_BSOA: ppc_insn = 171;
pub const ppc_insn_PPC_INS_BSOCTR: ppc_insn = 172;
pub const ppc_insn_PPC_INS_BSOCTRL: ppc_insn = 173;
pub const ppc_insn_PPC_INS_BSOL: ppc_insn = 174;
pub const ppc_insn_PPC_INS_BSOLA: ppc_insn = 175;
pub const ppc_insn_PPC_INS_BSOLR: ppc_insn = 176;
pub const ppc_insn_PPC_INS_BSOLRL: ppc_insn = 177;
pub const ppc_insn_PPC_INS_BT: ppc_insn = 178;
pub const ppc_insn_PPC_INS_BTA: ppc_insn = 179;
pub const ppc_insn_PPC_INS_BTCTR: ppc_insn = 180;
pub const ppc_insn_PPC_INS_BTCTRL: ppc_insn = 181;
pub const ppc_insn_PPC_INS_BTL: ppc_insn = 182;
pub const ppc_insn_PPC_INS_BTLA: ppc_insn = 183;
pub const ppc_insn_PPC_INS_BTLR: ppc_insn = 184;
pub const ppc_insn_PPC_INS_BTLRL: ppc_insn = 185;
pub const ppc_insn_PPC_INS_BUN: ppc_insn = 186;
pub const ppc_insn_PPC_INS_BUNA: ppc_insn = 187;
pub const ppc_insn_PPC_INS_BUNCTR: ppc_insn = 188;
pub const ppc_insn_PPC_INS_BUNCTRL: ppc_insn = 189;
pub const ppc_insn_PPC_INS_BUNL: ppc_insn = 190;
pub const ppc_insn_PPC_INS_BUNLA: ppc_insn = 191;
pub const ppc_insn_PPC_INS_BUNLR: ppc_insn = 192;
pub const ppc_insn_PPC_INS_BUNLRL: ppc_insn = 193;
pub const ppc_insn_PPC_INS_CLRBHRB: ppc_insn = 194;
pub const ppc_insn_PPC_INS_CLRLDI: ppc_insn = 195;
pub const ppc_insn_PPC_INS_CLRLSLDI: ppc_insn = 196;
pub const ppc_insn_PPC_INS_CLRLSLWI: ppc_insn = 197;
pub const ppc_insn_PPC_INS_CLRLWI: ppc_insn = 198;
pub const ppc_insn_PPC_INS_CLRRDI: ppc_insn = 199;
pub const ppc_insn_PPC_INS_CLRRWI: ppc_insn = 200;
pub const ppc_insn_PPC_INS_CMP: ppc_insn = 201;
pub const ppc_insn_PPC_INS_CMPB: ppc_insn = 202;
pub const ppc_insn_PPC_INS_CMPD: ppc_insn = 203;
pub const ppc_insn_PPC_INS_CMPDI: ppc_insn = 204;
pub const ppc_insn_PPC_INS_CMPEQB: ppc_insn = 205;
pub const ppc_insn_PPC_INS_CMPI: ppc_insn = 206;
pub const ppc_insn_PPC_INS_CMPL: ppc_insn = 207;
pub const ppc_insn_PPC_INS_CMPLD: ppc_insn = 208;
pub const ppc_insn_PPC_INS_CMPLDI: ppc_insn = 209;
pub const ppc_insn_PPC_INS_CMPLI: ppc_insn = 210;
pub const ppc_insn_PPC_INS_CMPLW: ppc_insn = 211;
pub const ppc_insn_PPC_INS_CMPLWI: ppc_insn = 212;
pub const ppc_insn_PPC_INS_CMPRB: ppc_insn = 213;
pub const ppc_insn_PPC_INS_CMPW: ppc_insn = 214;
pub const ppc_insn_PPC_INS_CMPWI: ppc_insn = 215;
pub const ppc_insn_PPC_INS_CNTLZD: ppc_insn = 216;
pub const ppc_insn_PPC_INS_CNTLZW: ppc_insn = 217;
pub const ppc_insn_PPC_INS_CNTTZD: ppc_insn = 218;
pub const ppc_insn_PPC_INS_CNTTZW: ppc_insn = 219;
pub const ppc_insn_PPC_INS_COPY: ppc_insn = 220;
pub const ppc_insn_PPC_INS_COPY_FIRST: ppc_insn = 221;
pub const ppc_insn_PPC_INS_CP_ABORT: ppc_insn = 222;
pub const ppc_insn_PPC_INS_CRAND: ppc_insn = 223;
pub const ppc_insn_PPC_INS_CRANDC: ppc_insn = 224;
pub const ppc_insn_PPC_INS_CRCLR: ppc_insn = 225;
pub const ppc_insn_PPC_INS_CREQV: ppc_insn = 226;
pub const ppc_insn_PPC_INS_CRMOVE: ppc_insn = 227;
pub const ppc_insn_PPC_INS_CRNAND: ppc_insn = 228;
pub const ppc_insn_PPC_INS_CRNOR: ppc_insn = 229;
pub const ppc_insn_PPC_INS_CRNOT: ppc_insn = 230;
pub const ppc_insn_PPC_INS_CROR: ppc_insn = 231;
pub const ppc_insn_PPC_INS_CRORC: ppc_insn = 232;
pub const ppc_insn_PPC_INS_CRSET: ppc_insn = 233;
pub const ppc_insn_PPC_INS_CRXOR: ppc_insn = 234;
pub const ppc_insn_PPC_INS_DARN: ppc_insn = 235;
pub const ppc_insn_PPC_INS_DCBA: ppc_insn = 236;
pub const ppc_insn_PPC_INS_DCBF: ppc_insn = 237;
pub const ppc_insn_PPC_INS_DCBFEP: ppc_insn = 238;
pub const ppc_insn_PPC_INS_DCBFL: ppc_insn = 239;
pub const ppc_insn_PPC_INS_DCBFLP: ppc_insn = 240;
pub const ppc_insn_PPC_INS_DCBI: ppc_insn = 241;
pub const ppc_insn_PPC_INS_DCBST: ppc_insn = 242;
pub const ppc_insn_PPC_INS_DCBSTEP: ppc_insn = 243;
pub const ppc_insn_PPC_INS_DCBT: ppc_insn = 244;
pub const ppc_insn_PPC_INS_DCBTCT: ppc_insn = 245;
pub const ppc_insn_PPC_INS_DCBTDS: ppc_insn = 246;
pub const ppc_insn_PPC_INS_DCBTEP: ppc_insn = 247;
pub const ppc_insn_PPC_INS_DCBTST: ppc_insn = 248;
pub const ppc_insn_PPC_INS_DCBTSTCT: ppc_insn = 249;
pub const ppc_insn_PPC_INS_DCBTSTDS: ppc_insn = 250;
pub const ppc_insn_PPC_INS_DCBTSTEP: ppc_insn = 251;
pub const ppc_insn_PPC_INS_DCBTSTT: ppc_insn = 252;
pub const ppc_insn_PPC_INS_DCBTT: ppc_insn = 253;
pub const ppc_insn_PPC_INS_DCBZ: ppc_insn = 254;
pub const ppc_insn_PPC_INS_DCBZEP: ppc_insn = 255;
pub const ppc_insn_PPC_INS_DCBZL: ppc_insn = 256;
pub const ppc_insn_PPC_INS_DCBZLEP: ppc_insn = 257;
pub const ppc_insn_PPC_INS_DCCCI: ppc_insn = 258;
pub const ppc_insn_PPC_INS_DCI: ppc_insn = 259;
pub const ppc_insn_PPC_INS_DIVD: ppc_insn = 260;
pub const ppc_insn_PPC_INS_DIVDE: ppc_insn = 261;
pub const ppc_insn_PPC_INS_DIVDEU: ppc_insn = 262;
pub const ppc_insn_PPC_INS_DIVDU: ppc_insn = 263;
pub const ppc_insn_PPC_INS_DIVW: ppc_insn = 264;
pub const ppc_insn_PPC_INS_DIVWE: ppc_insn = 265;
pub const ppc_insn_PPC_INS_DIVWEU: ppc_insn = 266;
pub const ppc_insn_PPC_INS_DIVWU: ppc_insn = 267;
pub const ppc_insn_PPC_INS_DSS: ppc_insn = 268;
pub const ppc_insn_PPC_INS_DSSALL: ppc_insn = 269;
pub const ppc_insn_PPC_INS_DST: ppc_insn = 270;
pub const ppc_insn_PPC_INS_DSTST: ppc_insn = 271;
pub const ppc_insn_PPC_INS_DSTSTT: ppc_insn = 272;
pub const ppc_insn_PPC_INS_DSTT: ppc_insn = 273;
pub const ppc_insn_PPC_INS_EFDABS: ppc_insn = 274;
pub const ppc_insn_PPC_INS_EFDADD: ppc_insn = 275;
pub const ppc_insn_PPC_INS_EFDCFS: ppc_insn = 276;
pub const ppc_insn_PPC_INS_EFDCFSF: ppc_insn = 277;
pub const ppc_insn_PPC_INS_EFDCFSI: ppc_insn = 278;
pub const ppc_insn_PPC_INS_EFDCFSID: ppc_insn = 279;
pub const ppc_insn_PPC_INS_EFDCFUF: ppc_insn = 280;
pub const ppc_insn_PPC_INS_EFDCFUI: ppc_insn = 281;
pub const ppc_insn_PPC_INS_EFDCFUID: ppc_insn = 282;
pub const ppc_insn_PPC_INS_EFDCMPEQ: ppc_insn = 283;
pub const ppc_insn_PPC_INS_EFDCMPGT: ppc_insn = 284;
pub const ppc_insn_PPC_INS_EFDCMPLT: ppc_insn = 285;
pub const ppc_insn_PPC_INS_EFDCTSF: ppc_insn = 286;
pub const ppc_insn_PPC_INS_EFDCTSI: ppc_insn = 287;
pub const ppc_insn_PPC_INS_EFDCTSIDZ: ppc_insn = 288;
pub const ppc_insn_PPC_INS_EFDCTSIZ: ppc_insn = 289;
pub const ppc_insn_PPC_INS_EFDCTUF: ppc_insn = 290;
pub const ppc_insn_PPC_INS_EFDCTUI: ppc_insn = 291;
pub const ppc_insn_PPC_INS_EFDCTUIDZ: ppc_insn = 292;
pub const ppc_insn_PPC_INS_EFDCTUIZ: ppc_insn = 293;
pub const ppc_insn_PPC_INS_EFDDIV: ppc_insn = 294;
pub const ppc_insn_PPC_INS_EFDMUL: ppc_insn = 295;
pub const ppc_insn_PPC_INS_EFDNABS: ppc_insn = 296;
pub const ppc_insn_PPC_INS_EFDNEG: ppc_insn = 297;
pub const ppc_insn_PPC_INS_EFDSUB: ppc_insn = 298;
pub const ppc_insn_PPC_INS_EFDTSTEQ: ppc_insn = 299;
pub const ppc_insn_PPC_INS_EFDTSTGT: ppc_insn = 300;
pub const ppc_insn_PPC_INS_EFDTSTLT: ppc_insn = 301;
pub const ppc_insn_PPC_INS_EFSABS: ppc_insn = 302;
pub const ppc_insn_PPC_INS_EFSADD: ppc_insn = 303;
pub const ppc_insn_PPC_INS_EFSCFD: ppc_insn = 304;
pub const ppc_insn_PPC_INS_EFSCFSF: ppc_insn = 305;
pub const ppc_insn_PPC_INS_EFSCFSI: ppc_insn = 306;
pub const ppc_insn_PPC_INS_EFSCFUF: ppc_insn = 307;
pub const ppc_insn_PPC_INS_EFSCFUI: ppc_insn = 308;
pub const ppc_insn_PPC_INS_EFSCMPEQ: ppc_insn = 309;
pub const ppc_insn_PPC_INS_EFSCMPGT: ppc_insn = 310;
pub const ppc_insn_PPC_INS_EFSCMPLT: ppc_insn = 311;
pub const ppc_insn_PPC_INS_EFSCTSF: ppc_insn = 312;
pub const ppc_insn_PPC_INS_EFSCTSI: ppc_insn = 313;
pub const ppc_insn_PPC_INS_EFSCTSIZ: ppc_insn = 314;
pub const ppc_insn_PPC_INS_EFSCTUF: ppc_insn = 315;
pub const ppc_insn_PPC_INS_EFSCTUI: ppc_insn = 316;
pub const ppc_insn_PPC_INS_EFSCTUIZ: ppc_insn = 317;
pub const ppc_insn_PPC_INS_EFSDIV: ppc_insn = 318;
pub const ppc_insn_PPC_INS_EFSMUL: ppc_insn = 319;
pub const ppc_insn_PPC_INS_EFSNABS: ppc_insn = 320;
pub const ppc_insn_PPC_INS_EFSNEG: ppc_insn = 321;
pub const ppc_insn_PPC_INS_EFSSUB: ppc_insn = 322;
pub const ppc_insn_PPC_INS_EFSTSTEQ: ppc_insn = 323;
pub const ppc_insn_PPC_INS_EFSTSTGT: ppc_insn = 324;
pub const ppc_insn_PPC_INS_EFSTSTLT: ppc_insn = 325;
pub const ppc_insn_PPC_INS_EIEIO: ppc_insn = 326;
pub const ppc_insn_PPC_INS_EQV: ppc_insn = 327;
pub const ppc_insn_PPC_INS_EVABS: ppc_insn = 328;
pub const ppc_insn_PPC_INS_EVADDIW: ppc_insn = 329;
pub const ppc_insn_PPC_INS_EVADDSMIAAW: ppc_insn = 330;
pub const ppc_insn_PPC_INS_EVADDSSIAAW: ppc_insn = 331;
pub const ppc_insn_PPC_INS_EVADDUMIAAW: ppc_insn = 332;
pub const ppc_insn_PPC_INS_EVADDUSIAAW: ppc_insn = 333;
pub const ppc_insn_PPC_INS_EVADDW: ppc_insn = 334;
pub const ppc_insn_PPC_INS_EVAND: ppc_insn = 335;
pub const ppc_insn_PPC_INS_EVANDC: ppc_insn = 336;
pub const ppc_insn_PPC_INS_EVCMPEQ: ppc_insn = 337;
pub const ppc_insn_PPC_INS_EVCMPGTS: ppc_insn = 338;
pub const ppc_insn_PPC_INS_EVCMPGTU: ppc_insn = 339;
pub const ppc_insn_PPC_INS_EVCMPLTS: ppc_insn = 340;
pub const ppc_insn_PPC_INS_EVCMPLTU: ppc_insn = 341;
pub const ppc_insn_PPC_INS_EVCNTLSW: ppc_insn = 342;
pub const ppc_insn_PPC_INS_EVCNTLZW: ppc_insn = 343;
pub const ppc_insn_PPC_INS_EVDIVWS: ppc_insn = 344;
pub const ppc_insn_PPC_INS_EVDIVWU: ppc_insn = 345;
pub const ppc_insn_PPC_INS_EVEQV: ppc_insn = 346;
pub const ppc_insn_PPC_INS_EVEXTSB: ppc_insn = 347;
pub const ppc_insn_PPC_INS_EVEXTSH: ppc_insn = 348;
pub const ppc_insn_PPC_INS_EVFSABS: ppc_insn = 349;
pub const ppc_insn_PPC_INS_EVFSADD: ppc_insn = 350;
pub const ppc_insn_PPC_INS_EVFSCFSF: ppc_insn = 351;
pub const ppc_insn_PPC_INS_EVFSCFSI: ppc_insn = 352;
pub const ppc_insn_PPC_INS_EVFSCFUF: ppc_insn = 353;
pub const ppc_insn_PPC_INS_EVFSCFUI: ppc_insn = 354;
pub const ppc_insn_PPC_INS_EVFSCMPEQ: ppc_insn = 355;
pub const ppc_insn_PPC_INS_EVFSCMPGT: ppc_insn = 356;
pub const ppc_insn_PPC_INS_EVFSCMPLT: ppc_insn = 357;
pub const ppc_insn_PPC_INS_EVFSCTSF: ppc_insn = 358;
pub const ppc_insn_PPC_INS_EVFSCTSI: ppc_insn = 359;
pub const ppc_insn_PPC_INS_EVFSCTSIZ: ppc_insn = 360;
pub const ppc_insn_PPC_INS_EVFSCTUI: ppc_insn = 361;
pub const ppc_insn_PPC_INS_EVFSDIV: ppc_insn = 362;
pub const ppc_insn_PPC_INS_EVFSMUL: ppc_insn = 363;
pub const ppc_insn_PPC_INS_EVFSNABS: ppc_insn = 364;
pub const ppc_insn_PPC_INS_EVFSNEG: ppc_insn = 365;
pub const ppc_insn_PPC_INS_EVFSSUB: ppc_insn = 366;
pub const ppc_insn_PPC_INS_EVFSTSTEQ: ppc_insn = 367;
pub const ppc_insn_PPC_INS_EVFSTSTGT: ppc_insn = 368;
pub const ppc_insn_PPC_INS_EVFSTSTLT: ppc_insn = 369;
pub const ppc_insn_PPC_INS_EVLDD: ppc_insn = 370;
pub const ppc_insn_PPC_INS_EVLDDX: ppc_insn = 371;
pub const ppc_insn_PPC_INS_EVLDH: ppc_insn = 372;
pub const ppc_insn_PPC_INS_EVLDHX: ppc_insn = 373;
pub const ppc_insn_PPC_INS_EVLDW: ppc_insn = 374;
pub const ppc_insn_PPC_INS_EVLDWX: ppc_insn = 375;
pub const ppc_insn_PPC_INS_EVLHHESPLAT: ppc_insn = 376;
pub const ppc_insn_PPC_INS_EVLHHESPLATX: ppc_insn = 377;
pub const ppc_insn_PPC_INS_EVLHHOSSPLAT: ppc_insn = 378;
pub const ppc_insn_PPC_INS_EVLHHOSSPLATX: ppc_insn = 379;
pub const ppc_insn_PPC_INS_EVLHHOUSPLAT: ppc_insn = 380;
pub const ppc_insn_PPC_INS_EVLHHOUSPLATX: ppc_insn = 381;
pub const ppc_insn_PPC_INS_EVLWHE: ppc_insn = 382;
pub const ppc_insn_PPC_INS_EVLWHEX: ppc_insn = 383;
pub const ppc_insn_PPC_INS_EVLWHOS: ppc_insn = 384;
pub const ppc_insn_PPC_INS_EVLWHOSX: ppc_insn = 385;
pub const ppc_insn_PPC_INS_EVLWHOU: ppc_insn = 386;
pub const ppc_insn_PPC_INS_EVLWHOUX: ppc_insn = 387;
pub const ppc_insn_PPC_INS_EVLWHSPLAT: ppc_insn = 388;
pub const ppc_insn_PPC_INS_EVLWHSPLATX: ppc_insn = 389;
pub const ppc_insn_PPC_INS_EVLWWSPLAT: ppc_insn = 390;
pub const ppc_insn_PPC_INS_EVLWWSPLATX: ppc_insn = 391;
pub const ppc_insn_PPC_INS_EVMERGEHI: ppc_insn = 392;
pub const ppc_insn_PPC_INS_EVMERGEHILO: ppc_insn = 393;
pub const ppc_insn_PPC_INS_EVMERGELO: ppc_insn = 394;
pub const ppc_insn_PPC_INS_EVMERGELOHI: ppc_insn = 395;
pub const ppc_insn_PPC_INS_EVMHEGSMFAA: ppc_insn = 396;
pub const ppc_insn_PPC_INS_EVMHEGSMFAN: ppc_insn = 397;
pub const ppc_insn_PPC_INS_EVMHEGSMIAA: ppc_insn = 398;
pub const ppc_insn_PPC_INS_EVMHEGSMIAN: ppc_insn = 399;
pub const ppc_insn_PPC_INS_EVMHEGUMIAA: ppc_insn = 400;
pub const ppc_insn_PPC_INS_EVMHEGUMIAN: ppc_insn = 401;
pub const ppc_insn_PPC_INS_EVMHESMF: ppc_insn = 402;
pub const ppc_insn_PPC_INS_EVMHESMFA: ppc_insn = 403;
pub const ppc_insn_PPC_INS_EVMHESMFAAW: ppc_insn = 404;
pub const ppc_insn_PPC_INS_EVMHESMFANW: ppc_insn = 405;
pub const ppc_insn_PPC_INS_EVMHESMI: ppc_insn = 406;
pub const ppc_insn_PPC_INS_EVMHESMIA: ppc_insn = 407;
pub const ppc_insn_PPC_INS_EVMHESMIAAW: ppc_insn = 408;
pub const ppc_insn_PPC_INS_EVMHESMIANW: ppc_insn = 409;
pub const ppc_insn_PPC_INS_EVMHESSF: ppc_insn = 410;
pub const ppc_insn_PPC_INS_EVMHESSFA: ppc_insn = 411;
pub const ppc_insn_PPC_INS_EVMHESSFAAW: ppc_insn = 412;
pub const ppc_insn_PPC_INS_EVMHESSFANW: ppc_insn = 413;
pub const ppc_insn_PPC_INS_EVMHESSIAAW: ppc_insn = 414;
pub const ppc_insn_PPC_INS_EVMHESSIANW: ppc_insn = 415;
pub const ppc_insn_PPC_INS_EVMHEUMI: ppc_insn = 416;
pub const ppc_insn_PPC_INS_EVMHEUMIA: ppc_insn = 417;
pub const ppc_insn_PPC_INS_EVMHEUMIAAW: ppc_insn = 418;
pub const ppc_insn_PPC_INS_EVMHEUMIANW: ppc_insn = 419;
pub const ppc_insn_PPC_INS_EVMHEUSIAAW: ppc_insn = 420;
pub const ppc_insn_PPC_INS_EVMHEUSIANW: ppc_insn = 421;
pub const ppc_insn_PPC_INS_EVMHOGSMFAA: ppc_insn = 422;
pub const ppc_insn_PPC_INS_EVMHOGSMFAN: ppc_insn = 423;
pub const ppc_insn_PPC_INS_EVMHOGSMIAA: ppc_insn = 424;
pub const ppc_insn_PPC_INS_EVMHOGSMIAN: ppc_insn = 425;
pub const ppc_insn_PPC_INS_EVMHOGUMIAA: ppc_insn = 426;
pub const ppc_insn_PPC_INS_EVMHOGUMIAN: ppc_insn = 427;
pub const ppc_insn_PPC_INS_EVMHOSMF: ppc_insn = 428;
pub const ppc_insn_PPC_INS_EVMHOSMFA: ppc_insn = 429;
pub const ppc_insn_PPC_INS_EVMHOSMFAAW: ppc_insn = 430;
pub const ppc_insn_PPC_INS_EVMHOSMFANW: ppc_insn = 431;
pub const ppc_insn_PPC_INS_EVMHOSMI: ppc_insn = 432;
pub const ppc_insn_PPC_INS_EVMHOSMIA: ppc_insn = 433;
pub const ppc_insn_PPC_INS_EVMHOSMIAAW: ppc_insn = 434;
pub const ppc_insn_PPC_INS_EVMHOSMIANW: ppc_insn = 435;
pub const ppc_insn_PPC_INS_EVMHOSSF: ppc_insn = 436;
pub const ppc_insn_PPC_INS_EVMHOSSFA: ppc_insn = 437;
pub const ppc_insn_PPC_INS_EVMHOSSFAAW: ppc_insn = 438;
pub const ppc_insn_PPC_INS_EVMHOSSFANW: ppc_insn = 439;
pub const ppc_insn_PPC_INS_EVMHOSSIAAW: ppc_insn = 440;
pub const ppc_insn_PPC_INS_EVMHOSSIANW: ppc_insn = 441;
pub const ppc_insn_PPC_INS_EVMHOUMI: ppc_insn = 442;
pub const ppc_insn_PPC_INS_EVMHOUMIA: ppc_insn = 443;
pub const ppc_insn_PPC_INS_EVMHOUMIAAW: ppc_insn = 444;
pub const ppc_insn_PPC_INS_EVMHOUMIANW: ppc_insn = 445;
pub const ppc_insn_PPC_INS_EVMHOUSIAAW: ppc_insn = 446;
pub const ppc_insn_PPC_INS_EVMHOUSIANW: ppc_insn = 447;
pub const ppc_insn_PPC_INS_EVMRA: ppc_insn = 448;
pub const ppc_insn_PPC_INS_EVMWHSMF: ppc_insn = 449;
pub const ppc_insn_PPC_INS_EVMWHSMFA: ppc_insn = 450;
pub const ppc_insn_PPC_INS_EVMWHSMI: ppc_insn = 451;
pub const ppc_insn_PPC_INS_EVMWHSMIA: ppc_insn = 452;
pub const ppc_insn_PPC_INS_EVMWHSSF: ppc_insn = 453;
pub const ppc_insn_PPC_INS_EVMWHSSFA: ppc_insn = 454;
pub const ppc_insn_PPC_INS_EVMWHUMI: ppc_insn = 455;
pub const ppc_insn_PPC_INS_EVMWHUMIA: ppc_insn = 456;
pub const ppc_insn_PPC_INS_EVMWLSMIAAW: ppc_insn = 457;
pub const ppc_insn_PPC_INS_EVMWLSMIANW: ppc_insn = 458;
pub const ppc_insn_PPC_INS_EVMWLSSIAAW: ppc_insn = 459;
pub const ppc_insn_PPC_INS_EVMWLSSIANW: ppc_insn = 460;
pub const ppc_insn_PPC_INS_EVMWLUMI: ppc_insn = 461;
pub const ppc_insn_PPC_INS_EVMWLUMIA: ppc_insn = 462;
pub const ppc_insn_PPC_INS_EVMWLUMIAAW: ppc_insn = 463;
pub const ppc_insn_PPC_INS_EVMWLUMIANW: ppc_insn = 464;
pub const ppc_insn_PPC_INS_EVMWLUSIAAW: ppc_insn = 465;
pub const ppc_insn_PPC_INS_EVMWLUSIANW: ppc_insn = 466;
pub const ppc_insn_PPC_INS_EVMWSMF: ppc_insn = 467;
pub const ppc_insn_PPC_INS_EVMWSMFA: ppc_insn = 468;
pub const ppc_insn_PPC_INS_EVMWSMFAA: ppc_insn = 469;
pub const ppc_insn_PPC_INS_EVMWSMFAN: ppc_insn = 470;
pub const ppc_insn_PPC_INS_EVMWSMI: ppc_insn = 471;
pub const ppc_insn_PPC_INS_EVMWSMIA: ppc_insn = 472;
pub const ppc_insn_PPC_INS_EVMWSMIAA: ppc_insn = 473;
pub const ppc_insn_PPC_INS_EVMWSMIAN: ppc_insn = 474;
pub const ppc_insn_PPC_INS_EVMWSSF: ppc_insn = 475;
pub const ppc_insn_PPC_INS_EVMWSSFA: ppc_insn = 476;
pub const ppc_insn_PPC_INS_EVMWSSFAA: ppc_insn = 477;
pub const ppc_insn_PPC_INS_EVMWSSFAN: ppc_insn = 478;
pub const ppc_insn_PPC_INS_EVMWUMI: ppc_insn = 479;
pub const ppc_insn_PPC_INS_EVMWUMIA: ppc_insn = 480;
pub const ppc_insn_PPC_INS_EVMWUMIAA: ppc_insn = 481;
pub const ppc_insn_PPC_INS_EVMWUMIAN: ppc_insn = 482;
pub const ppc_insn_PPC_INS_EVNAND: ppc_insn = 483;
pub const ppc_insn_PPC_INS_EVNEG: ppc_insn = 484;
pub const ppc_insn_PPC_INS_EVNOR: ppc_insn = 485;
pub const ppc_insn_PPC_INS_EVOR: ppc_insn = 486;
pub const ppc_insn_PPC_INS_EVORC: ppc_insn = 487;
pub const ppc_insn_PPC_INS_EVRLW: ppc_insn = 488;
pub const ppc_insn_PPC_INS_EVRLWI: ppc_insn = 489;
pub const ppc_insn_PPC_INS_EVRNDW: ppc_insn = 490;
pub const ppc_insn_PPC_INS_EVSEL: ppc_insn = 491;
pub const ppc_insn_PPC_INS_EVSLW: ppc_insn = 492;
pub const ppc_insn_PPC_INS_EVSLWI: ppc_insn = 493;
pub const ppc_insn_PPC_INS_EVSPLATFI: ppc_insn = 494;
pub const ppc_insn_PPC_INS_EVSPLATI: ppc_insn = 495;
pub const ppc_insn_PPC_INS_EVSRWIS: ppc_insn = 496;
pub const ppc_insn_PPC_INS_EVSRWIU: ppc_insn = 497;
pub const ppc_insn_PPC_INS_EVSRWS: ppc_insn = 498;
pub const ppc_insn_PPC_INS_EVSRWU: ppc_insn = 499;
pub const ppc_insn_PPC_INS_EVSTDD: ppc_insn = 500;
pub const ppc_insn_PPC_INS_EVSTDDX: ppc_insn = 501;
pub const ppc_insn_PPC_INS_EVSTDH: ppc_insn = 502;
pub const ppc_insn_PPC_INS_EVSTDHX: ppc_insn = 503;
pub const ppc_insn_PPC_INS_EVSTDW: ppc_insn = 504;
pub const ppc_insn_PPC_INS_EVSTDWX: ppc_insn = 505;
pub const ppc_insn_PPC_INS_EVSTWHE: ppc_insn = 506;
pub const ppc_insn_PPC_INS_EVSTWHEX: ppc_insn = 507;
pub const ppc_insn_PPC_INS_EVSTWHO: ppc_insn = 508;
pub const ppc_insn_PPC_INS_EVSTWHOX: ppc_insn = 509;
pub const ppc_insn_PPC_INS_EVSTWWE: ppc_insn = 510;
pub const ppc_insn_PPC_INS_EVSTWWEX: ppc_insn = 511;
pub const ppc_insn_PPC_INS_EVSTWWO: ppc_insn = 512;
pub const ppc_insn_PPC_INS_EVSTWWOX: ppc_insn = 513;
pub const ppc_insn_PPC_INS_EVSUBFSMIAAW: ppc_insn = 514;
pub const ppc_insn_PPC_INS_EVSUBFSSIAAW: ppc_insn = 515;
pub const ppc_insn_PPC_INS_EVSUBFUMIAAW: ppc_insn = 516;
pub const ppc_insn_PPC_INS_EVSUBFUSIAAW: ppc_insn = 517;
pub const ppc_insn_PPC_INS_EVSUBFW: ppc_insn = 518;
pub const ppc_insn_PPC_INS_EVSUBIFW: ppc_insn = 519;
pub const ppc_insn_PPC_INS_EVXOR: ppc_insn = 520;
pub const ppc_insn_PPC_INS_EXTLDI: ppc_insn = 521;
pub const ppc_insn_PPC_INS_EXTLWI: ppc_insn = 522;
pub const ppc_insn_PPC_INS_EXTRDI: ppc_insn = 523;
pub const ppc_insn_PPC_INS_EXTRWI: ppc_insn = 524;
pub const ppc_insn_PPC_INS_EXTSB: ppc_insn = 525;
pub const ppc_insn_PPC_INS_EXTSH: ppc_insn = 526;
pub const ppc_insn_PPC_INS_EXTSW: ppc_insn = 527;
pub const ppc_insn_PPC_INS_EXTSWSLI: ppc_insn = 528;
pub const ppc_insn_PPC_INS_FABS: ppc_insn = 529;
pub const ppc_insn_PPC_INS_FADD: ppc_insn = 530;
pub const ppc_insn_PPC_INS_FADDS: ppc_insn = 531;
pub const ppc_insn_PPC_INS_FCFID: ppc_insn = 532;
pub const ppc_insn_PPC_INS_FCFIDS: ppc_insn = 533;
pub const ppc_insn_PPC_INS_FCFIDU: ppc_insn = 534;
pub const ppc_insn_PPC_INS_FCFIDUS: ppc_insn = 535;
pub const ppc_insn_PPC_INS_FCMPU: ppc_insn = 536;
pub const ppc_insn_PPC_INS_FCPSGN: ppc_insn = 537;
pub const ppc_insn_PPC_INS_FCTID: ppc_insn = 538;
pub const ppc_insn_PPC_INS_FCTIDU: ppc_insn = 539;
pub const ppc_insn_PPC_INS_FCTIDUZ: ppc_insn = 540;
pub const ppc_insn_PPC_INS_FCTIDZ: ppc_insn = 541;
pub const ppc_insn_PPC_INS_FCTIW: ppc_insn = 542;
pub const ppc_insn_PPC_INS_FCTIWU: ppc_insn = 543;
pub const ppc_insn_PPC_INS_FCTIWUZ: ppc_insn = 544;
pub const ppc_insn_PPC_INS_FCTIWZ: ppc_insn = 545;
pub const ppc_insn_PPC_INS_FDIV: ppc_insn = 546;
pub const ppc_insn_PPC_INS_FDIVS: ppc_insn = 547;
pub const ppc_insn_PPC_INS_FMADD: ppc_insn = 548;
pub const ppc_insn_PPC_INS_FMADDS: ppc_insn = 549;
pub const ppc_insn_PPC_INS_FMR: ppc_insn = 550;
pub const ppc_insn_PPC_INS_FMSUB: ppc_insn = 551;
pub const ppc_insn_PPC_INS_FMSUBS: ppc_insn = 552;
pub const ppc_insn_PPC_INS_FMUL: ppc_insn = 553;
pub const ppc_insn_PPC_INS_FMULS: ppc_insn = 554;
pub const ppc_insn_PPC_INS_FNABS: ppc_insn = 555;
pub const ppc_insn_PPC_INS_FNEG: ppc_insn = 556;
pub const ppc_insn_PPC_INS_FNMADD: ppc_insn = 557;
pub const ppc_insn_PPC_INS_FNMADDS: ppc_insn = 558;
pub const ppc_insn_PPC_INS_FNMSUB: ppc_insn = 559;
pub const ppc_insn_PPC_INS_FNMSUBS: ppc_insn = 560;
pub const ppc_insn_PPC_INS_FRE: ppc_insn = 561;
pub const ppc_insn_PPC_INS_FRES: ppc_insn = 562;
pub const ppc_insn_PPC_INS_FRIM: ppc_insn = 563;
pub const ppc_insn_PPC_INS_FRIN: ppc_insn = 564;
pub const ppc_insn_PPC_INS_FRIP: ppc_insn = 565;
pub const ppc_insn_PPC_INS_FRIZ: ppc_insn = 566;
pub const ppc_insn_PPC_INS_FRSP: ppc_insn = 567;
pub const ppc_insn_PPC_INS_FRSQRTE: ppc_insn = 568;
pub const ppc_insn_PPC_INS_FRSQRTES: ppc_insn = 569;
pub const ppc_insn_PPC_INS_FSEL: ppc_insn = 570;
pub const ppc_insn_PPC_INS_FSQRT: ppc_insn = 571;
pub const ppc_insn_PPC_INS_FSQRTS: ppc_insn = 572;
pub const ppc_insn_PPC_INS_FSUB: ppc_insn = 573;
pub const ppc_insn_PPC_INS_FSUBS: ppc_insn = 574;
pub const ppc_insn_PPC_INS_FTDIV: ppc_insn = 575;
pub const ppc_insn_PPC_INS_FTSQRT: ppc_insn = 576;
pub const ppc_insn_PPC_INS_HRFID: ppc_insn = 577;
pub const ppc_insn_PPC_INS_ICBI: ppc_insn = 578;
pub const ppc_insn_PPC_INS_ICBIEP: ppc_insn = 579;
pub const ppc_insn_PPC_INS_ICBLC: ppc_insn = 580;
pub const ppc_insn_PPC_INS_ICBLQ: ppc_insn = 581;
pub const ppc_insn_PPC_INS_ICBT: ppc_insn = 582;
pub const ppc_insn_PPC_INS_ICBTLS: ppc_insn = 583;
pub const ppc_insn_PPC_INS_ICCCI: ppc_insn = 584;
pub const ppc_insn_PPC_INS_ICI: ppc_insn = 585;
pub const ppc_insn_PPC_INS_INSLWI: ppc_insn = 586;
pub const ppc_insn_PPC_INS_INSRDI: ppc_insn = 587;
pub const ppc_insn_PPC_INS_INSRWI: ppc_insn = 588;
pub const ppc_insn_PPC_INS_ISEL: ppc_insn = 589;
pub const ppc_insn_PPC_INS_ISYNC: ppc_insn = 590;
pub const ppc_insn_PPC_INS_LA: ppc_insn = 591;
pub const ppc_insn_PPC_INS_LBARX: ppc_insn = 592;
pub const ppc_insn_PPC_INS_LBEPX: ppc_insn = 593;
pub const ppc_insn_PPC_INS_LBZ: ppc_insn = 594;
pub const ppc_insn_PPC_INS_LBZCIX: ppc_insn = 595;
pub const ppc_insn_PPC_INS_LBZU: ppc_insn = 596;
pub const ppc_insn_PPC_INS_LBZUX: ppc_insn = 597;
pub const ppc_insn_PPC_INS_LBZX: ppc_insn = 598;
pub const ppc_insn_PPC_INS_LD: ppc_insn = 599;
pub const ppc_insn_PPC_INS_LDARX: ppc_insn = 600;
pub const ppc_insn_PPC_INS_LDAT: ppc_insn = 601;
pub const ppc_insn_PPC_INS_LDBRX: ppc_insn = 602;
pub const ppc_insn_PPC_INS_LDCIX: ppc_insn = 603;
pub const ppc_insn_PPC_INS_LDMX: ppc_insn = 604;
pub const ppc_insn_PPC_INS_LDU: ppc_insn = 605;
pub const ppc_insn_PPC_INS_LDUX: ppc_insn = 606;
pub const ppc_insn_PPC_INS_LDX: ppc_insn = 607;
pub const ppc_insn_PPC_INS_LFD: ppc_insn = 608;
pub const ppc_insn_PPC_INS_LFDEPX: ppc_insn = 609;
pub const ppc_insn_PPC_INS_LFDU: ppc_insn = 610;
pub const ppc_insn_PPC_INS_LFDUX: ppc_insn = 611;
pub const ppc_insn_PPC_INS_LFDX: ppc_insn = 612;
pub const ppc_insn_PPC_INS_LFIWAX: ppc_insn = 613;
pub const ppc_insn_PPC_INS_LFIWZX: ppc_insn = 614;
pub const ppc_insn_PPC_INS_LFS: ppc_insn = 615;
pub const ppc_insn_PPC_INS_LFSU: ppc_insn = 616;
pub const ppc_insn_PPC_INS_LFSUX: ppc_insn = 617;
pub const ppc_insn_PPC_INS_LFSX: ppc_insn = 618;
pub const ppc_insn_PPC_INS_LHA: ppc_insn = 619;
pub const ppc_insn_PPC_INS_LHARX: ppc_insn = 620;
pub const ppc_insn_PPC_INS_LHAU: ppc_insn = 621;
pub const ppc_insn_PPC_INS_LHAUX: ppc_insn = 622;
pub const ppc_insn_PPC_INS_LHAX: ppc_insn = 623;
pub const ppc_insn_PPC_INS_LHBRX: ppc_insn = 624;
pub const ppc_insn_PPC_INS_LHEPX: ppc_insn = 625;
pub const ppc_insn_PPC_INS_LHZ: ppc_insn = 626;
pub const ppc_insn_PPC_INS_LHZCIX: ppc_insn = 627;
pub const ppc_insn_PPC_INS_LHZU: ppc_insn = 628;
pub const ppc_insn_PPC_INS_LHZUX: ppc_insn = 629;
pub const ppc_insn_PPC_INS_LHZX: ppc_insn = 630;
pub const ppc_insn_PPC_INS_LI: ppc_insn = 631;
pub const ppc_insn_PPC_INS_LIS: ppc_insn = 632;
pub const ppc_insn_PPC_INS_LMW: ppc_insn = 633;
pub const ppc_insn_PPC_INS_LNIA: ppc_insn = 634;
pub const ppc_insn_PPC_INS_LSWI: ppc_insn = 635;
pub const ppc_insn_PPC_INS_LVEBX: ppc_insn = 636;
pub const ppc_insn_PPC_INS_LVEHX: ppc_insn = 637;
pub const ppc_insn_PPC_INS_LVEWX: ppc_insn = 638;
pub const ppc_insn_PPC_INS_LVSL: ppc_insn = 639;
pub const ppc_insn_PPC_INS_LVSR: ppc_insn = 640;
pub const ppc_insn_PPC_INS_LVX: ppc_insn = 641;
pub const ppc_insn_PPC_INS_LVXL: ppc_insn = 642;
pub const ppc_insn_PPC_INS_LWA: ppc_insn = 643;
pub const ppc_insn_PPC_INS_LWARX: ppc_insn = 644;
pub const ppc_insn_PPC_INS_LWAT: ppc_insn = 645;
pub const ppc_insn_PPC_INS_LWAUX: ppc_insn = 646;
pub const ppc_insn_PPC_INS_LWAX: ppc_insn = 647;
pub const ppc_insn_PPC_INS_LWBRX: ppc_insn = 648;
pub const ppc_insn_PPC_INS_LWEPX: ppc_insn = 649;
pub const ppc_insn_PPC_INS_LWSYNC: ppc_insn = 650;
pub const ppc_insn_PPC_INS_LWZ: ppc_insn = 651;
pub const ppc_insn_PPC_INS_LWZCIX: ppc_insn = 652;
pub const ppc_insn_PPC_INS_LWZU: ppc_insn = 653;
pub const ppc_insn_PPC_INS_LWZUX: ppc_insn = 654;
pub const ppc_insn_PPC_INS_LWZX: ppc_insn = 655;
pub const ppc_insn_PPC_INS_LXSD: ppc_insn = 656;
pub const ppc_insn_PPC_INS_LXSDX: ppc_insn = 657;
pub const ppc_insn_PPC_INS_LXSIBZX: ppc_insn = 658;
pub const ppc_insn_PPC_INS_LXSIHZX: ppc_insn = 659;
pub const ppc_insn_PPC_INS_LXSIWAX: ppc_insn = 660;
pub const ppc_insn_PPC_INS_LXSIWZX: ppc_insn = 661;
pub const ppc_insn_PPC_INS_LXSSP: ppc_insn = 662;
pub const ppc_insn_PPC_INS_LXSSPX: ppc_insn = 663;
pub const ppc_insn_PPC_INS_LXV: ppc_insn = 664;
pub const ppc_insn_PPC_INS_LXVB16X: ppc_insn = 665;
pub const ppc_insn_PPC_INS_LXVD2X: ppc_insn = 666;
pub const ppc_insn_PPC_INS_LXVDSX: ppc_insn = 667;
pub const ppc_insn_PPC_INS_LXVH8X: ppc_insn = 668;
pub const ppc_insn_PPC_INS_LXVL: ppc_insn = 669;
pub const ppc_insn_PPC_INS_LXVLL: ppc_insn = 670;
pub const ppc_insn_PPC_INS_LXVW4X: ppc_insn = 671;
pub const ppc_insn_PPC_INS_LXVWSX: ppc_insn = 672;
pub const ppc_insn_PPC_INS_LXVX: ppc_insn = 673;
pub const ppc_insn_PPC_INS_MADDHD: ppc_insn = 674;
pub const ppc_insn_PPC_INS_MADDHDU: ppc_insn = 675;
pub const ppc_insn_PPC_INS_MADDLD: ppc_insn = 676;
pub const ppc_insn_PPC_INS_MBAR: ppc_insn = 677;
pub const ppc_insn_PPC_INS_MCRF: ppc_insn = 678;
pub const ppc_insn_PPC_INS_MCRFS: ppc_insn = 679;
pub const ppc_insn_PPC_INS_MCRXRX: ppc_insn = 680;
pub const ppc_insn_PPC_INS_MFAMR: ppc_insn = 681;
pub const ppc_insn_PPC_INS_MFASR: ppc_insn = 682;
pub const ppc_insn_PPC_INS_MFBHRBE: ppc_insn = 683;
pub const ppc_insn_PPC_INS_MFBR0: ppc_insn = 684;
pub const ppc_insn_PPC_INS_MFBR1: ppc_insn = 685;
pub const ppc_insn_PPC_INS_MFBR2: ppc_insn = 686;
pub const ppc_insn_PPC_INS_MFBR3: ppc_insn = 687;
pub const ppc_insn_PPC_INS_MFBR4: ppc_insn = 688;
pub const ppc_insn_PPC_INS_MFBR5: ppc_insn = 689;
pub const ppc_insn_PPC_INS_MFBR6: ppc_insn = 690;
pub const ppc_insn_PPC_INS_MFBR7: ppc_insn = 691;
pub const ppc_insn_PPC_INS_MFCFAR: ppc_insn = 692;
pub const ppc_insn_PPC_INS_MFCR: ppc_insn = 693;
pub const ppc_insn_PPC_INS_MFCTR: ppc_insn = 694;
pub const ppc_insn_PPC_INS_MFDAR: ppc_insn = 695;
pub const ppc_insn_PPC_INS_MFDBATL: ppc_insn = 696;
pub const ppc_insn_PPC_INS_MFDBATU: ppc_insn = 697;
pub const ppc_insn_PPC_INS_MFDCCR: ppc_insn = 698;
pub const ppc_insn_PPC_INS_MFDCR: ppc_insn = 699;
pub const ppc_insn_PPC_INS_MFDEAR: ppc_insn = 700;
pub const ppc_insn_PPC_INS_MFDEC: ppc_insn = 701;
pub const ppc_insn_PPC_INS_MFDSCR: ppc_insn = 702;
pub const ppc_insn_PPC_INS_MFDSISR: ppc_insn = 703;
pub const ppc_insn_PPC_INS_MFESR: ppc_insn = 704;
pub const ppc_insn_PPC_INS_MFFPRD: ppc_insn = 705;
pub const ppc_insn_PPC_INS_MFFS: ppc_insn = 706;
pub const ppc_insn_PPC_INS_MFFSCDRN: ppc_insn = 707;
pub const ppc_insn_PPC_INS_MFFSCDRNI: ppc_insn = 708;
pub const ppc_insn_PPC_INS_MFFSCE: ppc_insn = 709;
pub const ppc_insn_PPC_INS_MFFSCRN: ppc_insn = 710;
pub const ppc_insn_PPC_INS_MFFSCRNI: ppc_insn = 711;
pub const ppc_insn_PPC_INS_MFFSL: ppc_insn = 712;
pub const ppc_insn_PPC_INS_MFIBATL: ppc_insn = 713;
pub const ppc_insn_PPC_INS_MFIBATU: ppc_insn = 714;
pub const ppc_insn_PPC_INS_MFICCR: ppc_insn = 715;
pub const ppc_insn_PPC_INS_MFLR: ppc_insn = 716;
pub const ppc_insn_PPC_INS_MFMSR: ppc_insn = 717;
pub const ppc_insn_PPC_INS_MFOCRF: ppc_insn = 718;
pub const ppc_insn_PPC_INS_MFPID: ppc_insn = 719;
pub const ppc_insn_PPC_INS_MFPMR: ppc_insn = 720;
pub const ppc_insn_PPC_INS_MFPVR: ppc_insn = 721;
pub const ppc_insn_PPC_INS_MFRTCL: ppc_insn = 722;
pub const ppc_insn_PPC_INS_MFRTCU: ppc_insn = 723;
pub const ppc_insn_PPC_INS_MFSDR1: ppc_insn = 724;
pub const ppc_insn_PPC_INS_MFSPEFSCR: ppc_insn = 725;
pub const ppc_insn_PPC_INS_MFSPR: ppc_insn = 726;
pub const ppc_insn_PPC_INS_MFSPRG: ppc_insn = 727;
pub const ppc_insn_PPC_INS_MFSPRG0: ppc_insn = 728;
pub const ppc_insn_PPC_INS_MFSPRG1: ppc_insn = 729;
pub const ppc_insn_PPC_INS_MFSPRG2: ppc_insn = 730;
pub const ppc_insn_PPC_INS_MFSPRG3: ppc_insn = 731;
pub const ppc_insn_PPC_INS_MFSPRG4: ppc_insn = 732;
pub const ppc_insn_PPC_INS_MFSPRG5: ppc_insn = 733;
pub const ppc_insn_PPC_INS_MFSPRG6: ppc_insn = 734;
pub const ppc_insn_PPC_INS_MFSPRG7: ppc_insn = 735;
pub const ppc_insn_PPC_INS_MFSR: ppc_insn = 736;
pub const ppc_insn_PPC_INS_MFSRIN: ppc_insn = 737;
pub const ppc_insn_PPC_INS_MFSRR0: ppc_insn = 738;
pub const ppc_insn_PPC_INS_MFSRR1: ppc_insn = 739;
pub const ppc_insn_PPC_INS_MFSRR2: ppc_insn = 740;
pub const ppc_insn_PPC_INS_MFSRR3: ppc_insn = 741;
pub const ppc_insn_PPC_INS_MFTB: ppc_insn = 742;
pub const ppc_insn_PPC_INS_MFTBHI: ppc_insn = 743;
pub const ppc_insn_PPC_INS_MFTBL: ppc_insn = 744;
pub const ppc_insn_PPC_INS_MFTBLO: ppc_insn = 745;
pub const ppc_insn_PPC_INS_MFTBU: ppc_insn = 746;
pub const ppc_insn_PPC_INS_MFTCR: ppc_insn = 747;
pub const ppc_insn_PPC_INS_MFVRD: ppc_insn = 748;
pub const ppc_insn_PPC_INS_MFVRSAVE: ppc_insn = 749;
pub const ppc_insn_PPC_INS_MFVSCR: ppc_insn = 750;
pub const ppc_insn_PPC_INS_MFVSRD: ppc_insn = 751;
pub const ppc_insn_PPC_INS_MFVSRLD: ppc_insn = 752;
pub const ppc_insn_PPC_INS_MFVSRWZ: ppc_insn = 753;
pub const ppc_insn_PPC_INS_MFXER: ppc_insn = 754;
pub const ppc_insn_PPC_INS_MODSD: ppc_insn = 755;
pub const ppc_insn_PPC_INS_MODSW: ppc_insn = 756;
pub const ppc_insn_PPC_INS_MODUD: ppc_insn = 757;
pub const ppc_insn_PPC_INS_MODUW: ppc_insn = 758;
pub const ppc_insn_PPC_INS_MR: ppc_insn = 759;
pub const ppc_insn_PPC_INS_MSGSYNC: ppc_insn = 760;
pub const ppc_insn_PPC_INS_MSYNC: ppc_insn = 761;
pub const ppc_insn_PPC_INS_MTAMR: ppc_insn = 762;
pub const ppc_insn_PPC_INS_MTASR: ppc_insn = 763;
pub const ppc_insn_PPC_INS_MTBR0: ppc_insn = 764;
pub const ppc_insn_PPC_INS_MTBR1: ppc_insn = 765;
pub const ppc_insn_PPC_INS_MTBR2: ppc_insn = 766;
pub const ppc_insn_PPC_INS_MTBR3: ppc_insn = 767;
pub const ppc_insn_PPC_INS_MTBR4: ppc_insn = 768;
pub const ppc_insn_PPC_INS_MTBR5: ppc_insn = 769;
pub const ppc_insn_PPC_INS_MTBR6: ppc_insn = 770;
pub const ppc_insn_PPC_INS_MTBR7: ppc_insn = 771;
pub const ppc_insn_PPC_INS_MTCFAR: ppc_insn = 772;
pub const ppc_insn_PPC_INS_MTCR: ppc_insn = 773;
pub const ppc_insn_PPC_INS_MTCRF: ppc_insn = 774;
pub const ppc_insn_PPC_INS_MTCTR: ppc_insn = 775;
pub const ppc_insn_PPC_INS_MTDAR: ppc_insn = 776;
pub const ppc_insn_PPC_INS_MTDBATL: ppc_insn = 777;
pub const ppc_insn_PPC_INS_MTDBATU: ppc_insn = 778;
pub const ppc_insn_PPC_INS_MTDCCR: ppc_insn = 779;
pub const ppc_insn_PPC_INS_MTDCR: ppc_insn = 780;
pub const ppc_insn_PPC_INS_MTDEAR: ppc_insn = 781;
pub const ppc_insn_PPC_INS_MTDEC: ppc_insn = 782;
pub const ppc_insn_PPC_INS_MTDSCR: ppc_insn = 783;
pub const ppc_insn_PPC_INS_MTDSISR: ppc_insn = 784;
pub const ppc_insn_PPC_INS_MTESR: ppc_insn = 785;
pub const ppc_insn_PPC_INS_MTFSB0: ppc_insn = 786;
pub const ppc_insn_PPC_INS_MTFSB1: ppc_insn = 787;
pub const ppc_insn_PPC_INS_MTFSF: ppc_insn = 788;
pub const ppc_insn_PPC_INS_MTFSFI: ppc_insn = 789;
pub const ppc_insn_PPC_INS_MTIBATL: ppc_insn = 790;
pub const ppc_insn_PPC_INS_MTIBATU: ppc_insn = 791;
pub const ppc_insn_PPC_INS_MTICCR: ppc_insn = 792;
pub const ppc_insn_PPC_INS_MTLR: ppc_insn = 793;
pub const ppc_insn_PPC_INS_MTMSR: ppc_insn = 794;
pub const ppc_insn_PPC_INS_MTMSRD: ppc_insn = 795;
pub const ppc_insn_PPC_INS_MTOCRF: ppc_insn = 796;
pub const ppc_insn_PPC_INS_MTPID: ppc_insn = 797;
pub const ppc_insn_PPC_INS_MTPMR: ppc_insn = 798;
pub const ppc_insn_PPC_INS_MTSDR1: ppc_insn = 799;
pub const ppc_insn_PPC_INS_MTSPEFSCR: ppc_insn = 800;
pub const ppc_insn_PPC_INS_MTSPR: ppc_insn = 801;
pub const ppc_insn_PPC_INS_MTSPRG: ppc_insn = 802;
pub const ppc_insn_PPC_INS_MTSPRG0: ppc_insn = 803;
pub const ppc_insn_PPC_INS_MTSPRG1: ppc_insn = 804;
pub const ppc_insn_PPC_INS_MTSPRG2: ppc_insn = 805;
pub const ppc_insn_PPC_INS_MTSPRG3: ppc_insn = 806;
pub const ppc_insn_PPC_INS_MTSPRG4: ppc_insn = 807;
pub const ppc_insn_PPC_INS_MTSPRG5: ppc_insn = 808;
pub const ppc_insn_PPC_INS_MTSPRG6: ppc_insn = 809;
pub const ppc_insn_PPC_INS_MTSPRG7: ppc_insn = 810;
pub const ppc_insn_PPC_INS_MTSR: ppc_insn = 811;
pub const ppc_insn_PPC_INS_MTSRIN: ppc_insn = 812;
pub const ppc_insn_PPC_INS_MTSRR0: ppc_insn = 813;
pub const ppc_insn_PPC_INS_MTSRR1: ppc_insn = 814;
pub const ppc_insn_PPC_INS_MTSRR2: ppc_insn = 815;
pub const ppc_insn_PPC_INS_MTSRR3: ppc_insn = 816;
pub const ppc_insn_PPC_INS_MTTBHI: ppc_insn = 817;
pub const ppc_insn_PPC_INS_MTTBL: ppc_insn = 818;
pub const ppc_insn_PPC_INS_MTTBLO: ppc_insn = 819;
pub const ppc_insn_PPC_INS_MTTBU: ppc_insn = 820;
pub const ppc_insn_PPC_INS_MTTCR: ppc_insn = 821;
pub const ppc_insn_PPC_INS_MTVRSAVE: ppc_insn = 822;
pub const ppc_insn_PPC_INS_MTVSCR: ppc_insn = 823;
pub const ppc_insn_PPC_INS_MTVSRD: ppc_insn = 824;
pub const ppc_insn_PPC_INS_MTVSRDD: ppc_insn = 825;
pub const ppc_insn_PPC_INS_MTVSRWA: ppc_insn = 826;
pub const ppc_insn_PPC_INS_MTVSRWS: ppc_insn = 827;
pub const ppc_insn_PPC_INS_MTVSRWZ: ppc_insn = 828;
pub const ppc_insn_PPC_INS_MTXER: ppc_insn = 829;
pub const ppc_insn_PPC_INS_MULHD: ppc_insn = 830;
pub const ppc_insn_PPC_INS_MULHDU: ppc_insn = 831;
pub const ppc_insn_PPC_INS_MULHW: ppc_insn = 832;
pub const ppc_insn_PPC_INS_MULHWU: ppc_insn = 833;
pub const ppc_insn_PPC_INS_MULLD: ppc_insn = 834;
pub const ppc_insn_PPC_INS_MULLI: ppc_insn = 835;
pub const ppc_insn_PPC_INS_MULLW: ppc_insn = 836;
pub const ppc_insn_PPC_INS_NAND: ppc_insn = 837;
pub const ppc_insn_PPC_INS_NAP: ppc_insn = 838;
pub const ppc_insn_PPC_INS_NEG: ppc_insn = 839;
pub const ppc_insn_PPC_INS_NOP: ppc_insn = 840;
pub const ppc_insn_PPC_INS_NOR: ppc_insn = 841;
pub const ppc_insn_PPC_INS_NOT: ppc_insn = 842;
pub const ppc_insn_PPC_INS_OR: ppc_insn = 843;
pub const ppc_insn_PPC_INS_ORC: ppc_insn = 844;
pub const ppc_insn_PPC_INS_ORI: ppc_insn = 845;
pub const ppc_insn_PPC_INS_ORIS: ppc_insn = 846;
pub const ppc_insn_PPC_INS_PASTE: ppc_insn = 847;
pub const ppc_insn_PPC_INS_PASTE_LAST: ppc_insn = 848;
pub const ppc_insn_PPC_INS_POPCNTB: ppc_insn = 849;
pub const ppc_insn_PPC_INS_POPCNTD: ppc_insn = 850;
pub const ppc_insn_PPC_INS_POPCNTW: ppc_insn = 851;
pub const ppc_insn_PPC_INS_PTESYNC: ppc_insn = 852;
pub const ppc_insn_PPC_INS_QVALIGNI: ppc_insn = 853;
pub const ppc_insn_PPC_INS_QVESPLATI: ppc_insn = 854;
pub const ppc_insn_PPC_INS_QVFABS: ppc_insn = 855;
pub const ppc_insn_PPC_INS_QVFADD: ppc_insn = 856;
pub const ppc_insn_PPC_INS_QVFADDS: ppc_insn = 857;
pub const ppc_insn_PPC_INS_QVFAND: ppc_insn = 858;
pub const ppc_insn_PPC_INS_QVFANDC: ppc_insn = 859;
pub const ppc_insn_PPC_INS_QVFCFID: ppc_insn = 860;
pub const ppc_insn_PPC_INS_QVFCFIDS: ppc_insn = 861;
pub const ppc_insn_PPC_INS_QVFCFIDU: ppc_insn = 862;
pub const ppc_insn_PPC_INS_QVFCFIDUS: ppc_insn = 863;
pub const ppc_insn_PPC_INS_QVFCLR: ppc_insn = 864;
pub const ppc_insn_PPC_INS_QVFCMPEQ: ppc_insn = 865;
pub const ppc_insn_PPC_INS_QVFCMPGT: ppc_insn = 866;
pub const ppc_insn_PPC_INS_QVFCMPLT: ppc_insn = 867;
pub const ppc_insn_PPC_INS_QVFCPSGN: ppc_insn = 868;
pub const ppc_insn_PPC_INS_QVFCTFB: ppc_insn = 869;
pub const ppc_insn_PPC_INS_QVFCTID: ppc_insn = 870;
pub const ppc_insn_PPC_INS_QVFCTIDU: ppc_insn = 871;
pub const ppc_insn_PPC_INS_QVFCTIDUZ: ppc_insn = 872;
pub const ppc_insn_PPC_INS_QVFCTIDZ: ppc_insn = 873;
pub const ppc_insn_PPC_INS_QVFCTIW: ppc_insn = 874;
pub const ppc_insn_PPC_INS_QVFCTIWU: ppc_insn = 875;
pub const ppc_insn_PPC_INS_QVFCTIWUZ: ppc_insn = 876;
pub const ppc_insn_PPC_INS_QVFCTIWZ: ppc_insn = 877;
pub const ppc_insn_PPC_INS_QVFEQU: ppc_insn = 878;
pub const ppc_insn_PPC_INS_QVFLOGICAL: ppc_insn = 879;
pub const ppc_insn_PPC_INS_QVFMADD: ppc_insn = 880;
pub const ppc_insn_PPC_INS_QVFMADDS: ppc_insn = 881;
pub const ppc_insn_PPC_INS_QVFMR: ppc_insn = 882;
pub const ppc_insn_PPC_INS_QVFMSUB: ppc_insn = 883;
pub const ppc_insn_PPC_INS_QVFMSUBS: ppc_insn = 884;
pub const ppc_insn_PPC_INS_QVFMUL: ppc_insn = 885;
pub const ppc_insn_PPC_INS_QVFMULS: ppc_insn = 886;
pub const ppc_insn_PPC_INS_QVFNABS: ppc_insn = 887;
pub const ppc_insn_PPC_INS_QVFNAND: ppc_insn = 888;
pub const ppc_insn_PPC_INS_QVFNEG: ppc_insn = 889;
pub const ppc_insn_PPC_INS_QVFNMADD: ppc_insn = 890;
pub const ppc_insn_PPC_INS_QVFNMADDS: ppc_insn = 891;
pub const ppc_insn_PPC_INS_QVFNMSUB: ppc_insn = 892;
pub const ppc_insn_PPC_INS_QVFNMSUBS: ppc_insn = 893;
pub const ppc_insn_PPC_INS_QVFNOR: ppc_insn = 894;
pub const ppc_insn_PPC_INS_QVFNOT: ppc_insn = 895;
pub const ppc_insn_PPC_INS_QVFOR: ppc_insn = 896;
pub const ppc_insn_PPC_INS_QVFORC: ppc_insn = 897;
pub const ppc_insn_PPC_INS_QVFPERM: ppc_insn = 898;
pub const ppc_insn_PPC_INS_QVFRE: ppc_insn = 899;
pub const ppc_insn_PPC_INS_QVFRES: ppc_insn = 900;
pub const ppc_insn_PPC_INS_QVFRIM: ppc_insn = 901;
pub const ppc_insn_PPC_INS_QVFRIN: ppc_insn = 902;
pub const ppc_insn_PPC_INS_QVFRIP: ppc_insn = 903;
pub const ppc_insn_PPC_INS_QVFRIZ: ppc_insn = 904;
pub const ppc_insn_PPC_INS_QVFRSP: ppc_insn = 905;
pub const ppc_insn_PPC_INS_QVFRSQRTE: ppc_insn = 906;
pub const ppc_insn_PPC_INS_QVFRSQRTES: ppc_insn = 907;
pub const ppc_insn_PPC_INS_QVFSEL: ppc_insn = 908;
pub const ppc_insn_PPC_INS_QVFSET: ppc_insn = 909;
pub const ppc_insn_PPC_INS_QVFSUB: ppc_insn = 910;
pub const ppc_insn_PPC_INS_QVFSUBS: ppc_insn = 911;
pub const ppc_insn_PPC_INS_QVFTSTNAN: ppc_insn = 912;
pub const ppc_insn_PPC_INS_QVFXMADD: ppc_insn = 913;
pub const ppc_insn_PPC_INS_QVFXMADDS: ppc_insn = 914;
pub const ppc_insn_PPC_INS_QVFXMUL: ppc_insn = 915;
pub const ppc_insn_PPC_INS_QVFXMULS: ppc_insn = 916;
pub const ppc_insn_PPC_INS_QVFXOR: ppc_insn = 917;
pub const ppc_insn_PPC_INS_QVFXXCPNMADD: ppc_insn = 918;
pub const ppc_insn_PPC_INS_QVFXXCPNMADDS: ppc_insn = 919;
pub const ppc_insn_PPC_INS_QVFXXMADD: ppc_insn = 920;
pub const ppc_insn_PPC_INS_QVFXXMADDS: ppc_insn = 921;
pub const ppc_insn_PPC_INS_QVFXXNPMADD: ppc_insn = 922;
pub const ppc_insn_PPC_INS_QVFXXNPMADDS: ppc_insn = 923;
pub const ppc_insn_PPC_INS_QVGPCI: ppc_insn = 924;
pub const ppc_insn_PPC_INS_QVLFCDUX: ppc_insn = 925;
pub const ppc_insn_PPC_INS_QVLFCDUXA: ppc_insn = 926;
pub const ppc_insn_PPC_INS_QVLFCDX: ppc_insn = 927;
pub const ppc_insn_PPC_INS_QVLFCDXA: ppc_insn = 928;
pub const ppc_insn_PPC_INS_QVLFCSUX: ppc_insn = 929;
pub const ppc_insn_PPC_INS_QVLFCSUXA: ppc_insn = 930;
pub const ppc_insn_PPC_INS_QVLFCSX: ppc_insn = 931;
pub const ppc_insn_PPC_INS_QVLFCSXA: ppc_insn = 932;
pub const ppc_insn_PPC_INS_QVLFDUX: ppc_insn = 933;
pub const ppc_insn_PPC_INS_QVLFDUXA: ppc_insn = 934;
pub const ppc_insn_PPC_INS_QVLFDX: ppc_insn = 935;
pub const ppc_insn_PPC_INS_QVLFDXA: ppc_insn = 936;
pub const ppc_insn_PPC_INS_QVLFIWAX: ppc_insn = 937;
pub const ppc_insn_PPC_INS_QVLFIWAXA: ppc_insn = 938;
pub const ppc_insn_PPC_INS_QVLFIWZX: ppc_insn = 939;
pub const ppc_insn_PPC_INS_QVLFIWZXA: ppc_insn = 940;
pub const ppc_insn_PPC_INS_QVLFSUX: ppc_insn = 941;
pub const ppc_insn_PPC_INS_QVLFSUXA: ppc_insn = 942;
pub const ppc_insn_PPC_INS_QVLFSX: ppc_insn = 943;
pub const ppc_insn_PPC_INS_QVLFSXA: ppc_insn = 944;
pub const ppc_insn_PPC_INS_QVLPCLDX: ppc_insn = 945;
pub const ppc_insn_PPC_INS_QVLPCLSX: ppc_insn = 946;
pub const ppc_insn_PPC_INS_QVLPCRDX: ppc_insn = 947;
pub const ppc_insn_PPC_INS_QVLPCRSX: ppc_insn = 948;
pub const ppc_insn_PPC_INS_QVSTFCDUX: ppc_insn = 949;
pub const ppc_insn_PPC_INS_QVSTFCDUXA: ppc_insn = 950;
pub const ppc_insn_PPC_INS_QVSTFCDUXI: ppc_insn = 951;
pub const ppc_insn_PPC_INS_QVSTFCDUXIA: ppc_insn = 952;
pub const ppc_insn_PPC_INS_QVSTFCDX: ppc_insn = 953;
pub const ppc_insn_PPC_INS_QVSTFCDXA: ppc_insn = 954;
pub const ppc_insn_PPC_INS_QVSTFCDXI: ppc_insn = 955;
pub const ppc_insn_PPC_INS_QVSTFCDXIA: ppc_insn = 956;
pub const ppc_insn_PPC_INS_QVSTFCSUX: ppc_insn = 957;
pub const ppc_insn_PPC_INS_QVSTFCSUXA: ppc_insn = 958;
pub const ppc_insn_PPC_INS_QVSTFCSUXI: ppc_insn = 959;
pub const ppc_insn_PPC_INS_QVSTFCSUXIA: ppc_insn = 960;
pub const ppc_insn_PPC_INS_QVSTFCSX: ppc_insn = 961;
pub const ppc_insn_PPC_INS_QVSTFCSXA: ppc_insn = 962;
pub const ppc_insn_PPC_INS_QVSTFCSXI: ppc_insn = 963;
pub const ppc_insn_PPC_INS_QVSTFCSXIA: ppc_insn = 964;
pub const ppc_insn_PPC_INS_QVSTFDUX: ppc_insn = 965;
pub const ppc_insn_PPC_INS_QVSTFDUXA: ppc_insn = 966;
pub const ppc_insn_PPC_INS_QVSTFDUXI: ppc_insn = 967;
pub const ppc_insn_PPC_INS_QVSTFDUXIA: ppc_insn = 968;
pub const ppc_insn_PPC_INS_QVSTFDX: ppc_insn = 969;
pub const ppc_insn_PPC_INS_QVSTFDXA: ppc_insn = 970;
pub const ppc_insn_PPC_INS_QVSTFDXI: ppc_insn = 971;
pub const ppc_insn_PPC_INS_QVSTFDXIA: ppc_insn = 972;
pub const ppc_insn_PPC_INS_QVSTFIWX: ppc_insn = 973;
pub const ppc_insn_PPC_INS_QVSTFIWXA: ppc_insn = 974;
pub const ppc_insn_PPC_INS_QVSTFSUX: ppc_insn = 975;
pub const ppc_insn_PPC_INS_QVSTFSUXA: ppc_insn = 976;
pub const ppc_insn_PPC_INS_QVSTFSUXI: ppc_insn = 977;
pub const ppc_insn_PPC_INS_QVSTFSUXIA: ppc_insn = 978;
pub const ppc_insn_PPC_INS_QVSTFSX: ppc_insn = 979;
pub const ppc_insn_PPC_INS_QVSTFSXA: ppc_insn = 980;
pub const ppc_insn_PPC_INS_QVSTFSXI: ppc_insn = 981;
pub const ppc_insn_PPC_INS_QVSTFSXIA: ppc_insn = 982;
pub const ppc_insn_PPC_INS_RFCI: ppc_insn = 983;
pub const ppc_insn_PPC_INS_RFDI: ppc_insn = 984;
pub const ppc_insn_PPC_INS_RFEBB: ppc_insn = 985;
pub const ppc_insn_PPC_INS_RFI: ppc_insn = 986;
pub const ppc_insn_PPC_INS_RFID: ppc_insn = 987;
pub const ppc_insn_PPC_INS_RFMCI: ppc_insn = 988;
pub const ppc_insn_PPC_INS_RLDCL: ppc_insn = 989;
pub const ppc_insn_PPC_INS_RLDCR: ppc_insn = 990;
pub const ppc_insn_PPC_INS_RLDIC: ppc_insn = 991;
pub const ppc_insn_PPC_INS_RLDICL: ppc_insn = 992;
pub const ppc_insn_PPC_INS_RLDICR: ppc_insn = 993;
pub const ppc_insn_PPC_INS_RLDIMI: ppc_insn = 994;
pub const ppc_insn_PPC_INS_RLWIMI: ppc_insn = 995;
pub const ppc_insn_PPC_INS_RLWINM: ppc_insn = 996;
pub const ppc_insn_PPC_INS_RLWNM: ppc_insn = 997;
pub const ppc_insn_PPC_INS_ROTLD: ppc_insn = 998;
pub const ppc_insn_PPC_INS_ROTLDI: ppc_insn = 999;
pub const ppc_insn_PPC_INS_ROTLW: ppc_insn = 1000;
pub const ppc_insn_PPC_INS_ROTLWI: ppc_insn = 1001;
pub const ppc_insn_PPC_INS_ROTRDI: ppc_insn = 1002;
pub const ppc_insn_PPC_INS_ROTRWI: ppc_insn = 1003;
pub const ppc_insn_PPC_INS_SC: ppc_insn = 1004;
pub const ppc_insn_PPC_INS_SETB: ppc_insn = 1005;
pub const ppc_insn_PPC_INS_SLBIA: ppc_insn = 1006;
pub const ppc_insn_PPC_INS_SLBIE: ppc_insn = 1007;
pub const ppc_insn_PPC_INS_SLBIEG: ppc_insn = 1008;
pub const ppc_insn_PPC_INS_SLBMFEE: ppc_insn = 1009;
pub const ppc_insn_PPC_INS_SLBMFEV: ppc_insn = 1010;
pub const ppc_insn_PPC_INS_SLBMTE: ppc_insn = 1011;
pub const ppc_insn_PPC_INS_SLBSYNC: ppc_insn = 1012;
pub const ppc_insn_PPC_INS_SLD: ppc_insn = 1013;
pub const ppc_insn_PPC_INS_SLDI: ppc_insn = 1014;
pub const ppc_insn_PPC_INS_SLW: ppc_insn = 1015;
pub const ppc_insn_PPC_INS_SLWI: ppc_insn = 1016;
pub const ppc_insn_PPC_INS_SRAD: ppc_insn = 1017;
pub const ppc_insn_PPC_INS_SRADI: ppc_insn = 1018;
pub const ppc_insn_PPC_INS_SRAW: ppc_insn = 1019;
pub const ppc_insn_PPC_INS_SRAWI: ppc_insn = 1020;
pub const ppc_insn_PPC_INS_SRD: ppc_insn = 1021;
pub const ppc_insn_PPC_INS_SRDI: ppc_insn = 1022;
pub const ppc_insn_PPC_INS_SRW: ppc_insn = 1023;
pub const ppc_insn_PPC_INS_SRWI: ppc_insn = 1024;
pub const ppc_insn_PPC_INS_STB: ppc_insn = 1025;
pub const ppc_insn_PPC_INS_STBCIX: ppc_insn = 1026;
pub const ppc_insn_PPC_INS_STBCX: ppc_insn = 1027;
pub const ppc_insn_PPC_INS_STBEPX: ppc_insn = 1028;
pub const ppc_insn_PPC_INS_STBU: ppc_insn = 1029;
pub const ppc_insn_PPC_INS_STBUX: ppc_insn = 1030;
pub const ppc_insn_PPC_INS_STBX: ppc_insn = 1031;
pub const ppc_insn_PPC_INS_STD: ppc_insn = 1032;
pub const ppc_insn_PPC_INS_STDAT: ppc_insn = 1033;
pub const ppc_insn_PPC_INS_STDBRX: ppc_insn = 1034;
pub const ppc_insn_PPC_INS_STDCIX: ppc_insn = 1035;
pub const ppc_insn_PPC_INS_STDCX: ppc_insn = 1036;
pub const ppc_insn_PPC_INS_STDU: ppc_insn = 1037;
pub const ppc_insn_PPC_INS_STDUX: ppc_insn = 1038;
pub const ppc_insn_PPC_INS_STDX: ppc_insn = 1039;
pub const ppc_insn_PPC_INS_STFD: ppc_insn = 1040;
pub const ppc_insn_PPC_INS_STFDEPX: ppc_insn = 1041;
pub const ppc_insn_PPC_INS_STFDU: ppc_insn = 1042;
pub const ppc_insn_PPC_INS_STFDUX: ppc_insn = 1043;
pub const ppc_insn_PPC_INS_STFDX: ppc_insn = 1044;
pub const ppc_insn_PPC_INS_STFIWX: ppc_insn = 1045;
pub const ppc_insn_PPC_INS_STFS: ppc_insn = 1046;
pub const ppc_insn_PPC_INS_STFSU: ppc_insn = 1047;
pub const ppc_insn_PPC_INS_STFSUX: ppc_insn = 1048;
pub const ppc_insn_PPC_INS_STFSX: ppc_insn = 1049;
pub const ppc_insn_PPC_INS_STH: ppc_insn = 1050;
pub const ppc_insn_PPC_INS_STHBRX: ppc_insn = 1051;
pub const ppc_insn_PPC_INS_STHCIX: ppc_insn = 1052;
pub const ppc_insn_PPC_INS_STHCX: ppc_insn = 1053;
pub const ppc_insn_PPC_INS_STHEPX: ppc_insn = 1054;
pub const ppc_insn_PPC_INS_STHU: ppc_insn = 1055;
pub const ppc_insn_PPC_INS_STHUX: ppc_insn = 1056;
pub const ppc_insn_PPC_INS_STHX: ppc_insn = 1057;
pub const ppc_insn_PPC_INS_STMW: ppc_insn = 1058;
pub const ppc_insn_PPC_INS_STOP: ppc_insn = 1059;
pub const ppc_insn_PPC_INS_STSWI: ppc_insn = 1060;
pub const ppc_insn_PPC_INS_STVEBX: ppc_insn = 1061;
pub const ppc_insn_PPC_INS_STVEHX: ppc_insn = 1062;
pub const ppc_insn_PPC_INS_STVEWX: ppc_insn = 1063;
pub const ppc_insn_PPC_INS_STVX: ppc_insn = 1064;
pub const ppc_insn_PPC_INS_STVXL: ppc_insn = 1065;
pub const ppc_insn_PPC_INS_STW: ppc_insn = 1066;
pub const ppc_insn_PPC_INS_STWAT: ppc_insn = 1067;
pub const ppc_insn_PPC_INS_STWBRX: ppc_insn = 1068;
pub const ppc_insn_PPC_INS_STWCIX: ppc_insn = 1069;
pub const ppc_insn_PPC_INS_STWCX: ppc_insn = 1070;
pub const ppc_insn_PPC_INS_STWEPX: ppc_insn = 1071;
pub const ppc_insn_PPC_INS_STWU: ppc_insn = 1072;
pub const ppc_insn_PPC_INS_STWUX: ppc_insn = 1073;
pub const ppc_insn_PPC_INS_STWX: ppc_insn = 1074;
pub const ppc_insn_PPC_INS_STXSD: ppc_insn = 1075;
pub const ppc_insn_PPC_INS_STXSDX: ppc_insn = 1076;
pub const ppc_insn_PPC_INS_STXSIBX: ppc_insn = 1077;
pub const ppc_insn_PPC_INS_STXSIHX: ppc_insn = 1078;
pub const ppc_insn_PPC_INS_STXSIWX: ppc_insn = 1079;
pub const ppc_insn_PPC_INS_STXSSP: ppc_insn = 1080;
pub const ppc_insn_PPC_INS_STXSSPX: ppc_insn = 1081;
pub const ppc_insn_PPC_INS_STXV: ppc_insn = 1082;
pub const ppc_insn_PPC_INS_STXVB16X: ppc_insn = 1083;
pub const ppc_insn_PPC_INS_STXVD2X: ppc_insn = 1084;
pub const ppc_insn_PPC_INS_STXVH8X: ppc_insn = 1085;
pub const ppc_insn_PPC_INS_STXVL: ppc_insn = 1086;
pub const ppc_insn_PPC_INS_STXVLL: ppc_insn = 1087;
pub const ppc_insn_PPC_INS_STXVW4X: ppc_insn = 1088;
pub const ppc_insn_PPC_INS_STXVX: ppc_insn = 1089;
pub const ppc_insn_PPC_INS_SUB: ppc_insn = 1090;
pub const ppc_insn_PPC_INS_SUBC: ppc_insn = 1091;
pub const ppc_insn_PPC_INS_SUBF: ppc_insn = 1092;
pub const ppc_insn_PPC_INS_SUBFC: ppc_insn = 1093;
pub const ppc_insn_PPC_INS_SUBFE: ppc_insn = 1094;
pub const ppc_insn_PPC_INS_SUBFIC: ppc_insn = 1095;
pub const ppc_insn_PPC_INS_SUBFME: ppc_insn = 1096;
pub const ppc_insn_PPC_INS_SUBFZE: ppc_insn = 1097;
pub const ppc_insn_PPC_INS_SUBI: ppc_insn = 1098;
pub const ppc_insn_PPC_INS_SUBIC: ppc_insn = 1099;
pub const ppc_insn_PPC_INS_SUBIS: ppc_insn = 1100;
pub const ppc_insn_PPC_INS_SUBPCIS: ppc_insn = 1101;
pub const ppc_insn_PPC_INS_SYNC: ppc_insn = 1102;
pub const ppc_insn_PPC_INS_TABORT: ppc_insn = 1103;
pub const ppc_insn_PPC_INS_TABORTDC: ppc_insn = 1104;
pub const ppc_insn_PPC_INS_TABORTDCI: ppc_insn = 1105;
pub const ppc_insn_PPC_INS_TABORTWC: ppc_insn = 1106;
pub const ppc_insn_PPC_INS_TABORTWCI: ppc_insn = 1107;
pub const ppc_insn_PPC_INS_TBEGIN: ppc_insn = 1108;
pub const ppc_insn_PPC_INS_TCHECK: ppc_insn = 1109;
pub const ppc_insn_PPC_INS_TD: ppc_insn = 1110;
pub const ppc_insn_PPC_INS_TDEQ: ppc_insn = 1111;
pub const ppc_insn_PPC_INS_TDEQI: ppc_insn = 1112;
pub const ppc_insn_PPC_INS_TDGE: ppc_insn = 1113;
pub const ppc_insn_PPC_INS_TDGEI: ppc_insn = 1114;
pub const ppc_insn_PPC_INS_TDGT: ppc_insn = 1115;
pub const ppc_insn_PPC_INS_TDGTI: ppc_insn = 1116;
pub const ppc_insn_PPC_INS_TDI: ppc_insn = 1117;
pub const ppc_insn_PPC_INS_TDLE: ppc_insn = 1118;
pub const ppc_insn_PPC_INS_TDLEI: ppc_insn = 1119;
pub const ppc_insn_PPC_INS_TDLGE: ppc_insn = 1120;
pub const ppc_insn_PPC_INS_TDLGEI: ppc_insn = 1121;
pub const ppc_insn_PPC_INS_TDLGT: ppc_insn = 1122;
pub const ppc_insn_PPC_INS_TDLGTI: ppc_insn = 1123;
pub const ppc_insn_PPC_INS_TDLLE: ppc_insn = 1124;
pub const ppc_insn_PPC_INS_TDLLEI: ppc_insn = 1125;
pub const ppc_insn_PPC_INS_TDLLT: ppc_insn = 1126;
pub const ppc_insn_PPC_INS_TDLLTI: ppc_insn = 1127;
pub const ppc_insn_PPC_INS_TDLNG: ppc_insn = 1128;
pub const ppc_insn_PPC_INS_TDLNGI: ppc_insn = 1129;
pub const ppc_insn_PPC_INS_TDLNL: ppc_insn = 1130;
pub const ppc_insn_PPC_INS_TDLNLI: ppc_insn = 1131;
pub const ppc_insn_PPC_INS_TDLT: ppc_insn = 1132;
pub const ppc_insn_PPC_INS_TDLTI: ppc_insn = 1133;
pub const ppc_insn_PPC_INS_TDNE: ppc_insn = 1134;
pub const ppc_insn_PPC_INS_TDNEI: ppc_insn = 1135;
pub const ppc_insn_PPC_INS_TDNG: ppc_insn = 1136;
pub const ppc_insn_PPC_INS_TDNGI: ppc_insn = 1137;
pub const ppc_insn_PPC_INS_TDNL: ppc_insn = 1138;
pub const ppc_insn_PPC_INS_TDNLI: ppc_insn = 1139;
pub const ppc_insn_PPC_INS_TDU: ppc_insn = 1140;
pub const ppc_insn_PPC_INS_TDUI: ppc_insn = 1141;
pub const ppc_insn_PPC_INS_TEND: ppc_insn = 1142;
pub const ppc_insn_PPC_INS_TLBIA: ppc_insn = 1143;
pub const ppc_insn_PPC_INS_TLBIE: ppc_insn = 1144;
pub const ppc_insn_PPC_INS_TLBIEL: ppc_insn = 1145;
pub const ppc_insn_PPC_INS_TLBIVAX: ppc_insn = 1146;
pub const ppc_insn_PPC_INS_TLBLD: ppc_insn = 1147;
pub const ppc_insn_PPC_INS_TLBLI: ppc_insn = 1148;
pub const ppc_insn_PPC_INS_TLBRE: ppc_insn = 1149;
pub const ppc_insn_PPC_INS_TLBREHI: ppc_insn = 1150;
pub const ppc_insn_PPC_INS_TLBRELO: ppc_insn = 1151;
pub const ppc_insn_PPC_INS_TLBSX: ppc_insn = 1152;
pub const ppc_insn_PPC_INS_TLBSYNC: ppc_insn = 1153;
pub const ppc_insn_PPC_INS_TLBWE: ppc_insn = 1154;
pub const ppc_insn_PPC_INS_TLBWEHI: ppc_insn = 1155;
pub const ppc_insn_PPC_INS_TLBWELO: ppc_insn = 1156;
pub const ppc_insn_PPC_INS_TRAP: ppc_insn = 1157;
pub const ppc_insn_PPC_INS_TRECHKPT: ppc_insn = 1158;
pub const ppc_insn_PPC_INS_TRECLAIM: ppc_insn = 1159;
pub const ppc_insn_PPC_INS_TSR: ppc_insn = 1160;
pub const ppc_insn_PPC_INS_TW: ppc_insn = 1161;
pub const ppc_insn_PPC_INS_TWEQ: ppc_insn = 1162;
pub const ppc_insn_PPC_INS_TWEQI: ppc_insn = 1163;
pub const ppc_insn_PPC_INS_TWGE: ppc_insn = 1164;
pub const ppc_insn_PPC_INS_TWGEI: ppc_insn = 1165;
pub const ppc_insn_PPC_INS_TWGT: ppc_insn = 1166;
pub const ppc_insn_PPC_INS_TWGTI: ppc_insn = 1167;
pub const ppc_insn_PPC_INS_TWI: ppc_insn = 1168;
pub const ppc_insn_PPC_INS_TWLE: ppc_insn = 1169;
pub const ppc_insn_PPC_INS_TWLEI: ppc_insn = 1170;
pub const ppc_insn_PPC_INS_TWLGE: ppc_insn = 1171;
pub const ppc_insn_PPC_INS_TWLGEI: ppc_insn = 1172;
pub const ppc_insn_PPC_INS_TWLGT: ppc_insn = 1173;
pub const ppc_insn_PPC_INS_TWLGTI: ppc_insn = 1174;
pub const ppc_insn_PPC_INS_TWLLE: ppc_insn = 1175;
pub const ppc_insn_PPC_INS_TWLLEI: ppc_insn = 1176;
pub const ppc_insn_PPC_INS_TWLLT: ppc_insn = 1177;
pub const ppc_insn_PPC_INS_TWLLTI: ppc_insn = 1178;
pub const ppc_insn_PPC_INS_TWLNG: ppc_insn = 1179;
pub const ppc_insn_PPC_INS_TWLNGI: ppc_insn = 1180;
pub const ppc_insn_PPC_INS_TWLNL: ppc_insn = 1181;
pub const ppc_insn_PPC_INS_TWLNLI: ppc_insn = 1182;
pub const ppc_insn_PPC_INS_TWLT: ppc_insn = 1183;
pub const ppc_insn_PPC_INS_TWLTI: ppc_insn = 1184;
pub const ppc_insn_PPC_INS_TWNE: ppc_insn = 1185;
pub const ppc_insn_PPC_INS_TWNEI: ppc_insn = 1186;
pub const ppc_insn_PPC_INS_TWNG: ppc_insn = 1187;
pub const ppc_insn_PPC_INS_TWNGI: ppc_insn = 1188;
pub const ppc_insn_PPC_INS_TWNL: ppc_insn = 1189;
pub const ppc_insn_PPC_INS_TWNLI: ppc_insn = 1190;
pub const ppc_insn_PPC_INS_TWU: ppc_insn = 1191;
pub const ppc_insn_PPC_INS_TWUI: ppc_insn = 1192;
pub const ppc_insn_PPC_INS_VABSDUB: ppc_insn = 1193;
pub const ppc_insn_PPC_INS_VABSDUH: ppc_insn = 1194;
pub const ppc_insn_PPC_INS_VABSDUW: ppc_insn = 1195;
pub const ppc_insn_PPC_INS_VADDCUQ: ppc_insn = 1196;
pub const ppc_insn_PPC_INS_VADDCUW: ppc_insn = 1197;
pub const ppc_insn_PPC_INS_VADDECUQ: ppc_insn = 1198;
pub const ppc_insn_PPC_INS_VADDEUQM: ppc_insn = 1199;
pub const ppc_insn_PPC_INS_VADDFP: ppc_insn = 1200;
pub const ppc_insn_PPC_INS_VADDSBS: ppc_insn = 1201;
pub const ppc_insn_PPC_INS_VADDSHS: ppc_insn = 1202;
pub const ppc_insn_PPC_INS_VADDSWS: ppc_insn = 1203;
pub const ppc_insn_PPC_INS_VADDUBM: ppc_insn = 1204;
pub const ppc_insn_PPC_INS_VADDUBS: ppc_insn = 1205;
pub const ppc_insn_PPC_INS_VADDUDM: ppc_insn = 1206;
pub const ppc_insn_PPC_INS_VADDUHM: ppc_insn = 1207;
pub const ppc_insn_PPC_INS_VADDUHS: ppc_insn = 1208;
pub const ppc_insn_PPC_INS_VADDUQM: ppc_insn = 1209;
pub const ppc_insn_PPC_INS_VADDUWM: ppc_insn = 1210;
pub const ppc_insn_PPC_INS_VADDUWS: ppc_insn = 1211;
pub const ppc_insn_PPC_INS_VAND: ppc_insn = 1212;
pub const ppc_insn_PPC_INS_VANDC: ppc_insn = 1213;
pub const ppc_insn_PPC_INS_VAVGSB: ppc_insn = 1214;
pub const ppc_insn_PPC_INS_VAVGSH: ppc_insn = 1215;
pub const ppc_insn_PPC_INS_VAVGSW: ppc_insn = 1216;
pub const ppc_insn_PPC_INS_VAVGUB: ppc_insn = 1217;
pub const ppc_insn_PPC_INS_VAVGUH: ppc_insn = 1218;
pub const ppc_insn_PPC_INS_VAVGUW: ppc_insn = 1219;
pub const ppc_insn_PPC_INS_VBPERMD: ppc_insn = 1220;
pub const ppc_insn_PPC_INS_VBPERMQ: ppc_insn = 1221;
pub const ppc_insn_PPC_INS_VCFSX: ppc_insn = 1222;
pub const ppc_insn_PPC_INS_VCFUX: ppc_insn = 1223;
pub const ppc_insn_PPC_INS_VCIPHER: ppc_insn = 1224;
pub const ppc_insn_PPC_INS_VCIPHERLAST: ppc_insn = 1225;
pub const ppc_insn_PPC_INS_VCLZB: ppc_insn = 1226;
pub const ppc_insn_PPC_INS_VCLZD: ppc_insn = 1227;
pub const ppc_insn_PPC_INS_VCLZH: ppc_insn = 1228;
pub const ppc_insn_PPC_INS_VCLZLSBB: ppc_insn = 1229;
pub const ppc_insn_PPC_INS_VCLZW: ppc_insn = 1230;
pub const ppc_insn_PPC_INS_VCMPBFP: ppc_insn = 1231;
pub const ppc_insn_PPC_INS_VCMPEQFP: ppc_insn = 1232;
pub const ppc_insn_PPC_INS_VCMPEQUB: ppc_insn = 1233;
pub const ppc_insn_PPC_INS_VCMPEQUD: ppc_insn = 1234;
pub const ppc_insn_PPC_INS_VCMPEQUH: ppc_insn = 1235;
pub const ppc_insn_PPC_INS_VCMPEQUW: ppc_insn = 1236;
pub const ppc_insn_PPC_INS_VCMPGEFP: ppc_insn = 1237;
pub const ppc_insn_PPC_INS_VCMPGTFP: ppc_insn = 1238;
pub const ppc_insn_PPC_INS_VCMPGTSB: ppc_insn = 1239;
pub const ppc_insn_PPC_INS_VCMPGTSD: ppc_insn = 1240;
pub const ppc_insn_PPC_INS_VCMPGTSH: ppc_insn = 1241;
pub const ppc_insn_PPC_INS_VCMPGTSW: ppc_insn = 1242;
pub const ppc_insn_PPC_INS_VCMPGTUB: ppc_insn = 1243;
pub const ppc_insn_PPC_INS_VCMPGTUD: ppc_insn = 1244;
pub const ppc_insn_PPC_INS_VCMPGTUH: ppc_insn = 1245;
pub const ppc_insn_PPC_INS_VCMPGTUW: ppc_insn = 1246;
pub const ppc_insn_PPC_INS_VCMPNEB: ppc_insn = 1247;
pub const ppc_insn_PPC_INS_VCMPNEH: ppc_insn = 1248;
pub const ppc_insn_PPC_INS_VCMPNEW: ppc_insn = 1249;
pub const ppc_insn_PPC_INS_VCMPNEZB: ppc_insn = 1250;
pub const ppc_insn_PPC_INS_VCMPNEZH: ppc_insn = 1251;
pub const ppc_insn_PPC_INS_VCMPNEZW: ppc_insn = 1252;
pub const ppc_insn_PPC_INS_VCTSXS: ppc_insn = 1253;
pub const ppc_insn_PPC_INS_VCTUXS: ppc_insn = 1254;
pub const ppc_insn_PPC_INS_VCTZB: ppc_insn = 1255;
pub const ppc_insn_PPC_INS_VCTZD: ppc_insn = 1256;
pub const ppc_insn_PPC_INS_VCTZH: ppc_insn = 1257;
pub const ppc_insn_PPC_INS_VCTZLSBB: ppc_insn = 1258;
pub const ppc_insn_PPC_INS_VCTZW: ppc_insn = 1259;
pub const ppc_insn_PPC_INS_VEQV: ppc_insn = 1260;
pub const ppc_insn_PPC_INS_VEXPTEFP: ppc_insn = 1261;
pub const ppc_insn_PPC_INS_VEXTRACTD: ppc_insn = 1262;
pub const ppc_insn_PPC_INS_VEXTRACTUB: ppc_insn = 1263;
pub const ppc_insn_PPC_INS_VEXTRACTUH: ppc_insn = 1264;
pub const ppc_insn_PPC_INS_VEXTRACTUW: ppc_insn = 1265;
pub const ppc_insn_PPC_INS_VEXTSB2D: ppc_insn = 1266;
pub const ppc_insn_PPC_INS_VEXTSB2W: ppc_insn = 1267;
pub const ppc_insn_PPC_INS_VEXTSH2D: ppc_insn = 1268;
pub const ppc_insn_PPC_INS_VEXTSH2W: ppc_insn = 1269;
pub const ppc_insn_PPC_INS_VEXTSW2D: ppc_insn = 1270;
pub const ppc_insn_PPC_INS_VEXTUBLX: ppc_insn = 1271;
pub const ppc_insn_PPC_INS_VEXTUBRX: ppc_insn = 1272;
pub const ppc_insn_PPC_INS_VEXTUHLX: ppc_insn = 1273;
pub const ppc_insn_PPC_INS_VEXTUHRX: ppc_insn = 1274;
pub const ppc_insn_PPC_INS_VEXTUWLX: ppc_insn = 1275;
pub const ppc_insn_PPC_INS_VEXTUWRX: ppc_insn = 1276;
pub const ppc_insn_PPC_INS_VGBBD: ppc_insn = 1277;
pub const ppc_insn_PPC_INS_VINSERTB: ppc_insn = 1278;
pub const ppc_insn_PPC_INS_VINSERTD: ppc_insn = 1279;
pub const ppc_insn_PPC_INS_VINSERTH: ppc_insn = 1280;
pub const ppc_insn_PPC_INS_VINSERTW: ppc_insn = 1281;
pub const ppc_insn_PPC_INS_VLOGEFP: ppc_insn = 1282;
pub const ppc_insn_PPC_INS_VMADDFP: ppc_insn = 1283;
pub const ppc_insn_PPC_INS_VMAXFP: ppc_insn = 1284;
pub const ppc_insn_PPC_INS_VMAXSB: ppc_insn = 1285;
pub const ppc_insn_PPC_INS_VMAXSD: ppc_insn = 1286;
pub const ppc_insn_PPC_INS_VMAXSH: ppc_insn = 1287;
pub const ppc_insn_PPC_INS_VMAXSW: ppc_insn = 1288;
pub const ppc_insn_PPC_INS_VMAXUB: ppc_insn = 1289;
pub const ppc_insn_PPC_INS_VMAXUD: ppc_insn = 1290;
pub const ppc_insn_PPC_INS_VMAXUH: ppc_insn = 1291;
pub const ppc_insn_PPC_INS_VMAXUW: ppc_insn = 1292;
pub const ppc_insn_PPC_INS_VMHADDSHS: ppc_insn = 1293;
pub const ppc_insn_PPC_INS_VMHRADDSHS: ppc_insn = 1294;
pub const ppc_insn_PPC_INS_VMINFP: ppc_insn = 1295;
pub const ppc_insn_PPC_INS_VMINSB: ppc_insn = 1296;
pub const ppc_insn_PPC_INS_VMINSD: ppc_insn = 1297;
pub const ppc_insn_PPC_INS_VMINSH: ppc_insn = 1298;
pub const ppc_insn_PPC_INS_VMINSW: ppc_insn = 1299;
pub const ppc_insn_PPC_INS_VMINUB: ppc_insn = 1300;
pub const ppc_insn_PPC_INS_VMINUD: ppc_insn = 1301;
pub const ppc_insn_PPC_INS_VMINUH: ppc_insn = 1302;
pub const ppc_insn_PPC_INS_VMINUW: ppc_insn = 1303;
pub const ppc_insn_PPC_INS_VMLADDUHM: ppc_insn = 1304;
pub const ppc_insn_PPC_INS_VMR: ppc_insn = 1305;
pub const ppc_insn_PPC_INS_VMRGEW: ppc_insn = 1306;
pub const ppc_insn_PPC_INS_VMRGHB: ppc_insn = 1307;
pub const ppc_insn_PPC_INS_VMRGHH: ppc_insn = 1308;
pub const ppc_insn_PPC_INS_VMRGHW: ppc_insn = 1309;
pub const ppc_insn_PPC_INS_VMRGLB: ppc_insn = 1310;
pub const ppc_insn_PPC_INS_VMRGLH: ppc_insn = 1311;
pub const ppc_insn_PPC_INS_VMRGLW: ppc_insn = 1312;
pub const ppc_insn_PPC_INS_VMRGOW: ppc_insn = 1313;
pub const ppc_insn_PPC_INS_VMSUMMBM: ppc_insn = 1314;
pub const ppc_insn_PPC_INS_VMSUMSHM: ppc_insn = 1315;
pub const ppc_insn_PPC_INS_VMSUMSHS: ppc_insn = 1316;
pub const ppc_insn_PPC_INS_VMSUMUBM: ppc_insn = 1317;
pub const ppc_insn_PPC_INS_VMSUMUHM: ppc_insn = 1318;
pub const ppc_insn_PPC_INS_VMSUMUHS: ppc_insn = 1319;
pub const ppc_insn_PPC_INS_VMUL10CUQ: ppc_insn = 1320;
pub const ppc_insn_PPC_INS_VMUL10ECUQ: ppc_insn = 1321;
pub const ppc_insn_PPC_INS_VMUL10EUQ: ppc_insn = 1322;
pub const ppc_insn_PPC_INS_VMUL10UQ: ppc_insn = 1323;
pub const ppc_insn_PPC_INS_VMULESB: ppc_insn = 1324;
pub const ppc_insn_PPC_INS_VMULESH: ppc_insn = 1325;
pub const ppc_insn_PPC_INS_VMULESW: ppc_insn = 1326;
pub const ppc_insn_PPC_INS_VMULEUB: ppc_insn = 1327;
pub const ppc_insn_PPC_INS_VMULEUH: ppc_insn = 1328;
pub const ppc_insn_PPC_INS_VMULEUW: ppc_insn = 1329;
pub const ppc_insn_PPC_INS_VMULOSB: ppc_insn = 1330;
pub const ppc_insn_PPC_INS_VMULOSH: ppc_insn = 1331;
pub const ppc_insn_PPC_INS_VMULOSW: ppc_insn = 1332;
pub const ppc_insn_PPC_INS_VMULOUB: ppc_insn = 1333;
pub const ppc_insn_PPC_INS_VMULOUH: ppc_insn = 1334;
pub const ppc_insn_PPC_INS_VMULOUW: ppc_insn = 1335;
pub const ppc_insn_PPC_INS_VMULUWM: ppc_insn = 1336;
pub const ppc_insn_PPC_INS_VNAND: ppc_insn = 1337;
pub const ppc_insn_PPC_INS_VNCIPHER: ppc_insn = 1338;
pub const ppc_insn_PPC_INS_VNCIPHERLAST: ppc_insn = 1339;
pub const ppc_insn_PPC_INS_VNEGD: ppc_insn = 1340;
pub const ppc_insn_PPC_INS_VNEGW: ppc_insn = 1341;
pub const ppc_insn_PPC_INS_VNMSUBFP: ppc_insn = 1342;
pub const ppc_insn_PPC_INS_VNOR: ppc_insn = 1343;
pub const ppc_insn_PPC_INS_VNOT: ppc_insn = 1344;
pub const ppc_insn_PPC_INS_VOR: ppc_insn = 1345;
pub const ppc_insn_PPC_INS_VORC: ppc_insn = 1346;
pub const ppc_insn_PPC_INS_VPERM: ppc_insn = 1347;
pub const ppc_insn_PPC_INS_VPERMR: ppc_insn = 1348;
pub const ppc_insn_PPC_INS_VPERMXOR: ppc_insn = 1349;
pub const ppc_insn_PPC_INS_VPKPX: ppc_insn = 1350;
pub const ppc_insn_PPC_INS_VPKSDSS: ppc_insn = 1351;
pub const ppc_insn_PPC_INS_VPKSDUS: ppc_insn = 1352;
pub const ppc_insn_PPC_INS_VPKSHSS: ppc_insn = 1353;
pub const ppc_insn_PPC_INS_VPKSHUS: ppc_insn = 1354;
pub const ppc_insn_PPC_INS_VPKSWSS: ppc_insn = 1355;
pub const ppc_insn_PPC_INS_VPKSWUS: ppc_insn = 1356;
pub const ppc_insn_PPC_INS_VPKUDUM: ppc_insn = 1357;
pub const ppc_insn_PPC_INS_VPKUDUS: ppc_insn = 1358;
pub const ppc_insn_PPC_INS_VPKUHUM: ppc_insn = 1359;
pub const ppc_insn_PPC_INS_VPKUHUS: ppc_insn = 1360;
pub const ppc_insn_PPC_INS_VPKUWUM: ppc_insn = 1361;
pub const ppc_insn_PPC_INS_VPKUWUS: ppc_insn = 1362;
pub const ppc_insn_PPC_INS_VPMSUMB: ppc_insn = 1363;
pub const ppc_insn_PPC_INS_VPMSUMD: ppc_insn = 1364;
pub const ppc_insn_PPC_INS_VPMSUMH: ppc_insn = 1365;
pub const ppc_insn_PPC_INS_VPMSUMW: ppc_insn = 1366;
pub const ppc_insn_PPC_INS_VPOPCNTB: ppc_insn = 1367;
pub const ppc_insn_PPC_INS_VPOPCNTD: ppc_insn = 1368;
pub const ppc_insn_PPC_INS_VPOPCNTH: ppc_insn = 1369;
pub const ppc_insn_PPC_INS_VPOPCNTW: ppc_insn = 1370;
pub const ppc_insn_PPC_INS_VPRTYBD: ppc_insn = 1371;
pub const ppc_insn_PPC_INS_VPRTYBQ: ppc_insn = 1372;
pub const ppc_insn_PPC_INS_VPRTYBW: ppc_insn = 1373;
pub const ppc_insn_PPC_INS_VREFP: ppc_insn = 1374;
pub const ppc_insn_PPC_INS_VRFIM: ppc_insn = 1375;
pub const ppc_insn_PPC_INS_VRFIN: ppc_insn = 1376;
pub const ppc_insn_PPC_INS_VRFIP: ppc_insn = 1377;
pub const ppc_insn_PPC_INS_VRFIZ: ppc_insn = 1378;
pub const ppc_insn_PPC_INS_VRLB: ppc_insn = 1379;
pub const ppc_insn_PPC_INS_VRLD: ppc_insn = 1380;
pub const ppc_insn_PPC_INS_VRLDMI: ppc_insn = 1381;
pub const ppc_insn_PPC_INS_VRLDNM: ppc_insn = 1382;
pub const ppc_insn_PPC_INS_VRLH: ppc_insn = 1383;
pub const ppc_insn_PPC_INS_VRLW: ppc_insn = 1384;
pub const ppc_insn_PPC_INS_VRLWMI: ppc_insn = 1385;
pub const ppc_insn_PPC_INS_VRLWNM: ppc_insn = 1386;
pub const ppc_insn_PPC_INS_VRSQRTEFP: ppc_insn = 1387;
pub const ppc_insn_PPC_INS_VSBOX: ppc_insn = 1388;
pub const ppc_insn_PPC_INS_VSEL: ppc_insn = 1389;
pub const ppc_insn_PPC_INS_VSHASIGMAD: ppc_insn = 1390;
pub const ppc_insn_PPC_INS_VSHASIGMAW: ppc_insn = 1391;
pub const ppc_insn_PPC_INS_VSL: ppc_insn = 1392;
pub const ppc_insn_PPC_INS_VSLB: ppc_insn = 1393;
pub const ppc_insn_PPC_INS_VSLD: ppc_insn = 1394;
pub const ppc_insn_PPC_INS_VSLDOI: ppc_insn = 1395;
pub const ppc_insn_PPC_INS_VSLH: ppc_insn = 1396;
pub const ppc_insn_PPC_INS_VSLO: ppc_insn = 1397;
pub const ppc_insn_PPC_INS_VSLV: ppc_insn = 1398;
pub const ppc_insn_PPC_INS_VSLW: ppc_insn = 1399;
pub const ppc_insn_PPC_INS_VSPLTB: ppc_insn = 1400;
pub const ppc_insn_PPC_INS_VSPLTH: ppc_insn = 1401;
pub const ppc_insn_PPC_INS_VSPLTISB: ppc_insn = 1402;
pub const ppc_insn_PPC_INS_VSPLTISH: ppc_insn = 1403;
pub const ppc_insn_PPC_INS_VSPLTISW: ppc_insn = 1404;
pub const ppc_insn_PPC_INS_VSPLTW: ppc_insn = 1405;
pub const ppc_insn_PPC_INS_VSR: ppc_insn = 1406;
pub const ppc_insn_PPC_INS_VSRAB: ppc_insn = 1407;
pub const ppc_insn_PPC_INS_VSRAD: ppc_insn = 1408;
pub const ppc_insn_PPC_INS_VSRAH: ppc_insn = 1409;
pub const ppc_insn_PPC_INS_VSRAW: ppc_insn = 1410;
pub const ppc_insn_PPC_INS_VSRB: ppc_insn = 1411;
pub const ppc_insn_PPC_INS_VSRD: ppc_insn = 1412;
pub const ppc_insn_PPC_INS_VSRH: ppc_insn = 1413;
pub const ppc_insn_PPC_INS_VSRO: ppc_insn = 1414;
pub const ppc_insn_PPC_INS_VSRV: ppc_insn = 1415;
pub const ppc_insn_PPC_INS_VSRW: ppc_insn = 1416;
pub const ppc_insn_PPC_INS_VSUBCUQ: ppc_insn = 1417;
pub const ppc_insn_PPC_INS_VSUBCUW: ppc_insn = 1418;
pub const ppc_insn_PPC_INS_VSUBECUQ: ppc_insn = 1419;
pub const ppc_insn_PPC_INS_VSUBEUQM: ppc_insn = 1420;
pub const ppc_insn_PPC_INS_VSUBFP: ppc_insn = 1421;
pub const ppc_insn_PPC_INS_VSUBSBS: ppc_insn = 1422;
pub const ppc_insn_PPC_INS_VSUBSHS: ppc_insn = 1423;
pub const ppc_insn_PPC_INS_VSUBSWS: ppc_insn = 1424;
pub const ppc_insn_PPC_INS_VSUBUBM: ppc_insn = 1425;
pub const ppc_insn_PPC_INS_VSUBUBS: ppc_insn = 1426;
pub const ppc_insn_PPC_INS_VSUBUDM: ppc_insn = 1427;
pub const ppc_insn_PPC_INS_VSUBUHM: ppc_insn = 1428;
pub const ppc_insn_PPC_INS_VSUBUHS: ppc_insn = 1429;
pub const ppc_insn_PPC_INS_VSUBUQM: ppc_insn = 1430;
pub const ppc_insn_PPC_INS_VSUBUWM: ppc_insn = 1431;
pub const ppc_insn_PPC_INS_VSUBUWS: ppc_insn = 1432;
pub const ppc_insn_PPC_INS_VSUM2SWS: ppc_insn = 1433;
pub const ppc_insn_PPC_INS_VSUM4SBS: ppc_insn = 1434;
pub const ppc_insn_PPC_INS_VSUM4SHS: ppc_insn = 1435;
pub const ppc_insn_PPC_INS_VSUM4UBS: ppc_insn = 1436;
pub const ppc_insn_PPC_INS_VSUMSWS: ppc_insn = 1437;
pub const ppc_insn_PPC_INS_VUPKHPX: ppc_insn = 1438;
pub const ppc_insn_PPC_INS_VUPKHSB: ppc_insn = 1439;
pub const ppc_insn_PPC_INS_VUPKHSH: ppc_insn = 1440;
pub const ppc_insn_PPC_INS_VUPKHSW: ppc_insn = 1441;
pub const ppc_insn_PPC_INS_VUPKLPX: ppc_insn = 1442;
pub const ppc_insn_PPC_INS_VUPKLSB: ppc_insn = 1443;
pub const ppc_insn_PPC_INS_VUPKLSH: ppc_insn = 1444;
pub const ppc_insn_PPC_INS_VUPKLSW: ppc_insn = 1445;
pub const ppc_insn_PPC_INS_VXOR: ppc_insn = 1446;
pub const ppc_insn_PPC_INS_WAIT: ppc_insn = 1447;
pub const ppc_insn_PPC_INS_WAITIMPL: ppc_insn = 1448;
pub const ppc_insn_PPC_INS_WAITRSV: ppc_insn = 1449;
pub const ppc_insn_PPC_INS_WRTEE: ppc_insn = 1450;
pub const ppc_insn_PPC_INS_WRTEEI: ppc_insn = 1451;
pub const ppc_insn_PPC_INS_XNOP: ppc_insn = 1452;
pub const ppc_insn_PPC_INS_XOR: ppc_insn = 1453;
pub const ppc_insn_PPC_INS_XORI: ppc_insn = 1454;
pub const ppc_insn_PPC_INS_XORIS: ppc_insn = 1455;
pub const ppc_insn_PPC_INS_XSABSDP: ppc_insn = 1456;
pub const ppc_insn_PPC_INS_XSABSQP: ppc_insn = 1457;
pub const ppc_insn_PPC_INS_XSADDDP: ppc_insn = 1458;
pub const ppc_insn_PPC_INS_XSADDQP: ppc_insn = 1459;
pub const ppc_insn_PPC_INS_XSADDQPO: ppc_insn = 1460;
pub const ppc_insn_PPC_INS_XSADDSP: ppc_insn = 1461;
pub const ppc_insn_PPC_INS_XSCMPEQDP: ppc_insn = 1462;
pub const ppc_insn_PPC_INS_XSCMPEXPDP: ppc_insn = 1463;
pub const ppc_insn_PPC_INS_XSCMPEXPQP: ppc_insn = 1464;
pub const ppc_insn_PPC_INS_XSCMPGEDP: ppc_insn = 1465;
pub const ppc_insn_PPC_INS_XSCMPGTDP: ppc_insn = 1466;
pub const ppc_insn_PPC_INS_XSCMPODP: ppc_insn = 1467;
pub const ppc_insn_PPC_INS_XSCMPOQP: ppc_insn = 1468;
pub const ppc_insn_PPC_INS_XSCMPUDP: ppc_insn = 1469;
pub const ppc_insn_PPC_INS_XSCMPUQP: ppc_insn = 1470;
pub const ppc_insn_PPC_INS_XSCPSGNDP: ppc_insn = 1471;
pub const ppc_insn_PPC_INS_XSCPSGNQP: ppc_insn = 1472;
pub const ppc_insn_PPC_INS_XSCVDPHP: ppc_insn = 1473;
pub const ppc_insn_PPC_INS_XSCVDPQP: ppc_insn = 1474;
pub const ppc_insn_PPC_INS_XSCVDPSP: ppc_insn = 1475;
pub const ppc_insn_PPC_INS_XSCVDPSPN: ppc_insn = 1476;
pub const ppc_insn_PPC_INS_XSCVDPSXDS: ppc_insn = 1477;
pub const ppc_insn_PPC_INS_XSCVDPSXWS: ppc_insn = 1478;
pub const ppc_insn_PPC_INS_XSCVDPUXDS: ppc_insn = 1479;
pub const ppc_insn_PPC_INS_XSCVDPUXWS: ppc_insn = 1480;
pub const ppc_insn_PPC_INS_XSCVHPDP: ppc_insn = 1481;
pub const ppc_insn_PPC_INS_XSCVQPDP: ppc_insn = 1482;
pub const ppc_insn_PPC_INS_XSCVQPDPO: ppc_insn = 1483;
pub const ppc_insn_PPC_INS_XSCVQPSDZ: ppc_insn = 1484;
pub const ppc_insn_PPC_INS_XSCVQPSWZ: ppc_insn = 1485;
pub const ppc_insn_PPC_INS_XSCVQPUDZ: ppc_insn = 1486;
pub const ppc_insn_PPC_INS_XSCVQPUWZ: ppc_insn = 1487;
pub const ppc_insn_PPC_INS_XSCVSDQP: ppc_insn = 1488;
pub const ppc_insn_PPC_INS_XSCVSPDP: ppc_insn = 1489;
pub const ppc_insn_PPC_INS_XSCVSPDPN: ppc_insn = 1490;
pub const ppc_insn_PPC_INS_XSCVSXDDP: ppc_insn = 1491;
pub const ppc_insn_PPC_INS_XSCVSXDSP: ppc_insn = 1492;
pub const ppc_insn_PPC_INS_XSCVUDQP: ppc_insn = 1493;
pub const ppc_insn_PPC_INS_XSCVUXDDP: ppc_insn = 1494;
pub const ppc_insn_PPC_INS_XSCVUXDSP: ppc_insn = 1495;
pub const ppc_insn_PPC_INS_XSDIVDP: ppc_insn = 1496;
pub const ppc_insn_PPC_INS_XSDIVQP: ppc_insn = 1497;
pub const ppc_insn_PPC_INS_XSDIVQPO: ppc_insn = 1498;
pub const ppc_insn_PPC_INS_XSDIVSP: ppc_insn = 1499;
pub const ppc_insn_PPC_INS_XSIEXPDP: ppc_insn = 1500;
pub const ppc_insn_PPC_INS_XSIEXPQP: ppc_insn = 1501;
pub const ppc_insn_PPC_INS_XSMADDADP: ppc_insn = 1502;
pub const ppc_insn_PPC_INS_XSMADDASP: ppc_insn = 1503;
pub const ppc_insn_PPC_INS_XSMADDMDP: ppc_insn = 1504;
pub const ppc_insn_PPC_INS_XSMADDMSP: ppc_insn = 1505;
pub const ppc_insn_PPC_INS_XSMADDQP: ppc_insn = 1506;
pub const ppc_insn_PPC_INS_XSMADDQPO: ppc_insn = 1507;
pub const ppc_insn_PPC_INS_XSMAXCDP: ppc_insn = 1508;
pub const ppc_insn_PPC_INS_XSMAXDP: ppc_insn = 1509;
pub const ppc_insn_PPC_INS_XSMAXJDP: ppc_insn = 1510;
pub const ppc_insn_PPC_INS_XSMINCDP: ppc_insn = 1511;
pub const ppc_insn_PPC_INS_XSMINDP: ppc_insn = 1512;
pub const ppc_insn_PPC_INS_XSMINJDP: ppc_insn = 1513;
pub const ppc_insn_PPC_INS_XSMSUBADP: ppc_insn = 1514;
pub const ppc_insn_PPC_INS_XSMSUBASP: ppc_insn = 1515;
pub const ppc_insn_PPC_INS_XSMSUBMDP: ppc_insn = 1516;
pub const ppc_insn_PPC_INS_XSMSUBMSP: ppc_insn = 1517;
pub const ppc_insn_PPC_INS_XSMSUBQP: ppc_insn = 1518;
pub const ppc_insn_PPC_INS_XSMSUBQPO: ppc_insn = 1519;
pub const ppc_insn_PPC_INS_XSMULDP: ppc_insn = 1520;
pub const ppc_insn_PPC_INS_XSMULQP: ppc_insn = 1521;
pub const ppc_insn_PPC_INS_XSMULQPO: ppc_insn = 1522;
pub const ppc_insn_PPC_INS_XSMULSP: ppc_insn = 1523;
pub const ppc_insn_PPC_INS_XSNABSDP: ppc_insn = 1524;
pub const ppc_insn_PPC_INS_XSNABSQP: ppc_insn = 1525;
pub const ppc_insn_PPC_INS_XSNEGDP: ppc_insn = 1526;
pub const ppc_insn_PPC_INS_XSNEGQP: ppc_insn = 1527;
pub const ppc_insn_PPC_INS_XSNMADDADP: ppc_insn = 1528;
pub const ppc_insn_PPC_INS_XSNMADDASP: ppc_insn = 1529;
pub const ppc_insn_PPC_INS_XSNMADDMDP: ppc_insn = 1530;
pub const ppc_insn_PPC_INS_XSNMADDMSP: ppc_insn = 1531;
pub const ppc_insn_PPC_INS_XSNMADDQP: ppc_insn = 1532;
pub const ppc_insn_PPC_INS_XSNMADDQPO: ppc_insn = 1533;
pub const ppc_insn_PPC_INS_XSNMSUBADP: ppc_insn = 1534;
pub const ppc_insn_PPC_INS_XSNMSUBASP: ppc_insn = 1535;
pub const ppc_insn_PPC_INS_XSNMSUBMDP: ppc_insn = 1536;
pub const ppc_insn_PPC_INS_XSNMSUBMSP: ppc_insn = 1537;
pub const ppc_insn_PPC_INS_XSNMSUBQP: ppc_insn = 1538;
pub const ppc_insn_PPC_INS_XSNMSUBQPO: ppc_insn = 1539;
pub const ppc_insn_PPC_INS_XSRDPI: ppc_insn = 1540;
pub const ppc_insn_PPC_INS_XSRDPIC: ppc_insn = 1541;
pub const ppc_insn_PPC_INS_XSRDPIM: ppc_insn = 1542;
pub const ppc_insn_PPC_INS_XSRDPIP: ppc_insn = 1543;
pub const ppc_insn_PPC_INS_XSRDPIZ: ppc_insn = 1544;
pub const ppc_insn_PPC_INS_XSREDP: ppc_insn = 1545;
pub const ppc_insn_PPC_INS_XSRESP: ppc_insn = 1546;
pub const ppc_insn_PPC_INS_XSRQPI: ppc_insn = 1547;
pub const ppc_insn_PPC_INS_XSRQPIX: ppc_insn = 1548;
pub const ppc_insn_PPC_INS_XSRQPXP: ppc_insn = 1549;
pub const ppc_insn_PPC_INS_XSRSP: ppc_insn = 1550;
pub const ppc_insn_PPC_INS_XSRSQRTEDP: ppc_insn = 1551;
pub const ppc_insn_PPC_INS_XSRSQRTESP: ppc_insn = 1552;
pub const ppc_insn_PPC_INS_XSSQRTDP: ppc_insn = 1553;
pub const ppc_insn_PPC_INS_XSSQRTQP: ppc_insn = 1554;
pub const ppc_insn_PPC_INS_XSSQRTQPO: ppc_insn = 1555;
pub const ppc_insn_PPC_INS_XSSQRTSP: ppc_insn = 1556;
pub const ppc_insn_PPC_INS_XSSUBDP: ppc_insn = 1557;
pub const ppc_insn_PPC_INS_XSSUBQP: ppc_insn = 1558;
pub const ppc_insn_PPC_INS_XSSUBQPO: ppc_insn = 1559;
pub const ppc_insn_PPC_INS_XSSUBSP: ppc_insn = 1560;
pub const ppc_insn_PPC_INS_XSTDIVDP: ppc_insn = 1561;
pub const ppc_insn_PPC_INS_XSTSQRTDP: ppc_insn = 1562;
pub const ppc_insn_PPC_INS_XSTSTDCDP: ppc_insn = 1563;
pub const ppc_insn_PPC_INS_XSTSTDCQP: ppc_insn = 1564;
pub const ppc_insn_PPC_INS_XSTSTDCSP: ppc_insn = 1565;
pub const ppc_insn_PPC_INS_XSXEXPDP: ppc_insn = 1566;
pub const ppc_insn_PPC_INS_XSXEXPQP: ppc_insn = 1567;
pub const ppc_insn_PPC_INS_XSXSIGDP: ppc_insn = 1568;
pub const ppc_insn_PPC_INS_XSXSIGQP: ppc_insn = 1569;
pub const ppc_insn_PPC_INS_XVABSDP: ppc_insn = 1570;
pub const ppc_insn_PPC_INS_XVABSSP: ppc_insn = 1571;
pub const ppc_insn_PPC_INS_XVADDDP: ppc_insn = 1572;
pub const ppc_insn_PPC_INS_XVADDSP: ppc_insn = 1573;
pub const ppc_insn_PPC_INS_XVCMPEQDP: ppc_insn = 1574;
pub const ppc_insn_PPC_INS_XVCMPEQSP: ppc_insn = 1575;
pub const ppc_insn_PPC_INS_XVCMPGEDP: ppc_insn = 1576;
pub const ppc_insn_PPC_INS_XVCMPGESP: ppc_insn = 1577;
pub const ppc_insn_PPC_INS_XVCMPGTDP: ppc_insn = 1578;
pub const ppc_insn_PPC_INS_XVCMPGTSP: ppc_insn = 1579;
pub const ppc_insn_PPC_INS_XVCPSGNDP: ppc_insn = 1580;
pub const ppc_insn_PPC_INS_XVCPSGNSP: ppc_insn = 1581;
pub const ppc_insn_PPC_INS_XVCVDPSP: ppc_insn = 1582;
pub const ppc_insn_PPC_INS_XVCVDPSXDS: ppc_insn = 1583;
pub const ppc_insn_PPC_INS_XVCVDPSXWS: ppc_insn = 1584;
pub const ppc_insn_PPC_INS_XVCVDPUXDS: ppc_insn = 1585;
pub const ppc_insn_PPC_INS_XVCVDPUXWS: ppc_insn = 1586;
pub const ppc_insn_PPC_INS_XVCVHPSP: ppc_insn = 1587;
pub const ppc_insn_PPC_INS_XVCVSPDP: ppc_insn = 1588;
pub const ppc_insn_PPC_INS_XVCVSPHP: ppc_insn = 1589;
pub const ppc_insn_PPC_INS_XVCVSPSXDS: ppc_insn = 1590;
pub const ppc_insn_PPC_INS_XVCVSPSXWS: ppc_insn = 1591;
pub const ppc_insn_PPC_INS_XVCVSPUXDS: ppc_insn = 1592;
pub const ppc_insn_PPC_INS_XVCVSPUXWS: ppc_insn = 1593;
pub const ppc_insn_PPC_INS_XVCVSXDDP: ppc_insn = 1594;
pub const ppc_insn_PPC_INS_XVCVSXDSP: ppc_insn = 1595;
pub const ppc_insn_PPC_INS_XVCVSXWDP: ppc_insn = 1596;
pub const ppc_insn_PPC_INS_XVCVSXWSP: ppc_insn = 1597;
pub const ppc_insn_PPC_INS_XVCVUXDDP: ppc_insn = 1598;
pub const ppc_insn_PPC_INS_XVCVUXDSP: ppc_insn = 1599;
pub const ppc_insn_PPC_INS_XVCVUXWDP: ppc_insn = 1600;
pub const ppc_insn_PPC_INS_XVCVUXWSP: ppc_insn = 1601;
pub const ppc_insn_PPC_INS_XVDIVDP: ppc_insn = 1602;
pub const ppc_insn_PPC_INS_XVDIVSP: ppc_insn = 1603;
pub const ppc_insn_PPC_INS_XVIEXPDP: ppc_insn = 1604;
pub const ppc_insn_PPC_INS_XVIEXPSP: ppc_insn = 1605;
pub const ppc_insn_PPC_INS_XVMADDADP: ppc_insn = 1606;
pub const ppc_insn_PPC_INS_XVMADDASP: ppc_insn = 1607;
pub const ppc_insn_PPC_INS_XVMADDMDP: ppc_insn = 1608;
pub const ppc_insn_PPC_INS_XVMADDMSP: ppc_insn = 1609;
pub const ppc_insn_PPC_INS_XVMAXDP: ppc_insn = 1610;
pub const ppc_insn_PPC_INS_XVMAXSP: ppc_insn = 1611;
pub const ppc_insn_PPC_INS_XVMINDP: ppc_insn = 1612;
pub const ppc_insn_PPC_INS_XVMINSP: ppc_insn = 1613;
pub const ppc_insn_PPC_INS_XVMOVDP: ppc_insn = 1614;
pub const ppc_insn_PPC_INS_XVMOVSP: ppc_insn = 1615;
pub const ppc_insn_PPC_INS_XVMSUBADP: ppc_insn = 1616;
pub const ppc_insn_PPC_INS_XVMSUBASP: ppc_insn = 1617;
pub const ppc_insn_PPC_INS_XVMSUBMDP: ppc_insn = 1618;
pub const ppc_insn_PPC_INS_XVMSUBMSP: ppc_insn = 1619;
pub const ppc_insn_PPC_INS_XVMULDP: ppc_insn = 1620;
pub const ppc_insn_PPC_INS_XVMULSP: ppc_insn = 1621;
pub const ppc_insn_PPC_INS_XVNABSDP: ppc_insn = 1622;
pub const ppc_insn_PPC_INS_XVNABSSP: ppc_insn = 1623;
pub const ppc_insn_PPC_INS_XVNEGDP: ppc_insn = 1624;
pub const ppc_insn_PPC_INS_XVNEGSP: ppc_insn = 1625;
pub const ppc_insn_PPC_INS_XVNMADDADP: ppc_insn = 1626;
pub const ppc_insn_PPC_INS_XVNMADDASP: ppc_insn = 1627;
pub const ppc_insn_PPC_INS_XVNMADDMDP: ppc_insn = 1628;
pub const ppc_insn_PPC_INS_XVNMADDMSP: ppc_insn = 1629;
pub const ppc_insn_PPC_INS_XVNMSUBADP: ppc_insn = 1630;
pub const ppc_insn_PPC_INS_XVNMSUBASP: ppc_insn = 1631;
pub const ppc_insn_PPC_INS_XVNMSUBMDP: ppc_insn = 1632;
pub const ppc_insn_PPC_INS_XVNMSUBMSP: ppc_insn = 1633;
pub const ppc_insn_PPC_INS_XVRDPI: ppc_insn = 1634;
pub const ppc_insn_PPC_INS_XVRDPIC: ppc_insn = 1635;
pub const ppc_insn_PPC_INS_XVRDPIM: ppc_insn = 1636;
pub const ppc_insn_PPC_INS_XVRDPIP: ppc_insn = 1637;
pub const ppc_insn_PPC_INS_XVRDPIZ: ppc_insn = 1638;
pub const ppc_insn_PPC_INS_XVREDP: ppc_insn = 1639;
pub const ppc_insn_PPC_INS_XVRESP: ppc_insn = 1640;
pub const ppc_insn_PPC_INS_XVRSPI: ppc_insn = 1641;
pub const ppc_insn_PPC_INS_XVRSPIC: ppc_insn = 1642;
pub const ppc_insn_PPC_INS_XVRSPIM: ppc_insn = 1643;
pub const ppc_insn_PPC_INS_XVRSPIP: ppc_insn = 1644;
pub const ppc_insn_PPC_INS_XVRSPIZ: ppc_insn = 1645;
pub const ppc_insn_PPC_INS_XVRSQRTEDP: ppc_insn = 1646;
pub const ppc_insn_PPC_INS_XVRSQRTESP: ppc_insn = 1647;
pub const ppc_insn_PPC_INS_XVSQRTDP: ppc_insn = 1648;
pub const ppc_insn_PPC_INS_XVSQRTSP: ppc_insn = 1649;
pub const ppc_insn_PPC_INS_XVSUBDP: ppc_insn = 1650;
pub const ppc_insn_PPC_INS_XVSUBSP: ppc_insn = 1651;
pub const ppc_insn_PPC_INS_XVTDIVDP: ppc_insn = 1652;
pub const ppc_insn_PPC_INS_XVTDIVSP: ppc_insn = 1653;
pub const ppc_insn_PPC_INS_XVTSQRTDP: ppc_insn = 1654;
pub const ppc_insn_PPC_INS_XVTSQRTSP: ppc_insn = 1655;
pub const ppc_insn_PPC_INS_XVTSTDCDP: ppc_insn = 1656;
pub const ppc_insn_PPC_INS_XVTSTDCSP: ppc_insn = 1657;
pub const ppc_insn_PPC_INS_XVXEXPDP: ppc_insn = 1658;
pub const ppc_insn_PPC_INS_XVXEXPSP: ppc_insn = 1659;
pub const ppc_insn_PPC_INS_XVXSIGDP: ppc_insn = 1660;
pub const ppc_insn_PPC_INS_XVXSIGSP: ppc_insn = 1661;
pub const ppc_insn_PPC_INS_XXBRD: ppc_insn = 1662;
pub const ppc_insn_PPC_INS_XXBRH: ppc_insn = 1663;
pub const ppc_insn_PPC_INS_XXBRQ: ppc_insn = 1664;
pub const ppc_insn_PPC_INS_XXBRW: ppc_insn = 1665;
pub const ppc_insn_PPC_INS_XXEXTRACTUW: ppc_insn = 1666;
pub const ppc_insn_PPC_INS_XXINSERTW: ppc_insn = 1667;
pub const ppc_insn_PPC_INS_XXLAND: ppc_insn = 1668;
pub const ppc_insn_PPC_INS_XXLANDC: ppc_insn = 1669;
pub const ppc_insn_PPC_INS_XXLEQV: ppc_insn = 1670;
pub const ppc_insn_PPC_INS_XXLNAND: ppc_insn = 1671;
pub const ppc_insn_PPC_INS_XXLNOR: ppc_insn = 1672;
pub const ppc_insn_PPC_INS_XXLOR: ppc_insn = 1673;
pub const ppc_insn_PPC_INS_XXLORC: ppc_insn = 1674;
pub const ppc_insn_PPC_INS_XXLXOR: ppc_insn = 1675;
pub const ppc_insn_PPC_INS_XXMRGHD: ppc_insn = 1676;
pub const ppc_insn_PPC_INS_XXMRGHW: ppc_insn = 1677;
pub const ppc_insn_PPC_INS_XXMRGLD: ppc_insn = 1678;
pub const ppc_insn_PPC_INS_XXMRGLW: ppc_insn = 1679;
pub const ppc_insn_PPC_INS_XXPERM: ppc_insn = 1680;
pub const ppc_insn_PPC_INS_XXPERMDI: ppc_insn = 1681;
pub const ppc_insn_PPC_INS_XXPERMR: ppc_insn = 1682;
pub const ppc_insn_PPC_INS_XXSEL: ppc_insn = 1683;
pub const ppc_insn_PPC_INS_XXSLDWI: ppc_insn = 1684;
pub const ppc_insn_PPC_INS_XXSPLTD: ppc_insn = 1685;
pub const ppc_insn_PPC_INS_XXSPLTIB: ppc_insn = 1686;
pub const ppc_insn_PPC_INS_XXSPLTW: ppc_insn = 1687;
pub const ppc_insn_PPC_INS_XXSWAPD: ppc_insn = 1688;
pub const ppc_insn_PPC_INS_DCBZ_L: ppc_insn = 1689;
pub const ppc_insn_PPC_INS_PSQ_L: ppc_insn = 1690;
pub const ppc_insn_PPC_INS_PSQ_LU: ppc_insn = 1691;
pub const ppc_insn_PPC_INS_PSQ_LUX: ppc_insn = 1692;
pub const ppc_insn_PPC_INS_PSQ_LX: ppc_insn = 1693;
pub const ppc_insn_PPC_INS_PSQ_ST: ppc_insn = 1694;
pub const ppc_insn_PPC_INS_PSQ_STU: ppc_insn = 1695;
pub const ppc_insn_PPC_INS_PSQ_STUX: ppc_insn = 1696;
pub const ppc_insn_PPC_INS_PSQ_STX: ppc_insn = 1697;
pub const ppc_insn_PPC_INS_PS_ABS: ppc_insn = 1698;
pub const ppc_insn_PPC_INS_PS_ADD: ppc_insn = 1699;
pub const ppc_insn_PPC_INS_PS_CMPO0: ppc_insn = 1700;
pub const ppc_insn_PPC_INS_PS_CMPO1: ppc_insn = 1701;
pub const ppc_insn_PPC_INS_PS_CMPU0: ppc_insn = 1702;
pub const ppc_insn_PPC_INS_PS_CMPU1: ppc_insn = 1703;
pub const ppc_insn_PPC_INS_PS_DIV: ppc_insn = 1704;
pub const ppc_insn_PPC_INS_PS_MADD: ppc_insn = 1705;
pub const ppc_insn_PPC_INS_PS_MADDS0: ppc_insn = 1706;
pub const ppc_insn_PPC_INS_PS_MADDS1: ppc_insn = 1707;
pub const ppc_insn_PPC_INS_PS_MERGE00: ppc_insn = 1708;
pub const ppc_insn_PPC_INS_PS_MERGE01: ppc_insn = 1709;
pub const ppc_insn_PPC_INS_PS_MERGE10: ppc_insn = 1710;
pub const ppc_insn_PPC_INS_PS_MERGE11: ppc_insn = 1711;
pub const ppc_insn_PPC_INS_PS_MR: ppc_insn = 1712;
pub const ppc_insn_PPC_INS_PS_MSUB: ppc_insn = 1713;
pub const ppc_insn_PPC_INS_PS_MUL: ppc_insn = 1714;
pub const ppc_insn_PPC_INS_PS_MULS0: ppc_insn = 1715;
pub const ppc_insn_PPC_INS_PS_MULS1: ppc_insn = 1716;
pub const ppc_insn_PPC_INS_PS_NABS: ppc_insn = 1717;
pub const ppc_insn_PPC_INS_PS_NEG: ppc_insn = 1718;
pub const ppc_insn_PPC_INS_PS_NMADD: ppc_insn = 1719;
pub const ppc_insn_PPC_INS_PS_NMSUB: ppc_insn = 1720;
pub const ppc_insn_PPC_INS_PS_RES: ppc_insn = 1721;
pub const ppc_insn_PPC_INS_PS_RSQRTE: ppc_insn = 1722;
pub const ppc_insn_PPC_INS_PS_SEL: ppc_insn = 1723;
pub const ppc_insn_PPC_INS_PS_SUB: ppc_insn = 1724;
pub const ppc_insn_PPC_INS_PS_SUM0: ppc_insn = 1725;
pub const ppc_insn_PPC_INS_PS_SUM1: ppc_insn = 1726;
pub const ppc_insn_PPC_INS_ENDING: ppc_insn = 1727;
pub type ppc_insn = ::core::ffi::c_uint;
pub const ppc_insn_group_PPC_GRP_INVALID: ppc_insn_group = 0;
pub const ppc_insn_group_PPC_GRP_JUMP: ppc_insn_group = 1;
pub const ppc_insn_group_PPC_GRP_ALTIVEC: ppc_insn_group = 128;
pub const ppc_insn_group_PPC_GRP_MODE32: ppc_insn_group = 129;
pub const ppc_insn_group_PPC_GRP_MODE64: ppc_insn_group = 130;
pub const ppc_insn_group_PPC_GRP_BOOKE: ppc_insn_group = 131;
pub const ppc_insn_group_PPC_GRP_NOTBOOKE: ppc_insn_group = 132;
pub const ppc_insn_group_PPC_GRP_SPE: ppc_insn_group = 133;
pub const ppc_insn_group_PPC_GRP_VSX: ppc_insn_group = 134;
pub const ppc_insn_group_PPC_GRP_E500: ppc_insn_group = 135;
pub const ppc_insn_group_PPC_GRP_PPC4XX: ppc_insn_group = 136;
pub const ppc_insn_group_PPC_GRP_PPC6XX: ppc_insn_group = 137;
pub const ppc_insn_group_PPC_GRP_ICBT: ppc_insn_group = 138;
pub const ppc_insn_group_PPC_GRP_P8ALTIVEC: ppc_insn_group = 139;
pub const ppc_insn_group_PPC_GRP_P8VECTOR: ppc_insn_group = 140;
pub const ppc_insn_group_PPC_GRP_QPX: ppc_insn_group = 141;
pub const ppc_insn_group_PPC_GRP_PS: ppc_insn_group = 142;
pub const ppc_insn_group_PPC_GRP_ENDING: ppc_insn_group = 143;
pub type ppc_insn_group = ::core::ffi::c_uint;
pub const sparc_cc_SPARC_CC_INVALID: sparc_cc = 0;
pub const sparc_cc_SPARC_CC_ICC_A: sparc_cc = 264;
pub const sparc_cc_SPARC_CC_ICC_N: sparc_cc = 256;
pub const sparc_cc_SPARC_CC_ICC_NE: sparc_cc = 265;
pub const sparc_cc_SPARC_CC_ICC_E: sparc_cc = 257;
pub const sparc_cc_SPARC_CC_ICC_G: sparc_cc = 266;
pub const sparc_cc_SPARC_CC_ICC_LE: sparc_cc = 258;
pub const sparc_cc_SPARC_CC_ICC_GE: sparc_cc = 267;
pub const sparc_cc_SPARC_CC_ICC_L: sparc_cc = 259;
pub const sparc_cc_SPARC_CC_ICC_GU: sparc_cc = 268;
pub const sparc_cc_SPARC_CC_ICC_LEU: sparc_cc = 260;
pub const sparc_cc_SPARC_CC_ICC_CC: sparc_cc = 269;
pub const sparc_cc_SPARC_CC_ICC_CS: sparc_cc = 261;
pub const sparc_cc_SPARC_CC_ICC_POS: sparc_cc = 270;
pub const sparc_cc_SPARC_CC_ICC_NEG: sparc_cc = 262;
pub const sparc_cc_SPARC_CC_ICC_VC: sparc_cc = 271;
pub const sparc_cc_SPARC_CC_ICC_VS: sparc_cc = 263;
pub const sparc_cc_SPARC_CC_FCC_A: sparc_cc = 280;
pub const sparc_cc_SPARC_CC_FCC_N: sparc_cc = 272;
pub const sparc_cc_SPARC_CC_FCC_U: sparc_cc = 279;
pub const sparc_cc_SPARC_CC_FCC_G: sparc_cc = 278;
pub const sparc_cc_SPARC_CC_FCC_UG: sparc_cc = 277;
pub const sparc_cc_SPARC_CC_FCC_L: sparc_cc = 276;
pub const sparc_cc_SPARC_CC_FCC_UL: sparc_cc = 275;
pub const sparc_cc_SPARC_CC_FCC_LG: sparc_cc = 274;
pub const sparc_cc_SPARC_CC_FCC_NE: sparc_cc = 273;
pub const sparc_cc_SPARC_CC_FCC_E: sparc_cc = 281;
pub const sparc_cc_SPARC_CC_FCC_UE: sparc_cc = 282;
pub const sparc_cc_SPARC_CC_FCC_GE: sparc_cc = 283;
pub const sparc_cc_SPARC_CC_FCC_UGE: sparc_cc = 284;
pub const sparc_cc_SPARC_CC_FCC_LE: sparc_cc = 285;
pub const sparc_cc_SPARC_CC_FCC_ULE: sparc_cc = 286;
pub const sparc_cc_SPARC_CC_FCC_O: sparc_cc = 287;
pub type sparc_cc = ::core::ffi::c_uint;
pub const sparc_hint_SPARC_HINT_INVALID: sparc_hint = 0;
pub const sparc_hint_SPARC_HINT_A: sparc_hint = 1;
pub const sparc_hint_SPARC_HINT_PT: sparc_hint = 2;
pub const sparc_hint_SPARC_HINT_PN: sparc_hint = 4;
pub type sparc_hint = ::core::ffi::c_uint;
pub const sparc_op_type_SPARC_OP_INVALID: sparc_op_type = 0;
pub const sparc_op_type_SPARC_OP_REG: sparc_op_type = 1;
pub const sparc_op_type_SPARC_OP_IMM: sparc_op_type = 2;
pub const sparc_op_type_SPARC_OP_MEM: sparc_op_type = 3;
pub type sparc_op_type = ::core::ffi::c_uint;
pub const sparc_reg_SPARC_REG_INVALID: sparc_reg = 0;
pub const sparc_reg_SPARC_REG_F0: sparc_reg = 1;
pub const sparc_reg_SPARC_REG_F1: sparc_reg = 2;
pub const sparc_reg_SPARC_REG_F2: sparc_reg = 3;
pub const sparc_reg_SPARC_REG_F3: sparc_reg = 4;
pub const sparc_reg_SPARC_REG_F4: sparc_reg = 5;
pub const sparc_reg_SPARC_REG_F5: sparc_reg = 6;
pub const sparc_reg_SPARC_REG_F6: sparc_reg = 7;
pub const sparc_reg_SPARC_REG_F7: sparc_reg = 8;
pub const sparc_reg_SPARC_REG_F8: sparc_reg = 9;
pub const sparc_reg_SPARC_REG_F9: sparc_reg = 10;
pub const sparc_reg_SPARC_REG_F10: sparc_reg = 11;
pub const sparc_reg_SPARC_REG_F11: sparc_reg = 12;
pub const sparc_reg_SPARC_REG_F12: sparc_reg = 13;
pub const sparc_reg_SPARC_REG_F13: sparc_reg = 14;
pub const sparc_reg_SPARC_REG_F14: sparc_reg = 15;
pub const sparc_reg_SPARC_REG_F15: sparc_reg = 16;
pub const sparc_reg_SPARC_REG_F16: sparc_reg = 17;
pub const sparc_reg_SPARC_REG_F17: sparc_reg = 18;
pub const sparc_reg_SPARC_REG_F18: sparc_reg = 19;
pub const sparc_reg_SPARC_REG_F19: sparc_reg = 20;
pub const sparc_reg_SPARC_REG_F20: sparc_reg = 21;
pub const sparc_reg_SPARC_REG_F21: sparc_reg = 22;
pub const sparc_reg_SPARC_REG_F22: sparc_reg = 23;
pub const sparc_reg_SPARC_REG_F23: sparc_reg = 24;
pub const sparc_reg_SPARC_REG_F24: sparc_reg = 25;
pub const sparc_reg_SPARC_REG_F25: sparc_reg = 26;
pub const sparc_reg_SPARC_REG_F26: sparc_reg = 27;
pub const sparc_reg_SPARC_REG_F27: sparc_reg = 28;
pub const sparc_reg_SPARC_REG_F28: sparc_reg = 29;
pub const sparc_reg_SPARC_REG_F29: sparc_reg = 30;
pub const sparc_reg_SPARC_REG_F30: sparc_reg = 31;
pub const sparc_reg_SPARC_REG_F31: sparc_reg = 32;
pub const sparc_reg_SPARC_REG_F32: sparc_reg = 33;
pub const sparc_reg_SPARC_REG_F34: sparc_reg = 34;
pub const sparc_reg_SPARC_REG_F36: sparc_reg = 35;
pub const sparc_reg_SPARC_REG_F38: sparc_reg = 36;
pub const sparc_reg_SPARC_REG_F40: sparc_reg = 37;
pub const sparc_reg_SPARC_REG_F42: sparc_reg = 38;
pub const sparc_reg_SPARC_REG_F44: sparc_reg = 39;
pub const sparc_reg_SPARC_REG_F46: sparc_reg = 40;
pub const sparc_reg_SPARC_REG_F48: sparc_reg = 41;
pub const sparc_reg_SPARC_REG_F50: sparc_reg = 42;
pub const sparc_reg_SPARC_REG_F52: sparc_reg = 43;
pub const sparc_reg_SPARC_REG_F54: sparc_reg = 44;
pub const sparc_reg_SPARC_REG_F56: sparc_reg = 45;
pub const sparc_reg_SPARC_REG_F58: sparc_reg = 46;
pub const sparc_reg_SPARC_REG_F60: sparc_reg = 47;
pub const sparc_reg_SPARC_REG_F62: sparc_reg = 48;
pub const sparc_reg_SPARC_REG_FCC0: sparc_reg = 49;
pub const sparc_reg_SPARC_REG_FCC1: sparc_reg = 50;
pub const sparc_reg_SPARC_REG_FCC2: sparc_reg = 51;
pub const sparc_reg_SPARC_REG_FCC3: sparc_reg = 52;
pub const sparc_reg_SPARC_REG_FP: sparc_reg = 53;
pub const sparc_reg_SPARC_REG_G0: sparc_reg = 54;
pub const sparc_reg_SPARC_REG_G1: sparc_reg = 55;
pub const sparc_reg_SPARC_REG_G2: sparc_reg = 56;
pub const sparc_reg_SPARC_REG_G3: sparc_reg = 57;
pub const sparc_reg_SPARC_REG_G4: sparc_reg = 58;
pub const sparc_reg_SPARC_REG_G5: sparc_reg = 59;
pub const sparc_reg_SPARC_REG_G6: sparc_reg = 60;
pub const sparc_reg_SPARC_REG_G7: sparc_reg = 61;
pub const sparc_reg_SPARC_REG_I0: sparc_reg = 62;
pub const sparc_reg_SPARC_REG_I1: sparc_reg = 63;
pub const sparc_reg_SPARC_REG_I2: sparc_reg = 64;
pub const sparc_reg_SPARC_REG_I3: sparc_reg = 65;
pub const sparc_reg_SPARC_REG_I4: sparc_reg = 66;
pub const sparc_reg_SPARC_REG_I5: sparc_reg = 67;
pub const sparc_reg_SPARC_REG_I7: sparc_reg = 68;
pub const sparc_reg_SPARC_REG_ICC: sparc_reg = 69;
pub const sparc_reg_SPARC_REG_L0: sparc_reg = 70;
pub const sparc_reg_SPARC_REG_L1: sparc_reg = 71;
pub const sparc_reg_SPARC_REG_L2: sparc_reg = 72;
pub const sparc_reg_SPARC_REG_L3: sparc_reg = 73;
pub const sparc_reg_SPARC_REG_L4: sparc_reg = 74;
pub const sparc_reg_SPARC_REG_L5: sparc_reg = 75;
pub const sparc_reg_SPARC_REG_L6: sparc_reg = 76;
pub const sparc_reg_SPARC_REG_L7: sparc_reg = 77;
pub const sparc_reg_SPARC_REG_O0: sparc_reg = 78;
pub const sparc_reg_SPARC_REG_O1: sparc_reg = 79;
pub const sparc_reg_SPARC_REG_O2: sparc_reg = 80;
pub const sparc_reg_SPARC_REG_O3: sparc_reg = 81;
pub const sparc_reg_SPARC_REG_O4: sparc_reg = 82;
pub const sparc_reg_SPARC_REG_O5: sparc_reg = 83;
pub const sparc_reg_SPARC_REG_O7: sparc_reg = 84;
pub const sparc_reg_SPARC_REG_SP: sparc_reg = 85;
pub const sparc_reg_SPARC_REG_Y: sparc_reg = 86;
pub const sparc_reg_SPARC_REG_XCC: sparc_reg = 87;
pub const sparc_reg_SPARC_REG_ENDING: sparc_reg = 88;
pub const sparc_reg_SPARC_REG_O6: sparc_reg = 85;
pub const sparc_reg_SPARC_REG_I6: sparc_reg = 53;
pub type sparc_reg = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sparc_op_mem {
    pub base: u8,
    pub index: u8,
    pub disp: i32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_sparc_op {
    pub type_: sparc_op_type,
    pub __bindgen_anon_1: cs_sparc_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_sparc_op__bindgen_ty_1 {
    pub reg: sparc_reg,
    pub imm: i64,
    pub mem: sparc_op_mem,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_sparc {
    pub cc: sparc_cc,
    pub hint: sparc_hint,
    pub op_count: u8,
    pub operands: [cs_sparc_op; 4usize],
}
pub const sparc_insn_SPARC_INS_INVALID: sparc_insn = 0;
pub const sparc_insn_SPARC_INS_ADDCC: sparc_insn = 1;
pub const sparc_insn_SPARC_INS_ADDX: sparc_insn = 2;
pub const sparc_insn_SPARC_INS_ADDXCC: sparc_insn = 3;
pub const sparc_insn_SPARC_INS_ADDXC: sparc_insn = 4;
pub const sparc_insn_SPARC_INS_ADDXCCC: sparc_insn = 5;
pub const sparc_insn_SPARC_INS_ADD: sparc_insn = 6;
pub const sparc_insn_SPARC_INS_ALIGNADDR: sparc_insn = 7;
pub const sparc_insn_SPARC_INS_ALIGNADDRL: sparc_insn = 8;
pub const sparc_insn_SPARC_INS_ANDCC: sparc_insn = 9;
pub const sparc_insn_SPARC_INS_ANDNCC: sparc_insn = 10;
pub const sparc_insn_SPARC_INS_ANDN: sparc_insn = 11;
pub const sparc_insn_SPARC_INS_AND: sparc_insn = 12;
pub const sparc_insn_SPARC_INS_ARRAY16: sparc_insn = 13;
pub const sparc_insn_SPARC_INS_ARRAY32: sparc_insn = 14;
pub const sparc_insn_SPARC_INS_ARRAY8: sparc_insn = 15;
pub const sparc_insn_SPARC_INS_B: sparc_insn = 16;
pub const sparc_insn_SPARC_INS_JMP: sparc_insn = 17;
pub const sparc_insn_SPARC_INS_BMASK: sparc_insn = 18;
pub const sparc_insn_SPARC_INS_FB: sparc_insn = 19;
pub const sparc_insn_SPARC_INS_BRGEZ: sparc_insn = 20;
pub const sparc_insn_SPARC_INS_BRGZ: sparc_insn = 21;
pub const sparc_insn_SPARC_INS_BRLEZ: sparc_insn = 22;
pub const sparc_insn_SPARC_INS_BRLZ: sparc_insn = 23;
pub const sparc_insn_SPARC_INS_BRNZ: sparc_insn = 24;
pub const sparc_insn_SPARC_INS_BRZ: sparc_insn = 25;
pub const sparc_insn_SPARC_INS_BSHUFFLE: sparc_insn = 26;
pub const sparc_insn_SPARC_INS_CALL: sparc_insn = 27;
pub const sparc_insn_SPARC_INS_CASX: sparc_insn = 28;
pub const sparc_insn_SPARC_INS_CAS: sparc_insn = 29;
pub const sparc_insn_SPARC_INS_CMASK16: sparc_insn = 30;
pub const sparc_insn_SPARC_INS_CMASK32: sparc_insn = 31;
pub const sparc_insn_SPARC_INS_CMASK8: sparc_insn = 32;
pub const sparc_insn_SPARC_INS_CMP: sparc_insn = 33;
pub const sparc_insn_SPARC_INS_EDGE16: sparc_insn = 34;
pub const sparc_insn_SPARC_INS_EDGE16L: sparc_insn = 35;
pub const sparc_insn_SPARC_INS_EDGE16LN: sparc_insn = 36;
pub const sparc_insn_SPARC_INS_EDGE16N: sparc_insn = 37;
pub const sparc_insn_SPARC_INS_EDGE32: sparc_insn = 38;
pub const sparc_insn_SPARC_INS_EDGE32L: sparc_insn = 39;
pub const sparc_insn_SPARC_INS_EDGE32LN: sparc_insn = 40;
pub const sparc_insn_SPARC_INS_EDGE32N: sparc_insn = 41;
pub const sparc_insn_SPARC_INS_EDGE8: sparc_insn = 42;
pub const sparc_insn_SPARC_INS_EDGE8L: sparc_insn = 43;
pub const sparc_insn_SPARC_INS_EDGE8LN: sparc_insn = 44;
pub const sparc_insn_SPARC_INS_EDGE8N: sparc_insn = 45;
pub const sparc_insn_SPARC_INS_FABSD: sparc_insn = 46;
pub const sparc_insn_SPARC_INS_FABSQ: sparc_insn = 47;
pub const sparc_insn_SPARC_INS_FABSS: sparc_insn = 48;
pub const sparc_insn_SPARC_INS_FADDD: sparc_insn = 49;
pub const sparc_insn_SPARC_INS_FADDQ: sparc_insn = 50;
pub const sparc_insn_SPARC_INS_FADDS: sparc_insn = 51;
pub const sparc_insn_SPARC_INS_FALIGNDATA: sparc_insn = 52;
pub const sparc_insn_SPARC_INS_FAND: sparc_insn = 53;
pub const sparc_insn_SPARC_INS_FANDNOT1: sparc_insn = 54;
pub const sparc_insn_SPARC_INS_FANDNOT1S: sparc_insn = 55;
pub const sparc_insn_SPARC_INS_FANDNOT2: sparc_insn = 56;
pub const sparc_insn_SPARC_INS_FANDNOT2S: sparc_insn = 57;
pub const sparc_insn_SPARC_INS_FANDS: sparc_insn = 58;
pub const sparc_insn_SPARC_INS_FCHKSM16: sparc_insn = 59;
pub const sparc_insn_SPARC_INS_FCMPD: sparc_insn = 60;
pub const sparc_insn_SPARC_INS_FCMPEQ16: sparc_insn = 61;
pub const sparc_insn_SPARC_INS_FCMPEQ32: sparc_insn = 62;
pub const sparc_insn_SPARC_INS_FCMPGT16: sparc_insn = 63;
pub const sparc_insn_SPARC_INS_FCMPGT32: sparc_insn = 64;
pub const sparc_insn_SPARC_INS_FCMPLE16: sparc_insn = 65;
pub const sparc_insn_SPARC_INS_FCMPLE32: sparc_insn = 66;
pub const sparc_insn_SPARC_INS_FCMPNE16: sparc_insn = 67;
pub const sparc_insn_SPARC_INS_FCMPNE32: sparc_insn = 68;
pub const sparc_insn_SPARC_INS_FCMPQ: sparc_insn = 69;
pub const sparc_insn_SPARC_INS_FCMPS: sparc_insn = 70;
pub const sparc_insn_SPARC_INS_FDIVD: sparc_insn = 71;
pub const sparc_insn_SPARC_INS_FDIVQ: sparc_insn = 72;
pub const sparc_insn_SPARC_INS_FDIVS: sparc_insn = 73;
pub const sparc_insn_SPARC_INS_FDMULQ: sparc_insn = 74;
pub const sparc_insn_SPARC_INS_FDTOI: sparc_insn = 75;
pub const sparc_insn_SPARC_INS_FDTOQ: sparc_insn = 76;
pub const sparc_insn_SPARC_INS_FDTOS: sparc_insn = 77;
pub const sparc_insn_SPARC_INS_FDTOX: sparc_insn = 78;
pub const sparc_insn_SPARC_INS_FEXPAND: sparc_insn = 79;
pub const sparc_insn_SPARC_INS_FHADDD: sparc_insn = 80;
pub const sparc_insn_SPARC_INS_FHADDS: sparc_insn = 81;
pub const sparc_insn_SPARC_INS_FHSUBD: sparc_insn = 82;
pub const sparc_insn_SPARC_INS_FHSUBS: sparc_insn = 83;
pub const sparc_insn_SPARC_INS_FITOD: sparc_insn = 84;
pub const sparc_insn_SPARC_INS_FITOQ: sparc_insn = 85;
pub const sparc_insn_SPARC_INS_FITOS: sparc_insn = 86;
pub const sparc_insn_SPARC_INS_FLCMPD: sparc_insn = 87;
pub const sparc_insn_SPARC_INS_FLCMPS: sparc_insn = 88;
pub const sparc_insn_SPARC_INS_FLUSHW: sparc_insn = 89;
pub const sparc_insn_SPARC_INS_FMEAN16: sparc_insn = 90;
pub const sparc_insn_SPARC_INS_FMOVD: sparc_insn = 91;
pub const sparc_insn_SPARC_INS_FMOVQ: sparc_insn = 92;
pub const sparc_insn_SPARC_INS_FMOVRDGEZ: sparc_insn = 93;
pub const sparc_insn_SPARC_INS_FMOVRQGEZ: sparc_insn = 94;
pub const sparc_insn_SPARC_INS_FMOVRSGEZ: sparc_insn = 95;
pub const sparc_insn_SPARC_INS_FMOVRDGZ: sparc_insn = 96;
pub const sparc_insn_SPARC_INS_FMOVRQGZ: sparc_insn = 97;
pub const sparc_insn_SPARC_INS_FMOVRSGZ: sparc_insn = 98;
pub const sparc_insn_SPARC_INS_FMOVRDLEZ: sparc_insn = 99;
pub const sparc_insn_SPARC_INS_FMOVRQLEZ: sparc_insn = 100;
pub const sparc_insn_SPARC_INS_FMOVRSLEZ: sparc_insn = 101;
pub const sparc_insn_SPARC_INS_FMOVRDLZ: sparc_insn = 102;
pub const sparc_insn_SPARC_INS_FMOVRQLZ: sparc_insn = 103;
pub const sparc_insn_SPARC_INS_FMOVRSLZ: sparc_insn = 104;
pub const sparc_insn_SPARC_INS_FMOVRDNZ: sparc_insn = 105;
pub const sparc_insn_SPARC_INS_FMOVRQNZ: sparc_insn = 106;
pub const sparc_insn_SPARC_INS_FMOVRSNZ: sparc_insn = 107;
pub const sparc_insn_SPARC_INS_FMOVRDZ: sparc_insn = 108;
pub const sparc_insn_SPARC_INS_FMOVRQZ: sparc_insn = 109;
pub const sparc_insn_SPARC_INS_FMOVRSZ: sparc_insn = 110;
pub const sparc_insn_SPARC_INS_FMOVS: sparc_insn = 111;
pub const sparc_insn_SPARC_INS_FMUL8SUX16: sparc_insn = 112;
pub const sparc_insn_SPARC_INS_FMUL8ULX16: sparc_insn = 113;
pub const sparc_insn_SPARC_INS_FMUL8X16: sparc_insn = 114;
pub const sparc_insn_SPARC_INS_FMUL8X16AL: sparc_insn = 115;
pub const sparc_insn_SPARC_INS_FMUL8X16AU: sparc_insn = 116;
pub const sparc_insn_SPARC_INS_FMULD: sparc_insn = 117;
pub const sparc_insn_SPARC_INS_FMULD8SUX16: sparc_insn = 118;
pub const sparc_insn_SPARC_INS_FMULD8ULX16: sparc_insn = 119;
pub const sparc_insn_SPARC_INS_FMULQ: sparc_insn = 120;
pub const sparc_insn_SPARC_INS_FMULS: sparc_insn = 121;
pub const sparc_insn_SPARC_INS_FNADDD: sparc_insn = 122;
pub const sparc_insn_SPARC_INS_FNADDS: sparc_insn = 123;
pub const sparc_insn_SPARC_INS_FNAND: sparc_insn = 124;
pub const sparc_insn_SPARC_INS_FNANDS: sparc_insn = 125;
pub const sparc_insn_SPARC_INS_FNEGD: sparc_insn = 126;
pub const sparc_insn_SPARC_INS_FNEGQ: sparc_insn = 127;
pub const sparc_insn_SPARC_INS_FNEGS: sparc_insn = 128;
pub const sparc_insn_SPARC_INS_FNHADDD: sparc_insn = 129;
pub const sparc_insn_SPARC_INS_FNHADDS: sparc_insn = 130;
pub const sparc_insn_SPARC_INS_FNOR: sparc_insn = 131;
pub const sparc_insn_SPARC_INS_FNORS: sparc_insn = 132;
pub const sparc_insn_SPARC_INS_FNOT1: sparc_insn = 133;
pub const sparc_insn_SPARC_INS_FNOT1S: sparc_insn = 134;
pub const sparc_insn_SPARC_INS_FNOT2: sparc_insn = 135;
pub const sparc_insn_SPARC_INS_FNOT2S: sparc_insn = 136;
pub const sparc_insn_SPARC_INS_FONE: sparc_insn = 137;
pub const sparc_insn_SPARC_INS_FONES: sparc_insn = 138;
pub const sparc_insn_SPARC_INS_FOR: sparc_insn = 139;
pub const sparc_insn_SPARC_INS_FORNOT1: sparc_insn = 140;
pub const sparc_insn_SPARC_INS_FORNOT1S: sparc_insn = 141;
pub const sparc_insn_SPARC_INS_FORNOT2: sparc_insn = 142;
pub const sparc_insn_SPARC_INS_FORNOT2S: sparc_insn = 143;
pub const sparc_insn_SPARC_INS_FORS: sparc_insn = 144;
pub const sparc_insn_SPARC_INS_FPACK16: sparc_insn = 145;
pub const sparc_insn_SPARC_INS_FPACK32: sparc_insn = 146;
pub const sparc_insn_SPARC_INS_FPACKFIX: sparc_insn = 147;
pub const sparc_insn_SPARC_INS_FPADD16: sparc_insn = 148;
pub const sparc_insn_SPARC_INS_FPADD16S: sparc_insn = 149;
pub const sparc_insn_SPARC_INS_FPADD32: sparc_insn = 150;
pub const sparc_insn_SPARC_INS_FPADD32S: sparc_insn = 151;
pub const sparc_insn_SPARC_INS_FPADD64: sparc_insn = 152;
pub const sparc_insn_SPARC_INS_FPMERGE: sparc_insn = 153;
pub const sparc_insn_SPARC_INS_FPSUB16: sparc_insn = 154;
pub const sparc_insn_SPARC_INS_FPSUB16S: sparc_insn = 155;
pub const sparc_insn_SPARC_INS_FPSUB32: sparc_insn = 156;
pub const sparc_insn_SPARC_INS_FPSUB32S: sparc_insn = 157;
pub const sparc_insn_SPARC_INS_FQTOD: sparc_insn = 158;
pub const sparc_insn_SPARC_INS_FQTOI: sparc_insn = 159;
pub const sparc_insn_SPARC_INS_FQTOS: sparc_insn = 160;
pub const sparc_insn_SPARC_INS_FQTOX: sparc_insn = 161;
pub const sparc_insn_SPARC_INS_FSLAS16: sparc_insn = 162;
pub const sparc_insn_SPARC_INS_FSLAS32: sparc_insn = 163;
pub const sparc_insn_SPARC_INS_FSLL16: sparc_insn = 164;
pub const sparc_insn_SPARC_INS_FSLL32: sparc_insn = 165;
pub const sparc_insn_SPARC_INS_FSMULD: sparc_insn = 166;
pub const sparc_insn_SPARC_INS_FSQRTD: sparc_insn = 167;
pub const sparc_insn_SPARC_INS_FSQRTQ: sparc_insn = 168;
pub const sparc_insn_SPARC_INS_FSQRTS: sparc_insn = 169;
pub const sparc_insn_SPARC_INS_FSRA16: sparc_insn = 170;
pub const sparc_insn_SPARC_INS_FSRA32: sparc_insn = 171;
pub const sparc_insn_SPARC_INS_FSRC1: sparc_insn = 172;
pub const sparc_insn_SPARC_INS_FSRC1S: sparc_insn = 173;
pub const sparc_insn_SPARC_INS_FSRC2: sparc_insn = 174;
pub const sparc_insn_SPARC_INS_FSRC2S: sparc_insn = 175;
pub const sparc_insn_SPARC_INS_FSRL16: sparc_insn = 176;
pub const sparc_insn_SPARC_INS_FSRL32: sparc_insn = 177;
pub const sparc_insn_SPARC_INS_FSTOD: sparc_insn = 178;
pub const sparc_insn_SPARC_INS_FSTOI: sparc_insn = 179;
pub const sparc_insn_SPARC_INS_FSTOQ: sparc_insn = 180;
pub const sparc_insn_SPARC_INS_FSTOX: sparc_insn = 181;
pub const sparc_insn_SPARC_INS_FSUBD: sparc_insn = 182;
pub const sparc_insn_SPARC_INS_FSUBQ: sparc_insn = 183;
pub const sparc_insn_SPARC_INS_FSUBS: sparc_insn = 184;
pub const sparc_insn_SPARC_INS_FXNOR: sparc_insn = 185;
pub const sparc_insn_SPARC_INS_FXNORS: sparc_insn = 186;
pub const sparc_insn_SPARC_INS_FXOR: sparc_insn = 187;
pub const sparc_insn_SPARC_INS_FXORS: sparc_insn = 188;
pub const sparc_insn_SPARC_INS_FXTOD: sparc_insn = 189;
pub const sparc_insn_SPARC_INS_FXTOQ: sparc_insn = 190;
pub const sparc_insn_SPARC_INS_FXTOS: sparc_insn = 191;
pub const sparc_insn_SPARC_INS_FZERO: sparc_insn = 192;
pub const sparc_insn_SPARC_INS_FZEROS: sparc_insn = 193;
pub const sparc_insn_SPARC_INS_JMPL: sparc_insn = 194;
pub const sparc_insn_SPARC_INS_LDD: sparc_insn = 195;
pub const sparc_insn_SPARC_INS_LD: sparc_insn = 196;
pub const sparc_insn_SPARC_INS_LDQ: sparc_insn = 197;
pub const sparc_insn_SPARC_INS_LDSB: sparc_insn = 198;
pub const sparc_insn_SPARC_INS_LDSH: sparc_insn = 199;
pub const sparc_insn_SPARC_INS_LDSW: sparc_insn = 200;
pub const sparc_insn_SPARC_INS_LDUB: sparc_insn = 201;
pub const sparc_insn_SPARC_INS_LDUH: sparc_insn = 202;
pub const sparc_insn_SPARC_INS_LDX: sparc_insn = 203;
pub const sparc_insn_SPARC_INS_LZCNT: sparc_insn = 204;
pub const sparc_insn_SPARC_INS_MEMBAR: sparc_insn = 205;
pub const sparc_insn_SPARC_INS_MOVDTOX: sparc_insn = 206;
pub const sparc_insn_SPARC_INS_MOV: sparc_insn = 207;
pub const sparc_insn_SPARC_INS_MOVRGEZ: sparc_insn = 208;
pub const sparc_insn_SPARC_INS_MOVRGZ: sparc_insn = 209;
pub const sparc_insn_SPARC_INS_MOVRLEZ: sparc_insn = 210;
pub const sparc_insn_SPARC_INS_MOVRLZ: sparc_insn = 211;
pub const sparc_insn_SPARC_INS_MOVRNZ: sparc_insn = 212;
pub const sparc_insn_SPARC_INS_MOVRZ: sparc_insn = 213;
pub const sparc_insn_SPARC_INS_MOVSTOSW: sparc_insn = 214;
pub const sparc_insn_SPARC_INS_MOVSTOUW: sparc_insn = 215;
pub const sparc_insn_SPARC_INS_MULX: sparc_insn = 216;
pub const sparc_insn_SPARC_INS_NOP: sparc_insn = 217;
pub const sparc_insn_SPARC_INS_ORCC: sparc_insn = 218;
pub const sparc_insn_SPARC_INS_ORNCC: sparc_insn = 219;
pub const sparc_insn_SPARC_INS_ORN: sparc_insn = 220;
pub const sparc_insn_SPARC_INS_OR: sparc_insn = 221;
pub const sparc_insn_SPARC_INS_PDIST: sparc_insn = 222;
pub const sparc_insn_SPARC_INS_PDISTN: sparc_insn = 223;
pub const sparc_insn_SPARC_INS_POPC: sparc_insn = 224;
pub const sparc_insn_SPARC_INS_RD: sparc_insn = 225;
pub const sparc_insn_SPARC_INS_RESTORE: sparc_insn = 226;
pub const sparc_insn_SPARC_INS_RETT: sparc_insn = 227;
pub const sparc_insn_SPARC_INS_SAVE: sparc_insn = 228;
pub const sparc_insn_SPARC_INS_SDIVCC: sparc_insn = 229;
pub const sparc_insn_SPARC_INS_SDIVX: sparc_insn = 230;
pub const sparc_insn_SPARC_INS_SDIV: sparc_insn = 231;
pub const sparc_insn_SPARC_INS_SETHI: sparc_insn = 232;
pub const sparc_insn_SPARC_INS_SHUTDOWN: sparc_insn = 233;
pub const sparc_insn_SPARC_INS_SIAM: sparc_insn = 234;
pub const sparc_insn_SPARC_INS_SLLX: sparc_insn = 235;
pub const sparc_insn_SPARC_INS_SLL: sparc_insn = 236;
pub const sparc_insn_SPARC_INS_SMULCC: sparc_insn = 237;
pub const sparc_insn_SPARC_INS_SMUL: sparc_insn = 238;
pub const sparc_insn_SPARC_INS_SRAX: sparc_insn = 239;
pub const sparc_insn_SPARC_INS_SRA: sparc_insn = 240;
pub const sparc_insn_SPARC_INS_SRLX: sparc_insn = 241;
pub const sparc_insn_SPARC_INS_SRL: sparc_insn = 242;
pub const sparc_insn_SPARC_INS_STBAR: sparc_insn = 243;
pub const sparc_insn_SPARC_INS_STB: sparc_insn = 244;
pub const sparc_insn_SPARC_INS_STD: sparc_insn = 245;
pub const sparc_insn_SPARC_INS_ST: sparc_insn = 246;
pub const sparc_insn_SPARC_INS_STH: sparc_insn = 247;
pub const sparc_insn_SPARC_INS_STQ: sparc_insn = 248;
pub const sparc_insn_SPARC_INS_STX: sparc_insn = 249;
pub const sparc_insn_SPARC_INS_SUBCC: sparc_insn = 250;
pub const sparc_insn_SPARC_INS_SUBX: sparc_insn = 251;
pub const sparc_insn_SPARC_INS_SUBXCC: sparc_insn = 252;
pub const sparc_insn_SPARC_INS_SUB: sparc_insn = 253;
pub const sparc_insn_SPARC_INS_SWAP: sparc_insn = 254;
pub const sparc_insn_SPARC_INS_TADDCCTV: sparc_insn = 255;
pub const sparc_insn_SPARC_INS_TADDCC: sparc_insn = 256;
pub const sparc_insn_SPARC_INS_T: sparc_insn = 257;
pub const sparc_insn_SPARC_INS_TSUBCCTV: sparc_insn = 258;
pub const sparc_insn_SPARC_INS_TSUBCC: sparc_insn = 259;
pub const sparc_insn_SPARC_INS_UDIVCC: sparc_insn = 260;
pub const sparc_insn_SPARC_INS_UDIVX: sparc_insn = 261;
pub const sparc_insn_SPARC_INS_UDIV: sparc_insn = 262;
pub const sparc_insn_SPARC_INS_UMULCC: sparc_insn = 263;
pub const sparc_insn_SPARC_INS_UMULXHI: sparc_insn = 264;
pub const sparc_insn_SPARC_INS_UMUL: sparc_insn = 265;
pub const sparc_insn_SPARC_INS_UNIMP: sparc_insn = 266;
pub const sparc_insn_SPARC_INS_FCMPED: sparc_insn = 267;
pub const sparc_insn_SPARC_INS_FCMPEQ: sparc_insn = 268;
pub const sparc_insn_SPARC_INS_FCMPES: sparc_insn = 269;
pub const sparc_insn_SPARC_INS_WR: sparc_insn = 270;
pub const sparc_insn_SPARC_INS_XMULX: sparc_insn = 271;
pub const sparc_insn_SPARC_INS_XMULXHI: sparc_insn = 272;
pub const sparc_insn_SPARC_INS_XNORCC: sparc_insn = 273;
pub const sparc_insn_SPARC_INS_XNOR: sparc_insn = 274;
pub const sparc_insn_SPARC_INS_XORCC: sparc_insn = 275;
pub const sparc_insn_SPARC_INS_XOR: sparc_insn = 276;
pub const sparc_insn_SPARC_INS_RET: sparc_insn = 277;
pub const sparc_insn_SPARC_INS_RETL: sparc_insn = 278;
pub const sparc_insn_SPARC_INS_ENDING: sparc_insn = 279;
pub type sparc_insn = ::core::ffi::c_uint;
pub const sparc_insn_group_SPARC_GRP_INVALID: sparc_insn_group = 0;
pub const sparc_insn_group_SPARC_GRP_JUMP: sparc_insn_group = 1;
pub const sparc_insn_group_SPARC_GRP_HARDQUAD: sparc_insn_group = 128;
pub const sparc_insn_group_SPARC_GRP_V9: sparc_insn_group = 129;
pub const sparc_insn_group_SPARC_GRP_VIS: sparc_insn_group = 130;
pub const sparc_insn_group_SPARC_GRP_VIS2: sparc_insn_group = 131;
pub const sparc_insn_group_SPARC_GRP_VIS3: sparc_insn_group = 132;
pub const sparc_insn_group_SPARC_GRP_32BIT: sparc_insn_group = 133;
pub const sparc_insn_group_SPARC_GRP_64BIT: sparc_insn_group = 134;
pub const sparc_insn_group_SPARC_GRP_ENDING: sparc_insn_group = 135;
pub type sparc_insn_group = ::core::ffi::c_uint;
pub const sysz_cc_SYSZ_CC_INVALID: sysz_cc = 0;
pub const sysz_cc_SYSZ_CC_O: sysz_cc = 1;
pub const sysz_cc_SYSZ_CC_H: sysz_cc = 2;
pub const sysz_cc_SYSZ_CC_NLE: sysz_cc = 3;
pub const sysz_cc_SYSZ_CC_L: sysz_cc = 4;
pub const sysz_cc_SYSZ_CC_NHE: sysz_cc = 5;
pub const sysz_cc_SYSZ_CC_LH: sysz_cc = 6;
pub const sysz_cc_SYSZ_CC_NE: sysz_cc = 7;
pub const sysz_cc_SYSZ_CC_E: sysz_cc = 8;
pub const sysz_cc_SYSZ_CC_NLH: sysz_cc = 9;
pub const sysz_cc_SYSZ_CC_HE: sysz_cc = 10;
pub const sysz_cc_SYSZ_CC_NL: sysz_cc = 11;
pub const sysz_cc_SYSZ_CC_LE: sysz_cc = 12;
pub const sysz_cc_SYSZ_CC_NH: sysz_cc = 13;
pub const sysz_cc_SYSZ_CC_NO: sysz_cc = 14;
pub type sysz_cc = ::core::ffi::c_uint;
pub const sysz_op_type_SYSZ_OP_INVALID: sysz_op_type = 0;
pub const sysz_op_type_SYSZ_OP_REG: sysz_op_type = 1;
pub const sysz_op_type_SYSZ_OP_IMM: sysz_op_type = 2;
pub const sysz_op_type_SYSZ_OP_MEM: sysz_op_type = 3;
pub const sysz_op_type_SYSZ_OP_ACREG: sysz_op_type = 64;
pub type sysz_op_type = ::core::ffi::c_uint;
pub const sysz_reg_SYSZ_REG_INVALID: sysz_reg = 0;
pub const sysz_reg_SYSZ_REG_0: sysz_reg = 1;
pub const sysz_reg_SYSZ_REG_1: sysz_reg = 2;
pub const sysz_reg_SYSZ_REG_2: sysz_reg = 3;
pub const sysz_reg_SYSZ_REG_3: sysz_reg = 4;
pub const sysz_reg_SYSZ_REG_4: sysz_reg = 5;
pub const sysz_reg_SYSZ_REG_5: sysz_reg = 6;
pub const sysz_reg_SYSZ_REG_6: sysz_reg = 7;
pub const sysz_reg_SYSZ_REG_7: sysz_reg = 8;
pub const sysz_reg_SYSZ_REG_8: sysz_reg = 9;
pub const sysz_reg_SYSZ_REG_9: sysz_reg = 10;
pub const sysz_reg_SYSZ_REG_10: sysz_reg = 11;
pub const sysz_reg_SYSZ_REG_11: sysz_reg = 12;
pub const sysz_reg_SYSZ_REG_12: sysz_reg = 13;
pub const sysz_reg_SYSZ_REG_13: sysz_reg = 14;
pub const sysz_reg_SYSZ_REG_14: sysz_reg = 15;
pub const sysz_reg_SYSZ_REG_15: sysz_reg = 16;
pub const sysz_reg_SYSZ_REG_CC: sysz_reg = 17;
pub const sysz_reg_SYSZ_REG_F0: sysz_reg = 18;
pub const sysz_reg_SYSZ_REG_F1: sysz_reg = 19;
pub const sysz_reg_SYSZ_REG_F2: sysz_reg = 20;
pub const sysz_reg_SYSZ_REG_F3: sysz_reg = 21;
pub const sysz_reg_SYSZ_REG_F4: sysz_reg = 22;
pub const sysz_reg_SYSZ_REG_F5: sysz_reg = 23;
pub const sysz_reg_SYSZ_REG_F6: sysz_reg = 24;
pub const sysz_reg_SYSZ_REG_F7: sysz_reg = 25;
pub const sysz_reg_SYSZ_REG_F8: sysz_reg = 26;
pub const sysz_reg_SYSZ_REG_F9: sysz_reg = 27;
pub const sysz_reg_SYSZ_REG_F10: sysz_reg = 28;
pub const sysz_reg_SYSZ_REG_F11: sysz_reg = 29;
pub const sysz_reg_SYSZ_REG_F12: sysz_reg = 30;
pub const sysz_reg_SYSZ_REG_F13: sysz_reg = 31;
pub const sysz_reg_SYSZ_REG_F14: sysz_reg = 32;
pub const sysz_reg_SYSZ_REG_F15: sysz_reg = 33;
pub const sysz_reg_SYSZ_REG_R0L: sysz_reg = 34;
pub const sysz_reg_SYSZ_REG_A0: sysz_reg = 35;
pub const sysz_reg_SYSZ_REG_A1: sysz_reg = 36;
pub const sysz_reg_SYSZ_REG_A2: sysz_reg = 37;
pub const sysz_reg_SYSZ_REG_A3: sysz_reg = 38;
pub const sysz_reg_SYSZ_REG_A4: sysz_reg = 39;
pub const sysz_reg_SYSZ_REG_A5: sysz_reg = 40;
pub const sysz_reg_SYSZ_REG_A6: sysz_reg = 41;
pub const sysz_reg_SYSZ_REG_A7: sysz_reg = 42;
pub const sysz_reg_SYSZ_REG_A8: sysz_reg = 43;
pub const sysz_reg_SYSZ_REG_A9: sysz_reg = 44;
pub const sysz_reg_SYSZ_REG_A10: sysz_reg = 45;
pub const sysz_reg_SYSZ_REG_A11: sysz_reg = 46;
pub const sysz_reg_SYSZ_REG_A12: sysz_reg = 47;
pub const sysz_reg_SYSZ_REG_A13: sysz_reg = 48;
pub const sysz_reg_SYSZ_REG_A14: sysz_reg = 49;
pub const sysz_reg_SYSZ_REG_A15: sysz_reg = 50;
pub const sysz_reg_SYSZ_REG_C0: sysz_reg = 51;
pub const sysz_reg_SYSZ_REG_C1: sysz_reg = 52;
pub const sysz_reg_SYSZ_REG_C2: sysz_reg = 53;
pub const sysz_reg_SYSZ_REG_C3: sysz_reg = 54;
pub const sysz_reg_SYSZ_REG_C4: sysz_reg = 55;
pub const sysz_reg_SYSZ_REG_C5: sysz_reg = 56;
pub const sysz_reg_SYSZ_REG_C6: sysz_reg = 57;
pub const sysz_reg_SYSZ_REG_C7: sysz_reg = 58;
pub const sysz_reg_SYSZ_REG_C8: sysz_reg = 59;
pub const sysz_reg_SYSZ_REG_C9: sysz_reg = 60;
pub const sysz_reg_SYSZ_REG_C10: sysz_reg = 61;
pub const sysz_reg_SYSZ_REG_C11: sysz_reg = 62;
pub const sysz_reg_SYSZ_REG_C12: sysz_reg = 63;
pub const sysz_reg_SYSZ_REG_C13: sysz_reg = 64;
pub const sysz_reg_SYSZ_REG_C14: sysz_reg = 65;
pub const sysz_reg_SYSZ_REG_C15: sysz_reg = 66;
pub const sysz_reg_SYSZ_REG_V0: sysz_reg = 67;
pub const sysz_reg_SYSZ_REG_V1: sysz_reg = 68;
pub const sysz_reg_SYSZ_REG_V2: sysz_reg = 69;
pub const sysz_reg_SYSZ_REG_V3: sysz_reg = 70;
pub const sysz_reg_SYSZ_REG_V4: sysz_reg = 71;
pub const sysz_reg_SYSZ_REG_V5: sysz_reg = 72;
pub const sysz_reg_SYSZ_REG_V6: sysz_reg = 73;
pub const sysz_reg_SYSZ_REG_V7: sysz_reg = 74;
pub const sysz_reg_SYSZ_REG_V8: sysz_reg = 75;
pub const sysz_reg_SYSZ_REG_V9: sysz_reg = 76;
pub const sysz_reg_SYSZ_REG_V10: sysz_reg = 77;
pub const sysz_reg_SYSZ_REG_V11: sysz_reg = 78;
pub const sysz_reg_SYSZ_REG_V12: sysz_reg = 79;
pub const sysz_reg_SYSZ_REG_V13: sysz_reg = 80;
pub const sysz_reg_SYSZ_REG_V14: sysz_reg = 81;
pub const sysz_reg_SYSZ_REG_V15: sysz_reg = 82;
pub const sysz_reg_SYSZ_REG_V16: sysz_reg = 83;
pub const sysz_reg_SYSZ_REG_V17: sysz_reg = 84;
pub const sysz_reg_SYSZ_REG_V18: sysz_reg = 85;
pub const sysz_reg_SYSZ_REG_V19: sysz_reg = 86;
pub const sysz_reg_SYSZ_REG_V20: sysz_reg = 87;
pub const sysz_reg_SYSZ_REG_V21: sysz_reg = 88;
pub const sysz_reg_SYSZ_REG_V22: sysz_reg = 89;
pub const sysz_reg_SYSZ_REG_V23: sysz_reg = 90;
pub const sysz_reg_SYSZ_REG_V24: sysz_reg = 91;
pub const sysz_reg_SYSZ_REG_V25: sysz_reg = 92;
pub const sysz_reg_SYSZ_REG_V26: sysz_reg = 93;
pub const sysz_reg_SYSZ_REG_V27: sysz_reg = 94;
pub const sysz_reg_SYSZ_REG_V28: sysz_reg = 95;
pub const sysz_reg_SYSZ_REG_V29: sysz_reg = 96;
pub const sysz_reg_SYSZ_REG_V30: sysz_reg = 97;
pub const sysz_reg_SYSZ_REG_V31: sysz_reg = 98;
pub const sysz_reg_SYSZ_REG_F16: sysz_reg = 99;
pub const sysz_reg_SYSZ_REG_F17: sysz_reg = 100;
pub const sysz_reg_SYSZ_REG_F18: sysz_reg = 101;
pub const sysz_reg_SYSZ_REG_F19: sysz_reg = 102;
pub const sysz_reg_SYSZ_REG_F20: sysz_reg = 103;
pub const sysz_reg_SYSZ_REG_F21: sysz_reg = 104;
pub const sysz_reg_SYSZ_REG_F22: sysz_reg = 105;
pub const sysz_reg_SYSZ_REG_F23: sysz_reg = 106;
pub const sysz_reg_SYSZ_REG_F24: sysz_reg = 107;
pub const sysz_reg_SYSZ_REG_F25: sysz_reg = 108;
pub const sysz_reg_SYSZ_REG_F26: sysz_reg = 109;
pub const sysz_reg_SYSZ_REG_F27: sysz_reg = 110;
pub const sysz_reg_SYSZ_REG_F28: sysz_reg = 111;
pub const sysz_reg_SYSZ_REG_F29: sysz_reg = 112;
pub const sysz_reg_SYSZ_REG_F30: sysz_reg = 113;
pub const sysz_reg_SYSZ_REG_F31: sysz_reg = 114;
pub const sysz_reg_SYSZ_REG_F0Q: sysz_reg = 115;
pub const sysz_reg_SYSZ_REG_F4Q: sysz_reg = 116;
pub const sysz_reg_SYSZ_REG_ENDING: sysz_reg = 117;
pub type sysz_reg = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sysz_op_mem {
    pub base: u8,
    pub index: u8,
    pub length: u64,
    pub disp: i64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_sysz_op {
    pub type_: sysz_op_type,
    pub __bindgen_anon_1: cs_sysz_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_sysz_op__bindgen_ty_1 {
    pub reg: sysz_reg,
    pub imm: i64,
    pub mem: sysz_op_mem,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_sysz {
    pub cc: sysz_cc,
    pub op_count: u8,
    pub operands: [cs_sysz_op; 6usize],
}
pub const sysz_insn_SYSZ_INS_INVALID: sysz_insn = 0;
pub const sysz_insn_SYSZ_INS_A: sysz_insn = 1;
pub const sysz_insn_SYSZ_INS_ADB: sysz_insn = 2;
pub const sysz_insn_SYSZ_INS_ADBR: sysz_insn = 3;
pub const sysz_insn_SYSZ_INS_AEB: sysz_insn = 4;
pub const sysz_insn_SYSZ_INS_AEBR: sysz_insn = 5;
pub const sysz_insn_SYSZ_INS_AFI: sysz_insn = 6;
pub const sysz_insn_SYSZ_INS_AG: sysz_insn = 7;
pub const sysz_insn_SYSZ_INS_AGF: sysz_insn = 8;
pub const sysz_insn_SYSZ_INS_AGFI: sysz_insn = 9;
pub const sysz_insn_SYSZ_INS_AGFR: sysz_insn = 10;
pub const sysz_insn_SYSZ_INS_AGHI: sysz_insn = 11;
pub const sysz_insn_SYSZ_INS_AGHIK: sysz_insn = 12;
pub const sysz_insn_SYSZ_INS_AGR: sysz_insn = 13;
pub const sysz_insn_SYSZ_INS_AGRK: sysz_insn = 14;
pub const sysz_insn_SYSZ_INS_AGSI: sysz_insn = 15;
pub const sysz_insn_SYSZ_INS_AH: sysz_insn = 16;
pub const sysz_insn_SYSZ_INS_AHI: sysz_insn = 17;
pub const sysz_insn_SYSZ_INS_AHIK: sysz_insn = 18;
pub const sysz_insn_SYSZ_INS_AHY: sysz_insn = 19;
pub const sysz_insn_SYSZ_INS_AIH: sysz_insn = 20;
pub const sysz_insn_SYSZ_INS_AL: sysz_insn = 21;
pub const sysz_insn_SYSZ_INS_ALC: sysz_insn = 22;
pub const sysz_insn_SYSZ_INS_ALCG: sysz_insn = 23;
pub const sysz_insn_SYSZ_INS_ALCGR: sysz_insn = 24;
pub const sysz_insn_SYSZ_INS_ALCR: sysz_insn = 25;
pub const sysz_insn_SYSZ_INS_ALFI: sysz_insn = 26;
pub const sysz_insn_SYSZ_INS_ALG: sysz_insn = 27;
pub const sysz_insn_SYSZ_INS_ALGF: sysz_insn = 28;
pub const sysz_insn_SYSZ_INS_ALGFI: sysz_insn = 29;
pub const sysz_insn_SYSZ_INS_ALGFR: sysz_insn = 30;
pub const sysz_insn_SYSZ_INS_ALGHSIK: sysz_insn = 31;
pub const sysz_insn_SYSZ_INS_ALGR: sysz_insn = 32;
pub const sysz_insn_SYSZ_INS_ALGRK: sysz_insn = 33;
pub const sysz_insn_SYSZ_INS_ALHSIK: sysz_insn = 34;
pub const sysz_insn_SYSZ_INS_ALR: sysz_insn = 35;
pub const sysz_insn_SYSZ_INS_ALRK: sysz_insn = 36;
pub const sysz_insn_SYSZ_INS_ALY: sysz_insn = 37;
pub const sysz_insn_SYSZ_INS_AR: sysz_insn = 38;
pub const sysz_insn_SYSZ_INS_ARK: sysz_insn = 39;
pub const sysz_insn_SYSZ_INS_ASI: sysz_insn = 40;
pub const sysz_insn_SYSZ_INS_AXBR: sysz_insn = 41;
pub const sysz_insn_SYSZ_INS_AY: sysz_insn = 42;
pub const sysz_insn_SYSZ_INS_BCR: sysz_insn = 43;
pub const sysz_insn_SYSZ_INS_BRC: sysz_insn = 44;
pub const sysz_insn_SYSZ_INS_BRCL: sysz_insn = 45;
pub const sysz_insn_SYSZ_INS_CGIJ: sysz_insn = 46;
pub const sysz_insn_SYSZ_INS_CGRJ: sysz_insn = 47;
pub const sysz_insn_SYSZ_INS_CIJ: sysz_insn = 48;
pub const sysz_insn_SYSZ_INS_CLGIJ: sysz_insn = 49;
pub const sysz_insn_SYSZ_INS_CLGRJ: sysz_insn = 50;
pub const sysz_insn_SYSZ_INS_CLIJ: sysz_insn = 51;
pub const sysz_insn_SYSZ_INS_CLRJ: sysz_insn = 52;
pub const sysz_insn_SYSZ_INS_CRJ: sysz_insn = 53;
pub const sysz_insn_SYSZ_INS_BER: sysz_insn = 54;
pub const sysz_insn_SYSZ_INS_JE: sysz_insn = 55;
pub const sysz_insn_SYSZ_INS_JGE: sysz_insn = 56;
pub const sysz_insn_SYSZ_INS_LOCE: sysz_insn = 57;
pub const sysz_insn_SYSZ_INS_LOCGE: sysz_insn = 58;
pub const sysz_insn_SYSZ_INS_LOCGRE: sysz_insn = 59;
pub const sysz_insn_SYSZ_INS_LOCRE: sysz_insn = 60;
pub const sysz_insn_SYSZ_INS_STOCE: sysz_insn = 61;
pub const sysz_insn_SYSZ_INS_STOCGE: sysz_insn = 62;
pub const sysz_insn_SYSZ_INS_BHR: sysz_insn = 63;
pub const sysz_insn_SYSZ_INS_BHER: sysz_insn = 64;
pub const sysz_insn_SYSZ_INS_JHE: sysz_insn = 65;
pub const sysz_insn_SYSZ_INS_JGHE: sysz_insn = 66;
pub const sysz_insn_SYSZ_INS_LOCHE: sysz_insn = 67;
pub const sysz_insn_SYSZ_INS_LOCGHE: sysz_insn = 68;
pub const sysz_insn_SYSZ_INS_LOCGRHE: sysz_insn = 69;
pub const sysz_insn_SYSZ_INS_LOCRHE: sysz_insn = 70;
pub const sysz_insn_SYSZ_INS_STOCHE: sysz_insn = 71;
pub const sysz_insn_SYSZ_INS_STOCGHE: sysz_insn = 72;
pub const sysz_insn_SYSZ_INS_JH: sysz_insn = 73;
pub const sysz_insn_SYSZ_INS_JGH: sysz_insn = 74;
pub const sysz_insn_SYSZ_INS_LOCH: sysz_insn = 75;
pub const sysz_insn_SYSZ_INS_LOCGH: sysz_insn = 76;
pub const sysz_insn_SYSZ_INS_LOCGRH: sysz_insn = 77;
pub const sysz_insn_SYSZ_INS_LOCRH: sysz_insn = 78;
pub const sysz_insn_SYSZ_INS_STOCH: sysz_insn = 79;
pub const sysz_insn_SYSZ_INS_STOCGH: sysz_insn = 80;
pub const sysz_insn_SYSZ_INS_CGIJNLH: sysz_insn = 81;
pub const sysz_insn_SYSZ_INS_CGRJNLH: sysz_insn = 82;
pub const sysz_insn_SYSZ_INS_CIJNLH: sysz_insn = 83;
pub const sysz_insn_SYSZ_INS_CLGIJNLH: sysz_insn = 84;
pub const sysz_insn_SYSZ_INS_CLGRJNLH: sysz_insn = 85;
pub const sysz_insn_SYSZ_INS_CLIJNLH: sysz_insn = 86;
pub const sysz_insn_SYSZ_INS_CLRJNLH: sysz_insn = 87;
pub const sysz_insn_SYSZ_INS_CRJNLH: sysz_insn = 88;
pub const sysz_insn_SYSZ_INS_CGIJE: sysz_insn = 89;
pub const sysz_insn_SYSZ_INS_CGRJE: sysz_insn = 90;
pub const sysz_insn_SYSZ_INS_CIJE: sysz_insn = 91;
pub const sysz_insn_SYSZ_INS_CLGIJE: sysz_insn = 92;
pub const sysz_insn_SYSZ_INS_CLGRJE: sysz_insn = 93;
pub const sysz_insn_SYSZ_INS_CLIJE: sysz_insn = 94;
pub const sysz_insn_SYSZ_INS_CLRJE: sysz_insn = 95;
pub const sysz_insn_SYSZ_INS_CRJE: sysz_insn = 96;
pub const sysz_insn_SYSZ_INS_CGIJNLE: sysz_insn = 97;
pub const sysz_insn_SYSZ_INS_CGRJNLE: sysz_insn = 98;
pub const sysz_insn_SYSZ_INS_CIJNLE: sysz_insn = 99;
pub const sysz_insn_SYSZ_INS_CLGIJNLE: sysz_insn = 100;
pub const sysz_insn_SYSZ_INS_CLGRJNLE: sysz_insn = 101;
pub const sysz_insn_SYSZ_INS_CLIJNLE: sysz_insn = 102;
pub const sysz_insn_SYSZ_INS_CLRJNLE: sysz_insn = 103;
pub const sysz_insn_SYSZ_INS_CRJNLE: sysz_insn = 104;
pub const sysz_insn_SYSZ_INS_CGIJH: sysz_insn = 105;
pub const sysz_insn_SYSZ_INS_CGRJH: sysz_insn = 106;
pub const sysz_insn_SYSZ_INS_CIJH: sysz_insn = 107;
pub const sysz_insn_SYSZ_INS_CLGIJH: sysz_insn = 108;
pub const sysz_insn_SYSZ_INS_CLGRJH: sysz_insn = 109;
pub const sysz_insn_SYSZ_INS_CLIJH: sysz_insn = 110;
pub const sysz_insn_SYSZ_INS_CLRJH: sysz_insn = 111;
pub const sysz_insn_SYSZ_INS_CRJH: sysz_insn = 112;
pub const sysz_insn_SYSZ_INS_CGIJNL: sysz_insn = 113;
pub const sysz_insn_SYSZ_INS_CGRJNL: sysz_insn = 114;
pub const sysz_insn_SYSZ_INS_CIJNL: sysz_insn = 115;
pub const sysz_insn_SYSZ_INS_CLGIJNL: sysz_insn = 116;
pub const sysz_insn_SYSZ_INS_CLGRJNL: sysz_insn = 117;
pub const sysz_insn_SYSZ_INS_CLIJNL: sysz_insn = 118;
pub const sysz_insn_SYSZ_INS_CLRJNL: sysz_insn = 119;
pub const sysz_insn_SYSZ_INS_CRJNL: sysz_insn = 120;
pub const sysz_insn_SYSZ_INS_CGIJHE: sysz_insn = 121;
pub const sysz_insn_SYSZ_INS_CGRJHE: sysz_insn = 122;
pub const sysz_insn_SYSZ_INS_CIJHE: sysz_insn = 123;
pub const sysz_insn_SYSZ_INS_CLGIJHE: sysz_insn = 124;
pub const sysz_insn_SYSZ_INS_CLGRJHE: sysz_insn = 125;
pub const sysz_insn_SYSZ_INS_CLIJHE: sysz_insn = 126;
pub const sysz_insn_SYSZ_INS_CLRJHE: sysz_insn = 127;
pub const sysz_insn_SYSZ_INS_CRJHE: sysz_insn = 128;
pub const sysz_insn_SYSZ_INS_CGIJNHE: sysz_insn = 129;
pub const sysz_insn_SYSZ_INS_CGRJNHE: sysz_insn = 130;
pub const sysz_insn_SYSZ_INS_CIJNHE: sysz_insn = 131;
pub const sysz_insn_SYSZ_INS_CLGIJNHE: sysz_insn = 132;
pub const sysz_insn_SYSZ_INS_CLGRJNHE: sysz_insn = 133;
pub const sysz_insn_SYSZ_INS_CLIJNHE: sysz_insn = 134;
pub const sysz_insn_SYSZ_INS_CLRJNHE: sysz_insn = 135;
pub const sysz_insn_SYSZ_INS_CRJNHE: sysz_insn = 136;
pub const sysz_insn_SYSZ_INS_CGIJL: sysz_insn = 137;
pub const sysz_insn_SYSZ_INS_CGRJL: sysz_insn = 138;
pub const sysz_insn_SYSZ_INS_CIJL: sysz_insn = 139;
pub const sysz_insn_SYSZ_INS_CLGIJL: sysz_insn = 140;
pub const sysz_insn_SYSZ_INS_CLGRJL: sysz_insn = 141;
pub const sysz_insn_SYSZ_INS_CLIJL: sysz_insn = 142;
pub const sysz_insn_SYSZ_INS_CLRJL: sysz_insn = 143;
pub const sysz_insn_SYSZ_INS_CRJL: sysz_insn = 144;
pub const sysz_insn_SYSZ_INS_CGIJNH: sysz_insn = 145;
pub const sysz_insn_SYSZ_INS_CGRJNH: sysz_insn = 146;
pub const sysz_insn_SYSZ_INS_CIJNH: sysz_insn = 147;
pub const sysz_insn_SYSZ_INS_CLGIJNH: sysz_insn = 148;
pub const sysz_insn_SYSZ_INS_CLGRJNH: sysz_insn = 149;
pub const sysz_insn_SYSZ_INS_CLIJNH: sysz_insn = 150;
pub const sysz_insn_SYSZ_INS_CLRJNH: sysz_insn = 151;
pub const sysz_insn_SYSZ_INS_CRJNH: sysz_insn = 152;
pub const sysz_insn_SYSZ_INS_CGIJLE: sysz_insn = 153;
pub const sysz_insn_SYSZ_INS_CGRJLE: sysz_insn = 154;
pub const sysz_insn_SYSZ_INS_CIJLE: sysz_insn = 155;
pub const sysz_insn_SYSZ_INS_CLGIJLE: sysz_insn = 156;
pub const sysz_insn_SYSZ_INS_CLGRJLE: sysz_insn = 157;
pub const sysz_insn_SYSZ_INS_CLIJLE: sysz_insn = 158;
pub const sysz_insn_SYSZ_INS_CLRJLE: sysz_insn = 159;
pub const sysz_insn_SYSZ_INS_CRJLE: sysz_insn = 160;
pub const sysz_insn_SYSZ_INS_CGIJNE: sysz_insn = 161;
pub const sysz_insn_SYSZ_INS_CGRJNE: sysz_insn = 162;
pub const sysz_insn_SYSZ_INS_CIJNE: sysz_insn = 163;
pub const sysz_insn_SYSZ_INS_CLGIJNE: sysz_insn = 164;
pub const sysz_insn_SYSZ_INS_CLGRJNE: sysz_insn = 165;
pub const sysz_insn_SYSZ_INS_CLIJNE: sysz_insn = 166;
pub const sysz_insn_SYSZ_INS_CLRJNE: sysz_insn = 167;
pub const sysz_insn_SYSZ_INS_CRJNE: sysz_insn = 168;
pub const sysz_insn_SYSZ_INS_CGIJLH: sysz_insn = 169;
pub const sysz_insn_SYSZ_INS_CGRJLH: sysz_insn = 170;
pub const sysz_insn_SYSZ_INS_CIJLH: sysz_insn = 171;
pub const sysz_insn_SYSZ_INS_CLGIJLH: sysz_insn = 172;
pub const sysz_insn_SYSZ_INS_CLGRJLH: sysz_insn = 173;
pub const sysz_insn_SYSZ_INS_CLIJLH: sysz_insn = 174;
pub const sysz_insn_SYSZ_INS_CLRJLH: sysz_insn = 175;
pub const sysz_insn_SYSZ_INS_CRJLH: sysz_insn = 176;
pub const sysz_insn_SYSZ_INS_BLR: sysz_insn = 177;
pub const sysz_insn_SYSZ_INS_BLER: sysz_insn = 178;
pub const sysz_insn_SYSZ_INS_JLE: sysz_insn = 179;
pub const sysz_insn_SYSZ_INS_JGLE: sysz_insn = 180;
pub const sysz_insn_SYSZ_INS_LOCLE: sysz_insn = 181;
pub const sysz_insn_SYSZ_INS_LOCGLE: sysz_insn = 182;
pub const sysz_insn_SYSZ_INS_LOCGRLE: sysz_insn = 183;
pub const sysz_insn_SYSZ_INS_LOCRLE: sysz_insn = 184;
pub const sysz_insn_SYSZ_INS_STOCLE: sysz_insn = 185;
pub const sysz_insn_SYSZ_INS_STOCGLE: sysz_insn = 186;
pub const sysz_insn_SYSZ_INS_BLHR: sysz_insn = 187;
pub const sysz_insn_SYSZ_INS_JLH: sysz_insn = 188;
pub const sysz_insn_SYSZ_INS_JGLH: sysz_insn = 189;
pub const sysz_insn_SYSZ_INS_LOCLH: sysz_insn = 190;
pub const sysz_insn_SYSZ_INS_LOCGLH: sysz_insn = 191;
pub const sysz_insn_SYSZ_INS_LOCGRLH: sysz_insn = 192;
pub const sysz_insn_SYSZ_INS_LOCRLH: sysz_insn = 193;
pub const sysz_insn_SYSZ_INS_STOCLH: sysz_insn = 194;
pub const sysz_insn_SYSZ_INS_STOCGLH: sysz_insn = 195;
pub const sysz_insn_SYSZ_INS_JL: sysz_insn = 196;
pub const sysz_insn_SYSZ_INS_JGL: sysz_insn = 197;
pub const sysz_insn_SYSZ_INS_LOCL: sysz_insn = 198;
pub const sysz_insn_SYSZ_INS_LOCGL: sysz_insn = 199;
pub const sysz_insn_SYSZ_INS_LOCGRL: sysz_insn = 200;
pub const sysz_insn_SYSZ_INS_LOCRL: sysz_insn = 201;
pub const sysz_insn_SYSZ_INS_LOC: sysz_insn = 202;
pub const sysz_insn_SYSZ_INS_LOCG: sysz_insn = 203;
pub const sysz_insn_SYSZ_INS_LOCGR: sysz_insn = 204;
pub const sysz_insn_SYSZ_INS_LOCR: sysz_insn = 205;
pub const sysz_insn_SYSZ_INS_STOCL: sysz_insn = 206;
pub const sysz_insn_SYSZ_INS_STOCGL: sysz_insn = 207;
pub const sysz_insn_SYSZ_INS_BNER: sysz_insn = 208;
pub const sysz_insn_SYSZ_INS_JNE: sysz_insn = 209;
pub const sysz_insn_SYSZ_INS_JGNE: sysz_insn = 210;
pub const sysz_insn_SYSZ_INS_LOCNE: sysz_insn = 211;
pub const sysz_insn_SYSZ_INS_LOCGNE: sysz_insn = 212;
pub const sysz_insn_SYSZ_INS_LOCGRNE: sysz_insn = 213;
pub const sysz_insn_SYSZ_INS_LOCRNE: sysz_insn = 214;
pub const sysz_insn_SYSZ_INS_STOCNE: sysz_insn = 215;
pub const sysz_insn_SYSZ_INS_STOCGNE: sysz_insn = 216;
pub const sysz_insn_SYSZ_INS_BNHR: sysz_insn = 217;
pub const sysz_insn_SYSZ_INS_BNHER: sysz_insn = 218;
pub const sysz_insn_SYSZ_INS_JNHE: sysz_insn = 219;
pub const sysz_insn_SYSZ_INS_JGNHE: sysz_insn = 220;
pub const sysz_insn_SYSZ_INS_LOCNHE: sysz_insn = 221;
pub const sysz_insn_SYSZ_INS_LOCGNHE: sysz_insn = 222;
pub const sysz_insn_SYSZ_INS_LOCGRNHE: sysz_insn = 223;
pub const sysz_insn_SYSZ_INS_LOCRNHE: sysz_insn = 224;
pub const sysz_insn_SYSZ_INS_STOCNHE: sysz_insn = 225;
pub const sysz_insn_SYSZ_INS_STOCGNHE: sysz_insn = 226;
pub const sysz_insn_SYSZ_INS_JNH: sysz_insn = 227;
pub const sysz_insn_SYSZ_INS_JGNH: sysz_insn = 228;
pub const sysz_insn_SYSZ_INS_LOCNH: sysz_insn = 229;
pub const sysz_insn_SYSZ_INS_LOCGNH: sysz_insn = 230;
pub const sysz_insn_SYSZ_INS_LOCGRNH: sysz_insn = 231;
pub const sysz_insn_SYSZ_INS_LOCRNH: sysz_insn = 232;
pub const sysz_insn_SYSZ_INS_STOCNH: sysz_insn = 233;
pub const sysz_insn_SYSZ_INS_STOCGNH: sysz_insn = 234;
pub const sysz_insn_SYSZ_INS_BNLR: sysz_insn = 235;
pub const sysz_insn_SYSZ_INS_BNLER: sysz_insn = 236;
pub const sysz_insn_SYSZ_INS_JNLE: sysz_insn = 237;
pub const sysz_insn_SYSZ_INS_JGNLE: sysz_insn = 238;
pub const sysz_insn_SYSZ_INS_LOCNLE: sysz_insn = 239;
pub const sysz_insn_SYSZ_INS_LOCGNLE: sysz_insn = 240;
pub const sysz_insn_SYSZ_INS_LOCGRNLE: sysz_insn = 241;
pub const sysz_insn_SYSZ_INS_LOCRNLE: sysz_insn = 242;
pub const sysz_insn_SYSZ_INS_STOCNLE: sysz_insn = 243;
pub const sysz_insn_SYSZ_INS_STOCGNLE: sysz_insn = 244;
pub const sysz_insn_SYSZ_INS_BNLHR: sysz_insn = 245;
pub const sysz_insn_SYSZ_INS_JNLH: sysz_insn = 246;
pub const sysz_insn_SYSZ_INS_JGNLH: sysz_insn = 247;
pub const sysz_insn_SYSZ_INS_LOCNLH: sysz_insn = 248;
pub const sysz_insn_SYSZ_INS_LOCGNLH: sysz_insn = 249;
pub const sysz_insn_SYSZ_INS_LOCGRNLH: sysz_insn = 250;
pub const sysz_insn_SYSZ_INS_LOCRNLH: sysz_insn = 251;
pub const sysz_insn_SYSZ_INS_STOCNLH: sysz_insn = 252;
pub const sysz_insn_SYSZ_INS_STOCGNLH: sysz_insn = 253;
pub const sysz_insn_SYSZ_INS_JNL: sysz_insn = 254;
pub const sysz_insn_SYSZ_INS_JGNL: sysz_insn = 255;
pub const sysz_insn_SYSZ_INS_LOCNL: sysz_insn = 256;
pub const sysz_insn_SYSZ_INS_LOCGNL: sysz_insn = 257;
pub const sysz_insn_SYSZ_INS_LOCGRNL: sysz_insn = 258;
pub const sysz_insn_SYSZ_INS_LOCRNL: sysz_insn = 259;
pub const sysz_insn_SYSZ_INS_STOCNL: sysz_insn = 260;
pub const sysz_insn_SYSZ_INS_STOCGNL: sysz_insn = 261;
pub const sysz_insn_SYSZ_INS_BNOR: sysz_insn = 262;
pub const sysz_insn_SYSZ_INS_JNO: sysz_insn = 263;
pub const sysz_insn_SYSZ_INS_JGNO: sysz_insn = 264;
pub const sysz_insn_SYSZ_INS_LOCNO: sysz_insn = 265;
pub const sysz_insn_SYSZ_INS_LOCGNO: sysz_insn = 266;
pub const sysz_insn_SYSZ_INS_LOCGRNO: sysz_insn = 267;
pub const sysz_insn_SYSZ_INS_LOCRNO: sysz_insn = 268;
pub const sysz_insn_SYSZ_INS_STOCNO: sysz_insn = 269;
pub const sysz_insn_SYSZ_INS_STOCGNO: sysz_insn = 270;
pub const sysz_insn_SYSZ_INS_BOR: sysz_insn = 271;
pub const sysz_insn_SYSZ_INS_JO: sysz_insn = 272;
pub const sysz_insn_SYSZ_INS_JGO: sysz_insn = 273;
pub const sysz_insn_SYSZ_INS_LOCO: sysz_insn = 274;
pub const sysz_insn_SYSZ_INS_LOCGO: sysz_insn = 275;
pub const sysz_insn_SYSZ_INS_LOCGRO: sysz_insn = 276;
pub const sysz_insn_SYSZ_INS_LOCRO: sysz_insn = 277;
pub const sysz_insn_SYSZ_INS_STOCO: sysz_insn = 278;
pub const sysz_insn_SYSZ_INS_STOCGO: sysz_insn = 279;
pub const sysz_insn_SYSZ_INS_STOC: sysz_insn = 280;
pub const sysz_insn_SYSZ_INS_STOCG: sysz_insn = 281;
pub const sysz_insn_SYSZ_INS_BASR: sysz_insn = 282;
pub const sysz_insn_SYSZ_INS_BR: sysz_insn = 283;
pub const sysz_insn_SYSZ_INS_BRAS: sysz_insn = 284;
pub const sysz_insn_SYSZ_INS_BRASL: sysz_insn = 285;
pub const sysz_insn_SYSZ_INS_J: sysz_insn = 286;
pub const sysz_insn_SYSZ_INS_JG: sysz_insn = 287;
pub const sysz_insn_SYSZ_INS_BRCT: sysz_insn = 288;
pub const sysz_insn_SYSZ_INS_BRCTG: sysz_insn = 289;
pub const sysz_insn_SYSZ_INS_C: sysz_insn = 290;
pub const sysz_insn_SYSZ_INS_CDB: sysz_insn = 291;
pub const sysz_insn_SYSZ_INS_CDBR: sysz_insn = 292;
pub const sysz_insn_SYSZ_INS_CDFBR: sysz_insn = 293;
pub const sysz_insn_SYSZ_INS_CDGBR: sysz_insn = 294;
pub const sysz_insn_SYSZ_INS_CDLFBR: sysz_insn = 295;
pub const sysz_insn_SYSZ_INS_CDLGBR: sysz_insn = 296;
pub const sysz_insn_SYSZ_INS_CEB: sysz_insn = 297;
pub const sysz_insn_SYSZ_INS_CEBR: sysz_insn = 298;
pub const sysz_insn_SYSZ_INS_CEFBR: sysz_insn = 299;
pub const sysz_insn_SYSZ_INS_CEGBR: sysz_insn = 300;
pub const sysz_insn_SYSZ_INS_CELFBR: sysz_insn = 301;
pub const sysz_insn_SYSZ_INS_CELGBR: sysz_insn = 302;
pub const sysz_insn_SYSZ_INS_CFDBR: sysz_insn = 303;
pub const sysz_insn_SYSZ_INS_CFEBR: sysz_insn = 304;
pub const sysz_insn_SYSZ_INS_CFI: sysz_insn = 305;
pub const sysz_insn_SYSZ_INS_CFXBR: sysz_insn = 306;
pub const sysz_insn_SYSZ_INS_CG: sysz_insn = 307;
pub const sysz_insn_SYSZ_INS_CGDBR: sysz_insn = 308;
pub const sysz_insn_SYSZ_INS_CGEBR: sysz_insn = 309;
pub const sysz_insn_SYSZ_INS_CGF: sysz_insn = 310;
pub const sysz_insn_SYSZ_INS_CGFI: sysz_insn = 311;
pub const sysz_insn_SYSZ_INS_CGFR: sysz_insn = 312;
pub const sysz_insn_SYSZ_INS_CGFRL: sysz_insn = 313;
pub const sysz_insn_SYSZ_INS_CGH: sysz_insn = 314;
pub const sysz_insn_SYSZ_INS_CGHI: sysz_insn = 315;
pub const sysz_insn_SYSZ_INS_CGHRL: sysz_insn = 316;
pub const sysz_insn_SYSZ_INS_CGHSI: sysz_insn = 317;
pub const sysz_insn_SYSZ_INS_CGR: sysz_insn = 318;
pub const sysz_insn_SYSZ_INS_CGRL: sysz_insn = 319;
pub const sysz_insn_SYSZ_INS_CGXBR: sysz_insn = 320;
pub const sysz_insn_SYSZ_INS_CH: sysz_insn = 321;
pub const sysz_insn_SYSZ_INS_CHF: sysz_insn = 322;
pub const sysz_insn_SYSZ_INS_CHHSI: sysz_insn = 323;
pub const sysz_insn_SYSZ_INS_CHI: sysz_insn = 324;
pub const sysz_insn_SYSZ_INS_CHRL: sysz_insn = 325;
pub const sysz_insn_SYSZ_INS_CHSI: sysz_insn = 326;
pub const sysz_insn_SYSZ_INS_CHY: sysz_insn = 327;
pub const sysz_insn_SYSZ_INS_CIH: sysz_insn = 328;
pub const sysz_insn_SYSZ_INS_CL: sysz_insn = 329;
pub const sysz_insn_SYSZ_INS_CLC: sysz_insn = 330;
pub const sysz_insn_SYSZ_INS_CLFDBR: sysz_insn = 331;
pub const sysz_insn_SYSZ_INS_CLFEBR: sysz_insn = 332;
pub const sysz_insn_SYSZ_INS_CLFHSI: sysz_insn = 333;
pub const sysz_insn_SYSZ_INS_CLFI: sysz_insn = 334;
pub const sysz_insn_SYSZ_INS_CLFXBR: sysz_insn = 335;
pub const sysz_insn_SYSZ_INS_CLG: sysz_insn = 336;
pub const sysz_insn_SYSZ_INS_CLGDBR: sysz_insn = 337;
pub const sysz_insn_SYSZ_INS_CLGEBR: sysz_insn = 338;
pub const sysz_insn_SYSZ_INS_CLGF: sysz_insn = 339;
pub const sysz_insn_SYSZ_INS_CLGFI: sysz_insn = 340;
pub const sysz_insn_SYSZ_INS_CLGFR: sysz_insn = 341;
pub const sysz_insn_SYSZ_INS_CLGFRL: sysz_insn = 342;
pub const sysz_insn_SYSZ_INS_CLGHRL: sysz_insn = 343;
pub const sysz_insn_SYSZ_INS_CLGHSI: sysz_insn = 344;
pub const sysz_insn_SYSZ_INS_CLGR: sysz_insn = 345;
pub const sysz_insn_SYSZ_INS_CLGRL: sysz_insn = 346;
pub const sysz_insn_SYSZ_INS_CLGXBR: sysz_insn = 347;
pub const sysz_insn_SYSZ_INS_CLHF: sysz_insn = 348;
pub const sysz_insn_SYSZ_INS_CLHHSI: sysz_insn = 349;
pub const sysz_insn_SYSZ_INS_CLHRL: sysz_insn = 350;
pub const sysz_insn_SYSZ_INS_CLI: sysz_insn = 351;
pub const sysz_insn_SYSZ_INS_CLIH: sysz_insn = 352;
pub const sysz_insn_SYSZ_INS_CLIY: sysz_insn = 353;
pub const sysz_insn_SYSZ_INS_CLR: sysz_insn = 354;
pub const sysz_insn_SYSZ_INS_CLRL: sysz_insn = 355;
pub const sysz_insn_SYSZ_INS_CLST: sysz_insn = 356;
pub const sysz_insn_SYSZ_INS_CLY: sysz_insn = 357;
pub const sysz_insn_SYSZ_INS_CPSDR: sysz_insn = 358;
pub const sysz_insn_SYSZ_INS_CR: sysz_insn = 359;
pub const sysz_insn_SYSZ_INS_CRL: sysz_insn = 360;
pub const sysz_insn_SYSZ_INS_CS: sysz_insn = 361;
pub const sysz_insn_SYSZ_INS_CSG: sysz_insn = 362;
pub const sysz_insn_SYSZ_INS_CSY: sysz_insn = 363;
pub const sysz_insn_SYSZ_INS_CXBR: sysz_insn = 364;
pub const sysz_insn_SYSZ_INS_CXFBR: sysz_insn = 365;
pub const sysz_insn_SYSZ_INS_CXGBR: sysz_insn = 366;
pub const sysz_insn_SYSZ_INS_CXLFBR: sysz_insn = 367;
pub const sysz_insn_SYSZ_INS_CXLGBR: sysz_insn = 368;
pub const sysz_insn_SYSZ_INS_CY: sysz_insn = 369;
pub const sysz_insn_SYSZ_INS_DDB: sysz_insn = 370;
pub const sysz_insn_SYSZ_INS_DDBR: sysz_insn = 371;
pub const sysz_insn_SYSZ_INS_DEB: sysz_insn = 372;
pub const sysz_insn_SYSZ_INS_DEBR: sysz_insn = 373;
pub const sysz_insn_SYSZ_INS_DL: sysz_insn = 374;
pub const sysz_insn_SYSZ_INS_DLG: sysz_insn = 375;
pub const sysz_insn_SYSZ_INS_DLGR: sysz_insn = 376;
pub const sysz_insn_SYSZ_INS_DLR: sysz_insn = 377;
pub const sysz_insn_SYSZ_INS_DSG: sysz_insn = 378;
pub const sysz_insn_SYSZ_INS_DSGF: sysz_insn = 379;
pub const sysz_insn_SYSZ_INS_DSGFR: sysz_insn = 380;
pub const sysz_insn_SYSZ_INS_DSGR: sysz_insn = 381;
pub const sysz_insn_SYSZ_INS_DXBR: sysz_insn = 382;
pub const sysz_insn_SYSZ_INS_EAR: sysz_insn = 383;
pub const sysz_insn_SYSZ_INS_FIDBR: sysz_insn = 384;
pub const sysz_insn_SYSZ_INS_FIDBRA: sysz_insn = 385;
pub const sysz_insn_SYSZ_INS_FIEBR: sysz_insn = 386;
pub const sysz_insn_SYSZ_INS_FIEBRA: sysz_insn = 387;
pub const sysz_insn_SYSZ_INS_FIXBR: sysz_insn = 388;
pub const sysz_insn_SYSZ_INS_FIXBRA: sysz_insn = 389;
pub const sysz_insn_SYSZ_INS_FLOGR: sysz_insn = 390;
pub const sysz_insn_SYSZ_INS_IC: sysz_insn = 391;
pub const sysz_insn_SYSZ_INS_ICY: sysz_insn = 392;
pub const sysz_insn_SYSZ_INS_IIHF: sysz_insn = 393;
pub const sysz_insn_SYSZ_INS_IIHH: sysz_insn = 394;
pub const sysz_insn_SYSZ_INS_IIHL: sysz_insn = 395;
pub const sysz_insn_SYSZ_INS_IILF: sysz_insn = 396;
pub const sysz_insn_SYSZ_INS_IILH: sysz_insn = 397;
pub const sysz_insn_SYSZ_INS_IILL: sysz_insn = 398;
pub const sysz_insn_SYSZ_INS_IPM: sysz_insn = 399;
pub const sysz_insn_SYSZ_INS_L: sysz_insn = 400;
pub const sysz_insn_SYSZ_INS_LA: sysz_insn = 401;
pub const sysz_insn_SYSZ_INS_LAA: sysz_insn = 402;
pub const sysz_insn_SYSZ_INS_LAAG: sysz_insn = 403;
pub const sysz_insn_SYSZ_INS_LAAL: sysz_insn = 404;
pub const sysz_insn_SYSZ_INS_LAALG: sysz_insn = 405;
pub const sysz_insn_SYSZ_INS_LAN: sysz_insn = 406;
pub const sysz_insn_SYSZ_INS_LANG: sysz_insn = 407;
pub const sysz_insn_SYSZ_INS_LAO: sysz_insn = 408;
pub const sysz_insn_SYSZ_INS_LAOG: sysz_insn = 409;
pub const sysz_insn_SYSZ_INS_LARL: sysz_insn = 410;
pub const sysz_insn_SYSZ_INS_LAX: sysz_insn = 411;
pub const sysz_insn_SYSZ_INS_LAXG: sysz_insn = 412;
pub const sysz_insn_SYSZ_INS_LAY: sysz_insn = 413;
pub const sysz_insn_SYSZ_INS_LB: sysz_insn = 414;
pub const sysz_insn_SYSZ_INS_LBH: sysz_insn = 415;
pub const sysz_insn_SYSZ_INS_LBR: sysz_insn = 416;
pub const sysz_insn_SYSZ_INS_LCDBR: sysz_insn = 417;
pub const sysz_insn_SYSZ_INS_LCEBR: sysz_insn = 418;
pub const sysz_insn_SYSZ_INS_LCGFR: sysz_insn = 419;
pub const sysz_insn_SYSZ_INS_LCGR: sysz_insn = 420;
pub const sysz_insn_SYSZ_INS_LCR: sysz_insn = 421;
pub const sysz_insn_SYSZ_INS_LCXBR: sysz_insn = 422;
pub const sysz_insn_SYSZ_INS_LD: sysz_insn = 423;
pub const sysz_insn_SYSZ_INS_LDEB: sysz_insn = 424;
pub const sysz_insn_SYSZ_INS_LDEBR: sysz_insn = 425;
pub const sysz_insn_SYSZ_INS_LDGR: sysz_insn = 426;
pub const sysz_insn_SYSZ_INS_LDR: sysz_insn = 427;
pub const sysz_insn_SYSZ_INS_LDXBR: sysz_insn = 428;
pub const sysz_insn_SYSZ_INS_LDXBRA: sysz_insn = 429;
pub const sysz_insn_SYSZ_INS_LDY: sysz_insn = 430;
pub const sysz_insn_SYSZ_INS_LE: sysz_insn = 431;
pub const sysz_insn_SYSZ_INS_LEDBR: sysz_insn = 432;
pub const sysz_insn_SYSZ_INS_LEDBRA: sysz_insn = 433;
pub const sysz_insn_SYSZ_INS_LER: sysz_insn = 434;
pub const sysz_insn_SYSZ_INS_LEXBR: sysz_insn = 435;
pub const sysz_insn_SYSZ_INS_LEXBRA: sysz_insn = 436;
pub const sysz_insn_SYSZ_INS_LEY: sysz_insn = 437;
pub const sysz_insn_SYSZ_INS_LFH: sysz_insn = 438;
pub const sysz_insn_SYSZ_INS_LG: sysz_insn = 439;
pub const sysz_insn_SYSZ_INS_LGB: sysz_insn = 440;
pub const sysz_insn_SYSZ_INS_LGBR: sysz_insn = 441;
pub const sysz_insn_SYSZ_INS_LGDR: sysz_insn = 442;
pub const sysz_insn_SYSZ_INS_LGF: sysz_insn = 443;
pub const sysz_insn_SYSZ_INS_LGFI: sysz_insn = 444;
pub const sysz_insn_SYSZ_INS_LGFR: sysz_insn = 445;
pub const sysz_insn_SYSZ_INS_LGFRL: sysz_insn = 446;
pub const sysz_insn_SYSZ_INS_LGH: sysz_insn = 447;
pub const sysz_insn_SYSZ_INS_LGHI: sysz_insn = 448;
pub const sysz_insn_SYSZ_INS_LGHR: sysz_insn = 449;
pub const sysz_insn_SYSZ_INS_LGHRL: sysz_insn = 450;
pub const sysz_insn_SYSZ_INS_LGR: sysz_insn = 451;
pub const sysz_insn_SYSZ_INS_LGRL: sysz_insn = 452;
pub const sysz_insn_SYSZ_INS_LH: sysz_insn = 453;
pub const sysz_insn_SYSZ_INS_LHH: sysz_insn = 454;
pub const sysz_insn_SYSZ_INS_LHI: sysz_insn = 455;
pub const sysz_insn_SYSZ_INS_LHR: sysz_insn = 456;
pub const sysz_insn_SYSZ_INS_LHRL: sysz_insn = 457;
pub const sysz_insn_SYSZ_INS_LHY: sysz_insn = 458;
pub const sysz_insn_SYSZ_INS_LLC: sysz_insn = 459;
pub const sysz_insn_SYSZ_INS_LLCH: sysz_insn = 460;
pub const sysz_insn_SYSZ_INS_LLCR: sysz_insn = 461;
pub const sysz_insn_SYSZ_INS_LLGC: sysz_insn = 462;
pub const sysz_insn_SYSZ_INS_LLGCR: sysz_insn = 463;
pub const sysz_insn_SYSZ_INS_LLGF: sysz_insn = 464;
pub const sysz_insn_SYSZ_INS_LLGFR: sysz_insn = 465;
pub const sysz_insn_SYSZ_INS_LLGFRL: sysz_insn = 466;
pub const sysz_insn_SYSZ_INS_LLGH: sysz_insn = 467;
pub const sysz_insn_SYSZ_INS_LLGHR: sysz_insn = 468;
pub const sysz_insn_SYSZ_INS_LLGHRL: sysz_insn = 469;
pub const sysz_insn_SYSZ_INS_LLH: sysz_insn = 470;
pub const sysz_insn_SYSZ_INS_LLHH: sysz_insn = 471;
pub const sysz_insn_SYSZ_INS_LLHR: sysz_insn = 472;
pub const sysz_insn_SYSZ_INS_LLHRL: sysz_insn = 473;
pub const sysz_insn_SYSZ_INS_LLIHF: sysz_insn = 474;
pub const sysz_insn_SYSZ_INS_LLIHH: sysz_insn = 475;
pub const sysz_insn_SYSZ_INS_LLIHL: sysz_insn = 476;
pub const sysz_insn_SYSZ_INS_LLILF: sysz_insn = 477;
pub const sysz_insn_SYSZ_INS_LLILH: sysz_insn = 478;
pub const sysz_insn_SYSZ_INS_LLILL: sysz_insn = 479;
pub const sysz_insn_SYSZ_INS_LMG: sysz_insn = 480;
pub const sysz_insn_SYSZ_INS_LNDBR: sysz_insn = 481;
pub const sysz_insn_SYSZ_INS_LNEBR: sysz_insn = 482;
pub const sysz_insn_SYSZ_INS_LNGFR: sysz_insn = 483;
pub const sysz_insn_SYSZ_INS_LNGR: sysz_insn = 484;
pub const sysz_insn_SYSZ_INS_LNR: sysz_insn = 485;
pub const sysz_insn_SYSZ_INS_LNXBR: sysz_insn = 486;
pub const sysz_insn_SYSZ_INS_LPDBR: sysz_insn = 487;
pub const sysz_insn_SYSZ_INS_LPEBR: sysz_insn = 488;
pub const sysz_insn_SYSZ_INS_LPGFR: sysz_insn = 489;
pub const sysz_insn_SYSZ_INS_LPGR: sysz_insn = 490;
pub const sysz_insn_SYSZ_INS_LPR: sysz_insn = 491;
pub const sysz_insn_SYSZ_INS_LPXBR: sysz_insn = 492;
pub const sysz_insn_SYSZ_INS_LR: sysz_insn = 493;
pub const sysz_insn_SYSZ_INS_LRL: sysz_insn = 494;
pub const sysz_insn_SYSZ_INS_LRV: sysz_insn = 495;
pub const sysz_insn_SYSZ_INS_LRVG: sysz_insn = 496;
pub const sysz_insn_SYSZ_INS_LRVGR: sysz_insn = 497;
pub const sysz_insn_SYSZ_INS_LRVR: sysz_insn = 498;
pub const sysz_insn_SYSZ_INS_LT: sysz_insn = 499;
pub const sysz_insn_SYSZ_INS_LTDBR: sysz_insn = 500;
pub const sysz_insn_SYSZ_INS_LTEBR: sysz_insn = 501;
pub const sysz_insn_SYSZ_INS_LTG: sysz_insn = 502;
pub const sysz_insn_SYSZ_INS_LTGF: sysz_insn = 503;
pub const sysz_insn_SYSZ_INS_LTGFR: sysz_insn = 504;
pub const sysz_insn_SYSZ_INS_LTGR: sysz_insn = 505;
pub const sysz_insn_SYSZ_INS_LTR: sysz_insn = 506;
pub const sysz_insn_SYSZ_INS_LTXBR: sysz_insn = 507;
pub const sysz_insn_SYSZ_INS_LXDB: sysz_insn = 508;
pub const sysz_insn_SYSZ_INS_LXDBR: sysz_insn = 509;
pub const sysz_insn_SYSZ_INS_LXEB: sysz_insn = 510;
pub const sysz_insn_SYSZ_INS_LXEBR: sysz_insn = 511;
pub const sysz_insn_SYSZ_INS_LXR: sysz_insn = 512;
pub const sysz_insn_SYSZ_INS_LY: sysz_insn = 513;
pub const sysz_insn_SYSZ_INS_LZDR: sysz_insn = 514;
pub const sysz_insn_SYSZ_INS_LZER: sysz_insn = 515;
pub const sysz_insn_SYSZ_INS_LZXR: sysz_insn = 516;
pub const sysz_insn_SYSZ_INS_MADB: sysz_insn = 517;
pub const sysz_insn_SYSZ_INS_MADBR: sysz_insn = 518;
pub const sysz_insn_SYSZ_INS_MAEB: sysz_insn = 519;
pub const sysz_insn_SYSZ_INS_MAEBR: sysz_insn = 520;
pub const sysz_insn_SYSZ_INS_MDB: sysz_insn = 521;
pub const sysz_insn_SYSZ_INS_MDBR: sysz_insn = 522;
pub const sysz_insn_SYSZ_INS_MDEB: sysz_insn = 523;
pub const sysz_insn_SYSZ_INS_MDEBR: sysz_insn = 524;
pub const sysz_insn_SYSZ_INS_MEEB: sysz_insn = 525;
pub const sysz_insn_SYSZ_INS_MEEBR: sysz_insn = 526;
pub const sysz_insn_SYSZ_INS_MGHI: sysz_insn = 527;
pub const sysz_insn_SYSZ_INS_MH: sysz_insn = 528;
pub const sysz_insn_SYSZ_INS_MHI: sysz_insn = 529;
pub const sysz_insn_SYSZ_INS_MHY: sysz_insn = 530;
pub const sysz_insn_SYSZ_INS_MLG: sysz_insn = 531;
pub const sysz_insn_SYSZ_INS_MLGR: sysz_insn = 532;
pub const sysz_insn_SYSZ_INS_MS: sysz_insn = 533;
pub const sysz_insn_SYSZ_INS_MSDB: sysz_insn = 534;
pub const sysz_insn_SYSZ_INS_MSDBR: sysz_insn = 535;
pub const sysz_insn_SYSZ_INS_MSEB: sysz_insn = 536;
pub const sysz_insn_SYSZ_INS_MSEBR: sysz_insn = 537;
pub const sysz_insn_SYSZ_INS_MSFI: sysz_insn = 538;
pub const sysz_insn_SYSZ_INS_MSG: sysz_insn = 539;
pub const sysz_insn_SYSZ_INS_MSGF: sysz_insn = 540;
pub const sysz_insn_SYSZ_INS_MSGFI: sysz_insn = 541;
pub const sysz_insn_SYSZ_INS_MSGFR: sysz_insn = 542;
pub const sysz_insn_SYSZ_INS_MSGR: sysz_insn = 543;
pub const sysz_insn_SYSZ_INS_MSR: sysz_insn = 544;
pub const sysz_insn_SYSZ_INS_MSY: sysz_insn = 545;
pub const sysz_insn_SYSZ_INS_MVC: sysz_insn = 546;
pub const sysz_insn_SYSZ_INS_MVGHI: sysz_insn = 547;
pub const sysz_insn_SYSZ_INS_MVHHI: sysz_insn = 548;
pub const sysz_insn_SYSZ_INS_MVHI: sysz_insn = 549;
pub const sysz_insn_SYSZ_INS_MVI: sysz_insn = 550;
pub const sysz_insn_SYSZ_INS_MVIY: sysz_insn = 551;
pub const sysz_insn_SYSZ_INS_MVST: sysz_insn = 552;
pub const sysz_insn_SYSZ_INS_MXBR: sysz_insn = 553;
pub const sysz_insn_SYSZ_INS_MXDB: sysz_insn = 554;
pub const sysz_insn_SYSZ_INS_MXDBR: sysz_insn = 555;
pub const sysz_insn_SYSZ_INS_N: sysz_insn = 556;
pub const sysz_insn_SYSZ_INS_NC: sysz_insn = 557;
pub const sysz_insn_SYSZ_INS_NG: sysz_insn = 558;
pub const sysz_insn_SYSZ_INS_NGR: sysz_insn = 559;
pub const sysz_insn_SYSZ_INS_NGRK: sysz_insn = 560;
pub const sysz_insn_SYSZ_INS_NI: sysz_insn = 561;
pub const sysz_insn_SYSZ_INS_NIHF: sysz_insn = 562;
pub const sysz_insn_SYSZ_INS_NIHH: sysz_insn = 563;
pub const sysz_insn_SYSZ_INS_NIHL: sysz_insn = 564;
pub const sysz_insn_SYSZ_INS_NILF: sysz_insn = 565;
pub const sysz_insn_SYSZ_INS_NILH: sysz_insn = 566;
pub const sysz_insn_SYSZ_INS_NILL: sysz_insn = 567;
pub const sysz_insn_SYSZ_INS_NIY: sysz_insn = 568;
pub const sysz_insn_SYSZ_INS_NR: sysz_insn = 569;
pub const sysz_insn_SYSZ_INS_NRK: sysz_insn = 570;
pub const sysz_insn_SYSZ_INS_NY: sysz_insn = 571;
pub const sysz_insn_SYSZ_INS_O: sysz_insn = 572;
pub const sysz_insn_SYSZ_INS_OC: sysz_insn = 573;
pub const sysz_insn_SYSZ_INS_OG: sysz_insn = 574;
pub const sysz_insn_SYSZ_INS_OGR: sysz_insn = 575;
pub const sysz_insn_SYSZ_INS_OGRK: sysz_insn = 576;
pub const sysz_insn_SYSZ_INS_OI: sysz_insn = 577;
pub const sysz_insn_SYSZ_INS_OIHF: sysz_insn = 578;
pub const sysz_insn_SYSZ_INS_OIHH: sysz_insn = 579;
pub const sysz_insn_SYSZ_INS_OIHL: sysz_insn = 580;
pub const sysz_insn_SYSZ_INS_OILF: sysz_insn = 581;
pub const sysz_insn_SYSZ_INS_OILH: sysz_insn = 582;
pub const sysz_insn_SYSZ_INS_OILL: sysz_insn = 583;
pub const sysz_insn_SYSZ_INS_OIY: sysz_insn = 584;
pub const sysz_insn_SYSZ_INS_OR: sysz_insn = 585;
pub const sysz_insn_SYSZ_INS_ORK: sysz_insn = 586;
pub const sysz_insn_SYSZ_INS_OY: sysz_insn = 587;
pub const sysz_insn_SYSZ_INS_PFD: sysz_insn = 588;
pub const sysz_insn_SYSZ_INS_PFDRL: sysz_insn = 589;
pub const sysz_insn_SYSZ_INS_RISBG: sysz_insn = 590;
pub const sysz_insn_SYSZ_INS_RISBHG: sysz_insn = 591;
pub const sysz_insn_SYSZ_INS_RISBLG: sysz_insn = 592;
pub const sysz_insn_SYSZ_INS_RLL: sysz_insn = 593;
pub const sysz_insn_SYSZ_INS_RLLG: sysz_insn = 594;
pub const sysz_insn_SYSZ_INS_RNSBG: sysz_insn = 595;
pub const sysz_insn_SYSZ_INS_ROSBG: sysz_insn = 596;
pub const sysz_insn_SYSZ_INS_RXSBG: sysz_insn = 597;
pub const sysz_insn_SYSZ_INS_S: sysz_insn = 598;
pub const sysz_insn_SYSZ_INS_SDB: sysz_insn = 599;
pub const sysz_insn_SYSZ_INS_SDBR: sysz_insn = 600;
pub const sysz_insn_SYSZ_INS_SEB: sysz_insn = 601;
pub const sysz_insn_SYSZ_INS_SEBR: sysz_insn = 602;
pub const sysz_insn_SYSZ_INS_SG: sysz_insn = 603;
pub const sysz_insn_SYSZ_INS_SGF: sysz_insn = 604;
pub const sysz_insn_SYSZ_INS_SGFR: sysz_insn = 605;
pub const sysz_insn_SYSZ_INS_SGR: sysz_insn = 606;
pub const sysz_insn_SYSZ_INS_SGRK: sysz_insn = 607;
pub const sysz_insn_SYSZ_INS_SH: sysz_insn = 608;
pub const sysz_insn_SYSZ_INS_SHY: sysz_insn = 609;
pub const sysz_insn_SYSZ_INS_SL: sysz_insn = 610;
pub const sysz_insn_SYSZ_INS_SLB: sysz_insn = 611;
pub const sysz_insn_SYSZ_INS_SLBG: sysz_insn = 612;
pub const sysz_insn_SYSZ_INS_SLBR: sysz_insn = 613;
pub const sysz_insn_SYSZ_INS_SLFI: sysz_insn = 614;
pub const sysz_insn_SYSZ_INS_SLG: sysz_insn = 615;
pub const sysz_insn_SYSZ_INS_SLBGR: sysz_insn = 616;
pub const sysz_insn_SYSZ_INS_SLGF: sysz_insn = 617;
pub const sysz_insn_SYSZ_INS_SLGFI: sysz_insn = 618;
pub const sysz_insn_SYSZ_INS_SLGFR: sysz_insn = 619;
pub const sysz_insn_SYSZ_INS_SLGR: sysz_insn = 620;
pub const sysz_insn_SYSZ_INS_SLGRK: sysz_insn = 621;
pub const sysz_insn_SYSZ_INS_SLL: sysz_insn = 622;
pub const sysz_insn_SYSZ_INS_SLLG: sysz_insn = 623;
pub const sysz_insn_SYSZ_INS_SLLK: sysz_insn = 624;
pub const sysz_insn_SYSZ_INS_SLR: sysz_insn = 625;
pub const sysz_insn_SYSZ_INS_SLRK: sysz_insn = 626;
pub const sysz_insn_SYSZ_INS_SLY: sysz_insn = 627;
pub const sysz_insn_SYSZ_INS_SQDB: sysz_insn = 628;
pub const sysz_insn_SYSZ_INS_SQDBR: sysz_insn = 629;
pub const sysz_insn_SYSZ_INS_SQEB: sysz_insn = 630;
pub const sysz_insn_SYSZ_INS_SQEBR: sysz_insn = 631;
pub const sysz_insn_SYSZ_INS_SQXBR: sysz_insn = 632;
pub const sysz_insn_SYSZ_INS_SR: sysz_insn = 633;
pub const sysz_insn_SYSZ_INS_SRA: sysz_insn = 634;
pub const sysz_insn_SYSZ_INS_SRAG: sysz_insn = 635;
pub const sysz_insn_SYSZ_INS_SRAK: sysz_insn = 636;
pub const sysz_insn_SYSZ_INS_SRK: sysz_insn = 637;
pub const sysz_insn_SYSZ_INS_SRL: sysz_insn = 638;
pub const sysz_insn_SYSZ_INS_SRLG: sysz_insn = 639;
pub const sysz_insn_SYSZ_INS_SRLK: sysz_insn = 640;
pub const sysz_insn_SYSZ_INS_SRST: sysz_insn = 641;
pub const sysz_insn_SYSZ_INS_ST: sysz_insn = 642;
pub const sysz_insn_SYSZ_INS_STC: sysz_insn = 643;
pub const sysz_insn_SYSZ_INS_STCH: sysz_insn = 644;
pub const sysz_insn_SYSZ_INS_STCY: sysz_insn = 645;
pub const sysz_insn_SYSZ_INS_STD: sysz_insn = 646;
pub const sysz_insn_SYSZ_INS_STDY: sysz_insn = 647;
pub const sysz_insn_SYSZ_INS_STE: sysz_insn = 648;
pub const sysz_insn_SYSZ_INS_STEY: sysz_insn = 649;
pub const sysz_insn_SYSZ_INS_STFH: sysz_insn = 650;
pub const sysz_insn_SYSZ_INS_STG: sysz_insn = 651;
pub const sysz_insn_SYSZ_INS_STGRL: sysz_insn = 652;
pub const sysz_insn_SYSZ_INS_STH: sysz_insn = 653;
pub const sysz_insn_SYSZ_INS_STHH: sysz_insn = 654;
pub const sysz_insn_SYSZ_INS_STHRL: sysz_insn = 655;
pub const sysz_insn_SYSZ_INS_STHY: sysz_insn = 656;
pub const sysz_insn_SYSZ_INS_STMG: sysz_insn = 657;
pub const sysz_insn_SYSZ_INS_STRL: sysz_insn = 658;
pub const sysz_insn_SYSZ_INS_STRV: sysz_insn = 659;
pub const sysz_insn_SYSZ_INS_STRVG: sysz_insn = 660;
pub const sysz_insn_SYSZ_INS_STY: sysz_insn = 661;
pub const sysz_insn_SYSZ_INS_SXBR: sysz_insn = 662;
pub const sysz_insn_SYSZ_INS_SY: sysz_insn = 663;
pub const sysz_insn_SYSZ_INS_TM: sysz_insn = 664;
pub const sysz_insn_SYSZ_INS_TMHH: sysz_insn = 665;
pub const sysz_insn_SYSZ_INS_TMHL: sysz_insn = 666;
pub const sysz_insn_SYSZ_INS_TMLH: sysz_insn = 667;
pub const sysz_insn_SYSZ_INS_TMLL: sysz_insn = 668;
pub const sysz_insn_SYSZ_INS_TMY: sysz_insn = 669;
pub const sysz_insn_SYSZ_INS_X: sysz_insn = 670;
pub const sysz_insn_SYSZ_INS_XC: sysz_insn = 671;
pub const sysz_insn_SYSZ_INS_XG: sysz_insn = 672;
pub const sysz_insn_SYSZ_INS_XGR: sysz_insn = 673;
pub const sysz_insn_SYSZ_INS_XGRK: sysz_insn = 674;
pub const sysz_insn_SYSZ_INS_XI: sysz_insn = 675;
pub const sysz_insn_SYSZ_INS_XIHF: sysz_insn = 676;
pub const sysz_insn_SYSZ_INS_XILF: sysz_insn = 677;
pub const sysz_insn_SYSZ_INS_XIY: sysz_insn = 678;
pub const sysz_insn_SYSZ_INS_XR: sysz_insn = 679;
pub const sysz_insn_SYSZ_INS_XRK: sysz_insn = 680;
pub const sysz_insn_SYSZ_INS_XY: sysz_insn = 681;
pub const sysz_insn_SYSZ_INS_AD: sysz_insn = 682;
pub const sysz_insn_SYSZ_INS_ADR: sysz_insn = 683;
pub const sysz_insn_SYSZ_INS_ADTR: sysz_insn = 684;
pub const sysz_insn_SYSZ_INS_ADTRA: sysz_insn = 685;
pub const sysz_insn_SYSZ_INS_AE: sysz_insn = 686;
pub const sysz_insn_SYSZ_INS_AER: sysz_insn = 687;
pub const sysz_insn_SYSZ_INS_AGH: sysz_insn = 688;
pub const sysz_insn_SYSZ_INS_AHHHR: sysz_insn = 689;
pub const sysz_insn_SYSZ_INS_AHHLR: sysz_insn = 690;
pub const sysz_insn_SYSZ_INS_ALGSI: sysz_insn = 691;
pub const sysz_insn_SYSZ_INS_ALHHHR: sysz_insn = 692;
pub const sysz_insn_SYSZ_INS_ALHHLR: sysz_insn = 693;
pub const sysz_insn_SYSZ_INS_ALSI: sysz_insn = 694;
pub const sysz_insn_SYSZ_INS_ALSIH: sysz_insn = 695;
pub const sysz_insn_SYSZ_INS_ALSIHN: sysz_insn = 696;
pub const sysz_insn_SYSZ_INS_AP: sysz_insn = 697;
pub const sysz_insn_SYSZ_INS_AU: sysz_insn = 698;
pub const sysz_insn_SYSZ_INS_AUR: sysz_insn = 699;
pub const sysz_insn_SYSZ_INS_AW: sysz_insn = 700;
pub const sysz_insn_SYSZ_INS_AWR: sysz_insn = 701;
pub const sysz_insn_SYSZ_INS_AXR: sysz_insn = 702;
pub const sysz_insn_SYSZ_INS_AXTR: sysz_insn = 703;
pub const sysz_insn_SYSZ_INS_AXTRA: sysz_insn = 704;
pub const sysz_insn_SYSZ_INS_B: sysz_insn = 705;
pub const sysz_insn_SYSZ_INS_BAKR: sysz_insn = 706;
pub const sysz_insn_SYSZ_INS_BAL: sysz_insn = 707;
pub const sysz_insn_SYSZ_INS_BALR: sysz_insn = 708;
pub const sysz_insn_SYSZ_INS_BAS: sysz_insn = 709;
pub const sysz_insn_SYSZ_INS_BASSM: sysz_insn = 710;
pub const sysz_insn_SYSZ_INS_BC: sysz_insn = 711;
pub const sysz_insn_SYSZ_INS_BCT: sysz_insn = 712;
pub const sysz_insn_SYSZ_INS_BCTG: sysz_insn = 713;
pub const sysz_insn_SYSZ_INS_BCTGR: sysz_insn = 714;
pub const sysz_insn_SYSZ_INS_BCTR: sysz_insn = 715;
pub const sysz_insn_SYSZ_INS_BE: sysz_insn = 716;
pub const sysz_insn_SYSZ_INS_BH: sysz_insn = 717;
pub const sysz_insn_SYSZ_INS_BHE: sysz_insn = 718;
pub const sysz_insn_SYSZ_INS_BI: sysz_insn = 719;
pub const sysz_insn_SYSZ_INS_BIC: sysz_insn = 720;
pub const sysz_insn_SYSZ_INS_BIE: sysz_insn = 721;
pub const sysz_insn_SYSZ_INS_BIH: sysz_insn = 722;
pub const sysz_insn_SYSZ_INS_BIHE: sysz_insn = 723;
pub const sysz_insn_SYSZ_INS_BIL: sysz_insn = 724;
pub const sysz_insn_SYSZ_INS_BILE: sysz_insn = 725;
pub const sysz_insn_SYSZ_INS_BILH: sysz_insn = 726;
pub const sysz_insn_SYSZ_INS_BIM: sysz_insn = 727;
pub const sysz_insn_SYSZ_INS_BINE: sysz_insn = 728;
pub const sysz_insn_SYSZ_INS_BINH: sysz_insn = 729;
pub const sysz_insn_SYSZ_INS_BINHE: sysz_insn = 730;
pub const sysz_insn_SYSZ_INS_BINL: sysz_insn = 731;
pub const sysz_insn_SYSZ_INS_BINLE: sysz_insn = 732;
pub const sysz_insn_SYSZ_INS_BINLH: sysz_insn = 733;
pub const sysz_insn_SYSZ_INS_BINM: sysz_insn = 734;
pub const sysz_insn_SYSZ_INS_BINO: sysz_insn = 735;
pub const sysz_insn_SYSZ_INS_BINP: sysz_insn = 736;
pub const sysz_insn_SYSZ_INS_BINZ: sysz_insn = 737;
pub const sysz_insn_SYSZ_INS_BIO: sysz_insn = 738;
pub const sysz_insn_SYSZ_INS_BIP: sysz_insn = 739;
pub const sysz_insn_SYSZ_INS_BIZ: sysz_insn = 740;
pub const sysz_insn_SYSZ_INS_BL: sysz_insn = 741;
pub const sysz_insn_SYSZ_INS_BLE: sysz_insn = 742;
pub const sysz_insn_SYSZ_INS_BLH: sysz_insn = 743;
pub const sysz_insn_SYSZ_INS_BM: sysz_insn = 744;
pub const sysz_insn_SYSZ_INS_BMR: sysz_insn = 745;
pub const sysz_insn_SYSZ_INS_BNE: sysz_insn = 746;
pub const sysz_insn_SYSZ_INS_BNH: sysz_insn = 747;
pub const sysz_insn_SYSZ_INS_BNHE: sysz_insn = 748;
pub const sysz_insn_SYSZ_INS_BNL: sysz_insn = 749;
pub const sysz_insn_SYSZ_INS_BNLE: sysz_insn = 750;
pub const sysz_insn_SYSZ_INS_BNLH: sysz_insn = 751;
pub const sysz_insn_SYSZ_INS_BNM: sysz_insn = 752;
pub const sysz_insn_SYSZ_INS_BNMR: sysz_insn = 753;
pub const sysz_insn_SYSZ_INS_BNO: sysz_insn = 754;
pub const sysz_insn_SYSZ_INS_BNP: sysz_insn = 755;
pub const sysz_insn_SYSZ_INS_BNPR: sysz_insn = 756;
pub const sysz_insn_SYSZ_INS_BNZ: sysz_insn = 757;
pub const sysz_insn_SYSZ_INS_BNZR: sysz_insn = 758;
pub const sysz_insn_SYSZ_INS_BO: sysz_insn = 759;
pub const sysz_insn_SYSZ_INS_BP: sysz_insn = 760;
pub const sysz_insn_SYSZ_INS_BPP: sysz_insn = 761;
pub const sysz_insn_SYSZ_INS_BPR: sysz_insn = 762;
pub const sysz_insn_SYSZ_INS_BPRP: sysz_insn = 763;
pub const sysz_insn_SYSZ_INS_BRCTH: sysz_insn = 764;
pub const sysz_insn_SYSZ_INS_BRXH: sysz_insn = 765;
pub const sysz_insn_SYSZ_INS_BRXHG: sysz_insn = 766;
pub const sysz_insn_SYSZ_INS_BRXLE: sysz_insn = 767;
pub const sysz_insn_SYSZ_INS_BRXLG: sysz_insn = 768;
pub const sysz_insn_SYSZ_INS_BSA: sysz_insn = 769;
pub const sysz_insn_SYSZ_INS_BSG: sysz_insn = 770;
pub const sysz_insn_SYSZ_INS_BSM: sysz_insn = 771;
pub const sysz_insn_SYSZ_INS_BXH: sysz_insn = 772;
pub const sysz_insn_SYSZ_INS_BXHG: sysz_insn = 773;
pub const sysz_insn_SYSZ_INS_BXLE: sysz_insn = 774;
pub const sysz_insn_SYSZ_INS_BXLEG: sysz_insn = 775;
pub const sysz_insn_SYSZ_INS_BZ: sysz_insn = 776;
pub const sysz_insn_SYSZ_INS_BZR: sysz_insn = 777;
pub const sysz_insn_SYSZ_INS_CD: sysz_insn = 778;
pub const sysz_insn_SYSZ_INS_CDFBRA: sysz_insn = 779;
pub const sysz_insn_SYSZ_INS_CDFR: sysz_insn = 780;
pub const sysz_insn_SYSZ_INS_CDFTR: sysz_insn = 781;
pub const sysz_insn_SYSZ_INS_CDGBRA: sysz_insn = 782;
pub const sysz_insn_SYSZ_INS_CDGR: sysz_insn = 783;
pub const sysz_insn_SYSZ_INS_CDGTR: sysz_insn = 784;
pub const sysz_insn_SYSZ_INS_CDGTRA: sysz_insn = 785;
pub const sysz_insn_SYSZ_INS_CDLFTR: sysz_insn = 786;
pub const sysz_insn_SYSZ_INS_CDLGTR: sysz_insn = 787;
pub const sysz_insn_SYSZ_INS_CDPT: sysz_insn = 788;
pub const sysz_insn_SYSZ_INS_CDR: sysz_insn = 789;
pub const sysz_insn_SYSZ_INS_CDS: sysz_insn = 790;
pub const sysz_insn_SYSZ_INS_CDSG: sysz_insn = 791;
pub const sysz_insn_SYSZ_INS_CDSTR: sysz_insn = 792;
pub const sysz_insn_SYSZ_INS_CDSY: sysz_insn = 793;
pub const sysz_insn_SYSZ_INS_CDTR: sysz_insn = 794;
pub const sysz_insn_SYSZ_INS_CDUTR: sysz_insn = 795;
pub const sysz_insn_SYSZ_INS_CDZT: sysz_insn = 796;
pub const sysz_insn_SYSZ_INS_CE: sysz_insn = 797;
pub const sysz_insn_SYSZ_INS_CEDTR: sysz_insn = 798;
pub const sysz_insn_SYSZ_INS_CEFBRA: sysz_insn = 799;
pub const sysz_insn_SYSZ_INS_CEFR: sysz_insn = 800;
pub const sysz_insn_SYSZ_INS_CEGBRA: sysz_insn = 801;
pub const sysz_insn_SYSZ_INS_CEGR: sysz_insn = 802;
pub const sysz_insn_SYSZ_INS_CER: sysz_insn = 803;
pub const sysz_insn_SYSZ_INS_CEXTR: sysz_insn = 804;
pub const sysz_insn_SYSZ_INS_CFC: sysz_insn = 805;
pub const sysz_insn_SYSZ_INS_CFDBRA: sysz_insn = 806;
pub const sysz_insn_SYSZ_INS_CFDR: sysz_insn = 807;
pub const sysz_insn_SYSZ_INS_CFDTR: sysz_insn = 808;
pub const sysz_insn_SYSZ_INS_CFEBRA: sysz_insn = 809;
pub const sysz_insn_SYSZ_INS_CFER: sysz_insn = 810;
pub const sysz_insn_SYSZ_INS_CFXBRA: sysz_insn = 811;
pub const sysz_insn_SYSZ_INS_CFXR: sysz_insn = 812;
pub const sysz_insn_SYSZ_INS_CFXTR: sysz_insn = 813;
pub const sysz_insn_SYSZ_INS_CGDBRA: sysz_insn = 814;
pub const sysz_insn_SYSZ_INS_CGDR: sysz_insn = 815;
pub const sysz_insn_SYSZ_INS_CGDTR: sysz_insn = 816;
pub const sysz_insn_SYSZ_INS_CGDTRA: sysz_insn = 817;
pub const sysz_insn_SYSZ_INS_CGEBRA: sysz_insn = 818;
pub const sysz_insn_SYSZ_INS_CGER: sysz_insn = 819;
pub const sysz_insn_SYSZ_INS_CGIB: sysz_insn = 820;
pub const sysz_insn_SYSZ_INS_CGIBE: sysz_insn = 821;
pub const sysz_insn_SYSZ_INS_CGIBH: sysz_insn = 822;
pub const sysz_insn_SYSZ_INS_CGIBHE: sysz_insn = 823;
pub const sysz_insn_SYSZ_INS_CGIBL: sysz_insn = 824;
pub const sysz_insn_SYSZ_INS_CGIBLE: sysz_insn = 825;
pub const sysz_insn_SYSZ_INS_CGIBLH: sysz_insn = 826;
pub const sysz_insn_SYSZ_INS_CGIBNE: sysz_insn = 827;
pub const sysz_insn_SYSZ_INS_CGIBNH: sysz_insn = 828;
pub const sysz_insn_SYSZ_INS_CGIBNHE: sysz_insn = 829;
pub const sysz_insn_SYSZ_INS_CGIBNL: sysz_insn = 830;
pub const sysz_insn_SYSZ_INS_CGIBNLE: sysz_insn = 831;
pub const sysz_insn_SYSZ_INS_CGIBNLH: sysz_insn = 832;
pub const sysz_insn_SYSZ_INS_CGIT: sysz_insn = 833;
pub const sysz_insn_SYSZ_INS_CGITE: sysz_insn = 834;
pub const sysz_insn_SYSZ_INS_CGITH: sysz_insn = 835;
pub const sysz_insn_SYSZ_INS_CGITHE: sysz_insn = 836;
pub const sysz_insn_SYSZ_INS_CGITL: sysz_insn = 837;
pub const sysz_insn_SYSZ_INS_CGITLE: sysz_insn = 838;
pub const sysz_insn_SYSZ_INS_CGITLH: sysz_insn = 839;
pub const sysz_insn_SYSZ_INS_CGITNE: sysz_insn = 840;
pub const sysz_insn_SYSZ_INS_CGITNH: sysz_insn = 841;
pub const sysz_insn_SYSZ_INS_CGITNHE: sysz_insn = 842;
pub const sysz_insn_SYSZ_INS_CGITNL: sysz_insn = 843;
pub const sysz_insn_SYSZ_INS_CGITNLE: sysz_insn = 844;
pub const sysz_insn_SYSZ_INS_CGITNLH: sysz_insn = 845;
pub const sysz_insn_SYSZ_INS_CGRB: sysz_insn = 846;
pub const sysz_insn_SYSZ_INS_CGRBE: sysz_insn = 847;
pub const sysz_insn_SYSZ_INS_CGRBH: sysz_insn = 848;
pub const sysz_insn_SYSZ_INS_CGRBHE: sysz_insn = 849;
pub const sysz_insn_SYSZ_INS_CGRBL: sysz_insn = 850;
pub const sysz_insn_SYSZ_INS_CGRBLE: sysz_insn = 851;
pub const sysz_insn_SYSZ_INS_CGRBLH: sysz_insn = 852;
pub const sysz_insn_SYSZ_INS_CGRBNE: sysz_insn = 853;
pub const sysz_insn_SYSZ_INS_CGRBNH: sysz_insn = 854;
pub const sysz_insn_SYSZ_INS_CGRBNHE: sysz_insn = 855;
pub const sysz_insn_SYSZ_INS_CGRBNL: sysz_insn = 856;
pub const sysz_insn_SYSZ_INS_CGRBNLE: sysz_insn = 857;
pub const sysz_insn_SYSZ_INS_CGRBNLH: sysz_insn = 858;
pub const sysz_insn_SYSZ_INS_CGRT: sysz_insn = 859;
pub const sysz_insn_SYSZ_INS_CGRTE: sysz_insn = 860;
pub const sysz_insn_SYSZ_INS_CGRTH: sysz_insn = 861;
pub const sysz_insn_SYSZ_INS_CGRTHE: sysz_insn = 862;
pub const sysz_insn_SYSZ_INS_CGRTL: sysz_insn = 863;
pub const sysz_insn_SYSZ_INS_CGRTLE: sysz_insn = 864;
pub const sysz_insn_SYSZ_INS_CGRTLH: sysz_insn = 865;
pub const sysz_insn_SYSZ_INS_CGRTNE: sysz_insn = 866;
pub const sysz_insn_SYSZ_INS_CGRTNH: sysz_insn = 867;
pub const sysz_insn_SYSZ_INS_CGRTNHE: sysz_insn = 868;
pub const sysz_insn_SYSZ_INS_CGRTNL: sysz_insn = 869;
pub const sysz_insn_SYSZ_INS_CGRTNLE: sysz_insn = 870;
pub const sysz_insn_SYSZ_INS_CGRTNLH: sysz_insn = 871;
pub const sysz_insn_SYSZ_INS_CGXBRA: sysz_insn = 872;
pub const sysz_insn_SYSZ_INS_CGXR: sysz_insn = 873;
pub const sysz_insn_SYSZ_INS_CGXTR: sysz_insn = 874;
pub const sysz_insn_SYSZ_INS_CGXTRA: sysz_insn = 875;
pub const sysz_insn_SYSZ_INS_CHHR: sysz_insn = 876;
pub const sysz_insn_SYSZ_INS_CHLR: sysz_insn = 877;
pub const sysz_insn_SYSZ_INS_CIB: sysz_insn = 878;
pub const sysz_insn_SYSZ_INS_CIBE: sysz_insn = 879;
pub const sysz_insn_SYSZ_INS_CIBH: sysz_insn = 880;
pub const sysz_insn_SYSZ_INS_CIBHE: sysz_insn = 881;
pub const sysz_insn_SYSZ_INS_CIBL: sysz_insn = 882;
pub const sysz_insn_SYSZ_INS_CIBLE: sysz_insn = 883;
pub const sysz_insn_SYSZ_INS_CIBLH: sysz_insn = 884;
pub const sysz_insn_SYSZ_INS_CIBNE: sysz_insn = 885;
pub const sysz_insn_SYSZ_INS_CIBNH: sysz_insn = 886;
pub const sysz_insn_SYSZ_INS_CIBNHE: sysz_insn = 887;
pub const sysz_insn_SYSZ_INS_CIBNL: sysz_insn = 888;
pub const sysz_insn_SYSZ_INS_CIBNLE: sysz_insn = 889;
pub const sysz_insn_SYSZ_INS_CIBNLH: sysz_insn = 890;
pub const sysz_insn_SYSZ_INS_CIT: sysz_insn = 891;
pub const sysz_insn_SYSZ_INS_CITE: sysz_insn = 892;
pub const sysz_insn_SYSZ_INS_CITH: sysz_insn = 893;
pub const sysz_insn_SYSZ_INS_CITHE: sysz_insn = 894;
pub const sysz_insn_SYSZ_INS_CITL: sysz_insn = 895;
pub const sysz_insn_SYSZ_INS_CITLE: sysz_insn = 896;
pub const sysz_insn_SYSZ_INS_CITLH: sysz_insn = 897;
pub const sysz_insn_SYSZ_INS_CITNE: sysz_insn = 898;
pub const sysz_insn_SYSZ_INS_CITNH: sysz_insn = 899;
pub const sysz_insn_SYSZ_INS_CITNHE: sysz_insn = 900;
pub const sysz_insn_SYSZ_INS_CITNL: sysz_insn = 901;
pub const sysz_insn_SYSZ_INS_CITNLE: sysz_insn = 902;
pub const sysz_insn_SYSZ_INS_CITNLH: sysz_insn = 903;
pub const sysz_insn_SYSZ_INS_CKSM: sysz_insn = 904;
pub const sysz_insn_SYSZ_INS_CLCL: sysz_insn = 905;
pub const sysz_insn_SYSZ_INS_CLCLE: sysz_insn = 906;
pub const sysz_insn_SYSZ_INS_CLCLU: sysz_insn = 907;
pub const sysz_insn_SYSZ_INS_CLFDTR: sysz_insn = 908;
pub const sysz_insn_SYSZ_INS_CLFIT: sysz_insn = 909;
pub const sysz_insn_SYSZ_INS_CLFITE: sysz_insn = 910;
pub const sysz_insn_SYSZ_INS_CLFITH: sysz_insn = 911;
pub const sysz_insn_SYSZ_INS_CLFITHE: sysz_insn = 912;
pub const sysz_insn_SYSZ_INS_CLFITL: sysz_insn = 913;
pub const sysz_insn_SYSZ_INS_CLFITLE: sysz_insn = 914;
pub const sysz_insn_SYSZ_INS_CLFITLH: sysz_insn = 915;
pub const sysz_insn_SYSZ_INS_CLFITNE: sysz_insn = 916;
pub const sysz_insn_SYSZ_INS_CLFITNH: sysz_insn = 917;
pub const sysz_insn_SYSZ_INS_CLFITNHE: sysz_insn = 918;
pub const sysz_insn_SYSZ_INS_CLFITNL: sysz_insn = 919;
pub const sysz_insn_SYSZ_INS_CLFITNLE: sysz_insn = 920;
pub const sysz_insn_SYSZ_INS_CLFITNLH: sysz_insn = 921;
pub const sysz_insn_SYSZ_INS_CLFXTR: sysz_insn = 922;
pub const sysz_insn_SYSZ_INS_CLGDTR: sysz_insn = 923;
pub const sysz_insn_SYSZ_INS_CLGIB: sysz_insn = 924;
pub const sysz_insn_SYSZ_INS_CLGIBE: sysz_insn = 925;
pub const sysz_insn_SYSZ_INS_CLGIBH: sysz_insn = 926;
pub const sysz_insn_SYSZ_INS_CLGIBHE: sysz_insn = 927;
pub const sysz_insn_SYSZ_INS_CLGIBL: sysz_insn = 928;
pub const sysz_insn_SYSZ_INS_CLGIBLE: sysz_insn = 929;
pub const sysz_insn_SYSZ_INS_CLGIBLH: sysz_insn = 930;
pub const sysz_insn_SYSZ_INS_CLGIBNE: sysz_insn = 931;
pub const sysz_insn_SYSZ_INS_CLGIBNH: sysz_insn = 932;
pub const sysz_insn_SYSZ_INS_CLGIBNHE: sysz_insn = 933;
pub const sysz_insn_SYSZ_INS_CLGIBNL: sysz_insn = 934;
pub const sysz_insn_SYSZ_INS_CLGIBNLE: sysz_insn = 935;
pub const sysz_insn_SYSZ_INS_CLGIBNLH: sysz_insn = 936;
pub const sysz_insn_SYSZ_INS_CLGIT: sysz_insn = 937;
pub const sysz_insn_SYSZ_INS_CLGITE: sysz_insn = 938;
pub const sysz_insn_SYSZ_INS_CLGITH: sysz_insn = 939;
pub const sysz_insn_SYSZ_INS_CLGITHE: sysz_insn = 940;
pub const sysz_insn_SYSZ_INS_CLGITL: sysz_insn = 941;
pub const sysz_insn_SYSZ_INS_CLGITLE: sysz_insn = 942;
pub const sysz_insn_SYSZ_INS_CLGITLH: sysz_insn = 943;
pub const sysz_insn_SYSZ_INS_CLGITNE: sysz_insn = 944;
pub const sysz_insn_SYSZ_INS_CLGITNH: sysz_insn = 945;
pub const sysz_insn_SYSZ_INS_CLGITNHE: sysz_insn = 946;
pub const sysz_insn_SYSZ_INS_CLGITNL: sysz_insn = 947;
pub const sysz_insn_SYSZ_INS_CLGITNLE: sysz_insn = 948;
pub const sysz_insn_SYSZ_INS_CLGITNLH: sysz_insn = 949;
pub const sysz_insn_SYSZ_INS_CLGRB: sysz_insn = 950;
pub const sysz_insn_SYSZ_INS_CLGRBE: sysz_insn = 951;
pub const sysz_insn_SYSZ_INS_CLGRBH: sysz_insn = 952;
pub const sysz_insn_SYSZ_INS_CLGRBHE: sysz_insn = 953;
pub const sysz_insn_SYSZ_INS_CLGRBL: sysz_insn = 954;
pub const sysz_insn_SYSZ_INS_CLGRBLE: sysz_insn = 955;
pub const sysz_insn_SYSZ_INS_CLGRBLH: sysz_insn = 956;
pub const sysz_insn_SYSZ_INS_CLGRBNE: sysz_insn = 957;
pub const sysz_insn_SYSZ_INS_CLGRBNH: sysz_insn = 958;
pub const sysz_insn_SYSZ_INS_CLGRBNHE: sysz_insn = 959;
pub const sysz_insn_SYSZ_INS_CLGRBNL: sysz_insn = 960;
pub const sysz_insn_SYSZ_INS_CLGRBNLE: sysz_insn = 961;
pub const sysz_insn_SYSZ_INS_CLGRBNLH: sysz_insn = 962;
pub const sysz_insn_SYSZ_INS_CLGRT: sysz_insn = 963;
pub const sysz_insn_SYSZ_INS_CLGRTE: sysz_insn = 964;
pub const sysz_insn_SYSZ_INS_CLGRTH: sysz_insn = 965;
pub const sysz_insn_SYSZ_INS_CLGRTHE: sysz_insn = 966;
pub const sysz_insn_SYSZ_INS_CLGRTL: sysz_insn = 967;
pub const sysz_insn_SYSZ_INS_CLGRTLE: sysz_insn = 968;
pub const sysz_insn_SYSZ_INS_CLGRTLH: sysz_insn = 969;
pub const sysz_insn_SYSZ_INS_CLGRTNE: sysz_insn = 970;
pub const sysz_insn_SYSZ_INS_CLGRTNH: sysz_insn = 971;
pub const sysz_insn_SYSZ_INS_CLGRTNHE: sysz_insn = 972;
pub const sysz_insn_SYSZ_INS_CLGRTNL: sysz_insn = 973;
pub const sysz_insn_SYSZ_INS_CLGRTNLE: sysz_insn = 974;
pub const sysz_insn_SYSZ_INS_CLGRTNLH: sysz_insn = 975;
pub const sysz_insn_SYSZ_INS_CLGT: sysz_insn = 976;
pub const sysz_insn_SYSZ_INS_CLGTE: sysz_insn = 977;
pub const sysz_insn_SYSZ_INS_CLGTH: sysz_insn = 978;
pub const sysz_insn_SYSZ_INS_CLGTHE: sysz_insn = 979;
pub const sysz_insn_SYSZ_INS_CLGTL: sysz_insn = 980;
pub const sysz_insn_SYSZ_INS_CLGTLE: sysz_insn = 981;
pub const sysz_insn_SYSZ_INS_CLGTLH: sysz_insn = 982;
pub const sysz_insn_SYSZ_INS_CLGTNE: sysz_insn = 983;
pub const sysz_insn_SYSZ_INS_CLGTNH: sysz_insn = 984;
pub const sysz_insn_SYSZ_INS_CLGTNHE: sysz_insn = 985;
pub const sysz_insn_SYSZ_INS_CLGTNL: sysz_insn = 986;
pub const sysz_insn_SYSZ_INS_CLGTNLE: sysz_insn = 987;
pub const sysz_insn_SYSZ_INS_CLGTNLH: sysz_insn = 988;
pub const sysz_insn_SYSZ_INS_CLGXTR: sysz_insn = 989;
pub const sysz_insn_SYSZ_INS_CLHHR: sysz_insn = 990;
pub const sysz_insn_SYSZ_INS_CLHLR: sysz_insn = 991;
pub const sysz_insn_SYSZ_INS_CLIB: sysz_insn = 992;
pub const sysz_insn_SYSZ_INS_CLIBE: sysz_insn = 993;
pub const sysz_insn_SYSZ_INS_CLIBH: sysz_insn = 994;
pub const sysz_insn_SYSZ_INS_CLIBHE: sysz_insn = 995;
pub const sysz_insn_SYSZ_INS_CLIBL: sysz_insn = 996;
pub const sysz_insn_SYSZ_INS_CLIBLE: sysz_insn = 997;
pub const sysz_insn_SYSZ_INS_CLIBLH: sysz_insn = 998;
pub const sysz_insn_SYSZ_INS_CLIBNE: sysz_insn = 999;
pub const sysz_insn_SYSZ_INS_CLIBNH: sysz_insn = 1000;
pub const sysz_insn_SYSZ_INS_CLIBNHE: sysz_insn = 1001;
pub const sysz_insn_SYSZ_INS_CLIBNL: sysz_insn = 1002;
pub const sysz_insn_SYSZ_INS_CLIBNLE: sysz_insn = 1003;
pub const sysz_insn_SYSZ_INS_CLIBNLH: sysz_insn = 1004;
pub const sysz_insn_SYSZ_INS_CLM: sysz_insn = 1005;
pub const sysz_insn_SYSZ_INS_CLMH: sysz_insn = 1006;
pub const sysz_insn_SYSZ_INS_CLMY: sysz_insn = 1007;
pub const sysz_insn_SYSZ_INS_CLRB: sysz_insn = 1008;
pub const sysz_insn_SYSZ_INS_CLRBE: sysz_insn = 1009;
pub const sysz_insn_SYSZ_INS_CLRBH: sysz_insn = 1010;
pub const sysz_insn_SYSZ_INS_CLRBHE: sysz_insn = 1011;
pub const sysz_insn_SYSZ_INS_CLRBL: sysz_insn = 1012;
pub const sysz_insn_SYSZ_INS_CLRBLE: sysz_insn = 1013;
pub const sysz_insn_SYSZ_INS_CLRBLH: sysz_insn = 1014;
pub const sysz_insn_SYSZ_INS_CLRBNE: sysz_insn = 1015;
pub const sysz_insn_SYSZ_INS_CLRBNH: sysz_insn = 1016;
pub const sysz_insn_SYSZ_INS_CLRBNHE: sysz_insn = 1017;
pub const sysz_insn_SYSZ_INS_CLRBNL: sysz_insn = 1018;
pub const sysz_insn_SYSZ_INS_CLRBNLE: sysz_insn = 1019;
pub const sysz_insn_SYSZ_INS_CLRBNLH: sysz_insn = 1020;
pub const sysz_insn_SYSZ_INS_CLRT: sysz_insn = 1021;
pub const sysz_insn_SYSZ_INS_CLRTE: sysz_insn = 1022;
pub const sysz_insn_SYSZ_INS_CLRTH: sysz_insn = 1023;
pub const sysz_insn_SYSZ_INS_CLRTHE: sysz_insn = 1024;
pub const sysz_insn_SYSZ_INS_CLRTL: sysz_insn = 1025;
pub const sysz_insn_SYSZ_INS_CLRTLE: sysz_insn = 1026;
pub const sysz_insn_SYSZ_INS_CLRTLH: sysz_insn = 1027;
pub const sysz_insn_SYSZ_INS_CLRTNE: sysz_insn = 1028;
pub const sysz_insn_SYSZ_INS_CLRTNH: sysz_insn = 1029;
pub const sysz_insn_SYSZ_INS_CLRTNHE: sysz_insn = 1030;
pub const sysz_insn_SYSZ_INS_CLRTNL: sysz_insn = 1031;
pub const sysz_insn_SYSZ_INS_CLRTNLE: sysz_insn = 1032;
pub const sysz_insn_SYSZ_INS_CLRTNLH: sysz_insn = 1033;
pub const sysz_insn_SYSZ_INS_CLT: sysz_insn = 1034;
pub const sysz_insn_SYSZ_INS_CLTE: sysz_insn = 1035;
pub const sysz_insn_SYSZ_INS_CLTH: sysz_insn = 1036;
pub const sysz_insn_SYSZ_INS_CLTHE: sysz_insn = 1037;
pub const sysz_insn_SYSZ_INS_CLTL: sysz_insn = 1038;
pub const sysz_insn_SYSZ_INS_CLTLE: sysz_insn = 1039;
pub const sysz_insn_SYSZ_INS_CLTLH: sysz_insn = 1040;
pub const sysz_insn_SYSZ_INS_CLTNE: sysz_insn = 1041;
pub const sysz_insn_SYSZ_INS_CLTNH: sysz_insn = 1042;
pub const sysz_insn_SYSZ_INS_CLTNHE: sysz_insn = 1043;
pub const sysz_insn_SYSZ_INS_CLTNL: sysz_insn = 1044;
pub const sysz_insn_SYSZ_INS_CLTNLE: sysz_insn = 1045;
pub const sysz_insn_SYSZ_INS_CLTNLH: sysz_insn = 1046;
pub const sysz_insn_SYSZ_INS_CMPSC: sysz_insn = 1047;
pub const sysz_insn_SYSZ_INS_CP: sysz_insn = 1048;
pub const sysz_insn_SYSZ_INS_CPDT: sysz_insn = 1049;
pub const sysz_insn_SYSZ_INS_CPXT: sysz_insn = 1050;
pub const sysz_insn_SYSZ_INS_CPYA: sysz_insn = 1051;
pub const sysz_insn_SYSZ_INS_CRB: sysz_insn = 1052;
pub const sysz_insn_SYSZ_INS_CRBE: sysz_insn = 1053;
pub const sysz_insn_SYSZ_INS_CRBH: sysz_insn = 1054;
pub const sysz_insn_SYSZ_INS_CRBHE: sysz_insn = 1055;
pub const sysz_insn_SYSZ_INS_CRBL: sysz_insn = 1056;
pub const sysz_insn_SYSZ_INS_CRBLE: sysz_insn = 1057;
pub const sysz_insn_SYSZ_INS_CRBLH: sysz_insn = 1058;
pub const sysz_insn_SYSZ_INS_CRBNE: sysz_insn = 1059;
pub const sysz_insn_SYSZ_INS_CRBNH: sysz_insn = 1060;
pub const sysz_insn_SYSZ_INS_CRBNHE: sysz_insn = 1061;
pub const sysz_insn_SYSZ_INS_CRBNL: sysz_insn = 1062;
pub const sysz_insn_SYSZ_INS_CRBNLE: sysz_insn = 1063;
pub const sysz_insn_SYSZ_INS_CRBNLH: sysz_insn = 1064;
pub const sysz_insn_SYSZ_INS_CRDTE: sysz_insn = 1065;
pub const sysz_insn_SYSZ_INS_CRT: sysz_insn = 1066;
pub const sysz_insn_SYSZ_INS_CRTE: sysz_insn = 1067;
pub const sysz_insn_SYSZ_INS_CRTH: sysz_insn = 1068;
pub const sysz_insn_SYSZ_INS_CRTHE: sysz_insn = 1069;
pub const sysz_insn_SYSZ_INS_CRTL: sysz_insn = 1070;
pub const sysz_insn_SYSZ_INS_CRTLE: sysz_insn = 1071;
pub const sysz_insn_SYSZ_INS_CRTLH: sysz_insn = 1072;
pub const sysz_insn_SYSZ_INS_CRTNE: sysz_insn = 1073;
pub const sysz_insn_SYSZ_INS_CRTNH: sysz_insn = 1074;
pub const sysz_insn_SYSZ_INS_CRTNHE: sysz_insn = 1075;
pub const sysz_insn_SYSZ_INS_CRTNL: sysz_insn = 1076;
pub const sysz_insn_SYSZ_INS_CRTNLE: sysz_insn = 1077;
pub const sysz_insn_SYSZ_INS_CRTNLH: sysz_insn = 1078;
pub const sysz_insn_SYSZ_INS_CSCH: sysz_insn = 1079;
pub const sysz_insn_SYSZ_INS_CSDTR: sysz_insn = 1080;
pub const sysz_insn_SYSZ_INS_CSP: sysz_insn = 1081;
pub const sysz_insn_SYSZ_INS_CSPG: sysz_insn = 1082;
pub const sysz_insn_SYSZ_INS_CSST: sysz_insn = 1083;
pub const sysz_insn_SYSZ_INS_CSXTR: sysz_insn = 1084;
pub const sysz_insn_SYSZ_INS_CU12: sysz_insn = 1085;
pub const sysz_insn_SYSZ_INS_CU14: sysz_insn = 1086;
pub const sysz_insn_SYSZ_INS_CU21: sysz_insn = 1087;
pub const sysz_insn_SYSZ_INS_CU24: sysz_insn = 1088;
pub const sysz_insn_SYSZ_INS_CU41: sysz_insn = 1089;
pub const sysz_insn_SYSZ_INS_CU42: sysz_insn = 1090;
pub const sysz_insn_SYSZ_INS_CUDTR: sysz_insn = 1091;
pub const sysz_insn_SYSZ_INS_CUSE: sysz_insn = 1092;
pub const sysz_insn_SYSZ_INS_CUTFU: sysz_insn = 1093;
pub const sysz_insn_SYSZ_INS_CUUTF: sysz_insn = 1094;
pub const sysz_insn_SYSZ_INS_CUXTR: sysz_insn = 1095;
pub const sysz_insn_SYSZ_INS_CVB: sysz_insn = 1096;
pub const sysz_insn_SYSZ_INS_CVBG: sysz_insn = 1097;
pub const sysz_insn_SYSZ_INS_CVBY: sysz_insn = 1098;
pub const sysz_insn_SYSZ_INS_CVD: sysz_insn = 1099;
pub const sysz_insn_SYSZ_INS_CVDG: sysz_insn = 1100;
pub const sysz_insn_SYSZ_INS_CVDY: sysz_insn = 1101;
pub const sysz_insn_SYSZ_INS_CXFBRA: sysz_insn = 1102;
pub const sysz_insn_SYSZ_INS_CXFR: sysz_insn = 1103;
pub const sysz_insn_SYSZ_INS_CXFTR: sysz_insn = 1104;
pub const sysz_insn_SYSZ_INS_CXGBRA: sysz_insn = 1105;
pub const sysz_insn_SYSZ_INS_CXGR: sysz_insn = 1106;
pub const sysz_insn_SYSZ_INS_CXGTR: sysz_insn = 1107;
pub const sysz_insn_SYSZ_INS_CXGTRA: sysz_insn = 1108;
pub const sysz_insn_SYSZ_INS_CXLFTR: sysz_insn = 1109;
pub const sysz_insn_SYSZ_INS_CXLGTR: sysz_insn = 1110;
pub const sysz_insn_SYSZ_INS_CXPT: sysz_insn = 1111;
pub const sysz_insn_SYSZ_INS_CXR: sysz_insn = 1112;
pub const sysz_insn_SYSZ_INS_CXSTR: sysz_insn = 1113;
pub const sysz_insn_SYSZ_INS_CXTR: sysz_insn = 1114;
pub const sysz_insn_SYSZ_INS_CXUTR: sysz_insn = 1115;
pub const sysz_insn_SYSZ_INS_CXZT: sysz_insn = 1116;
pub const sysz_insn_SYSZ_INS_CZDT: sysz_insn = 1117;
pub const sysz_insn_SYSZ_INS_CZXT: sysz_insn = 1118;
pub const sysz_insn_SYSZ_INS_D: sysz_insn = 1119;
pub const sysz_insn_SYSZ_INS_DD: sysz_insn = 1120;
pub const sysz_insn_SYSZ_INS_DDR: sysz_insn = 1121;
pub const sysz_insn_SYSZ_INS_DDTR: sysz_insn = 1122;
pub const sysz_insn_SYSZ_INS_DDTRA: sysz_insn = 1123;
pub const sysz_insn_SYSZ_INS_DE: sysz_insn = 1124;
pub const sysz_insn_SYSZ_INS_DER: sysz_insn = 1125;
pub const sysz_insn_SYSZ_INS_DIAG: sysz_insn = 1126;
pub const sysz_insn_SYSZ_INS_DIDBR: sysz_insn = 1127;
pub const sysz_insn_SYSZ_INS_DIEBR: sysz_insn = 1128;
pub const sysz_insn_SYSZ_INS_DP: sysz_insn = 1129;
pub const sysz_insn_SYSZ_INS_DR: sysz_insn = 1130;
pub const sysz_insn_SYSZ_INS_DXR: sysz_insn = 1131;
pub const sysz_insn_SYSZ_INS_DXTR: sysz_insn = 1132;
pub const sysz_insn_SYSZ_INS_DXTRA: sysz_insn = 1133;
pub const sysz_insn_SYSZ_INS_ECAG: sysz_insn = 1134;
pub const sysz_insn_SYSZ_INS_ECCTR: sysz_insn = 1135;
pub const sysz_insn_SYSZ_INS_ECPGA: sysz_insn = 1136;
pub const sysz_insn_SYSZ_INS_ECTG: sysz_insn = 1137;
pub const sysz_insn_SYSZ_INS_ED: sysz_insn = 1138;
pub const sysz_insn_SYSZ_INS_EDMK: sysz_insn = 1139;
pub const sysz_insn_SYSZ_INS_EEDTR: sysz_insn = 1140;
pub const sysz_insn_SYSZ_INS_EEXTR: sysz_insn = 1141;
pub const sysz_insn_SYSZ_INS_EFPC: sysz_insn = 1142;
pub const sysz_insn_SYSZ_INS_EPAIR: sysz_insn = 1143;
pub const sysz_insn_SYSZ_INS_EPAR: sysz_insn = 1144;
pub const sysz_insn_SYSZ_INS_EPCTR: sysz_insn = 1145;
pub const sysz_insn_SYSZ_INS_EPSW: sysz_insn = 1146;
pub const sysz_insn_SYSZ_INS_EREG: sysz_insn = 1147;
pub const sysz_insn_SYSZ_INS_EREGG: sysz_insn = 1148;
pub const sysz_insn_SYSZ_INS_ESAIR: sysz_insn = 1149;
pub const sysz_insn_SYSZ_INS_ESAR: sysz_insn = 1150;
pub const sysz_insn_SYSZ_INS_ESDTR: sysz_insn = 1151;
pub const sysz_insn_SYSZ_INS_ESEA: sysz_insn = 1152;
pub const sysz_insn_SYSZ_INS_ESTA: sysz_insn = 1153;
pub const sysz_insn_SYSZ_INS_ESXTR: sysz_insn = 1154;
pub const sysz_insn_SYSZ_INS_ETND: sysz_insn = 1155;
pub const sysz_insn_SYSZ_INS_EX: sysz_insn = 1156;
pub const sysz_insn_SYSZ_INS_EXRL: sysz_insn = 1157;
pub const sysz_insn_SYSZ_INS_FIDR: sysz_insn = 1158;
pub const sysz_insn_SYSZ_INS_FIDTR: sysz_insn = 1159;
pub const sysz_insn_SYSZ_INS_FIER: sysz_insn = 1160;
pub const sysz_insn_SYSZ_INS_FIXR: sysz_insn = 1161;
pub const sysz_insn_SYSZ_INS_FIXTR: sysz_insn = 1162;
pub const sysz_insn_SYSZ_INS_HDR: sysz_insn = 1163;
pub const sysz_insn_SYSZ_INS_HER: sysz_insn = 1164;
pub const sysz_insn_SYSZ_INS_HSCH: sysz_insn = 1165;
pub const sysz_insn_SYSZ_INS_IAC: sysz_insn = 1166;
pub const sysz_insn_SYSZ_INS_ICM: sysz_insn = 1167;
pub const sysz_insn_SYSZ_INS_ICMH: sysz_insn = 1168;
pub const sysz_insn_SYSZ_INS_ICMY: sysz_insn = 1169;
pub const sysz_insn_SYSZ_INS_IDTE: sysz_insn = 1170;
pub const sysz_insn_SYSZ_INS_IEDTR: sysz_insn = 1171;
pub const sysz_insn_SYSZ_INS_IEXTR: sysz_insn = 1172;
pub const sysz_insn_SYSZ_INS_IPK: sysz_insn = 1173;
pub const sysz_insn_SYSZ_INS_IPTE: sysz_insn = 1174;
pub const sysz_insn_SYSZ_INS_IRBM: sysz_insn = 1175;
pub const sysz_insn_SYSZ_INS_ISKE: sysz_insn = 1176;
pub const sysz_insn_SYSZ_INS_IVSK: sysz_insn = 1177;
pub const sysz_insn_SYSZ_INS_JGM: sysz_insn = 1178;
pub const sysz_insn_SYSZ_INS_JGNM: sysz_insn = 1179;
pub const sysz_insn_SYSZ_INS_JGNP: sysz_insn = 1180;
pub const sysz_insn_SYSZ_INS_JGNZ: sysz_insn = 1181;
pub const sysz_insn_SYSZ_INS_JGP: sysz_insn = 1182;
pub const sysz_insn_SYSZ_INS_JGZ: sysz_insn = 1183;
pub const sysz_insn_SYSZ_INS_JM: sysz_insn = 1184;
pub const sysz_insn_SYSZ_INS_JNM: sysz_insn = 1185;
pub const sysz_insn_SYSZ_INS_JNP: sysz_insn = 1186;
pub const sysz_insn_SYSZ_INS_JNZ: sysz_insn = 1187;
pub const sysz_insn_SYSZ_INS_JP: sysz_insn = 1188;
pub const sysz_insn_SYSZ_INS_JZ: sysz_insn = 1189;
pub const sysz_insn_SYSZ_INS_KDB: sysz_insn = 1190;
pub const sysz_insn_SYSZ_INS_KDBR: sysz_insn = 1191;
pub const sysz_insn_SYSZ_INS_KDTR: sysz_insn = 1192;
pub const sysz_insn_SYSZ_INS_KEB: sysz_insn = 1193;
pub const sysz_insn_SYSZ_INS_KEBR: sysz_insn = 1194;
pub const sysz_insn_SYSZ_INS_KIMD: sysz_insn = 1195;
pub const sysz_insn_SYSZ_INS_KLMD: sysz_insn = 1196;
pub const sysz_insn_SYSZ_INS_KM: sysz_insn = 1197;
pub const sysz_insn_SYSZ_INS_KMA: sysz_insn = 1198;
pub const sysz_insn_SYSZ_INS_KMAC: sysz_insn = 1199;
pub const sysz_insn_SYSZ_INS_KMC: sysz_insn = 1200;
pub const sysz_insn_SYSZ_INS_KMCTR: sysz_insn = 1201;
pub const sysz_insn_SYSZ_INS_KMF: sysz_insn = 1202;
pub const sysz_insn_SYSZ_INS_KMO: sysz_insn = 1203;
pub const sysz_insn_SYSZ_INS_KXBR: sysz_insn = 1204;
pub const sysz_insn_SYSZ_INS_KXTR: sysz_insn = 1205;
pub const sysz_insn_SYSZ_INS_LAE: sysz_insn = 1206;
pub const sysz_insn_SYSZ_INS_LAEY: sysz_insn = 1207;
pub const sysz_insn_SYSZ_INS_LAM: sysz_insn = 1208;
pub const sysz_insn_SYSZ_INS_LAMY: sysz_insn = 1209;
pub const sysz_insn_SYSZ_INS_LASP: sysz_insn = 1210;
pub const sysz_insn_SYSZ_INS_LAT: sysz_insn = 1211;
pub const sysz_insn_SYSZ_INS_LCBB: sysz_insn = 1212;
pub const sysz_insn_SYSZ_INS_LCCTL: sysz_insn = 1213;
pub const sysz_insn_SYSZ_INS_LCDFR: sysz_insn = 1214;
pub const sysz_insn_SYSZ_INS_LCDR: sysz_insn = 1215;
pub const sysz_insn_SYSZ_INS_LCER: sysz_insn = 1216;
pub const sysz_insn_SYSZ_INS_LCTL: sysz_insn = 1217;
pub const sysz_insn_SYSZ_INS_LCTLG: sysz_insn = 1218;
pub const sysz_insn_SYSZ_INS_LCXR: sysz_insn = 1219;
pub const sysz_insn_SYSZ_INS_LDE: sysz_insn = 1220;
pub const sysz_insn_SYSZ_INS_LDER: sysz_insn = 1221;
pub const sysz_insn_SYSZ_INS_LDETR: sysz_insn = 1222;
pub const sysz_insn_SYSZ_INS_LDXR: sysz_insn = 1223;
pub const sysz_insn_SYSZ_INS_LDXTR: sysz_insn = 1224;
pub const sysz_insn_SYSZ_INS_LEDR: sysz_insn = 1225;
pub const sysz_insn_SYSZ_INS_LEDTR: sysz_insn = 1226;
pub const sysz_insn_SYSZ_INS_LEXR: sysz_insn = 1227;
pub const sysz_insn_SYSZ_INS_LFAS: sysz_insn = 1228;
pub const sysz_insn_SYSZ_INS_LFHAT: sysz_insn = 1229;
pub const sysz_insn_SYSZ_INS_LFPC: sysz_insn = 1230;
pub const sysz_insn_SYSZ_INS_LGAT: sysz_insn = 1231;
pub const sysz_insn_SYSZ_INS_LGG: sysz_insn = 1232;
pub const sysz_insn_SYSZ_INS_LGSC: sysz_insn = 1233;
pub const sysz_insn_SYSZ_INS_LLGFAT: sysz_insn = 1234;
pub const sysz_insn_SYSZ_INS_LLGFSG: sysz_insn = 1235;
pub const sysz_insn_SYSZ_INS_LLGT: sysz_insn = 1236;
pub const sysz_insn_SYSZ_INS_LLGTAT: sysz_insn = 1237;
pub const sysz_insn_SYSZ_INS_LLGTR: sysz_insn = 1238;
pub const sysz_insn_SYSZ_INS_LLZRGF: sysz_insn = 1239;
pub const sysz_insn_SYSZ_INS_LM: sysz_insn = 1240;
pub const sysz_insn_SYSZ_INS_LMD: sysz_insn = 1241;
pub const sysz_insn_SYSZ_INS_LMH: sysz_insn = 1242;
pub const sysz_insn_SYSZ_INS_LMY: sysz_insn = 1243;
pub const sysz_insn_SYSZ_INS_LNDFR: sysz_insn = 1244;
pub const sysz_insn_SYSZ_INS_LNDR: sysz_insn = 1245;
pub const sysz_insn_SYSZ_INS_LNER: sysz_insn = 1246;
pub const sysz_insn_SYSZ_INS_LNXR: sysz_insn = 1247;
pub const sysz_insn_SYSZ_INS_LOCFH: sysz_insn = 1248;
pub const sysz_insn_SYSZ_INS_LOCFHE: sysz_insn = 1249;
pub const sysz_insn_SYSZ_INS_LOCFHH: sysz_insn = 1250;
pub const sysz_insn_SYSZ_INS_LOCFHHE: sysz_insn = 1251;
pub const sysz_insn_SYSZ_INS_LOCFHL: sysz_insn = 1252;
pub const sysz_insn_SYSZ_INS_LOCFHLE: sysz_insn = 1253;
pub const sysz_insn_SYSZ_INS_LOCFHLH: sysz_insn = 1254;
pub const sysz_insn_SYSZ_INS_LOCFHM: sysz_insn = 1255;
pub const sysz_insn_SYSZ_INS_LOCFHNE: sysz_insn = 1256;
pub const sysz_insn_SYSZ_INS_LOCFHNH: sysz_insn = 1257;
pub const sysz_insn_SYSZ_INS_LOCFHNHE: sysz_insn = 1258;
pub const sysz_insn_SYSZ_INS_LOCFHNL: sysz_insn = 1259;
pub const sysz_insn_SYSZ_INS_LOCFHNLE: sysz_insn = 1260;
pub const sysz_insn_SYSZ_INS_LOCFHNLH: sysz_insn = 1261;
pub const sysz_insn_SYSZ_INS_LOCFHNM: sysz_insn = 1262;
pub const sysz_insn_SYSZ_INS_LOCFHNO: sysz_insn = 1263;
pub const sysz_insn_SYSZ_INS_LOCFHNP: sysz_insn = 1264;
pub const sysz_insn_SYSZ_INS_LOCFHNZ: sysz_insn = 1265;
pub const sysz_insn_SYSZ_INS_LOCFHO: sysz_insn = 1266;
pub const sysz_insn_SYSZ_INS_LOCFHP: sysz_insn = 1267;
pub const sysz_insn_SYSZ_INS_LOCFHR: sysz_insn = 1268;
pub const sysz_insn_SYSZ_INS_LOCFHRE: sysz_insn = 1269;
pub const sysz_insn_SYSZ_INS_LOCFHRH: sysz_insn = 1270;
pub const sysz_insn_SYSZ_INS_LOCFHRHE: sysz_insn = 1271;
pub const sysz_insn_SYSZ_INS_LOCFHRL: sysz_insn = 1272;
pub const sysz_insn_SYSZ_INS_LOCFHRLE: sysz_insn = 1273;
pub const sysz_insn_SYSZ_INS_LOCFHRLH: sysz_insn = 1274;
pub const sysz_insn_SYSZ_INS_LOCFHRM: sysz_insn = 1275;
pub const sysz_insn_SYSZ_INS_LOCFHRNE: sysz_insn = 1276;
pub const sysz_insn_SYSZ_INS_LOCFHRNH: sysz_insn = 1277;
pub const sysz_insn_SYSZ_INS_LOCFHRNHE: sysz_insn = 1278;
pub const sysz_insn_SYSZ_INS_LOCFHRNL: sysz_insn = 1279;
pub const sysz_insn_SYSZ_INS_LOCFHRNLE: sysz_insn = 1280;
pub const sysz_insn_SYSZ_INS_LOCFHRNLH: sysz_insn = 1281;
pub const sysz_insn_SYSZ_INS_LOCFHRNM: sysz_insn = 1282;
pub const sysz_insn_SYSZ_INS_LOCFHRNO: sysz_insn = 1283;
pub const sysz_insn_SYSZ_INS_LOCFHRNP: sysz_insn = 1284;
pub const sysz_insn_SYSZ_INS_LOCFHRNZ: sysz_insn = 1285;
pub const sysz_insn_SYSZ_INS_LOCFHRO: sysz_insn = 1286;
pub const sysz_insn_SYSZ_INS_LOCFHRP: sysz_insn = 1287;
pub const sysz_insn_SYSZ_INS_LOCFHRZ: sysz_insn = 1288;
pub const sysz_insn_SYSZ_INS_LOCFHZ: sysz_insn = 1289;
pub const sysz_insn_SYSZ_INS_LOCGHI: sysz_insn = 1290;
pub const sysz_insn_SYSZ_INS_LOCGHIE: sysz_insn = 1291;
pub const sysz_insn_SYSZ_INS_LOCGHIH: sysz_insn = 1292;
pub const sysz_insn_SYSZ_INS_LOCGHIHE: sysz_insn = 1293;
pub const sysz_insn_SYSZ_INS_LOCGHIL: sysz_insn = 1294;
pub const sysz_insn_SYSZ_INS_LOCGHILE: sysz_insn = 1295;
pub const sysz_insn_SYSZ_INS_LOCGHILH: sysz_insn = 1296;
pub const sysz_insn_SYSZ_INS_LOCGHIM: sysz_insn = 1297;
pub const sysz_insn_SYSZ_INS_LOCGHINE: sysz_insn = 1298;
pub const sysz_insn_SYSZ_INS_LOCGHINH: sysz_insn = 1299;
pub const sysz_insn_SYSZ_INS_LOCGHINHE: sysz_insn = 1300;
pub const sysz_insn_SYSZ_INS_LOCGHINL: sysz_insn = 1301;
pub const sysz_insn_SYSZ_INS_LOCGHINLE: sysz_insn = 1302;
pub const sysz_insn_SYSZ_INS_LOCGHINLH: sysz_insn = 1303;
pub const sysz_insn_SYSZ_INS_LOCGHINM: sysz_insn = 1304;
pub const sysz_insn_SYSZ_INS_LOCGHINO: sysz_insn = 1305;
pub const sysz_insn_SYSZ_INS_LOCGHINP: sysz_insn = 1306;
pub const sysz_insn_SYSZ_INS_LOCGHINZ: sysz_insn = 1307;
pub const sysz_insn_SYSZ_INS_LOCGHIO: sysz_insn = 1308;
pub const sysz_insn_SYSZ_INS_LOCGHIP: sysz_insn = 1309;
pub const sysz_insn_SYSZ_INS_LOCGHIZ: sysz_insn = 1310;
pub const sysz_insn_SYSZ_INS_LOCGM: sysz_insn = 1311;
pub const sysz_insn_SYSZ_INS_LOCGNM: sysz_insn = 1312;
pub const sysz_insn_SYSZ_INS_LOCGNP: sysz_insn = 1313;
pub const sysz_insn_SYSZ_INS_LOCGNZ: sysz_insn = 1314;
pub const sysz_insn_SYSZ_INS_LOCGP: sysz_insn = 1315;
pub const sysz_insn_SYSZ_INS_LOCGRM: sysz_insn = 1316;
pub const sysz_insn_SYSZ_INS_LOCGRNM: sysz_insn = 1317;
pub const sysz_insn_SYSZ_INS_LOCGRNP: sysz_insn = 1318;
pub const sysz_insn_SYSZ_INS_LOCGRNZ: sysz_insn = 1319;
pub const sysz_insn_SYSZ_INS_LOCGRP: sysz_insn = 1320;
pub const sysz_insn_SYSZ_INS_LOCGRZ: sysz_insn = 1321;
pub const sysz_insn_SYSZ_INS_LOCGZ: sysz_insn = 1322;
pub const sysz_insn_SYSZ_INS_LOCHHI: sysz_insn = 1323;
pub const sysz_insn_SYSZ_INS_LOCHHIE: sysz_insn = 1324;
pub const sysz_insn_SYSZ_INS_LOCHHIH: sysz_insn = 1325;
pub const sysz_insn_SYSZ_INS_LOCHHIHE: sysz_insn = 1326;
pub const sysz_insn_SYSZ_INS_LOCHHIL: sysz_insn = 1327;
pub const sysz_insn_SYSZ_INS_LOCHHILE: sysz_insn = 1328;
pub const sysz_insn_SYSZ_INS_LOCHHILH: sysz_insn = 1329;
pub const sysz_insn_SYSZ_INS_LOCHHIM: sysz_insn = 1330;
pub const sysz_insn_SYSZ_INS_LOCHHINE: sysz_insn = 1331;
pub const sysz_insn_SYSZ_INS_LOCHHINH: sysz_insn = 1332;
pub const sysz_insn_SYSZ_INS_LOCHHINHE: sysz_insn = 1333;
pub const sysz_insn_SYSZ_INS_LOCHHINL: sysz_insn = 1334;
pub const sysz_insn_SYSZ_INS_LOCHHINLE: sysz_insn = 1335;
pub const sysz_insn_SYSZ_INS_LOCHHINLH: sysz_insn = 1336;
pub const sysz_insn_SYSZ_INS_LOCHHINM: sysz_insn = 1337;
pub const sysz_insn_SYSZ_INS_LOCHHINO: sysz_insn = 1338;
pub const sysz_insn_SYSZ_INS_LOCHHINP: sysz_insn = 1339;
pub const sysz_insn_SYSZ_INS_LOCHHINZ: sysz_insn = 1340;
pub const sysz_insn_SYSZ_INS_LOCHHIO: sysz_insn = 1341;
pub const sysz_insn_SYSZ_INS_LOCHHIP: sysz_insn = 1342;
pub const sysz_insn_SYSZ_INS_LOCHHIZ: sysz_insn = 1343;
pub const sysz_insn_SYSZ_INS_LOCHI: sysz_insn = 1344;
pub const sysz_insn_SYSZ_INS_LOCHIE: sysz_insn = 1345;
pub const sysz_insn_SYSZ_INS_LOCHIH: sysz_insn = 1346;
pub const sysz_insn_SYSZ_INS_LOCHIHE: sysz_insn = 1347;
pub const sysz_insn_SYSZ_INS_LOCHIL: sysz_insn = 1348;
pub const sysz_insn_SYSZ_INS_LOCHILE: sysz_insn = 1349;
pub const sysz_insn_SYSZ_INS_LOCHILH: sysz_insn = 1350;
pub const sysz_insn_SYSZ_INS_LOCHIM: sysz_insn = 1351;
pub const sysz_insn_SYSZ_INS_LOCHINE: sysz_insn = 1352;
pub const sysz_insn_SYSZ_INS_LOCHINH: sysz_insn = 1353;
pub const sysz_insn_SYSZ_INS_LOCHINHE: sysz_insn = 1354;
pub const sysz_insn_SYSZ_INS_LOCHINL: sysz_insn = 1355;
pub const sysz_insn_SYSZ_INS_LOCHINLE: sysz_insn = 1356;
pub const sysz_insn_SYSZ_INS_LOCHINLH: sysz_insn = 1357;
pub const sysz_insn_SYSZ_INS_LOCHINM: sysz_insn = 1358;
pub const sysz_insn_SYSZ_INS_LOCHINO: sysz_insn = 1359;
pub const sysz_insn_SYSZ_INS_LOCHINP: sysz_insn = 1360;
pub const sysz_insn_SYSZ_INS_LOCHINZ: sysz_insn = 1361;
pub const sysz_insn_SYSZ_INS_LOCHIO: sysz_insn = 1362;
pub const sysz_insn_SYSZ_INS_LOCHIP: sysz_insn = 1363;
pub const sysz_insn_SYSZ_INS_LOCHIZ: sysz_insn = 1364;
pub const sysz_insn_SYSZ_INS_LOCM: sysz_insn = 1365;
pub const sysz_insn_SYSZ_INS_LOCNM: sysz_insn = 1366;
pub const sysz_insn_SYSZ_INS_LOCNP: sysz_insn = 1367;
pub const sysz_insn_SYSZ_INS_LOCNZ: sysz_insn = 1368;
pub const sysz_insn_SYSZ_INS_LOCP: sysz_insn = 1369;
pub const sysz_insn_SYSZ_INS_LOCRM: sysz_insn = 1370;
pub const sysz_insn_SYSZ_INS_LOCRNM: sysz_insn = 1371;
pub const sysz_insn_SYSZ_INS_LOCRNP: sysz_insn = 1372;
pub const sysz_insn_SYSZ_INS_LOCRNZ: sysz_insn = 1373;
pub const sysz_insn_SYSZ_INS_LOCRP: sysz_insn = 1374;
pub const sysz_insn_SYSZ_INS_LOCRZ: sysz_insn = 1375;
pub const sysz_insn_SYSZ_INS_LOCZ: sysz_insn = 1376;
pub const sysz_insn_SYSZ_INS_LPCTL: sysz_insn = 1377;
pub const sysz_insn_SYSZ_INS_LPD: sysz_insn = 1378;
pub const sysz_insn_SYSZ_INS_LPDFR: sysz_insn = 1379;
pub const sysz_insn_SYSZ_INS_LPDG: sysz_insn = 1380;
pub const sysz_insn_SYSZ_INS_LPDR: sysz_insn = 1381;
pub const sysz_insn_SYSZ_INS_LPER: sysz_insn = 1382;
pub const sysz_insn_SYSZ_INS_LPP: sysz_insn = 1383;
pub const sysz_insn_SYSZ_INS_LPQ: sysz_insn = 1384;
pub const sysz_insn_SYSZ_INS_LPSW: sysz_insn = 1385;
pub const sysz_insn_SYSZ_INS_LPSWE: sysz_insn = 1386;
pub const sysz_insn_SYSZ_INS_LPTEA: sysz_insn = 1387;
pub const sysz_insn_SYSZ_INS_LPXR: sysz_insn = 1388;
pub const sysz_insn_SYSZ_INS_LRA: sysz_insn = 1389;
pub const sysz_insn_SYSZ_INS_LRAG: sysz_insn = 1390;
pub const sysz_insn_SYSZ_INS_LRAY: sysz_insn = 1391;
pub const sysz_insn_SYSZ_INS_LRDR: sysz_insn = 1392;
pub const sysz_insn_SYSZ_INS_LRER: sysz_insn = 1393;
pub const sysz_insn_SYSZ_INS_LRVH: sysz_insn = 1394;
pub const sysz_insn_SYSZ_INS_LSCTL: sysz_insn = 1395;
pub const sysz_insn_SYSZ_INS_LTDR: sysz_insn = 1396;
pub const sysz_insn_SYSZ_INS_LTDTR: sysz_insn = 1397;
pub const sysz_insn_SYSZ_INS_LTER: sysz_insn = 1398;
pub const sysz_insn_SYSZ_INS_LTXR: sysz_insn = 1399;
pub const sysz_insn_SYSZ_INS_LTXTR: sysz_insn = 1400;
pub const sysz_insn_SYSZ_INS_LURA: sysz_insn = 1401;
pub const sysz_insn_SYSZ_INS_LURAG: sysz_insn = 1402;
pub const sysz_insn_SYSZ_INS_LXD: sysz_insn = 1403;
pub const sysz_insn_SYSZ_INS_LXDR: sysz_insn = 1404;
pub const sysz_insn_SYSZ_INS_LXDTR: sysz_insn = 1405;
pub const sysz_insn_SYSZ_INS_LXE: sysz_insn = 1406;
pub const sysz_insn_SYSZ_INS_LXER: sysz_insn = 1407;
pub const sysz_insn_SYSZ_INS_LZRF: sysz_insn = 1408;
pub const sysz_insn_SYSZ_INS_LZRG: sysz_insn = 1409;
pub const sysz_insn_SYSZ_INS_M: sysz_insn = 1410;
pub const sysz_insn_SYSZ_INS_MAD: sysz_insn = 1411;
pub const sysz_insn_SYSZ_INS_MADR: sysz_insn = 1412;
pub const sysz_insn_SYSZ_INS_MAE: sysz_insn = 1413;
pub const sysz_insn_SYSZ_INS_MAER: sysz_insn = 1414;
pub const sysz_insn_SYSZ_INS_MAY: sysz_insn = 1415;
pub const sysz_insn_SYSZ_INS_MAYH: sysz_insn = 1416;
pub const sysz_insn_SYSZ_INS_MAYHR: sysz_insn = 1417;
pub const sysz_insn_SYSZ_INS_MAYL: sysz_insn = 1418;
pub const sysz_insn_SYSZ_INS_MAYLR: sysz_insn = 1419;
pub const sysz_insn_SYSZ_INS_MAYR: sysz_insn = 1420;
pub const sysz_insn_SYSZ_INS_MC: sysz_insn = 1421;
pub const sysz_insn_SYSZ_INS_MD: sysz_insn = 1422;
pub const sysz_insn_SYSZ_INS_MDE: sysz_insn = 1423;
pub const sysz_insn_SYSZ_INS_MDER: sysz_insn = 1424;
pub const sysz_insn_SYSZ_INS_MDR: sysz_insn = 1425;
pub const sysz_insn_SYSZ_INS_MDTR: sysz_insn = 1426;
pub const sysz_insn_SYSZ_INS_MDTRA: sysz_insn = 1427;
pub const sysz_insn_SYSZ_INS_ME: sysz_insn = 1428;
pub const sysz_insn_SYSZ_INS_MEE: sysz_insn = 1429;
pub const sysz_insn_SYSZ_INS_MEER: sysz_insn = 1430;
pub const sysz_insn_SYSZ_INS_MER: sysz_insn = 1431;
pub const sysz_insn_SYSZ_INS_MFY: sysz_insn = 1432;
pub const sysz_insn_SYSZ_INS_MG: sysz_insn = 1433;
pub const sysz_insn_SYSZ_INS_MGH: sysz_insn = 1434;
pub const sysz_insn_SYSZ_INS_MGRK: sysz_insn = 1435;
pub const sysz_insn_SYSZ_INS_ML: sysz_insn = 1436;
pub const sysz_insn_SYSZ_INS_MLR: sysz_insn = 1437;
pub const sysz_insn_SYSZ_INS_MP: sysz_insn = 1438;
pub const sysz_insn_SYSZ_INS_MR: sysz_insn = 1439;
pub const sysz_insn_SYSZ_INS_MSC: sysz_insn = 1440;
pub const sysz_insn_SYSZ_INS_MSCH: sysz_insn = 1441;
pub const sysz_insn_SYSZ_INS_MSD: sysz_insn = 1442;
pub const sysz_insn_SYSZ_INS_MSDR: sysz_insn = 1443;
pub const sysz_insn_SYSZ_INS_MSE: sysz_insn = 1444;
pub const sysz_insn_SYSZ_INS_MSER: sysz_insn = 1445;
pub const sysz_insn_SYSZ_INS_MSGC: sysz_insn = 1446;
pub const sysz_insn_SYSZ_INS_MSGRKC: sysz_insn = 1447;
pub const sysz_insn_SYSZ_INS_MSRKC: sysz_insn = 1448;
pub const sysz_insn_SYSZ_INS_MSTA: sysz_insn = 1449;
pub const sysz_insn_SYSZ_INS_MVCDK: sysz_insn = 1450;
pub const sysz_insn_SYSZ_INS_MVCIN: sysz_insn = 1451;
pub const sysz_insn_SYSZ_INS_MVCK: sysz_insn = 1452;
pub const sysz_insn_SYSZ_INS_MVCL: sysz_insn = 1453;
pub const sysz_insn_SYSZ_INS_MVCLE: sysz_insn = 1454;
pub const sysz_insn_SYSZ_INS_MVCLU: sysz_insn = 1455;
pub const sysz_insn_SYSZ_INS_MVCOS: sysz_insn = 1456;
pub const sysz_insn_SYSZ_INS_MVCP: sysz_insn = 1457;
pub const sysz_insn_SYSZ_INS_MVCS: sysz_insn = 1458;
pub const sysz_insn_SYSZ_INS_MVCSK: sysz_insn = 1459;
pub const sysz_insn_SYSZ_INS_MVN: sysz_insn = 1460;
pub const sysz_insn_SYSZ_INS_MVO: sysz_insn = 1461;
pub const sysz_insn_SYSZ_INS_MVPG: sysz_insn = 1462;
pub const sysz_insn_SYSZ_INS_MVZ: sysz_insn = 1463;
pub const sysz_insn_SYSZ_INS_MXD: sysz_insn = 1464;
pub const sysz_insn_SYSZ_INS_MXDR: sysz_insn = 1465;
pub const sysz_insn_SYSZ_INS_MXR: sysz_insn = 1466;
pub const sysz_insn_SYSZ_INS_MXTR: sysz_insn = 1467;
pub const sysz_insn_SYSZ_INS_MXTRA: sysz_insn = 1468;
pub const sysz_insn_SYSZ_INS_MY: sysz_insn = 1469;
pub const sysz_insn_SYSZ_INS_MYH: sysz_insn = 1470;
pub const sysz_insn_SYSZ_INS_MYHR: sysz_insn = 1471;
pub const sysz_insn_SYSZ_INS_MYL: sysz_insn = 1472;
pub const sysz_insn_SYSZ_INS_MYLR: sysz_insn = 1473;
pub const sysz_insn_SYSZ_INS_MYR: sysz_insn = 1474;
pub const sysz_insn_SYSZ_INS_NIAI: sysz_insn = 1475;
pub const sysz_insn_SYSZ_INS_NTSTG: sysz_insn = 1476;
pub const sysz_insn_SYSZ_INS_PACK: sysz_insn = 1477;
pub const sysz_insn_SYSZ_INS_PALB: sysz_insn = 1478;
pub const sysz_insn_SYSZ_INS_PC: sysz_insn = 1479;
pub const sysz_insn_SYSZ_INS_PCC: sysz_insn = 1480;
pub const sysz_insn_SYSZ_INS_PCKMO: sysz_insn = 1481;
pub const sysz_insn_SYSZ_INS_PFMF: sysz_insn = 1482;
pub const sysz_insn_SYSZ_INS_PFPO: sysz_insn = 1483;
pub const sysz_insn_SYSZ_INS_PGIN: sysz_insn = 1484;
pub const sysz_insn_SYSZ_INS_PGOUT: sysz_insn = 1485;
pub const sysz_insn_SYSZ_INS_PKA: sysz_insn = 1486;
pub const sysz_insn_SYSZ_INS_PKU: sysz_insn = 1487;
pub const sysz_insn_SYSZ_INS_PLO: sysz_insn = 1488;
pub const sysz_insn_SYSZ_INS_POPCNT: sysz_insn = 1489;
pub const sysz_insn_SYSZ_INS_PPA: sysz_insn = 1490;
pub const sysz_insn_SYSZ_INS_PPNO: sysz_insn = 1491;
pub const sysz_insn_SYSZ_INS_PR: sysz_insn = 1492;
pub const sysz_insn_SYSZ_INS_PRNO: sysz_insn = 1493;
pub const sysz_insn_SYSZ_INS_PT: sysz_insn = 1494;
pub const sysz_insn_SYSZ_INS_PTF: sysz_insn = 1495;
pub const sysz_insn_SYSZ_INS_PTFF: sysz_insn = 1496;
pub const sysz_insn_SYSZ_INS_PTI: sysz_insn = 1497;
pub const sysz_insn_SYSZ_INS_PTLB: sysz_insn = 1498;
pub const sysz_insn_SYSZ_INS_QADTR: sysz_insn = 1499;
pub const sysz_insn_SYSZ_INS_QAXTR: sysz_insn = 1500;
pub const sysz_insn_SYSZ_INS_QCTRI: sysz_insn = 1501;
pub const sysz_insn_SYSZ_INS_QSI: sysz_insn = 1502;
pub const sysz_insn_SYSZ_INS_RCHP: sysz_insn = 1503;
pub const sysz_insn_SYSZ_INS_RISBGN: sysz_insn = 1504;
pub const sysz_insn_SYSZ_INS_RP: sysz_insn = 1505;
pub const sysz_insn_SYSZ_INS_RRBE: sysz_insn = 1506;
pub const sysz_insn_SYSZ_INS_RRBM: sysz_insn = 1507;
pub const sysz_insn_SYSZ_INS_RRDTR: sysz_insn = 1508;
pub const sysz_insn_SYSZ_INS_RRXTR: sysz_insn = 1509;
pub const sysz_insn_SYSZ_INS_RSCH: sysz_insn = 1510;
pub const sysz_insn_SYSZ_INS_SAC: sysz_insn = 1511;
pub const sysz_insn_SYSZ_INS_SACF: sysz_insn = 1512;
pub const sysz_insn_SYSZ_INS_SAL: sysz_insn = 1513;
pub const sysz_insn_SYSZ_INS_SAM24: sysz_insn = 1514;
pub const sysz_insn_SYSZ_INS_SAM31: sysz_insn = 1515;
pub const sysz_insn_SYSZ_INS_SAM64: sysz_insn = 1516;
pub const sysz_insn_SYSZ_INS_SAR: sysz_insn = 1517;
pub const sysz_insn_SYSZ_INS_SCCTR: sysz_insn = 1518;
pub const sysz_insn_SYSZ_INS_SCHM: sysz_insn = 1519;
pub const sysz_insn_SYSZ_INS_SCK: sysz_insn = 1520;
pub const sysz_insn_SYSZ_INS_SCKC: sysz_insn = 1521;
pub const sysz_insn_SYSZ_INS_SCKPF: sysz_insn = 1522;
pub const sysz_insn_SYSZ_INS_SD: sysz_insn = 1523;
pub const sysz_insn_SYSZ_INS_SDR: sysz_insn = 1524;
pub const sysz_insn_SYSZ_INS_SDTR: sysz_insn = 1525;
pub const sysz_insn_SYSZ_INS_SDTRA: sysz_insn = 1526;
pub const sysz_insn_SYSZ_INS_SE: sysz_insn = 1527;
pub const sysz_insn_SYSZ_INS_SER: sysz_insn = 1528;
pub const sysz_insn_SYSZ_INS_SFASR: sysz_insn = 1529;
pub const sysz_insn_SYSZ_INS_SFPC: sysz_insn = 1530;
pub const sysz_insn_SYSZ_INS_SGH: sysz_insn = 1531;
pub const sysz_insn_SYSZ_INS_SHHHR: sysz_insn = 1532;
pub const sysz_insn_SYSZ_INS_SHHLR: sysz_insn = 1533;
pub const sysz_insn_SYSZ_INS_SIE: sysz_insn = 1534;
pub const sysz_insn_SYSZ_INS_SIGA: sysz_insn = 1535;
pub const sysz_insn_SYSZ_INS_SIGP: sysz_insn = 1536;
pub const sysz_insn_SYSZ_INS_SLA: sysz_insn = 1537;
pub const sysz_insn_SYSZ_INS_SLAG: sysz_insn = 1538;
pub const sysz_insn_SYSZ_INS_SLAK: sysz_insn = 1539;
pub const sysz_insn_SYSZ_INS_SLDA: sysz_insn = 1540;
pub const sysz_insn_SYSZ_INS_SLDL: sysz_insn = 1541;
pub const sysz_insn_SYSZ_INS_SLDT: sysz_insn = 1542;
pub const sysz_insn_SYSZ_INS_SLHHHR: sysz_insn = 1543;
pub const sysz_insn_SYSZ_INS_SLHHLR: sysz_insn = 1544;
pub const sysz_insn_SYSZ_INS_SLXT: sysz_insn = 1545;
pub const sysz_insn_SYSZ_INS_SP: sysz_insn = 1546;
pub const sysz_insn_SYSZ_INS_SPCTR: sysz_insn = 1547;
pub const sysz_insn_SYSZ_INS_SPKA: sysz_insn = 1548;
pub const sysz_insn_SYSZ_INS_SPM: sysz_insn = 1549;
pub const sysz_insn_SYSZ_INS_SPT: sysz_insn = 1550;
pub const sysz_insn_SYSZ_INS_SPX: sysz_insn = 1551;
pub const sysz_insn_SYSZ_INS_SQD: sysz_insn = 1552;
pub const sysz_insn_SYSZ_INS_SQDR: sysz_insn = 1553;
pub const sysz_insn_SYSZ_INS_SQE: sysz_insn = 1554;
pub const sysz_insn_SYSZ_INS_SQER: sysz_insn = 1555;
pub const sysz_insn_SYSZ_INS_SQXR: sysz_insn = 1556;
pub const sysz_insn_SYSZ_INS_SRDA: sysz_insn = 1557;
pub const sysz_insn_SYSZ_INS_SRDL: sysz_insn = 1558;
pub const sysz_insn_SYSZ_INS_SRDT: sysz_insn = 1559;
pub const sysz_insn_SYSZ_INS_SRNM: sysz_insn = 1560;
pub const sysz_insn_SYSZ_INS_SRNMB: sysz_insn = 1561;
pub const sysz_insn_SYSZ_INS_SRNMT: sysz_insn = 1562;
pub const sysz_insn_SYSZ_INS_SRP: sysz_insn = 1563;
pub const sysz_insn_SYSZ_INS_SRSTU: sysz_insn = 1564;
pub const sysz_insn_SYSZ_INS_SRXT: sysz_insn = 1565;
pub const sysz_insn_SYSZ_INS_SSAIR: sysz_insn = 1566;
pub const sysz_insn_SYSZ_INS_SSAR: sysz_insn = 1567;
pub const sysz_insn_SYSZ_INS_SSCH: sysz_insn = 1568;
pub const sysz_insn_SYSZ_INS_SSKE: sysz_insn = 1569;
pub const sysz_insn_SYSZ_INS_SSM: sysz_insn = 1570;
pub const sysz_insn_SYSZ_INS_STAM: sysz_insn = 1571;
pub const sysz_insn_SYSZ_INS_STAMY: sysz_insn = 1572;
pub const sysz_insn_SYSZ_INS_STAP: sysz_insn = 1573;
pub const sysz_insn_SYSZ_INS_STCK: sysz_insn = 1574;
pub const sysz_insn_SYSZ_INS_STCKC: sysz_insn = 1575;
pub const sysz_insn_SYSZ_INS_STCKE: sysz_insn = 1576;
pub const sysz_insn_SYSZ_INS_STCKF: sysz_insn = 1577;
pub const sysz_insn_SYSZ_INS_STCM: sysz_insn = 1578;
pub const sysz_insn_SYSZ_INS_STCMH: sysz_insn = 1579;
pub const sysz_insn_SYSZ_INS_STCMY: sysz_insn = 1580;
pub const sysz_insn_SYSZ_INS_STCPS: sysz_insn = 1581;
pub const sysz_insn_SYSZ_INS_STCRW: sysz_insn = 1582;
pub const sysz_insn_SYSZ_INS_STCTG: sysz_insn = 1583;
pub const sysz_insn_SYSZ_INS_STCTL: sysz_insn = 1584;
pub const sysz_insn_SYSZ_INS_STFL: sysz_insn = 1585;
pub const sysz_insn_SYSZ_INS_STFLE: sysz_insn = 1586;
pub const sysz_insn_SYSZ_INS_STFPC: sysz_insn = 1587;
pub const sysz_insn_SYSZ_INS_STGSC: sysz_insn = 1588;
pub const sysz_insn_SYSZ_INS_STIDP: sysz_insn = 1589;
pub const sysz_insn_SYSZ_INS_STM: sysz_insn = 1590;
pub const sysz_insn_SYSZ_INS_STMH: sysz_insn = 1591;
pub const sysz_insn_SYSZ_INS_STMY: sysz_insn = 1592;
pub const sysz_insn_SYSZ_INS_STNSM: sysz_insn = 1593;
pub const sysz_insn_SYSZ_INS_STOCFH: sysz_insn = 1594;
pub const sysz_insn_SYSZ_INS_STOCFHE: sysz_insn = 1595;
pub const sysz_insn_SYSZ_INS_STOCFHH: sysz_insn = 1596;
pub const sysz_insn_SYSZ_INS_STOCFHHE: sysz_insn = 1597;
pub const sysz_insn_SYSZ_INS_STOCFHL: sysz_insn = 1598;
pub const sysz_insn_SYSZ_INS_STOCFHLE: sysz_insn = 1599;
pub const sysz_insn_SYSZ_INS_STOCFHLH: sysz_insn = 1600;
pub const sysz_insn_SYSZ_INS_STOCFHM: sysz_insn = 1601;
pub const sysz_insn_SYSZ_INS_STOCFHNE: sysz_insn = 1602;
pub const sysz_insn_SYSZ_INS_STOCFHNH: sysz_insn = 1603;
pub const sysz_insn_SYSZ_INS_STOCFHNHE: sysz_insn = 1604;
pub const sysz_insn_SYSZ_INS_STOCFHNL: sysz_insn = 1605;
pub const sysz_insn_SYSZ_INS_STOCFHNLE: sysz_insn = 1606;
pub const sysz_insn_SYSZ_INS_STOCFHNLH: sysz_insn = 1607;
pub const sysz_insn_SYSZ_INS_STOCFHNM: sysz_insn = 1608;
pub const sysz_insn_SYSZ_INS_STOCFHNO: sysz_insn = 1609;
pub const sysz_insn_SYSZ_INS_STOCFHNP: sysz_insn = 1610;
pub const sysz_insn_SYSZ_INS_STOCFHNZ: sysz_insn = 1611;
pub const sysz_insn_SYSZ_INS_STOCFHO: sysz_insn = 1612;
pub const sysz_insn_SYSZ_INS_STOCFHP: sysz_insn = 1613;
pub const sysz_insn_SYSZ_INS_STOCFHZ: sysz_insn = 1614;
pub const sysz_insn_SYSZ_INS_STOCGM: sysz_insn = 1615;
pub const sysz_insn_SYSZ_INS_STOCGNM: sysz_insn = 1616;
pub const sysz_insn_SYSZ_INS_STOCGNP: sysz_insn = 1617;
pub const sysz_insn_SYSZ_INS_STOCGNZ: sysz_insn = 1618;
pub const sysz_insn_SYSZ_INS_STOCGP: sysz_insn = 1619;
pub const sysz_insn_SYSZ_INS_STOCGZ: sysz_insn = 1620;
pub const sysz_insn_SYSZ_INS_STOCM: sysz_insn = 1621;
pub const sysz_insn_SYSZ_INS_STOCNM: sysz_insn = 1622;
pub const sysz_insn_SYSZ_INS_STOCNP: sysz_insn = 1623;
pub const sysz_insn_SYSZ_INS_STOCNZ: sysz_insn = 1624;
pub const sysz_insn_SYSZ_INS_STOCP: sysz_insn = 1625;
pub const sysz_insn_SYSZ_INS_STOCZ: sysz_insn = 1626;
pub const sysz_insn_SYSZ_INS_STOSM: sysz_insn = 1627;
pub const sysz_insn_SYSZ_INS_STPQ: sysz_insn = 1628;
pub const sysz_insn_SYSZ_INS_STPT: sysz_insn = 1629;
pub const sysz_insn_SYSZ_INS_STPX: sysz_insn = 1630;
pub const sysz_insn_SYSZ_INS_STRAG: sysz_insn = 1631;
pub const sysz_insn_SYSZ_INS_STRVH: sysz_insn = 1632;
pub const sysz_insn_SYSZ_INS_STSCH: sysz_insn = 1633;
pub const sysz_insn_SYSZ_INS_STSI: sysz_insn = 1634;
pub const sysz_insn_SYSZ_INS_STURA: sysz_insn = 1635;
pub const sysz_insn_SYSZ_INS_STURG: sysz_insn = 1636;
pub const sysz_insn_SYSZ_INS_SU: sysz_insn = 1637;
pub const sysz_insn_SYSZ_INS_SUR: sysz_insn = 1638;
pub const sysz_insn_SYSZ_INS_SVC: sysz_insn = 1639;
pub const sysz_insn_SYSZ_INS_SW: sysz_insn = 1640;
pub const sysz_insn_SYSZ_INS_SWR: sysz_insn = 1641;
pub const sysz_insn_SYSZ_INS_SXR: sysz_insn = 1642;
pub const sysz_insn_SYSZ_INS_SXTR: sysz_insn = 1643;
pub const sysz_insn_SYSZ_INS_SXTRA: sysz_insn = 1644;
pub const sysz_insn_SYSZ_INS_TABORT: sysz_insn = 1645;
pub const sysz_insn_SYSZ_INS_TAM: sysz_insn = 1646;
pub const sysz_insn_SYSZ_INS_TAR: sysz_insn = 1647;
pub const sysz_insn_SYSZ_INS_TB: sysz_insn = 1648;
pub const sysz_insn_SYSZ_INS_TBDR: sysz_insn = 1649;
pub const sysz_insn_SYSZ_INS_TBEDR: sysz_insn = 1650;
pub const sysz_insn_SYSZ_INS_TBEGIN: sysz_insn = 1651;
pub const sysz_insn_SYSZ_INS_TBEGINC: sysz_insn = 1652;
pub const sysz_insn_SYSZ_INS_TCDB: sysz_insn = 1653;
pub const sysz_insn_SYSZ_INS_TCEB: sysz_insn = 1654;
pub const sysz_insn_SYSZ_INS_TCXB: sysz_insn = 1655;
pub const sysz_insn_SYSZ_INS_TDCDT: sysz_insn = 1656;
pub const sysz_insn_SYSZ_INS_TDCET: sysz_insn = 1657;
pub const sysz_insn_SYSZ_INS_TDCXT: sysz_insn = 1658;
pub const sysz_insn_SYSZ_INS_TDGDT: sysz_insn = 1659;
pub const sysz_insn_SYSZ_INS_TDGET: sysz_insn = 1660;
pub const sysz_insn_SYSZ_INS_TDGXT: sysz_insn = 1661;
pub const sysz_insn_SYSZ_INS_TEND: sysz_insn = 1662;
pub const sysz_insn_SYSZ_INS_THDER: sysz_insn = 1663;
pub const sysz_insn_SYSZ_INS_THDR: sysz_insn = 1664;
pub const sysz_insn_SYSZ_INS_TP: sysz_insn = 1665;
pub const sysz_insn_SYSZ_INS_TPI: sysz_insn = 1666;
pub const sysz_insn_SYSZ_INS_TPROT: sysz_insn = 1667;
pub const sysz_insn_SYSZ_INS_TR: sysz_insn = 1668;
pub const sysz_insn_SYSZ_INS_TRACE: sysz_insn = 1669;
pub const sysz_insn_SYSZ_INS_TRACG: sysz_insn = 1670;
pub const sysz_insn_SYSZ_INS_TRAP2: sysz_insn = 1671;
pub const sysz_insn_SYSZ_INS_TRAP4: sysz_insn = 1672;
pub const sysz_insn_SYSZ_INS_TRE: sysz_insn = 1673;
pub const sysz_insn_SYSZ_INS_TROO: sysz_insn = 1674;
pub const sysz_insn_SYSZ_INS_TROT: sysz_insn = 1675;
pub const sysz_insn_SYSZ_INS_TRT: sysz_insn = 1676;
pub const sysz_insn_SYSZ_INS_TRTE: sysz_insn = 1677;
pub const sysz_insn_SYSZ_INS_TRTO: sysz_insn = 1678;
pub const sysz_insn_SYSZ_INS_TRTR: sysz_insn = 1679;
pub const sysz_insn_SYSZ_INS_TRTRE: sysz_insn = 1680;
pub const sysz_insn_SYSZ_INS_TRTT: sysz_insn = 1681;
pub const sysz_insn_SYSZ_INS_TS: sysz_insn = 1682;
pub const sysz_insn_SYSZ_INS_TSCH: sysz_insn = 1683;
pub const sysz_insn_SYSZ_INS_UNPK: sysz_insn = 1684;
pub const sysz_insn_SYSZ_INS_UNPKA: sysz_insn = 1685;
pub const sysz_insn_SYSZ_INS_UNPKU: sysz_insn = 1686;
pub const sysz_insn_SYSZ_INS_UPT: sysz_insn = 1687;
pub const sysz_insn_SYSZ_INS_VA: sysz_insn = 1688;
pub const sysz_insn_SYSZ_INS_VAB: sysz_insn = 1689;
pub const sysz_insn_SYSZ_INS_VAC: sysz_insn = 1690;
pub const sysz_insn_SYSZ_INS_VACC: sysz_insn = 1691;
pub const sysz_insn_SYSZ_INS_VACCB: sysz_insn = 1692;
pub const sysz_insn_SYSZ_INS_VACCC: sysz_insn = 1693;
pub const sysz_insn_SYSZ_INS_VACCCQ: sysz_insn = 1694;
pub const sysz_insn_SYSZ_INS_VACCF: sysz_insn = 1695;
pub const sysz_insn_SYSZ_INS_VACCG: sysz_insn = 1696;
pub const sysz_insn_SYSZ_INS_VACCH: sysz_insn = 1697;
pub const sysz_insn_SYSZ_INS_VACCQ: sysz_insn = 1698;
pub const sysz_insn_SYSZ_INS_VACQ: sysz_insn = 1699;
pub const sysz_insn_SYSZ_INS_VAF: sysz_insn = 1700;
pub const sysz_insn_SYSZ_INS_VAG: sysz_insn = 1701;
pub const sysz_insn_SYSZ_INS_VAH: sysz_insn = 1702;
pub const sysz_insn_SYSZ_INS_VAP: sysz_insn = 1703;
pub const sysz_insn_SYSZ_INS_VAQ: sysz_insn = 1704;
pub const sysz_insn_SYSZ_INS_VAVG: sysz_insn = 1705;
pub const sysz_insn_SYSZ_INS_VAVGB: sysz_insn = 1706;
pub const sysz_insn_SYSZ_INS_VAVGF: sysz_insn = 1707;
pub const sysz_insn_SYSZ_INS_VAVGG: sysz_insn = 1708;
pub const sysz_insn_SYSZ_INS_VAVGH: sysz_insn = 1709;
pub const sysz_insn_SYSZ_INS_VAVGL: sysz_insn = 1710;
pub const sysz_insn_SYSZ_INS_VAVGLB: sysz_insn = 1711;
pub const sysz_insn_SYSZ_INS_VAVGLF: sysz_insn = 1712;
pub const sysz_insn_SYSZ_INS_VAVGLG: sysz_insn = 1713;
pub const sysz_insn_SYSZ_INS_VAVGLH: sysz_insn = 1714;
pub const sysz_insn_SYSZ_INS_VBPERM: sysz_insn = 1715;
pub const sysz_insn_SYSZ_INS_VCDG: sysz_insn = 1716;
pub const sysz_insn_SYSZ_INS_VCDGB: sysz_insn = 1717;
pub const sysz_insn_SYSZ_INS_VCDLG: sysz_insn = 1718;
pub const sysz_insn_SYSZ_INS_VCDLGB: sysz_insn = 1719;
pub const sysz_insn_SYSZ_INS_VCEQ: sysz_insn = 1720;
pub const sysz_insn_SYSZ_INS_VCEQB: sysz_insn = 1721;
pub const sysz_insn_SYSZ_INS_VCEQBS: sysz_insn = 1722;
pub const sysz_insn_SYSZ_INS_VCEQF: sysz_insn = 1723;
pub const sysz_insn_SYSZ_INS_VCEQFS: sysz_insn = 1724;
pub const sysz_insn_SYSZ_INS_VCEQG: sysz_insn = 1725;
pub const sysz_insn_SYSZ_INS_VCEQGS: sysz_insn = 1726;
pub const sysz_insn_SYSZ_INS_VCEQH: sysz_insn = 1727;
pub const sysz_insn_SYSZ_INS_VCEQHS: sysz_insn = 1728;
pub const sysz_insn_SYSZ_INS_VCGD: sysz_insn = 1729;
pub const sysz_insn_SYSZ_INS_VCGDB: sysz_insn = 1730;
pub const sysz_insn_SYSZ_INS_VCH: sysz_insn = 1731;
pub const sysz_insn_SYSZ_INS_VCHB: sysz_insn = 1732;
pub const sysz_insn_SYSZ_INS_VCHBS: sysz_insn = 1733;
pub const sysz_insn_SYSZ_INS_VCHF: sysz_insn = 1734;
pub const sysz_insn_SYSZ_INS_VCHFS: sysz_insn = 1735;
pub const sysz_insn_SYSZ_INS_VCHG: sysz_insn = 1736;
pub const sysz_insn_SYSZ_INS_VCHGS: sysz_insn = 1737;
pub const sysz_insn_SYSZ_INS_VCHH: sysz_insn = 1738;
pub const sysz_insn_SYSZ_INS_VCHHS: sysz_insn = 1739;
pub const sysz_insn_SYSZ_INS_VCHL: sysz_insn = 1740;
pub const sysz_insn_SYSZ_INS_VCHLB: sysz_insn = 1741;
pub const sysz_insn_SYSZ_INS_VCHLBS: sysz_insn = 1742;
pub const sysz_insn_SYSZ_INS_VCHLF: sysz_insn = 1743;
pub const sysz_insn_SYSZ_INS_VCHLFS: sysz_insn = 1744;
pub const sysz_insn_SYSZ_INS_VCHLG: sysz_insn = 1745;
pub const sysz_insn_SYSZ_INS_VCHLGS: sysz_insn = 1746;
pub const sysz_insn_SYSZ_INS_VCHLH: sysz_insn = 1747;
pub const sysz_insn_SYSZ_INS_VCHLHS: sysz_insn = 1748;
pub const sysz_insn_SYSZ_INS_VCKSM: sysz_insn = 1749;
pub const sysz_insn_SYSZ_INS_VCLGD: sysz_insn = 1750;
pub const sysz_insn_SYSZ_INS_VCLGDB: sysz_insn = 1751;
pub const sysz_insn_SYSZ_INS_VCLZ: sysz_insn = 1752;
pub const sysz_insn_SYSZ_INS_VCLZB: sysz_insn = 1753;
pub const sysz_insn_SYSZ_INS_VCLZF: sysz_insn = 1754;
pub const sysz_insn_SYSZ_INS_VCLZG: sysz_insn = 1755;
pub const sysz_insn_SYSZ_INS_VCLZH: sysz_insn = 1756;
pub const sysz_insn_SYSZ_INS_VCP: sysz_insn = 1757;
pub const sysz_insn_SYSZ_INS_VCTZ: sysz_insn = 1758;
pub const sysz_insn_SYSZ_INS_VCTZB: sysz_insn = 1759;
pub const sysz_insn_SYSZ_INS_VCTZF: sysz_insn = 1760;
pub const sysz_insn_SYSZ_INS_VCTZG: sysz_insn = 1761;
pub const sysz_insn_SYSZ_INS_VCTZH: sysz_insn = 1762;
pub const sysz_insn_SYSZ_INS_VCVB: sysz_insn = 1763;
pub const sysz_insn_SYSZ_INS_VCVBG: sysz_insn = 1764;
pub const sysz_insn_SYSZ_INS_VCVD: sysz_insn = 1765;
pub const sysz_insn_SYSZ_INS_VCVDG: sysz_insn = 1766;
pub const sysz_insn_SYSZ_INS_VDP: sysz_insn = 1767;
pub const sysz_insn_SYSZ_INS_VEC: sysz_insn = 1768;
pub const sysz_insn_SYSZ_INS_VECB: sysz_insn = 1769;
pub const sysz_insn_SYSZ_INS_VECF: sysz_insn = 1770;
pub const sysz_insn_SYSZ_INS_VECG: sysz_insn = 1771;
pub const sysz_insn_SYSZ_INS_VECH: sysz_insn = 1772;
pub const sysz_insn_SYSZ_INS_VECL: sysz_insn = 1773;
pub const sysz_insn_SYSZ_INS_VECLB: sysz_insn = 1774;
pub const sysz_insn_SYSZ_INS_VECLF: sysz_insn = 1775;
pub const sysz_insn_SYSZ_INS_VECLG: sysz_insn = 1776;
pub const sysz_insn_SYSZ_INS_VECLH: sysz_insn = 1777;
pub const sysz_insn_SYSZ_INS_VERIM: sysz_insn = 1778;
pub const sysz_insn_SYSZ_INS_VERIMB: sysz_insn = 1779;
pub const sysz_insn_SYSZ_INS_VERIMF: sysz_insn = 1780;
pub const sysz_insn_SYSZ_INS_VERIMG: sysz_insn = 1781;
pub const sysz_insn_SYSZ_INS_VERIMH: sysz_insn = 1782;
pub const sysz_insn_SYSZ_INS_VERLL: sysz_insn = 1783;
pub const sysz_insn_SYSZ_INS_VERLLB: sysz_insn = 1784;
pub const sysz_insn_SYSZ_INS_VERLLF: sysz_insn = 1785;
pub const sysz_insn_SYSZ_INS_VERLLG: sysz_insn = 1786;
pub const sysz_insn_SYSZ_INS_VERLLH: sysz_insn = 1787;
pub const sysz_insn_SYSZ_INS_VERLLV: sysz_insn = 1788;
pub const sysz_insn_SYSZ_INS_VERLLVB: sysz_insn = 1789;
pub const sysz_insn_SYSZ_INS_VERLLVF: sysz_insn = 1790;
pub const sysz_insn_SYSZ_INS_VERLLVG: sysz_insn = 1791;
pub const sysz_insn_SYSZ_INS_VERLLVH: sysz_insn = 1792;
pub const sysz_insn_SYSZ_INS_VESL: sysz_insn = 1793;
pub const sysz_insn_SYSZ_INS_VESLB: sysz_insn = 1794;
pub const sysz_insn_SYSZ_INS_VESLF: sysz_insn = 1795;
pub const sysz_insn_SYSZ_INS_VESLG: sysz_insn = 1796;
pub const sysz_insn_SYSZ_INS_VESLH: sysz_insn = 1797;
pub const sysz_insn_SYSZ_INS_VESLV: sysz_insn = 1798;
pub const sysz_insn_SYSZ_INS_VESLVB: sysz_insn = 1799;
pub const sysz_insn_SYSZ_INS_VESLVF: sysz_insn = 1800;
pub const sysz_insn_SYSZ_INS_VESLVG: sysz_insn = 1801;
pub const sysz_insn_SYSZ_INS_VESLVH: sysz_insn = 1802;
pub const sysz_insn_SYSZ_INS_VESRA: sysz_insn = 1803;
pub const sysz_insn_SYSZ_INS_VESRAB: sysz_insn = 1804;
pub const sysz_insn_SYSZ_INS_VESRAF: sysz_insn = 1805;
pub const sysz_insn_SYSZ_INS_VESRAG: sysz_insn = 1806;
pub const sysz_insn_SYSZ_INS_VESRAH: sysz_insn = 1807;
pub const sysz_insn_SYSZ_INS_VESRAV: sysz_insn = 1808;
pub const sysz_insn_SYSZ_INS_VESRAVB: sysz_insn = 1809;
pub const sysz_insn_SYSZ_INS_VESRAVF: sysz_insn = 1810;
pub const sysz_insn_SYSZ_INS_VESRAVG: sysz_insn = 1811;
pub const sysz_insn_SYSZ_INS_VESRAVH: sysz_insn = 1812;
pub const sysz_insn_SYSZ_INS_VESRL: sysz_insn = 1813;
pub const sysz_insn_SYSZ_INS_VESRLB: sysz_insn = 1814;
pub const sysz_insn_SYSZ_INS_VESRLF: sysz_insn = 1815;
pub const sysz_insn_SYSZ_INS_VESRLG: sysz_insn = 1816;
pub const sysz_insn_SYSZ_INS_VESRLH: sysz_insn = 1817;
pub const sysz_insn_SYSZ_INS_VESRLV: sysz_insn = 1818;
pub const sysz_insn_SYSZ_INS_VESRLVB: sysz_insn = 1819;
pub const sysz_insn_SYSZ_INS_VESRLVF: sysz_insn = 1820;
pub const sysz_insn_SYSZ_INS_VESRLVG: sysz_insn = 1821;
pub const sysz_insn_SYSZ_INS_VESRLVH: sysz_insn = 1822;
pub const sysz_insn_SYSZ_INS_VFA: sysz_insn = 1823;
pub const sysz_insn_SYSZ_INS_VFADB: sysz_insn = 1824;
pub const sysz_insn_SYSZ_INS_VFAE: sysz_insn = 1825;
pub const sysz_insn_SYSZ_INS_VFAEB: sysz_insn = 1826;
pub const sysz_insn_SYSZ_INS_VFAEBS: sysz_insn = 1827;
pub const sysz_insn_SYSZ_INS_VFAEF: sysz_insn = 1828;
pub const sysz_insn_SYSZ_INS_VFAEFS: sysz_insn = 1829;
pub const sysz_insn_SYSZ_INS_VFAEH: sysz_insn = 1830;
pub const sysz_insn_SYSZ_INS_VFAEHS: sysz_insn = 1831;
pub const sysz_insn_SYSZ_INS_VFAEZB: sysz_insn = 1832;
pub const sysz_insn_SYSZ_INS_VFAEZBS: sysz_insn = 1833;
pub const sysz_insn_SYSZ_INS_VFAEZF: sysz_insn = 1834;
pub const sysz_insn_SYSZ_INS_VFAEZFS: sysz_insn = 1835;
pub const sysz_insn_SYSZ_INS_VFAEZH: sysz_insn = 1836;
pub const sysz_insn_SYSZ_INS_VFAEZHS: sysz_insn = 1837;
pub const sysz_insn_SYSZ_INS_VFASB: sysz_insn = 1838;
pub const sysz_insn_SYSZ_INS_VFCE: sysz_insn = 1839;
pub const sysz_insn_SYSZ_INS_VFCEDB: sysz_insn = 1840;
pub const sysz_insn_SYSZ_INS_VFCEDBS: sysz_insn = 1841;
pub const sysz_insn_SYSZ_INS_VFCESB: sysz_insn = 1842;
pub const sysz_insn_SYSZ_INS_VFCESBS: sysz_insn = 1843;
pub const sysz_insn_SYSZ_INS_VFCH: sysz_insn = 1844;
pub const sysz_insn_SYSZ_INS_VFCHDB: sysz_insn = 1845;
pub const sysz_insn_SYSZ_INS_VFCHDBS: sysz_insn = 1846;
pub const sysz_insn_SYSZ_INS_VFCHE: sysz_insn = 1847;
pub const sysz_insn_SYSZ_INS_VFCHEDB: sysz_insn = 1848;
pub const sysz_insn_SYSZ_INS_VFCHEDBS: sysz_insn = 1849;
pub const sysz_insn_SYSZ_INS_VFCHESB: sysz_insn = 1850;
pub const sysz_insn_SYSZ_INS_VFCHESBS: sysz_insn = 1851;
pub const sysz_insn_SYSZ_INS_VFCHSB: sysz_insn = 1852;
pub const sysz_insn_SYSZ_INS_VFCHSBS: sysz_insn = 1853;
pub const sysz_insn_SYSZ_INS_VFD: sysz_insn = 1854;
pub const sysz_insn_SYSZ_INS_VFDDB: sysz_insn = 1855;
pub const sysz_insn_SYSZ_INS_VFDSB: sysz_insn = 1856;
pub const sysz_insn_SYSZ_INS_VFEE: sysz_insn = 1857;
pub const sysz_insn_SYSZ_INS_VFEEB: sysz_insn = 1858;
pub const sysz_insn_SYSZ_INS_VFEEBS: sysz_insn = 1859;
pub const sysz_insn_SYSZ_INS_VFEEF: sysz_insn = 1860;
pub const sysz_insn_SYSZ_INS_VFEEFS: sysz_insn = 1861;
pub const sysz_insn_SYSZ_INS_VFEEH: sysz_insn = 1862;
pub const sysz_insn_SYSZ_INS_VFEEHS: sysz_insn = 1863;
pub const sysz_insn_SYSZ_INS_VFEEZB: sysz_insn = 1864;
pub const sysz_insn_SYSZ_INS_VFEEZBS: sysz_insn = 1865;
pub const sysz_insn_SYSZ_INS_VFEEZF: sysz_insn = 1866;
pub const sysz_insn_SYSZ_INS_VFEEZFS: sysz_insn = 1867;
pub const sysz_insn_SYSZ_INS_VFEEZH: sysz_insn = 1868;
pub const sysz_insn_SYSZ_INS_VFEEZHS: sysz_insn = 1869;
pub const sysz_insn_SYSZ_INS_VFENE: sysz_insn = 1870;
pub const sysz_insn_SYSZ_INS_VFENEB: sysz_insn = 1871;
pub const sysz_insn_SYSZ_INS_VFENEBS: sysz_insn = 1872;
pub const sysz_insn_SYSZ_INS_VFENEF: sysz_insn = 1873;
pub const sysz_insn_SYSZ_INS_VFENEFS: sysz_insn = 1874;
pub const sysz_insn_SYSZ_INS_VFENEH: sysz_insn = 1875;
pub const sysz_insn_SYSZ_INS_VFENEHS: sysz_insn = 1876;
pub const sysz_insn_SYSZ_INS_VFENEZB: sysz_insn = 1877;
pub const sysz_insn_SYSZ_INS_VFENEZBS: sysz_insn = 1878;
pub const sysz_insn_SYSZ_INS_VFENEZF: sysz_insn = 1879;
pub const sysz_insn_SYSZ_INS_VFENEZFS: sysz_insn = 1880;
pub const sysz_insn_SYSZ_INS_VFENEZH: sysz_insn = 1881;
pub const sysz_insn_SYSZ_INS_VFENEZHS: sysz_insn = 1882;
pub const sysz_insn_SYSZ_INS_VFI: sysz_insn = 1883;
pub const sysz_insn_SYSZ_INS_VFIDB: sysz_insn = 1884;
pub const sysz_insn_SYSZ_INS_VFISB: sysz_insn = 1885;
pub const sysz_insn_SYSZ_INS_VFKEDB: sysz_insn = 1886;
pub const sysz_insn_SYSZ_INS_VFKEDBS: sysz_insn = 1887;
pub const sysz_insn_SYSZ_INS_VFKESB: sysz_insn = 1888;
pub const sysz_insn_SYSZ_INS_VFKESBS: sysz_insn = 1889;
pub const sysz_insn_SYSZ_INS_VFKHDB: sysz_insn = 1890;
pub const sysz_insn_SYSZ_INS_VFKHDBS: sysz_insn = 1891;
pub const sysz_insn_SYSZ_INS_VFKHEDB: sysz_insn = 1892;
pub const sysz_insn_SYSZ_INS_VFKHEDBS: sysz_insn = 1893;
pub const sysz_insn_SYSZ_INS_VFKHESB: sysz_insn = 1894;
pub const sysz_insn_SYSZ_INS_VFKHESBS: sysz_insn = 1895;
pub const sysz_insn_SYSZ_INS_VFKHSB: sysz_insn = 1896;
pub const sysz_insn_SYSZ_INS_VFKHSBS: sysz_insn = 1897;
pub const sysz_insn_SYSZ_INS_VFLCDB: sysz_insn = 1898;
pub const sysz_insn_SYSZ_INS_VFLCSB: sysz_insn = 1899;
pub const sysz_insn_SYSZ_INS_VFLL: sysz_insn = 1900;
pub const sysz_insn_SYSZ_INS_VFLLS: sysz_insn = 1901;
pub const sysz_insn_SYSZ_INS_VFLNDB: sysz_insn = 1902;
pub const sysz_insn_SYSZ_INS_VFLNSB: sysz_insn = 1903;
pub const sysz_insn_SYSZ_INS_VFLPDB: sysz_insn = 1904;
pub const sysz_insn_SYSZ_INS_VFLPSB: sysz_insn = 1905;
pub const sysz_insn_SYSZ_INS_VFLR: sysz_insn = 1906;
pub const sysz_insn_SYSZ_INS_VFLRD: sysz_insn = 1907;
pub const sysz_insn_SYSZ_INS_VFM: sysz_insn = 1908;
pub const sysz_insn_SYSZ_INS_VFMA: sysz_insn = 1909;
pub const sysz_insn_SYSZ_INS_VFMADB: sysz_insn = 1910;
pub const sysz_insn_SYSZ_INS_VFMASB: sysz_insn = 1911;
pub const sysz_insn_SYSZ_INS_VFMAX: sysz_insn = 1912;
pub const sysz_insn_SYSZ_INS_VFMAXDB: sysz_insn = 1913;
pub const sysz_insn_SYSZ_INS_VFMAXSB: sysz_insn = 1914;
pub const sysz_insn_SYSZ_INS_VFMDB: sysz_insn = 1915;
pub const sysz_insn_SYSZ_INS_VFMIN: sysz_insn = 1916;
pub const sysz_insn_SYSZ_INS_VFMINDB: sysz_insn = 1917;
pub const sysz_insn_SYSZ_INS_VFMINSB: sysz_insn = 1918;
pub const sysz_insn_SYSZ_INS_VFMS: sysz_insn = 1919;
pub const sysz_insn_SYSZ_INS_VFMSB: sysz_insn = 1920;
pub const sysz_insn_SYSZ_INS_VFMSDB: sysz_insn = 1921;
pub const sysz_insn_SYSZ_INS_VFMSSB: sysz_insn = 1922;
pub const sysz_insn_SYSZ_INS_VFNMA: sysz_insn = 1923;
pub const sysz_insn_SYSZ_INS_VFNMADB: sysz_insn = 1924;
pub const sysz_insn_SYSZ_INS_VFNMASB: sysz_insn = 1925;
pub const sysz_insn_SYSZ_INS_VFNMS: sysz_insn = 1926;
pub const sysz_insn_SYSZ_INS_VFNMSDB: sysz_insn = 1927;
pub const sysz_insn_SYSZ_INS_VFNMSSB: sysz_insn = 1928;
pub const sysz_insn_SYSZ_INS_VFPSO: sysz_insn = 1929;
pub const sysz_insn_SYSZ_INS_VFPSODB: sysz_insn = 1930;
pub const sysz_insn_SYSZ_INS_VFPSOSB: sysz_insn = 1931;
pub const sysz_insn_SYSZ_INS_VFS: sysz_insn = 1932;
pub const sysz_insn_SYSZ_INS_VFSDB: sysz_insn = 1933;
pub const sysz_insn_SYSZ_INS_VFSQ: sysz_insn = 1934;
pub const sysz_insn_SYSZ_INS_VFSQDB: sysz_insn = 1935;
pub const sysz_insn_SYSZ_INS_VFSQSB: sysz_insn = 1936;
pub const sysz_insn_SYSZ_INS_VFSSB: sysz_insn = 1937;
pub const sysz_insn_SYSZ_INS_VFTCI: sysz_insn = 1938;
pub const sysz_insn_SYSZ_INS_VFTCIDB: sysz_insn = 1939;
pub const sysz_insn_SYSZ_INS_VFTCISB: sysz_insn = 1940;
pub const sysz_insn_SYSZ_INS_VGBM: sysz_insn = 1941;
pub const sysz_insn_SYSZ_INS_VGEF: sysz_insn = 1942;
pub const sysz_insn_SYSZ_INS_VGEG: sysz_insn = 1943;
pub const sysz_insn_SYSZ_INS_VGFM: sysz_insn = 1944;
pub const sysz_insn_SYSZ_INS_VGFMA: sysz_insn = 1945;
pub const sysz_insn_SYSZ_INS_VGFMAB: sysz_insn = 1946;
pub const sysz_insn_SYSZ_INS_VGFMAF: sysz_insn = 1947;
pub const sysz_insn_SYSZ_INS_VGFMAG: sysz_insn = 1948;
pub const sysz_insn_SYSZ_INS_VGFMAH: sysz_insn = 1949;
pub const sysz_insn_SYSZ_INS_VGFMB: sysz_insn = 1950;
pub const sysz_insn_SYSZ_INS_VGFMF: sysz_insn = 1951;
pub const sysz_insn_SYSZ_INS_VGFMG: sysz_insn = 1952;
pub const sysz_insn_SYSZ_INS_VGFMH: sysz_insn = 1953;
pub const sysz_insn_SYSZ_INS_VGM: sysz_insn = 1954;
pub const sysz_insn_SYSZ_INS_VGMB: sysz_insn = 1955;
pub const sysz_insn_SYSZ_INS_VGMF: sysz_insn = 1956;
pub const sysz_insn_SYSZ_INS_VGMG: sysz_insn = 1957;
pub const sysz_insn_SYSZ_INS_VGMH: sysz_insn = 1958;
pub const sysz_insn_SYSZ_INS_VISTR: sysz_insn = 1959;
pub const sysz_insn_SYSZ_INS_VISTRB: sysz_insn = 1960;
pub const sysz_insn_SYSZ_INS_VISTRBS: sysz_insn = 1961;
pub const sysz_insn_SYSZ_INS_VISTRF: sysz_insn = 1962;
pub const sysz_insn_SYSZ_INS_VISTRFS: sysz_insn = 1963;
pub const sysz_insn_SYSZ_INS_VISTRH: sysz_insn = 1964;
pub const sysz_insn_SYSZ_INS_VISTRHS: sysz_insn = 1965;
pub const sysz_insn_SYSZ_INS_VL: sysz_insn = 1966;
pub const sysz_insn_SYSZ_INS_VLBB: sysz_insn = 1967;
pub const sysz_insn_SYSZ_INS_VLC: sysz_insn = 1968;
pub const sysz_insn_SYSZ_INS_VLCB: sysz_insn = 1969;
pub const sysz_insn_SYSZ_INS_VLCF: sysz_insn = 1970;
pub const sysz_insn_SYSZ_INS_VLCG: sysz_insn = 1971;
pub const sysz_insn_SYSZ_INS_VLCH: sysz_insn = 1972;
pub const sysz_insn_SYSZ_INS_VLDE: sysz_insn = 1973;
pub const sysz_insn_SYSZ_INS_VLDEB: sysz_insn = 1974;
pub const sysz_insn_SYSZ_INS_VLEB: sysz_insn = 1975;
pub const sysz_insn_SYSZ_INS_VLED: sysz_insn = 1976;
pub const sysz_insn_SYSZ_INS_VLEDB: sysz_insn = 1977;
pub const sysz_insn_SYSZ_INS_VLEF: sysz_insn = 1978;
pub const sysz_insn_SYSZ_INS_VLEG: sysz_insn = 1979;
pub const sysz_insn_SYSZ_INS_VLEH: sysz_insn = 1980;
pub const sysz_insn_SYSZ_INS_VLEIB: sysz_insn = 1981;
pub const sysz_insn_SYSZ_INS_VLEIF: sysz_insn = 1982;
pub const sysz_insn_SYSZ_INS_VLEIG: sysz_insn = 1983;
pub const sysz_insn_SYSZ_INS_VLEIH: sysz_insn = 1984;
pub const sysz_insn_SYSZ_INS_VLGV: sysz_insn = 1985;
pub const sysz_insn_SYSZ_INS_VLGVB: sysz_insn = 1986;
pub const sysz_insn_SYSZ_INS_VLGVF: sysz_insn = 1987;
pub const sysz_insn_SYSZ_INS_VLGVG: sysz_insn = 1988;
pub const sysz_insn_SYSZ_INS_VLGVH: sysz_insn = 1989;
pub const sysz_insn_SYSZ_INS_VLIP: sysz_insn = 1990;
pub const sysz_insn_SYSZ_INS_VLL: sysz_insn = 1991;
pub const sysz_insn_SYSZ_INS_VLLEZ: sysz_insn = 1992;
pub const sysz_insn_SYSZ_INS_VLLEZB: sysz_insn = 1993;
pub const sysz_insn_SYSZ_INS_VLLEZF: sysz_insn = 1994;
pub const sysz_insn_SYSZ_INS_VLLEZG: sysz_insn = 1995;
pub const sysz_insn_SYSZ_INS_VLLEZH: sysz_insn = 1996;
pub const sysz_insn_SYSZ_INS_VLLEZLF: sysz_insn = 1997;
pub const sysz_insn_SYSZ_INS_VLM: sysz_insn = 1998;
pub const sysz_insn_SYSZ_INS_VLP: sysz_insn = 1999;
pub const sysz_insn_SYSZ_INS_VLPB: sysz_insn = 2000;
pub const sysz_insn_SYSZ_INS_VLPF: sysz_insn = 2001;
pub const sysz_insn_SYSZ_INS_VLPG: sysz_insn = 2002;
pub const sysz_insn_SYSZ_INS_VLPH: sysz_insn = 2003;
pub const sysz_insn_SYSZ_INS_VLR: sysz_insn = 2004;
pub const sysz_insn_SYSZ_INS_VLREP: sysz_insn = 2005;
pub const sysz_insn_SYSZ_INS_VLREPB: sysz_insn = 2006;
pub const sysz_insn_SYSZ_INS_VLREPF: sysz_insn = 2007;
pub const sysz_insn_SYSZ_INS_VLREPG: sysz_insn = 2008;
pub const sysz_insn_SYSZ_INS_VLREPH: sysz_insn = 2009;
pub const sysz_insn_SYSZ_INS_VLRL: sysz_insn = 2010;
pub const sysz_insn_SYSZ_INS_VLRLR: sysz_insn = 2011;
pub const sysz_insn_SYSZ_INS_VLVG: sysz_insn = 2012;
pub const sysz_insn_SYSZ_INS_VLVGB: sysz_insn = 2013;
pub const sysz_insn_SYSZ_INS_VLVGF: sysz_insn = 2014;
pub const sysz_insn_SYSZ_INS_VLVGG: sysz_insn = 2015;
pub const sysz_insn_SYSZ_INS_VLVGH: sysz_insn = 2016;
pub const sysz_insn_SYSZ_INS_VLVGP: sysz_insn = 2017;
pub const sysz_insn_SYSZ_INS_VMAE: sysz_insn = 2018;
pub const sysz_insn_SYSZ_INS_VMAEB: sysz_insn = 2019;
pub const sysz_insn_SYSZ_INS_VMAEF: sysz_insn = 2020;
pub const sysz_insn_SYSZ_INS_VMAEH: sysz_insn = 2021;
pub const sysz_insn_SYSZ_INS_VMAH: sysz_insn = 2022;
pub const sysz_insn_SYSZ_INS_VMAHB: sysz_insn = 2023;
pub const sysz_insn_SYSZ_INS_VMAHF: sysz_insn = 2024;
pub const sysz_insn_SYSZ_INS_VMAHH: sysz_insn = 2025;
pub const sysz_insn_SYSZ_INS_VMAL: sysz_insn = 2026;
pub const sysz_insn_SYSZ_INS_VMALB: sysz_insn = 2027;
pub const sysz_insn_SYSZ_INS_VMALE: sysz_insn = 2028;
pub const sysz_insn_SYSZ_INS_VMALEB: sysz_insn = 2029;
pub const sysz_insn_SYSZ_INS_VMALEF: sysz_insn = 2030;
pub const sysz_insn_SYSZ_INS_VMALEH: sysz_insn = 2031;
pub const sysz_insn_SYSZ_INS_VMALF: sysz_insn = 2032;
pub const sysz_insn_SYSZ_INS_VMALH: sysz_insn = 2033;
pub const sysz_insn_SYSZ_INS_VMALHB: sysz_insn = 2034;
pub const sysz_insn_SYSZ_INS_VMALHF: sysz_insn = 2035;
pub const sysz_insn_SYSZ_INS_VMALHH: sysz_insn = 2036;
pub const sysz_insn_SYSZ_INS_VMALHW: sysz_insn = 2037;
pub const sysz_insn_SYSZ_INS_VMALO: sysz_insn = 2038;
pub const sysz_insn_SYSZ_INS_VMALOB: sysz_insn = 2039;
pub const sysz_insn_SYSZ_INS_VMALOF: sysz_insn = 2040;
pub const sysz_insn_SYSZ_INS_VMALOH: sysz_insn = 2041;
pub const sysz_insn_SYSZ_INS_VMAO: sysz_insn = 2042;
pub const sysz_insn_SYSZ_INS_VMAOB: sysz_insn = 2043;
pub const sysz_insn_SYSZ_INS_VMAOF: sysz_insn = 2044;
pub const sysz_insn_SYSZ_INS_VMAOH: sysz_insn = 2045;
pub const sysz_insn_SYSZ_INS_VME: sysz_insn = 2046;
pub const sysz_insn_SYSZ_INS_VMEB: sysz_insn = 2047;
pub const sysz_insn_SYSZ_INS_VMEF: sysz_insn = 2048;
pub const sysz_insn_SYSZ_INS_VMEH: sysz_insn = 2049;
pub const sysz_insn_SYSZ_INS_VMH: sysz_insn = 2050;
pub const sysz_insn_SYSZ_INS_VMHB: sysz_insn = 2051;
pub const sysz_insn_SYSZ_INS_VMHF: sysz_insn = 2052;
pub const sysz_insn_SYSZ_INS_VMHH: sysz_insn = 2053;
pub const sysz_insn_SYSZ_INS_VML: sysz_insn = 2054;
pub const sysz_insn_SYSZ_INS_VMLB: sysz_insn = 2055;
pub const sysz_insn_SYSZ_INS_VMLE: sysz_insn = 2056;
pub const sysz_insn_SYSZ_INS_VMLEB: sysz_insn = 2057;
pub const sysz_insn_SYSZ_INS_VMLEF: sysz_insn = 2058;
pub const sysz_insn_SYSZ_INS_VMLEH: sysz_insn = 2059;
pub const sysz_insn_SYSZ_INS_VMLF: sysz_insn = 2060;
pub const sysz_insn_SYSZ_INS_VMLH: sysz_insn = 2061;
pub const sysz_insn_SYSZ_INS_VMLHB: sysz_insn = 2062;
pub const sysz_insn_SYSZ_INS_VMLHF: sysz_insn = 2063;
pub const sysz_insn_SYSZ_INS_VMLHH: sysz_insn = 2064;
pub const sysz_insn_SYSZ_INS_VMLHW: sysz_insn = 2065;
pub const sysz_insn_SYSZ_INS_VMLO: sysz_insn = 2066;
pub const sysz_insn_SYSZ_INS_VMLOB: sysz_insn = 2067;
pub const sysz_insn_SYSZ_INS_VMLOF: sysz_insn = 2068;
pub const sysz_insn_SYSZ_INS_VMLOH: sysz_insn = 2069;
pub const sysz_insn_SYSZ_INS_VMN: sysz_insn = 2070;
pub const sysz_insn_SYSZ_INS_VMNB: sysz_insn = 2071;
pub const sysz_insn_SYSZ_INS_VMNF: sysz_insn = 2072;
pub const sysz_insn_SYSZ_INS_VMNG: sysz_insn = 2073;
pub const sysz_insn_SYSZ_INS_VMNH: sysz_insn = 2074;
pub const sysz_insn_SYSZ_INS_VMNL: sysz_insn = 2075;
pub const sysz_insn_SYSZ_INS_VMNLB: sysz_insn = 2076;
pub const sysz_insn_SYSZ_INS_VMNLF: sysz_insn = 2077;
pub const sysz_insn_SYSZ_INS_VMNLG: sysz_insn = 2078;
pub const sysz_insn_SYSZ_INS_VMNLH: sysz_insn = 2079;
pub const sysz_insn_SYSZ_INS_VMO: sysz_insn = 2080;
pub const sysz_insn_SYSZ_INS_VMOB: sysz_insn = 2081;
pub const sysz_insn_SYSZ_INS_VMOF: sysz_insn = 2082;
pub const sysz_insn_SYSZ_INS_VMOH: sysz_insn = 2083;
pub const sysz_insn_SYSZ_INS_VMP: sysz_insn = 2084;
pub const sysz_insn_SYSZ_INS_VMRH: sysz_insn = 2085;
pub const sysz_insn_SYSZ_INS_VMRHB: sysz_insn = 2086;
pub const sysz_insn_SYSZ_INS_VMRHF: sysz_insn = 2087;
pub const sysz_insn_SYSZ_INS_VMRHG: sysz_insn = 2088;
pub const sysz_insn_SYSZ_INS_VMRHH: sysz_insn = 2089;
pub const sysz_insn_SYSZ_INS_VMRL: sysz_insn = 2090;
pub const sysz_insn_SYSZ_INS_VMRLB: sysz_insn = 2091;
pub const sysz_insn_SYSZ_INS_VMRLF: sysz_insn = 2092;
pub const sysz_insn_SYSZ_INS_VMRLG: sysz_insn = 2093;
pub const sysz_insn_SYSZ_INS_VMRLH: sysz_insn = 2094;
pub const sysz_insn_SYSZ_INS_VMSL: sysz_insn = 2095;
pub const sysz_insn_SYSZ_INS_VMSLG: sysz_insn = 2096;
pub const sysz_insn_SYSZ_INS_VMSP: sysz_insn = 2097;
pub const sysz_insn_SYSZ_INS_VMX: sysz_insn = 2098;
pub const sysz_insn_SYSZ_INS_VMXB: sysz_insn = 2099;
pub const sysz_insn_SYSZ_INS_VMXF: sysz_insn = 2100;
pub const sysz_insn_SYSZ_INS_VMXG: sysz_insn = 2101;
pub const sysz_insn_SYSZ_INS_VMXH: sysz_insn = 2102;
pub const sysz_insn_SYSZ_INS_VMXL: sysz_insn = 2103;
pub const sysz_insn_SYSZ_INS_VMXLB: sysz_insn = 2104;
pub const sysz_insn_SYSZ_INS_VMXLF: sysz_insn = 2105;
pub const sysz_insn_SYSZ_INS_VMXLG: sysz_insn = 2106;
pub const sysz_insn_SYSZ_INS_VMXLH: sysz_insn = 2107;
pub const sysz_insn_SYSZ_INS_VN: sysz_insn = 2108;
pub const sysz_insn_SYSZ_INS_VNC: sysz_insn = 2109;
pub const sysz_insn_SYSZ_INS_VNN: sysz_insn = 2110;
pub const sysz_insn_SYSZ_INS_VNO: sysz_insn = 2111;
pub const sysz_insn_SYSZ_INS_VNX: sysz_insn = 2112;
pub const sysz_insn_SYSZ_INS_VO: sysz_insn = 2113;
pub const sysz_insn_SYSZ_INS_VOC: sysz_insn = 2114;
pub const sysz_insn_SYSZ_INS_VONE: sysz_insn = 2115;
pub const sysz_insn_SYSZ_INS_VPDI: sysz_insn = 2116;
pub const sysz_insn_SYSZ_INS_VPERM: sysz_insn = 2117;
pub const sysz_insn_SYSZ_INS_VPK: sysz_insn = 2118;
pub const sysz_insn_SYSZ_INS_VPKF: sysz_insn = 2119;
pub const sysz_insn_SYSZ_INS_VPKG: sysz_insn = 2120;
pub const sysz_insn_SYSZ_INS_VPKH: sysz_insn = 2121;
pub const sysz_insn_SYSZ_INS_VPKLS: sysz_insn = 2122;
pub const sysz_insn_SYSZ_INS_VPKLSF: sysz_insn = 2123;
pub const sysz_insn_SYSZ_INS_VPKLSFS: sysz_insn = 2124;
pub const sysz_insn_SYSZ_INS_VPKLSG: sysz_insn = 2125;
pub const sysz_insn_SYSZ_INS_VPKLSGS: sysz_insn = 2126;
pub const sysz_insn_SYSZ_INS_VPKLSH: sysz_insn = 2127;
pub const sysz_insn_SYSZ_INS_VPKLSHS: sysz_insn = 2128;
pub const sysz_insn_SYSZ_INS_VPKS: sysz_insn = 2129;
pub const sysz_insn_SYSZ_INS_VPKSF: sysz_insn = 2130;
pub const sysz_insn_SYSZ_INS_VPKSFS: sysz_insn = 2131;
pub const sysz_insn_SYSZ_INS_VPKSG: sysz_insn = 2132;
pub const sysz_insn_SYSZ_INS_VPKSGS: sysz_insn = 2133;
pub const sysz_insn_SYSZ_INS_VPKSH: sysz_insn = 2134;
pub const sysz_insn_SYSZ_INS_VPKSHS: sysz_insn = 2135;
pub const sysz_insn_SYSZ_INS_VPKZ: sysz_insn = 2136;
pub const sysz_insn_SYSZ_INS_VPOPCT: sysz_insn = 2137;
pub const sysz_insn_SYSZ_INS_VPOPCTB: sysz_insn = 2138;
pub const sysz_insn_SYSZ_INS_VPOPCTF: sysz_insn = 2139;
pub const sysz_insn_SYSZ_INS_VPOPCTG: sysz_insn = 2140;
pub const sysz_insn_SYSZ_INS_VPOPCTH: sysz_insn = 2141;
pub const sysz_insn_SYSZ_INS_VPSOP: sysz_insn = 2142;
pub const sysz_insn_SYSZ_INS_VREP: sysz_insn = 2143;
pub const sysz_insn_SYSZ_INS_VREPB: sysz_insn = 2144;
pub const sysz_insn_SYSZ_INS_VREPF: sysz_insn = 2145;
pub const sysz_insn_SYSZ_INS_VREPG: sysz_insn = 2146;
pub const sysz_insn_SYSZ_INS_VREPH: sysz_insn = 2147;
pub const sysz_insn_SYSZ_INS_VREPI: sysz_insn = 2148;
pub const sysz_insn_SYSZ_INS_VREPIB: sysz_insn = 2149;
pub const sysz_insn_SYSZ_INS_VREPIF: sysz_insn = 2150;
pub const sysz_insn_SYSZ_INS_VREPIG: sysz_insn = 2151;
pub const sysz_insn_SYSZ_INS_VREPIH: sysz_insn = 2152;
pub const sysz_insn_SYSZ_INS_VRP: sysz_insn = 2153;
pub const sysz_insn_SYSZ_INS_VS: sysz_insn = 2154;
pub const sysz_insn_SYSZ_INS_VSB: sysz_insn = 2155;
pub const sysz_insn_SYSZ_INS_VSBCBI: sysz_insn = 2156;
pub const sysz_insn_SYSZ_INS_VSBCBIQ: sysz_insn = 2157;
pub const sysz_insn_SYSZ_INS_VSBI: sysz_insn = 2158;
pub const sysz_insn_SYSZ_INS_VSBIQ: sysz_insn = 2159;
pub const sysz_insn_SYSZ_INS_VSCBI: sysz_insn = 2160;
pub const sysz_insn_SYSZ_INS_VSCBIB: sysz_insn = 2161;
pub const sysz_insn_SYSZ_INS_VSCBIF: sysz_insn = 2162;
pub const sysz_insn_SYSZ_INS_VSCBIG: sysz_insn = 2163;
pub const sysz_insn_SYSZ_INS_VSCBIH: sysz_insn = 2164;
pub const sysz_insn_SYSZ_INS_VSCBIQ: sysz_insn = 2165;
pub const sysz_insn_SYSZ_INS_VSCEF: sysz_insn = 2166;
pub const sysz_insn_SYSZ_INS_VSCEG: sysz_insn = 2167;
pub const sysz_insn_SYSZ_INS_VSDP: sysz_insn = 2168;
pub const sysz_insn_SYSZ_INS_VSEG: sysz_insn = 2169;
pub const sysz_insn_SYSZ_INS_VSEGB: sysz_insn = 2170;
pub const sysz_insn_SYSZ_INS_VSEGF: sysz_insn = 2171;
pub const sysz_insn_SYSZ_INS_VSEGH: sysz_insn = 2172;
pub const sysz_insn_SYSZ_INS_VSEL: sysz_insn = 2173;
pub const sysz_insn_SYSZ_INS_VSF: sysz_insn = 2174;
pub const sysz_insn_SYSZ_INS_VSG: sysz_insn = 2175;
pub const sysz_insn_SYSZ_INS_VSH: sysz_insn = 2176;
pub const sysz_insn_SYSZ_INS_VSL: sysz_insn = 2177;
pub const sysz_insn_SYSZ_INS_VSLB: sysz_insn = 2178;
pub const sysz_insn_SYSZ_INS_VSLDB: sysz_insn = 2179;
pub const sysz_insn_SYSZ_INS_VSP: sysz_insn = 2180;
pub const sysz_insn_SYSZ_INS_VSQ: sysz_insn = 2181;
pub const sysz_insn_SYSZ_INS_VSRA: sysz_insn = 2182;
pub const sysz_insn_SYSZ_INS_VSRAB: sysz_insn = 2183;
pub const sysz_insn_SYSZ_INS_VSRL: sysz_insn = 2184;
pub const sysz_insn_SYSZ_INS_VSRLB: sysz_insn = 2185;
pub const sysz_insn_SYSZ_INS_VSRP: sysz_insn = 2186;
pub const sysz_insn_SYSZ_INS_VST: sysz_insn = 2187;
pub const sysz_insn_SYSZ_INS_VSTEB: sysz_insn = 2188;
pub const sysz_insn_SYSZ_INS_VSTEF: sysz_insn = 2189;
pub const sysz_insn_SYSZ_INS_VSTEG: sysz_insn = 2190;
pub const sysz_insn_SYSZ_INS_VSTEH: sysz_insn = 2191;
pub const sysz_insn_SYSZ_INS_VSTL: sysz_insn = 2192;
pub const sysz_insn_SYSZ_INS_VSTM: sysz_insn = 2193;
pub const sysz_insn_SYSZ_INS_VSTRC: sysz_insn = 2194;
pub const sysz_insn_SYSZ_INS_VSTRCB: sysz_insn = 2195;
pub const sysz_insn_SYSZ_INS_VSTRCBS: sysz_insn = 2196;
pub const sysz_insn_SYSZ_INS_VSTRCF: sysz_insn = 2197;
pub const sysz_insn_SYSZ_INS_VSTRCFS: sysz_insn = 2198;
pub const sysz_insn_SYSZ_INS_VSTRCH: sysz_insn = 2199;
pub const sysz_insn_SYSZ_INS_VSTRCHS: sysz_insn = 2200;
pub const sysz_insn_SYSZ_INS_VSTRCZB: sysz_insn = 2201;
pub const sysz_insn_SYSZ_INS_VSTRCZBS: sysz_insn = 2202;
pub const sysz_insn_SYSZ_INS_VSTRCZF: sysz_insn = 2203;
pub const sysz_insn_SYSZ_INS_VSTRCZFS: sysz_insn = 2204;
pub const sysz_insn_SYSZ_INS_VSTRCZH: sysz_insn = 2205;
pub const sysz_insn_SYSZ_INS_VSTRCZHS: sysz_insn = 2206;
pub const sysz_insn_SYSZ_INS_VSTRL: sysz_insn = 2207;
pub const sysz_insn_SYSZ_INS_VSTRLR: sysz_insn = 2208;
pub const sysz_insn_SYSZ_INS_VSUM: sysz_insn = 2209;
pub const sysz_insn_SYSZ_INS_VSUMB: sysz_insn = 2210;
pub const sysz_insn_SYSZ_INS_VSUMG: sysz_insn = 2211;
pub const sysz_insn_SYSZ_INS_VSUMGF: sysz_insn = 2212;
pub const sysz_insn_SYSZ_INS_VSUMGH: sysz_insn = 2213;
pub const sysz_insn_SYSZ_INS_VSUMH: sysz_insn = 2214;
pub const sysz_insn_SYSZ_INS_VSUMQ: sysz_insn = 2215;
pub const sysz_insn_SYSZ_INS_VSUMQF: sysz_insn = 2216;
pub const sysz_insn_SYSZ_INS_VSUMQG: sysz_insn = 2217;
pub const sysz_insn_SYSZ_INS_VTM: sysz_insn = 2218;
pub const sysz_insn_SYSZ_INS_VTP: sysz_insn = 2219;
pub const sysz_insn_SYSZ_INS_VUPH: sysz_insn = 2220;
pub const sysz_insn_SYSZ_INS_VUPHB: sysz_insn = 2221;
pub const sysz_insn_SYSZ_INS_VUPHF: sysz_insn = 2222;
pub const sysz_insn_SYSZ_INS_VUPHH: sysz_insn = 2223;
pub const sysz_insn_SYSZ_INS_VUPKZ: sysz_insn = 2224;
pub const sysz_insn_SYSZ_INS_VUPL: sysz_insn = 2225;
pub const sysz_insn_SYSZ_INS_VUPLB: sysz_insn = 2226;
pub const sysz_insn_SYSZ_INS_VUPLF: sysz_insn = 2227;
pub const sysz_insn_SYSZ_INS_VUPLH: sysz_insn = 2228;
pub const sysz_insn_SYSZ_INS_VUPLHB: sysz_insn = 2229;
pub const sysz_insn_SYSZ_INS_VUPLHF: sysz_insn = 2230;
pub const sysz_insn_SYSZ_INS_VUPLHH: sysz_insn = 2231;
pub const sysz_insn_SYSZ_INS_VUPLHW: sysz_insn = 2232;
pub const sysz_insn_SYSZ_INS_VUPLL: sysz_insn = 2233;
pub const sysz_insn_SYSZ_INS_VUPLLB: sysz_insn = 2234;
pub const sysz_insn_SYSZ_INS_VUPLLF: sysz_insn = 2235;
pub const sysz_insn_SYSZ_INS_VUPLLH: sysz_insn = 2236;
pub const sysz_insn_SYSZ_INS_VX: sysz_insn = 2237;
pub const sysz_insn_SYSZ_INS_VZERO: sysz_insn = 2238;
pub const sysz_insn_SYSZ_INS_WCDGB: sysz_insn = 2239;
pub const sysz_insn_SYSZ_INS_WCDLGB: sysz_insn = 2240;
pub const sysz_insn_SYSZ_INS_WCGDB: sysz_insn = 2241;
pub const sysz_insn_SYSZ_INS_WCLGDB: sysz_insn = 2242;
pub const sysz_insn_SYSZ_INS_WFADB: sysz_insn = 2243;
pub const sysz_insn_SYSZ_INS_WFASB: sysz_insn = 2244;
pub const sysz_insn_SYSZ_INS_WFAXB: sysz_insn = 2245;
pub const sysz_insn_SYSZ_INS_WFC: sysz_insn = 2246;
pub const sysz_insn_SYSZ_INS_WFCDB: sysz_insn = 2247;
pub const sysz_insn_SYSZ_INS_WFCEDB: sysz_insn = 2248;
pub const sysz_insn_SYSZ_INS_WFCEDBS: sysz_insn = 2249;
pub const sysz_insn_SYSZ_INS_WFCESB: sysz_insn = 2250;
pub const sysz_insn_SYSZ_INS_WFCESBS: sysz_insn = 2251;
pub const sysz_insn_SYSZ_INS_WFCEXB: sysz_insn = 2252;
pub const sysz_insn_SYSZ_INS_WFCEXBS: sysz_insn = 2253;
pub const sysz_insn_SYSZ_INS_WFCHDB: sysz_insn = 2254;
pub const sysz_insn_SYSZ_INS_WFCHDBS: sysz_insn = 2255;
pub const sysz_insn_SYSZ_INS_WFCHEDB: sysz_insn = 2256;
pub const sysz_insn_SYSZ_INS_WFCHEDBS: sysz_insn = 2257;
pub const sysz_insn_SYSZ_INS_WFCHESB: sysz_insn = 2258;
pub const sysz_insn_SYSZ_INS_WFCHESBS: sysz_insn = 2259;
pub const sysz_insn_SYSZ_INS_WFCHEXB: sysz_insn = 2260;
pub const sysz_insn_SYSZ_INS_WFCHEXBS: sysz_insn = 2261;
pub const sysz_insn_SYSZ_INS_WFCHSB: sysz_insn = 2262;
pub const sysz_insn_SYSZ_INS_WFCHSBS: sysz_insn = 2263;
pub const sysz_insn_SYSZ_INS_WFCHXB: sysz_insn = 2264;
pub const sysz_insn_SYSZ_INS_WFCHXBS: sysz_insn = 2265;
pub const sysz_insn_SYSZ_INS_WFCSB: sysz_insn = 2266;
pub const sysz_insn_SYSZ_INS_WFCXB: sysz_insn = 2267;
pub const sysz_insn_SYSZ_INS_WFDDB: sysz_insn = 2268;
pub const sysz_insn_SYSZ_INS_WFDSB: sysz_insn = 2269;
pub const sysz_insn_SYSZ_INS_WFDXB: sysz_insn = 2270;
pub const sysz_insn_SYSZ_INS_WFIDB: sysz_insn = 2271;
pub const sysz_insn_SYSZ_INS_WFISB: sysz_insn = 2272;
pub const sysz_insn_SYSZ_INS_WFIXB: sysz_insn = 2273;
pub const sysz_insn_SYSZ_INS_WFK: sysz_insn = 2274;
pub const sysz_insn_SYSZ_INS_WFKDB: sysz_insn = 2275;
pub const sysz_insn_SYSZ_INS_WFKEDB: sysz_insn = 2276;
pub const sysz_insn_SYSZ_INS_WFKEDBS: sysz_insn = 2277;
pub const sysz_insn_SYSZ_INS_WFKESB: sysz_insn = 2278;
pub const sysz_insn_SYSZ_INS_WFKESBS: sysz_insn = 2279;
pub const sysz_insn_SYSZ_INS_WFKEXB: sysz_insn = 2280;
pub const sysz_insn_SYSZ_INS_WFKEXBS: sysz_insn = 2281;
pub const sysz_insn_SYSZ_INS_WFKHDB: sysz_insn = 2282;
pub const sysz_insn_SYSZ_INS_WFKHDBS: sysz_insn = 2283;
pub const sysz_insn_SYSZ_INS_WFKHEDB: sysz_insn = 2284;
pub const sysz_insn_SYSZ_INS_WFKHEDBS: sysz_insn = 2285;
pub const sysz_insn_SYSZ_INS_WFKHESB: sysz_insn = 2286;
pub const sysz_insn_SYSZ_INS_WFKHESBS: sysz_insn = 2287;
pub const sysz_insn_SYSZ_INS_WFKHEXB: sysz_insn = 2288;
pub const sysz_insn_SYSZ_INS_WFKHEXBS: sysz_insn = 2289;
pub const sysz_insn_SYSZ_INS_WFKHSB: sysz_insn = 2290;
pub const sysz_insn_SYSZ_INS_WFKHSBS: sysz_insn = 2291;
pub const sysz_insn_SYSZ_INS_WFKHXB: sysz_insn = 2292;
pub const sysz_insn_SYSZ_INS_WFKHXBS: sysz_insn = 2293;
pub const sysz_insn_SYSZ_INS_WFKSB: sysz_insn = 2294;
pub const sysz_insn_SYSZ_INS_WFKXB: sysz_insn = 2295;
pub const sysz_insn_SYSZ_INS_WFLCDB: sysz_insn = 2296;
pub const sysz_insn_SYSZ_INS_WFLCSB: sysz_insn = 2297;
pub const sysz_insn_SYSZ_INS_WFLCXB: sysz_insn = 2298;
pub const sysz_insn_SYSZ_INS_WFLLD: sysz_insn = 2299;
pub const sysz_insn_SYSZ_INS_WFLLS: sysz_insn = 2300;
pub const sysz_insn_SYSZ_INS_WFLNDB: sysz_insn = 2301;
pub const sysz_insn_SYSZ_INS_WFLNSB: sysz_insn = 2302;
pub const sysz_insn_SYSZ_INS_WFLNXB: sysz_insn = 2303;
pub const sysz_insn_SYSZ_INS_WFLPDB: sysz_insn = 2304;
pub const sysz_insn_SYSZ_INS_WFLPSB: sysz_insn = 2305;
pub const sysz_insn_SYSZ_INS_WFLPXB: sysz_insn = 2306;
pub const sysz_insn_SYSZ_INS_WFLRD: sysz_insn = 2307;
pub const sysz_insn_SYSZ_INS_WFLRX: sysz_insn = 2308;
pub const sysz_insn_SYSZ_INS_WFMADB: sysz_insn = 2309;
pub const sysz_insn_SYSZ_INS_WFMASB: sysz_insn = 2310;
pub const sysz_insn_SYSZ_INS_WFMAXB: sysz_insn = 2311;
pub const sysz_insn_SYSZ_INS_WFMAXDB: sysz_insn = 2312;
pub const sysz_insn_SYSZ_INS_WFMAXSB: sysz_insn = 2313;
pub const sysz_insn_SYSZ_INS_WFMAXXB: sysz_insn = 2314;
pub const sysz_insn_SYSZ_INS_WFMDB: sysz_insn = 2315;
pub const sysz_insn_SYSZ_INS_WFMINDB: sysz_insn = 2316;
pub const sysz_insn_SYSZ_INS_WFMINSB: sysz_insn = 2317;
pub const sysz_insn_SYSZ_INS_WFMINXB: sysz_insn = 2318;
pub const sysz_insn_SYSZ_INS_WFMSB: sysz_insn = 2319;
pub const sysz_insn_SYSZ_INS_WFMSDB: sysz_insn = 2320;
pub const sysz_insn_SYSZ_INS_WFMSSB: sysz_insn = 2321;
pub const sysz_insn_SYSZ_INS_WFMSXB: sysz_insn = 2322;
pub const sysz_insn_SYSZ_INS_WFMXB: sysz_insn = 2323;
pub const sysz_insn_SYSZ_INS_WFNMADB: sysz_insn = 2324;
pub const sysz_insn_SYSZ_INS_WFNMASB: sysz_insn = 2325;
pub const sysz_insn_SYSZ_INS_WFNMAXB: sysz_insn = 2326;
pub const sysz_insn_SYSZ_INS_WFNMSDB: sysz_insn = 2327;
pub const sysz_insn_SYSZ_INS_WFNMSSB: sysz_insn = 2328;
pub const sysz_insn_SYSZ_INS_WFNMSXB: sysz_insn = 2329;
pub const sysz_insn_SYSZ_INS_WFPSODB: sysz_insn = 2330;
pub const sysz_insn_SYSZ_INS_WFPSOSB: sysz_insn = 2331;
pub const sysz_insn_SYSZ_INS_WFPSOXB: sysz_insn = 2332;
pub const sysz_insn_SYSZ_INS_WFSDB: sysz_insn = 2333;
pub const sysz_insn_SYSZ_INS_WFSQDB: sysz_insn = 2334;
pub const sysz_insn_SYSZ_INS_WFSQSB: sysz_insn = 2335;
pub const sysz_insn_SYSZ_INS_WFSQXB: sysz_insn = 2336;
pub const sysz_insn_SYSZ_INS_WFSSB: sysz_insn = 2337;
pub const sysz_insn_SYSZ_INS_WFSXB: sysz_insn = 2338;
pub const sysz_insn_SYSZ_INS_WFTCIDB: sysz_insn = 2339;
pub const sysz_insn_SYSZ_INS_WFTCISB: sysz_insn = 2340;
pub const sysz_insn_SYSZ_INS_WFTCIXB: sysz_insn = 2341;
pub const sysz_insn_SYSZ_INS_WLDEB: sysz_insn = 2342;
pub const sysz_insn_SYSZ_INS_WLEDB: sysz_insn = 2343;
pub const sysz_insn_SYSZ_INS_XSCH: sysz_insn = 2344;
pub const sysz_insn_SYSZ_INS_ZAP: sysz_insn = 2345;
pub const sysz_insn_SYSZ_INS_ENDING: sysz_insn = 2346;
pub type sysz_insn = ::core::ffi::c_uint;
pub const sysz_insn_group_SYSZ_GRP_INVALID: sysz_insn_group = 0;
pub const sysz_insn_group_SYSZ_GRP_JUMP: sysz_insn_group = 1;
pub const sysz_insn_group_SYSZ_GRP_DISTINCTOPS: sysz_insn_group = 128;
pub const sysz_insn_group_SYSZ_GRP_FPEXTENSION: sysz_insn_group = 129;
pub const sysz_insn_group_SYSZ_GRP_HIGHWORD: sysz_insn_group = 130;
pub const sysz_insn_group_SYSZ_GRP_INTERLOCKEDACCESS1: sysz_insn_group = 131;
pub const sysz_insn_group_SYSZ_GRP_LOADSTOREONCOND: sysz_insn_group = 132;
pub const sysz_insn_group_SYSZ_GRP_DFPPACKEDCONVERSION: sysz_insn_group = 133;
pub const sysz_insn_group_SYSZ_GRP_DFPZONEDCONVERSION: sysz_insn_group = 134;
pub const sysz_insn_group_SYSZ_GRP_ENHANCEDDAT2: sysz_insn_group = 135;
pub const sysz_insn_group_SYSZ_GRP_EXECUTIONHINT: sysz_insn_group = 136;
pub const sysz_insn_group_SYSZ_GRP_GUARDEDSTORAGE: sysz_insn_group = 137;
pub const sysz_insn_group_SYSZ_GRP_INSERTREFERENCEBITSMULTIPLE: sysz_insn_group = 138;
pub const sysz_insn_group_SYSZ_GRP_LOADANDTRAP: sysz_insn_group = 139;
pub const sysz_insn_group_SYSZ_GRP_LOADANDZERORIGHTMOSTBYTE: sysz_insn_group = 140;
pub const sysz_insn_group_SYSZ_GRP_LOADSTOREONCOND2: sysz_insn_group = 141;
pub const sysz_insn_group_SYSZ_GRP_MESSAGESECURITYASSIST3: sysz_insn_group = 142;
pub const sysz_insn_group_SYSZ_GRP_MESSAGESECURITYASSIST4: sysz_insn_group = 143;
pub const sysz_insn_group_SYSZ_GRP_MESSAGESECURITYASSIST5: sysz_insn_group = 144;
pub const sysz_insn_group_SYSZ_GRP_MESSAGESECURITYASSIST7: sysz_insn_group = 145;
pub const sysz_insn_group_SYSZ_GRP_MESSAGESECURITYASSIST8: sysz_insn_group = 146;
pub const sysz_insn_group_SYSZ_GRP_MISCELLANEOUSEXTENSIONS: sysz_insn_group = 147;
pub const sysz_insn_group_SYSZ_GRP_MISCELLANEOUSEXTENSIONS2: sysz_insn_group = 148;
pub const sysz_insn_group_SYSZ_GRP_NOVECTOR: sysz_insn_group = 149;
pub const sysz_insn_group_SYSZ_GRP_POPULATIONCOUNT: sysz_insn_group = 150;
pub const sysz_insn_group_SYSZ_GRP_PROCESSORASSIST: sysz_insn_group = 151;
pub const sysz_insn_group_SYSZ_GRP_RESETREFERENCEBITSMULTIPLE: sysz_insn_group = 152;
pub const sysz_insn_group_SYSZ_GRP_TRANSACTIONALEXECUTION: sysz_insn_group = 153;
pub const sysz_insn_group_SYSZ_GRP_VECTOR: sysz_insn_group = 154;
pub const sysz_insn_group_SYSZ_GRP_VECTORENHANCEMENTS1: sysz_insn_group = 155;
pub const sysz_insn_group_SYSZ_GRP_VECTORPACKEDDECIMAL: sysz_insn_group = 156;
pub const sysz_insn_group_SYSZ_GRP_ENDING: sysz_insn_group = 157;
pub type sysz_insn_group = ::core::ffi::c_uint;
pub const x86_reg_X86_REG_INVALID: x86_reg = 0;
pub const x86_reg_X86_REG_AH: x86_reg = 1;
pub const x86_reg_X86_REG_AL: x86_reg = 2;
pub const x86_reg_X86_REG_AX: x86_reg = 3;
pub const x86_reg_X86_REG_BH: x86_reg = 4;
pub const x86_reg_X86_REG_BL: x86_reg = 5;
pub const x86_reg_X86_REG_BP: x86_reg = 6;
pub const x86_reg_X86_REG_BPL: x86_reg = 7;
pub const x86_reg_X86_REG_BX: x86_reg = 8;
pub const x86_reg_X86_REG_CH: x86_reg = 9;
pub const x86_reg_X86_REG_CL: x86_reg = 10;
pub const x86_reg_X86_REG_CS: x86_reg = 11;
pub const x86_reg_X86_REG_CX: x86_reg = 12;
pub const x86_reg_X86_REG_DH: x86_reg = 13;
pub const x86_reg_X86_REG_DI: x86_reg = 14;
pub const x86_reg_X86_REG_DIL: x86_reg = 15;
pub const x86_reg_X86_REG_DL: x86_reg = 16;
pub const x86_reg_X86_REG_DS: x86_reg = 17;
pub const x86_reg_X86_REG_DX: x86_reg = 18;
pub const x86_reg_X86_REG_EAX: x86_reg = 19;
pub const x86_reg_X86_REG_EBP: x86_reg = 20;
pub const x86_reg_X86_REG_EBX: x86_reg = 21;
pub const x86_reg_X86_REG_ECX: x86_reg = 22;
pub const x86_reg_X86_REG_EDI: x86_reg = 23;
pub const x86_reg_X86_REG_EDX: x86_reg = 24;
pub const x86_reg_X86_REG_EFLAGS: x86_reg = 25;
pub const x86_reg_X86_REG_EIP: x86_reg = 26;
pub const x86_reg_X86_REG_EIZ: x86_reg = 27;
pub const x86_reg_X86_REG_ES: x86_reg = 28;
pub const x86_reg_X86_REG_ESI: x86_reg = 29;
pub const x86_reg_X86_REG_ESP: x86_reg = 30;
pub const x86_reg_X86_REG_FPSW: x86_reg = 31;
pub const x86_reg_X86_REG_FS: x86_reg = 32;
pub const x86_reg_X86_REG_GS: x86_reg = 33;
pub const x86_reg_X86_REG_IP: x86_reg = 34;
pub const x86_reg_X86_REG_RAX: x86_reg = 35;
pub const x86_reg_X86_REG_RBP: x86_reg = 36;
pub const x86_reg_X86_REG_RBX: x86_reg = 37;
pub const x86_reg_X86_REG_RCX: x86_reg = 38;
pub const x86_reg_X86_REG_RDI: x86_reg = 39;
pub const x86_reg_X86_REG_RDX: x86_reg = 40;
pub const x86_reg_X86_REG_RIP: x86_reg = 41;
pub const x86_reg_X86_REG_RIZ: x86_reg = 42;
pub const x86_reg_X86_REG_RSI: x86_reg = 43;
pub const x86_reg_X86_REG_RSP: x86_reg = 44;
pub const x86_reg_X86_REG_SI: x86_reg = 45;
pub const x86_reg_X86_REG_SIL: x86_reg = 46;
pub const x86_reg_X86_REG_SP: x86_reg = 47;
pub const x86_reg_X86_REG_SPL: x86_reg = 48;
pub const x86_reg_X86_REG_SS: x86_reg = 49;
pub const x86_reg_X86_REG_CR0: x86_reg = 50;
pub const x86_reg_X86_REG_CR1: x86_reg = 51;
pub const x86_reg_X86_REG_CR2: x86_reg = 52;
pub const x86_reg_X86_REG_CR3: x86_reg = 53;
pub const x86_reg_X86_REG_CR4: x86_reg = 54;
pub const x86_reg_X86_REG_CR5: x86_reg = 55;
pub const x86_reg_X86_REG_CR6: x86_reg = 56;
pub const x86_reg_X86_REG_CR7: x86_reg = 57;
pub const x86_reg_X86_REG_CR8: x86_reg = 58;
pub const x86_reg_X86_REG_CR9: x86_reg = 59;
pub const x86_reg_X86_REG_CR10: x86_reg = 60;
pub const x86_reg_X86_REG_CR11: x86_reg = 61;
pub const x86_reg_X86_REG_CR12: x86_reg = 62;
pub const x86_reg_X86_REG_CR13: x86_reg = 63;
pub const x86_reg_X86_REG_CR14: x86_reg = 64;
pub const x86_reg_X86_REG_CR15: x86_reg = 65;
pub const x86_reg_X86_REG_DR0: x86_reg = 66;
pub const x86_reg_X86_REG_DR1: x86_reg = 67;
pub const x86_reg_X86_REG_DR2: x86_reg = 68;
pub const x86_reg_X86_REG_DR3: x86_reg = 69;
pub const x86_reg_X86_REG_DR4: x86_reg = 70;
pub const x86_reg_X86_REG_DR5: x86_reg = 71;
pub const x86_reg_X86_REG_DR6: x86_reg = 72;
pub const x86_reg_X86_REG_DR7: x86_reg = 73;
pub const x86_reg_X86_REG_DR8: x86_reg = 74;
pub const x86_reg_X86_REG_DR9: x86_reg = 75;
pub const x86_reg_X86_REG_DR10: x86_reg = 76;
pub const x86_reg_X86_REG_DR11: x86_reg = 77;
pub const x86_reg_X86_REG_DR12: x86_reg = 78;
pub const x86_reg_X86_REG_DR13: x86_reg = 79;
pub const x86_reg_X86_REG_DR14: x86_reg = 80;
pub const x86_reg_X86_REG_DR15: x86_reg = 81;
pub const x86_reg_X86_REG_FP0: x86_reg = 82;
pub const x86_reg_X86_REG_FP1: x86_reg = 83;
pub const x86_reg_X86_REG_FP2: x86_reg = 84;
pub const x86_reg_X86_REG_FP3: x86_reg = 85;
pub const x86_reg_X86_REG_FP4: x86_reg = 86;
pub const x86_reg_X86_REG_FP5: x86_reg = 87;
pub const x86_reg_X86_REG_FP6: x86_reg = 88;
pub const x86_reg_X86_REG_FP7: x86_reg = 89;
pub const x86_reg_X86_REG_K0: x86_reg = 90;
pub const x86_reg_X86_REG_K1: x86_reg = 91;
pub const x86_reg_X86_REG_K2: x86_reg = 92;
pub const x86_reg_X86_REG_K3: x86_reg = 93;
pub const x86_reg_X86_REG_K4: x86_reg = 94;
pub const x86_reg_X86_REG_K5: x86_reg = 95;
pub const x86_reg_X86_REG_K6: x86_reg = 96;
pub const x86_reg_X86_REG_K7: x86_reg = 97;
pub const x86_reg_X86_REG_MM0: x86_reg = 98;
pub const x86_reg_X86_REG_MM1: x86_reg = 99;
pub const x86_reg_X86_REG_MM2: x86_reg = 100;
pub const x86_reg_X86_REG_MM3: x86_reg = 101;
pub const x86_reg_X86_REG_MM4: x86_reg = 102;
pub const x86_reg_X86_REG_MM5: x86_reg = 103;
pub const x86_reg_X86_REG_MM6: x86_reg = 104;
pub const x86_reg_X86_REG_MM7: x86_reg = 105;
pub const x86_reg_X86_REG_R8: x86_reg = 106;
pub const x86_reg_X86_REG_R9: x86_reg = 107;
pub const x86_reg_X86_REG_R10: x86_reg = 108;
pub const x86_reg_X86_REG_R11: x86_reg = 109;
pub const x86_reg_X86_REG_R12: x86_reg = 110;
pub const x86_reg_X86_REG_R13: x86_reg = 111;
pub const x86_reg_X86_REG_R14: x86_reg = 112;
pub const x86_reg_X86_REG_R15: x86_reg = 113;
pub const x86_reg_X86_REG_ST0: x86_reg = 114;
pub const x86_reg_X86_REG_ST1: x86_reg = 115;
pub const x86_reg_X86_REG_ST2: x86_reg = 116;
pub const x86_reg_X86_REG_ST3: x86_reg = 117;
pub const x86_reg_X86_REG_ST4: x86_reg = 118;
pub const x86_reg_X86_REG_ST5: x86_reg = 119;
pub const x86_reg_X86_REG_ST6: x86_reg = 120;
pub const x86_reg_X86_REG_ST7: x86_reg = 121;
pub const x86_reg_X86_REG_XMM0: x86_reg = 122;
pub const x86_reg_X86_REG_XMM1: x86_reg = 123;
pub const x86_reg_X86_REG_XMM2: x86_reg = 124;
pub const x86_reg_X86_REG_XMM3: x86_reg = 125;
pub const x86_reg_X86_REG_XMM4: x86_reg = 126;
pub const x86_reg_X86_REG_XMM5: x86_reg = 127;
pub const x86_reg_X86_REG_XMM6: x86_reg = 128;
pub const x86_reg_X86_REG_XMM7: x86_reg = 129;
pub const x86_reg_X86_REG_XMM8: x86_reg = 130;
pub const x86_reg_X86_REG_XMM9: x86_reg = 131;
pub const x86_reg_X86_REG_XMM10: x86_reg = 132;
pub const x86_reg_X86_REG_XMM11: x86_reg = 133;
pub const x86_reg_X86_REG_XMM12: x86_reg = 134;
pub const x86_reg_X86_REG_XMM13: x86_reg = 135;
pub const x86_reg_X86_REG_XMM14: x86_reg = 136;
pub const x86_reg_X86_REG_XMM15: x86_reg = 137;
pub const x86_reg_X86_REG_XMM16: x86_reg = 138;
pub const x86_reg_X86_REG_XMM17: x86_reg = 139;
pub const x86_reg_X86_REG_XMM18: x86_reg = 140;
pub const x86_reg_X86_REG_XMM19: x86_reg = 141;
pub const x86_reg_X86_REG_XMM20: x86_reg = 142;
pub const x86_reg_X86_REG_XMM21: x86_reg = 143;
pub const x86_reg_X86_REG_XMM22: x86_reg = 144;
pub const x86_reg_X86_REG_XMM23: x86_reg = 145;
pub const x86_reg_X86_REG_XMM24: x86_reg = 146;
pub const x86_reg_X86_REG_XMM25: x86_reg = 147;
pub const x86_reg_X86_REG_XMM26: x86_reg = 148;
pub const x86_reg_X86_REG_XMM27: x86_reg = 149;
pub const x86_reg_X86_REG_XMM28: x86_reg = 150;
pub const x86_reg_X86_REG_XMM29: x86_reg = 151;
pub const x86_reg_X86_REG_XMM30: x86_reg = 152;
pub const x86_reg_X86_REG_XMM31: x86_reg = 153;
pub const x86_reg_X86_REG_YMM0: x86_reg = 154;
pub const x86_reg_X86_REG_YMM1: x86_reg = 155;
pub const x86_reg_X86_REG_YMM2: x86_reg = 156;
pub const x86_reg_X86_REG_YMM3: x86_reg = 157;
pub const x86_reg_X86_REG_YMM4: x86_reg = 158;
pub const x86_reg_X86_REG_YMM5: x86_reg = 159;
pub const x86_reg_X86_REG_YMM6: x86_reg = 160;
pub const x86_reg_X86_REG_YMM7: x86_reg = 161;
pub const x86_reg_X86_REG_YMM8: x86_reg = 162;
pub const x86_reg_X86_REG_YMM9: x86_reg = 163;
pub const x86_reg_X86_REG_YMM10: x86_reg = 164;
pub const x86_reg_X86_REG_YMM11: x86_reg = 165;
pub const x86_reg_X86_REG_YMM12: x86_reg = 166;
pub const x86_reg_X86_REG_YMM13: x86_reg = 167;
pub const x86_reg_X86_REG_YMM14: x86_reg = 168;
pub const x86_reg_X86_REG_YMM15: x86_reg = 169;
pub const x86_reg_X86_REG_YMM16: x86_reg = 170;
pub const x86_reg_X86_REG_YMM17: x86_reg = 171;
pub const x86_reg_X86_REG_YMM18: x86_reg = 172;
pub const x86_reg_X86_REG_YMM19: x86_reg = 173;
pub const x86_reg_X86_REG_YMM20: x86_reg = 174;
pub const x86_reg_X86_REG_YMM21: x86_reg = 175;
pub const x86_reg_X86_REG_YMM22: x86_reg = 176;
pub const x86_reg_X86_REG_YMM23: x86_reg = 177;
pub const x86_reg_X86_REG_YMM24: x86_reg = 178;
pub const x86_reg_X86_REG_YMM25: x86_reg = 179;
pub const x86_reg_X86_REG_YMM26: x86_reg = 180;
pub const x86_reg_X86_REG_YMM27: x86_reg = 181;
pub const x86_reg_X86_REG_YMM28: x86_reg = 182;
pub const x86_reg_X86_REG_YMM29: x86_reg = 183;
pub const x86_reg_X86_REG_YMM30: x86_reg = 184;
pub const x86_reg_X86_REG_YMM31: x86_reg = 185;
pub const x86_reg_X86_REG_ZMM0: x86_reg = 186;
pub const x86_reg_X86_REG_ZMM1: x86_reg = 187;
pub const x86_reg_X86_REG_ZMM2: x86_reg = 188;
pub const x86_reg_X86_REG_ZMM3: x86_reg = 189;
pub const x86_reg_X86_REG_ZMM4: x86_reg = 190;
pub const x86_reg_X86_REG_ZMM5: x86_reg = 191;
pub const x86_reg_X86_REG_ZMM6: x86_reg = 192;
pub const x86_reg_X86_REG_ZMM7: x86_reg = 193;
pub const x86_reg_X86_REG_ZMM8: x86_reg = 194;
pub const x86_reg_X86_REG_ZMM9: x86_reg = 195;
pub const x86_reg_X86_REG_ZMM10: x86_reg = 196;
pub const x86_reg_X86_REG_ZMM11: x86_reg = 197;
pub const x86_reg_X86_REG_ZMM12: x86_reg = 198;
pub const x86_reg_X86_REG_ZMM13: x86_reg = 199;
pub const x86_reg_X86_REG_ZMM14: x86_reg = 200;
pub const x86_reg_X86_REG_ZMM15: x86_reg = 201;
pub const x86_reg_X86_REG_ZMM16: x86_reg = 202;
pub const x86_reg_X86_REG_ZMM17: x86_reg = 203;
pub const x86_reg_X86_REG_ZMM18: x86_reg = 204;
pub const x86_reg_X86_REG_ZMM19: x86_reg = 205;
pub const x86_reg_X86_REG_ZMM20: x86_reg = 206;
pub const x86_reg_X86_REG_ZMM21: x86_reg = 207;
pub const x86_reg_X86_REG_ZMM22: x86_reg = 208;
pub const x86_reg_X86_REG_ZMM23: x86_reg = 209;
pub const x86_reg_X86_REG_ZMM24: x86_reg = 210;
pub const x86_reg_X86_REG_ZMM25: x86_reg = 211;
pub const x86_reg_X86_REG_ZMM26: x86_reg = 212;
pub const x86_reg_X86_REG_ZMM27: x86_reg = 213;
pub const x86_reg_X86_REG_ZMM28: x86_reg = 214;
pub const x86_reg_X86_REG_ZMM29: x86_reg = 215;
pub const x86_reg_X86_REG_ZMM30: x86_reg = 216;
pub const x86_reg_X86_REG_ZMM31: x86_reg = 217;
pub const x86_reg_X86_REG_R8B: x86_reg = 218;
pub const x86_reg_X86_REG_R9B: x86_reg = 219;
pub const x86_reg_X86_REG_R10B: x86_reg = 220;
pub const x86_reg_X86_REG_R11B: x86_reg = 221;
pub const x86_reg_X86_REG_R12B: x86_reg = 222;
pub const x86_reg_X86_REG_R13B: x86_reg = 223;
pub const x86_reg_X86_REG_R14B: x86_reg = 224;
pub const x86_reg_X86_REG_R15B: x86_reg = 225;
pub const x86_reg_X86_REG_R8D: x86_reg = 226;
pub const x86_reg_X86_REG_R9D: x86_reg = 227;
pub const x86_reg_X86_REG_R10D: x86_reg = 228;
pub const x86_reg_X86_REG_R11D: x86_reg = 229;
pub const x86_reg_X86_REG_R12D: x86_reg = 230;
pub const x86_reg_X86_REG_R13D: x86_reg = 231;
pub const x86_reg_X86_REG_R14D: x86_reg = 232;
pub const x86_reg_X86_REG_R15D: x86_reg = 233;
pub const x86_reg_X86_REG_R8W: x86_reg = 234;
pub const x86_reg_X86_REG_R9W: x86_reg = 235;
pub const x86_reg_X86_REG_R10W: x86_reg = 236;
pub const x86_reg_X86_REG_R11W: x86_reg = 237;
pub const x86_reg_X86_REG_R12W: x86_reg = 238;
pub const x86_reg_X86_REG_R13W: x86_reg = 239;
pub const x86_reg_X86_REG_R14W: x86_reg = 240;
pub const x86_reg_X86_REG_R15W: x86_reg = 241;
pub const x86_reg_X86_REG_BND0: x86_reg = 242;
pub const x86_reg_X86_REG_BND1: x86_reg = 243;
pub const x86_reg_X86_REG_BND2: x86_reg = 244;
pub const x86_reg_X86_REG_BND3: x86_reg = 245;
pub const x86_reg_X86_REG_ENDING: x86_reg = 246;
pub type x86_reg = ::core::ffi::c_uint;
pub const x86_op_type_X86_OP_INVALID: x86_op_type = 0;
pub const x86_op_type_X86_OP_REG: x86_op_type = 1;
pub const x86_op_type_X86_OP_IMM: x86_op_type = 2;
pub const x86_op_type_X86_OP_MEM: x86_op_type = 3;
pub type x86_op_type = ::core::ffi::c_uint;
pub const x86_xop_cc_X86_XOP_CC_INVALID: x86_xop_cc = 0;
pub const x86_xop_cc_X86_XOP_CC_LT: x86_xop_cc = 1;
pub const x86_xop_cc_X86_XOP_CC_LE: x86_xop_cc = 2;
pub const x86_xop_cc_X86_XOP_CC_GT: x86_xop_cc = 3;
pub const x86_xop_cc_X86_XOP_CC_GE: x86_xop_cc = 4;
pub const x86_xop_cc_X86_XOP_CC_EQ: x86_xop_cc = 5;
pub const x86_xop_cc_X86_XOP_CC_NEQ: x86_xop_cc = 6;
pub const x86_xop_cc_X86_XOP_CC_FALSE: x86_xop_cc = 7;
pub const x86_xop_cc_X86_XOP_CC_TRUE: x86_xop_cc = 8;
pub type x86_xop_cc = ::core::ffi::c_uint;
pub const x86_avx_bcast_X86_AVX_BCAST_INVALID: x86_avx_bcast = 0;
pub const x86_avx_bcast_X86_AVX_BCAST_2: x86_avx_bcast = 1;
pub const x86_avx_bcast_X86_AVX_BCAST_4: x86_avx_bcast = 2;
pub const x86_avx_bcast_X86_AVX_BCAST_8: x86_avx_bcast = 3;
pub const x86_avx_bcast_X86_AVX_BCAST_16: x86_avx_bcast = 4;
pub type x86_avx_bcast = ::core::ffi::c_uint;
pub const x86_sse_cc_X86_SSE_CC_INVALID: x86_sse_cc = 0;
pub const x86_sse_cc_X86_SSE_CC_EQ: x86_sse_cc = 1;
pub const x86_sse_cc_X86_SSE_CC_LT: x86_sse_cc = 2;
pub const x86_sse_cc_X86_SSE_CC_LE: x86_sse_cc = 3;
pub const x86_sse_cc_X86_SSE_CC_UNORD: x86_sse_cc = 4;
pub const x86_sse_cc_X86_SSE_CC_NEQ: x86_sse_cc = 5;
pub const x86_sse_cc_X86_SSE_CC_NLT: x86_sse_cc = 6;
pub const x86_sse_cc_X86_SSE_CC_NLE: x86_sse_cc = 7;
pub const x86_sse_cc_X86_SSE_CC_ORD: x86_sse_cc = 8;
pub type x86_sse_cc = ::core::ffi::c_uint;
pub const x86_avx_cc_X86_AVX_CC_INVALID: x86_avx_cc = 0;
pub const x86_avx_cc_X86_AVX_CC_EQ: x86_avx_cc = 1;
pub const x86_avx_cc_X86_AVX_CC_LT: x86_avx_cc = 2;
pub const x86_avx_cc_X86_AVX_CC_LE: x86_avx_cc = 3;
pub const x86_avx_cc_X86_AVX_CC_UNORD: x86_avx_cc = 4;
pub const x86_avx_cc_X86_AVX_CC_NEQ: x86_avx_cc = 5;
pub const x86_avx_cc_X86_AVX_CC_NLT: x86_avx_cc = 6;
pub const x86_avx_cc_X86_AVX_CC_NLE: x86_avx_cc = 7;
pub const x86_avx_cc_X86_AVX_CC_ORD: x86_avx_cc = 8;
pub const x86_avx_cc_X86_AVX_CC_EQ_UQ: x86_avx_cc = 9;
pub const x86_avx_cc_X86_AVX_CC_NGE: x86_avx_cc = 10;
pub const x86_avx_cc_X86_AVX_CC_NGT: x86_avx_cc = 11;
pub const x86_avx_cc_X86_AVX_CC_FALSE: x86_avx_cc = 12;
pub const x86_avx_cc_X86_AVX_CC_NEQ_OQ: x86_avx_cc = 13;
pub const x86_avx_cc_X86_AVX_CC_GE: x86_avx_cc = 14;
pub const x86_avx_cc_X86_AVX_CC_GT: x86_avx_cc = 15;
pub const x86_avx_cc_X86_AVX_CC_TRUE: x86_avx_cc = 16;
pub const x86_avx_cc_X86_AVX_CC_EQ_OS: x86_avx_cc = 17;
pub const x86_avx_cc_X86_AVX_CC_LT_OQ: x86_avx_cc = 18;
pub const x86_avx_cc_X86_AVX_CC_LE_OQ: x86_avx_cc = 19;
pub const x86_avx_cc_X86_AVX_CC_UNORD_S: x86_avx_cc = 20;
pub const x86_avx_cc_X86_AVX_CC_NEQ_US: x86_avx_cc = 21;
pub const x86_avx_cc_X86_AVX_CC_NLT_UQ: x86_avx_cc = 22;
pub const x86_avx_cc_X86_AVX_CC_NLE_UQ: x86_avx_cc = 23;
pub const x86_avx_cc_X86_AVX_CC_ORD_S: x86_avx_cc = 24;
pub const x86_avx_cc_X86_AVX_CC_EQ_US: x86_avx_cc = 25;
pub const x86_avx_cc_X86_AVX_CC_NGE_UQ: x86_avx_cc = 26;
pub const x86_avx_cc_X86_AVX_CC_NGT_UQ: x86_avx_cc = 27;
pub const x86_avx_cc_X86_AVX_CC_FALSE_OS: x86_avx_cc = 28;
pub const x86_avx_cc_X86_AVX_CC_NEQ_OS: x86_avx_cc = 29;
pub const x86_avx_cc_X86_AVX_CC_GE_OQ: x86_avx_cc = 30;
pub const x86_avx_cc_X86_AVX_CC_GT_OQ: x86_avx_cc = 31;
pub const x86_avx_cc_X86_AVX_CC_TRUE_US: x86_avx_cc = 32;
pub type x86_avx_cc = ::core::ffi::c_uint;
pub const x86_avx_rm_X86_AVX_RM_INVALID: x86_avx_rm = 0;
pub const x86_avx_rm_X86_AVX_RM_RN: x86_avx_rm = 1;
pub const x86_avx_rm_X86_AVX_RM_RD: x86_avx_rm = 2;
pub const x86_avx_rm_X86_AVX_RM_RU: x86_avx_rm = 3;
pub const x86_avx_rm_X86_AVX_RM_RZ: x86_avx_rm = 4;
pub type x86_avx_rm = ::core::ffi::c_uint;
pub const x86_prefix_X86_PREFIX_LOCK: x86_prefix = 240;
pub const x86_prefix_X86_PREFIX_REP: x86_prefix = 243;
pub const x86_prefix_X86_PREFIX_REPE: x86_prefix = 243;
pub const x86_prefix_X86_PREFIX_REPNE: x86_prefix = 242;
pub const x86_prefix_X86_PREFIX_CS: x86_prefix = 46;
pub const x86_prefix_X86_PREFIX_SS: x86_prefix = 54;
pub const x86_prefix_X86_PREFIX_DS: x86_prefix = 62;
pub const x86_prefix_X86_PREFIX_ES: x86_prefix = 38;
pub const x86_prefix_X86_PREFIX_FS: x86_prefix = 100;
pub const x86_prefix_X86_PREFIX_GS: x86_prefix = 101;
pub const x86_prefix_X86_PREFIX_OPSIZE: x86_prefix = 102;
pub const x86_prefix_X86_PREFIX_ADDRSIZE: x86_prefix = 103;
pub type x86_prefix = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x86_op_mem {
    pub segment: x86_reg,
    pub base: x86_reg,
    pub index: x86_reg,
    pub scale: ::core::ffi::c_int,
    pub disp: i64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_x86_op {
    pub type_: x86_op_type,
    pub __bindgen_anon_1: cs_x86_op__bindgen_ty_1,
    pub size: u8,
    pub access: u8,
    pub avx_bcast: x86_avx_bcast,
    pub avx_zero_opmask: bool,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_x86_op__bindgen_ty_1 {
    pub reg: x86_reg,
    pub imm: i64,
    pub mem: x86_op_mem,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cs_x86_encoding {
    pub modrm_offset: u8,
    pub disp_offset: u8,
    pub disp_size: u8,
    pub imm_offset: u8,
    pub imm_size: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_x86 {
    pub prefix: [u8; 4usize],
    pub opcode: [u8; 4usize],
    pub rex: u8,
    pub addr_size: u8,
    pub modrm: u8,
    pub sib: u8,
    pub disp: i64,
    pub sib_index: x86_reg,
    pub sib_scale: i8,
    pub sib_base: x86_reg,
    pub xop_cc: x86_xop_cc,
    pub sse_cc: x86_sse_cc,
    pub avx_cc: x86_avx_cc,
    pub avx_sae: bool,
    pub avx_rm: x86_avx_rm,
    pub __bindgen_anon_1: cs_x86__bindgen_ty_1,
    pub op_count: u8,
    pub operands: [cs_x86_op; 8usize],
    pub encoding: cs_x86_encoding,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_x86__bindgen_ty_1 {
    pub eflags: u64,
    pub fpu_flags: u64,
}
pub const x86_insn_X86_INS_INVALID: x86_insn = 0;
pub const x86_insn_X86_INS_AAA: x86_insn = 1;
pub const x86_insn_X86_INS_AAD: x86_insn = 2;
pub const x86_insn_X86_INS_AAM: x86_insn = 3;
pub const x86_insn_X86_INS_AAS: x86_insn = 4;
pub const x86_insn_X86_INS_FABS: x86_insn = 5;
pub const x86_insn_X86_INS_ADC: x86_insn = 6;
pub const x86_insn_X86_INS_ADCX: x86_insn = 7;
pub const x86_insn_X86_INS_ADD: x86_insn = 8;
pub const x86_insn_X86_INS_ADDPD: x86_insn = 9;
pub const x86_insn_X86_INS_ADDPS: x86_insn = 10;
pub const x86_insn_X86_INS_ADDSD: x86_insn = 11;
pub const x86_insn_X86_INS_ADDSS: x86_insn = 12;
pub const x86_insn_X86_INS_ADDSUBPD: x86_insn = 13;
pub const x86_insn_X86_INS_ADDSUBPS: x86_insn = 14;
pub const x86_insn_X86_INS_FADD: x86_insn = 15;
pub const x86_insn_X86_INS_FIADD: x86_insn = 16;
pub const x86_insn_X86_INS_ADOX: x86_insn = 17;
pub const x86_insn_X86_INS_AESDECLAST: x86_insn = 18;
pub const x86_insn_X86_INS_AESDEC: x86_insn = 19;
pub const x86_insn_X86_INS_AESENCLAST: x86_insn = 20;
pub const x86_insn_X86_INS_AESENC: x86_insn = 21;
pub const x86_insn_X86_INS_AESIMC: x86_insn = 22;
pub const x86_insn_X86_INS_AESKEYGENASSIST: x86_insn = 23;
pub const x86_insn_X86_INS_AND: x86_insn = 24;
pub const x86_insn_X86_INS_ANDN: x86_insn = 25;
pub const x86_insn_X86_INS_ANDNPD: x86_insn = 26;
pub const x86_insn_X86_INS_ANDNPS: x86_insn = 27;
pub const x86_insn_X86_INS_ANDPD: x86_insn = 28;
pub const x86_insn_X86_INS_ANDPS: x86_insn = 29;
pub const x86_insn_X86_INS_ARPL: x86_insn = 30;
pub const x86_insn_X86_INS_BEXTR: x86_insn = 31;
pub const x86_insn_X86_INS_BLCFILL: x86_insn = 32;
pub const x86_insn_X86_INS_BLCI: x86_insn = 33;
pub const x86_insn_X86_INS_BLCIC: x86_insn = 34;
pub const x86_insn_X86_INS_BLCMSK: x86_insn = 35;
pub const x86_insn_X86_INS_BLCS: x86_insn = 36;
pub const x86_insn_X86_INS_BLENDPD: x86_insn = 37;
pub const x86_insn_X86_INS_BLENDPS: x86_insn = 38;
pub const x86_insn_X86_INS_BLENDVPD: x86_insn = 39;
pub const x86_insn_X86_INS_BLENDVPS: x86_insn = 40;
pub const x86_insn_X86_INS_BLSFILL: x86_insn = 41;
pub const x86_insn_X86_INS_BLSI: x86_insn = 42;
pub const x86_insn_X86_INS_BLSIC: x86_insn = 43;
pub const x86_insn_X86_INS_BLSMSK: x86_insn = 44;
pub const x86_insn_X86_INS_BLSR: x86_insn = 45;
pub const x86_insn_X86_INS_BNDCL: x86_insn = 46;
pub const x86_insn_X86_INS_BNDCN: x86_insn = 47;
pub const x86_insn_X86_INS_BNDCU: x86_insn = 48;
pub const x86_insn_X86_INS_BNDLDX: x86_insn = 49;
pub const x86_insn_X86_INS_BNDMK: x86_insn = 50;
pub const x86_insn_X86_INS_BNDMOV: x86_insn = 51;
pub const x86_insn_X86_INS_BNDSTX: x86_insn = 52;
pub const x86_insn_X86_INS_BOUND: x86_insn = 53;
pub const x86_insn_X86_INS_BSF: x86_insn = 54;
pub const x86_insn_X86_INS_BSR: x86_insn = 55;
pub const x86_insn_X86_INS_BSWAP: x86_insn = 56;
pub const x86_insn_X86_INS_BT: x86_insn = 57;
pub const x86_insn_X86_INS_BTC: x86_insn = 58;
pub const x86_insn_X86_INS_BTR: x86_insn = 59;
pub const x86_insn_X86_INS_BTS: x86_insn = 60;
pub const x86_insn_X86_INS_BZHI: x86_insn = 61;
pub const x86_insn_X86_INS_CALL: x86_insn = 62;
pub const x86_insn_X86_INS_CBW: x86_insn = 63;
pub const x86_insn_X86_INS_CDQ: x86_insn = 64;
pub const x86_insn_X86_INS_CDQE: x86_insn = 65;
pub const x86_insn_X86_INS_FCHS: x86_insn = 66;
pub const x86_insn_X86_INS_CLAC: x86_insn = 67;
pub const x86_insn_X86_INS_CLC: x86_insn = 68;
pub const x86_insn_X86_INS_CLD: x86_insn = 69;
pub const x86_insn_X86_INS_CLDEMOTE: x86_insn = 70;
pub const x86_insn_X86_INS_CLFLUSH: x86_insn = 71;
pub const x86_insn_X86_INS_CLFLUSHOPT: x86_insn = 72;
pub const x86_insn_X86_INS_CLGI: x86_insn = 73;
pub const x86_insn_X86_INS_CLI: x86_insn = 74;
pub const x86_insn_X86_INS_CLRSSBSY: x86_insn = 75;
pub const x86_insn_X86_INS_CLTS: x86_insn = 76;
pub const x86_insn_X86_INS_CLWB: x86_insn = 77;
pub const x86_insn_X86_INS_CLZERO: x86_insn = 78;
pub const x86_insn_X86_INS_CMC: x86_insn = 79;
pub const x86_insn_X86_INS_CMOVA: x86_insn = 80;
pub const x86_insn_X86_INS_CMOVAE: x86_insn = 81;
pub const x86_insn_X86_INS_CMOVB: x86_insn = 82;
pub const x86_insn_X86_INS_CMOVBE: x86_insn = 83;
pub const x86_insn_X86_INS_FCMOVBE: x86_insn = 84;
pub const x86_insn_X86_INS_FCMOVB: x86_insn = 85;
pub const x86_insn_X86_INS_CMOVE: x86_insn = 86;
pub const x86_insn_X86_INS_FCMOVE: x86_insn = 87;
pub const x86_insn_X86_INS_CMOVG: x86_insn = 88;
pub const x86_insn_X86_INS_CMOVGE: x86_insn = 89;
pub const x86_insn_X86_INS_CMOVL: x86_insn = 90;
pub const x86_insn_X86_INS_CMOVLE: x86_insn = 91;
pub const x86_insn_X86_INS_FCMOVNBE: x86_insn = 92;
pub const x86_insn_X86_INS_FCMOVNB: x86_insn = 93;
pub const x86_insn_X86_INS_CMOVNE: x86_insn = 94;
pub const x86_insn_X86_INS_FCMOVNE: x86_insn = 95;
pub const x86_insn_X86_INS_CMOVNO: x86_insn = 96;
pub const x86_insn_X86_INS_CMOVNP: x86_insn = 97;
pub const x86_insn_X86_INS_FCMOVNU: x86_insn = 98;
pub const x86_insn_X86_INS_FCMOVNP: x86_insn = 99;
pub const x86_insn_X86_INS_CMOVNS: x86_insn = 100;
pub const x86_insn_X86_INS_CMOVO: x86_insn = 101;
pub const x86_insn_X86_INS_CMOVP: x86_insn = 102;
pub const x86_insn_X86_INS_FCMOVU: x86_insn = 103;
pub const x86_insn_X86_INS_CMOVS: x86_insn = 104;
pub const x86_insn_X86_INS_CMP: x86_insn = 105;
pub const x86_insn_X86_INS_CMPPD: x86_insn = 106;
pub const x86_insn_X86_INS_CMPPS: x86_insn = 107;
pub const x86_insn_X86_INS_CMPSB: x86_insn = 108;
pub const x86_insn_X86_INS_CMPSD: x86_insn = 109;
pub const x86_insn_X86_INS_CMPSQ: x86_insn = 110;
pub const x86_insn_X86_INS_CMPSS: x86_insn = 111;
pub const x86_insn_X86_INS_CMPSW: x86_insn = 112;
pub const x86_insn_X86_INS_CMPXCHG16B: x86_insn = 113;
pub const x86_insn_X86_INS_CMPXCHG: x86_insn = 114;
pub const x86_insn_X86_INS_CMPXCHG8B: x86_insn = 115;
pub const x86_insn_X86_INS_COMISD: x86_insn = 116;
pub const x86_insn_X86_INS_COMISS: x86_insn = 117;
pub const x86_insn_X86_INS_FCOMP: x86_insn = 118;
pub const x86_insn_X86_INS_FCOMPI: x86_insn = 119;
pub const x86_insn_X86_INS_FCOMI: x86_insn = 120;
pub const x86_insn_X86_INS_FCOM: x86_insn = 121;
pub const x86_insn_X86_INS_FCOS: x86_insn = 122;
pub const x86_insn_X86_INS_CPUID: x86_insn = 123;
pub const x86_insn_X86_INS_CQO: x86_insn = 124;
pub const x86_insn_X86_INS_CRC32: x86_insn = 125;
pub const x86_insn_X86_INS_CVTDQ2PD: x86_insn = 126;
pub const x86_insn_X86_INS_CVTDQ2PS: x86_insn = 127;
pub const x86_insn_X86_INS_CVTPD2DQ: x86_insn = 128;
pub const x86_insn_X86_INS_CVTPD2PS: x86_insn = 129;
pub const x86_insn_X86_INS_CVTPS2DQ: x86_insn = 130;
pub const x86_insn_X86_INS_CVTPS2PD: x86_insn = 131;
pub const x86_insn_X86_INS_CVTSD2SI: x86_insn = 132;
pub const x86_insn_X86_INS_CVTSD2SS: x86_insn = 133;
pub const x86_insn_X86_INS_CVTSI2SD: x86_insn = 134;
pub const x86_insn_X86_INS_CVTSI2SS: x86_insn = 135;
pub const x86_insn_X86_INS_CVTSS2SD: x86_insn = 136;
pub const x86_insn_X86_INS_CVTSS2SI: x86_insn = 137;
pub const x86_insn_X86_INS_CVTTPD2DQ: x86_insn = 138;
pub const x86_insn_X86_INS_CVTTPS2DQ: x86_insn = 139;
pub const x86_insn_X86_INS_CVTTSD2SI: x86_insn = 140;
pub const x86_insn_X86_INS_CVTTSS2SI: x86_insn = 141;
pub const x86_insn_X86_INS_CWD: x86_insn = 142;
pub const x86_insn_X86_INS_CWDE: x86_insn = 143;
pub const x86_insn_X86_INS_DAA: x86_insn = 144;
pub const x86_insn_X86_INS_DAS: x86_insn = 145;
pub const x86_insn_X86_INS_DATA16: x86_insn = 146;
pub const x86_insn_X86_INS_DEC: x86_insn = 147;
pub const x86_insn_X86_INS_DIV: x86_insn = 148;
pub const x86_insn_X86_INS_DIVPD: x86_insn = 149;
pub const x86_insn_X86_INS_DIVPS: x86_insn = 150;
pub const x86_insn_X86_INS_FDIVR: x86_insn = 151;
pub const x86_insn_X86_INS_FIDIVR: x86_insn = 152;
pub const x86_insn_X86_INS_FDIVRP: x86_insn = 153;
pub const x86_insn_X86_INS_DIVSD: x86_insn = 154;
pub const x86_insn_X86_INS_DIVSS: x86_insn = 155;
pub const x86_insn_X86_INS_FDIV: x86_insn = 156;
pub const x86_insn_X86_INS_FIDIV: x86_insn = 157;
pub const x86_insn_X86_INS_FDIVP: x86_insn = 158;
pub const x86_insn_X86_INS_DPPD: x86_insn = 159;
pub const x86_insn_X86_INS_DPPS: x86_insn = 160;
pub const x86_insn_X86_INS_ENCLS: x86_insn = 161;
pub const x86_insn_X86_INS_ENCLU: x86_insn = 162;
pub const x86_insn_X86_INS_ENCLV: x86_insn = 163;
pub const x86_insn_X86_INS_ENDBR32: x86_insn = 164;
pub const x86_insn_X86_INS_ENDBR64: x86_insn = 165;
pub const x86_insn_X86_INS_ENTER: x86_insn = 166;
pub const x86_insn_X86_INS_EXTRACTPS: x86_insn = 167;
pub const x86_insn_X86_INS_EXTRQ: x86_insn = 168;
pub const x86_insn_X86_INS_F2XM1: x86_insn = 169;
pub const x86_insn_X86_INS_LCALL: x86_insn = 170;
pub const x86_insn_X86_INS_LJMP: x86_insn = 171;
pub const x86_insn_X86_INS_JMP: x86_insn = 172;
pub const x86_insn_X86_INS_FBLD: x86_insn = 173;
pub const x86_insn_X86_INS_FBSTP: x86_insn = 174;
pub const x86_insn_X86_INS_FCOMPP: x86_insn = 175;
pub const x86_insn_X86_INS_FDECSTP: x86_insn = 176;
pub const x86_insn_X86_INS_FDISI8087_NOP: x86_insn = 177;
pub const x86_insn_X86_INS_FEMMS: x86_insn = 178;
pub const x86_insn_X86_INS_FENI8087_NOP: x86_insn = 179;
pub const x86_insn_X86_INS_FFREE: x86_insn = 180;
pub const x86_insn_X86_INS_FFREEP: x86_insn = 181;
pub const x86_insn_X86_INS_FICOM: x86_insn = 182;
pub const x86_insn_X86_INS_FICOMP: x86_insn = 183;
pub const x86_insn_X86_INS_FINCSTP: x86_insn = 184;
pub const x86_insn_X86_INS_FLDCW: x86_insn = 185;
pub const x86_insn_X86_INS_FLDENV: x86_insn = 186;
pub const x86_insn_X86_INS_FLDL2E: x86_insn = 187;
pub const x86_insn_X86_INS_FLDL2T: x86_insn = 188;
pub const x86_insn_X86_INS_FLDLG2: x86_insn = 189;
pub const x86_insn_X86_INS_FLDLN2: x86_insn = 190;
pub const x86_insn_X86_INS_FLDPI: x86_insn = 191;
pub const x86_insn_X86_INS_FNCLEX: x86_insn = 192;
pub const x86_insn_X86_INS_FNINIT: x86_insn = 193;
pub const x86_insn_X86_INS_FNOP: x86_insn = 194;
pub const x86_insn_X86_INS_FNSTCW: x86_insn = 195;
pub const x86_insn_X86_INS_FNSTSW: x86_insn = 196;
pub const x86_insn_X86_INS_FPATAN: x86_insn = 197;
pub const x86_insn_X86_INS_FSTPNCE: x86_insn = 198;
pub const x86_insn_X86_INS_FPREM: x86_insn = 199;
pub const x86_insn_X86_INS_FPREM1: x86_insn = 200;
pub const x86_insn_X86_INS_FPTAN: x86_insn = 201;
pub const x86_insn_X86_INS_FRNDINT: x86_insn = 202;
pub const x86_insn_X86_INS_FRSTOR: x86_insn = 203;
pub const x86_insn_X86_INS_FNSAVE: x86_insn = 204;
pub const x86_insn_X86_INS_FSCALE: x86_insn = 205;
pub const x86_insn_X86_INS_FSETPM: x86_insn = 206;
pub const x86_insn_X86_INS_FSINCOS: x86_insn = 207;
pub const x86_insn_X86_INS_FNSTENV: x86_insn = 208;
pub const x86_insn_X86_INS_FXAM: x86_insn = 209;
pub const x86_insn_X86_INS_FXRSTOR: x86_insn = 210;
pub const x86_insn_X86_INS_FXRSTOR64: x86_insn = 211;
pub const x86_insn_X86_INS_FXSAVE: x86_insn = 212;
pub const x86_insn_X86_INS_FXSAVE64: x86_insn = 213;
pub const x86_insn_X86_INS_FXTRACT: x86_insn = 214;
pub const x86_insn_X86_INS_FYL2X: x86_insn = 215;
pub const x86_insn_X86_INS_FYL2XP1: x86_insn = 216;
pub const x86_insn_X86_INS_GETSEC: x86_insn = 217;
pub const x86_insn_X86_INS_GF2P8AFFINEINVQB: x86_insn = 218;
pub const x86_insn_X86_INS_GF2P8AFFINEQB: x86_insn = 219;
pub const x86_insn_X86_INS_GF2P8MULB: x86_insn = 220;
pub const x86_insn_X86_INS_HADDPD: x86_insn = 221;
pub const x86_insn_X86_INS_HADDPS: x86_insn = 222;
pub const x86_insn_X86_INS_HLT: x86_insn = 223;
pub const x86_insn_X86_INS_HSUBPD: x86_insn = 224;
pub const x86_insn_X86_INS_HSUBPS: x86_insn = 225;
pub const x86_insn_X86_INS_IDIV: x86_insn = 226;
pub const x86_insn_X86_INS_FILD: x86_insn = 227;
pub const x86_insn_X86_INS_IMUL: x86_insn = 228;
pub const x86_insn_X86_INS_IN: x86_insn = 229;
pub const x86_insn_X86_INS_INC: x86_insn = 230;
pub const x86_insn_X86_INS_INCSSPD: x86_insn = 231;
pub const x86_insn_X86_INS_INCSSPQ: x86_insn = 232;
pub const x86_insn_X86_INS_INSB: x86_insn = 233;
pub const x86_insn_X86_INS_INSERTPS: x86_insn = 234;
pub const x86_insn_X86_INS_INSERTQ: x86_insn = 235;
pub const x86_insn_X86_INS_INSD: x86_insn = 236;
pub const x86_insn_X86_INS_INSW: x86_insn = 237;
pub const x86_insn_X86_INS_INT: x86_insn = 238;
pub const x86_insn_X86_INS_INT1: x86_insn = 239;
pub const x86_insn_X86_INS_INT3: x86_insn = 240;
pub const x86_insn_X86_INS_INTO: x86_insn = 241;
pub const x86_insn_X86_INS_INVD: x86_insn = 242;
pub const x86_insn_X86_INS_INVEPT: x86_insn = 243;
pub const x86_insn_X86_INS_INVLPG: x86_insn = 244;
pub const x86_insn_X86_INS_INVLPGA: x86_insn = 245;
pub const x86_insn_X86_INS_INVPCID: x86_insn = 246;
pub const x86_insn_X86_INS_INVVPID: x86_insn = 247;
pub const x86_insn_X86_INS_IRET: x86_insn = 248;
pub const x86_insn_X86_INS_IRETD: x86_insn = 249;
pub const x86_insn_X86_INS_IRETQ: x86_insn = 250;
pub const x86_insn_X86_INS_FISTTP: x86_insn = 251;
pub const x86_insn_X86_INS_FIST: x86_insn = 252;
pub const x86_insn_X86_INS_FISTP: x86_insn = 253;
pub const x86_insn_X86_INS_JAE: x86_insn = 254;
pub const x86_insn_X86_INS_JA: x86_insn = 255;
pub const x86_insn_X86_INS_JBE: x86_insn = 256;
pub const x86_insn_X86_INS_JB: x86_insn = 257;
pub const x86_insn_X86_INS_JCXZ: x86_insn = 258;
pub const x86_insn_X86_INS_JECXZ: x86_insn = 259;
pub const x86_insn_X86_INS_JE: x86_insn = 260;
pub const x86_insn_X86_INS_JGE: x86_insn = 261;
pub const x86_insn_X86_INS_JG: x86_insn = 262;
pub const x86_insn_X86_INS_JLE: x86_insn = 263;
pub const x86_insn_X86_INS_JL: x86_insn = 264;
pub const x86_insn_X86_INS_JNE: x86_insn = 265;
pub const x86_insn_X86_INS_JNO: x86_insn = 266;
pub const x86_insn_X86_INS_JNP: x86_insn = 267;
pub const x86_insn_X86_INS_JNS: x86_insn = 268;
pub const x86_insn_X86_INS_JO: x86_insn = 269;
pub const x86_insn_X86_INS_JP: x86_insn = 270;
pub const x86_insn_X86_INS_JRCXZ: x86_insn = 271;
pub const x86_insn_X86_INS_JS: x86_insn = 272;
pub const x86_insn_X86_INS_KADDB: x86_insn = 273;
pub const x86_insn_X86_INS_KADDD: x86_insn = 274;
pub const x86_insn_X86_INS_KADDQ: x86_insn = 275;
pub const x86_insn_X86_INS_KADDW: x86_insn = 276;
pub const x86_insn_X86_INS_KANDB: x86_insn = 277;
pub const x86_insn_X86_INS_KANDD: x86_insn = 278;
pub const x86_insn_X86_INS_KANDNB: x86_insn = 279;
pub const x86_insn_X86_INS_KANDND: x86_insn = 280;
pub const x86_insn_X86_INS_KANDNQ: x86_insn = 281;
pub const x86_insn_X86_INS_KANDNW: x86_insn = 282;
pub const x86_insn_X86_INS_KANDQ: x86_insn = 283;
pub const x86_insn_X86_INS_KANDW: x86_insn = 284;
pub const x86_insn_X86_INS_KMOVB: x86_insn = 285;
pub const x86_insn_X86_INS_KMOVD: x86_insn = 286;
pub const x86_insn_X86_INS_KMOVQ: x86_insn = 287;
pub const x86_insn_X86_INS_KMOVW: x86_insn = 288;
pub const x86_insn_X86_INS_KNOTB: x86_insn = 289;
pub const x86_insn_X86_INS_KNOTD: x86_insn = 290;
pub const x86_insn_X86_INS_KNOTQ: x86_insn = 291;
pub const x86_insn_X86_INS_KNOTW: x86_insn = 292;
pub const x86_insn_X86_INS_KORB: x86_insn = 293;
pub const x86_insn_X86_INS_KORD: x86_insn = 294;
pub const x86_insn_X86_INS_KORQ: x86_insn = 295;
pub const x86_insn_X86_INS_KORTESTB: x86_insn = 296;
pub const x86_insn_X86_INS_KORTESTD: x86_insn = 297;
pub const x86_insn_X86_INS_KORTESTQ: x86_insn = 298;
pub const x86_insn_X86_INS_KORTESTW: x86_insn = 299;
pub const x86_insn_X86_INS_KORW: x86_insn = 300;
pub const x86_insn_X86_INS_KSHIFTLB: x86_insn = 301;
pub const x86_insn_X86_INS_KSHIFTLD: x86_insn = 302;
pub const x86_insn_X86_INS_KSHIFTLQ: x86_insn = 303;
pub const x86_insn_X86_INS_KSHIFTLW: x86_insn = 304;
pub const x86_insn_X86_INS_KSHIFTRB: x86_insn = 305;
pub const x86_insn_X86_INS_KSHIFTRD: x86_insn = 306;
pub const x86_insn_X86_INS_KSHIFTRQ: x86_insn = 307;
pub const x86_insn_X86_INS_KSHIFTRW: x86_insn = 308;
pub const x86_insn_X86_INS_KTESTB: x86_insn = 309;
pub const x86_insn_X86_INS_KTESTD: x86_insn = 310;
pub const x86_insn_X86_INS_KTESTQ: x86_insn = 311;
pub const x86_insn_X86_INS_KTESTW: x86_insn = 312;
pub const x86_insn_X86_INS_KUNPCKBW: x86_insn = 313;
pub const x86_insn_X86_INS_KUNPCKDQ: x86_insn = 314;
pub const x86_insn_X86_INS_KUNPCKWD: x86_insn = 315;
pub const x86_insn_X86_INS_KXNORB: x86_insn = 316;
pub const x86_insn_X86_INS_KXNORD: x86_insn = 317;
pub const x86_insn_X86_INS_KXNORQ: x86_insn = 318;
pub const x86_insn_X86_INS_KXNORW: x86_insn = 319;
pub const x86_insn_X86_INS_KXORB: x86_insn = 320;
pub const x86_insn_X86_INS_KXORD: x86_insn = 321;
pub const x86_insn_X86_INS_KXORQ: x86_insn = 322;
pub const x86_insn_X86_INS_KXORW: x86_insn = 323;
pub const x86_insn_X86_INS_LAHF: x86_insn = 324;
pub const x86_insn_X86_INS_LAR: x86_insn = 325;
pub const x86_insn_X86_INS_LDDQU: x86_insn = 326;
pub const x86_insn_X86_INS_LDMXCSR: x86_insn = 327;
pub const x86_insn_X86_INS_LDS: x86_insn = 328;
pub const x86_insn_X86_INS_FLDZ: x86_insn = 329;
pub const x86_insn_X86_INS_FLD1: x86_insn = 330;
pub const x86_insn_X86_INS_FLD: x86_insn = 331;
pub const x86_insn_X86_INS_LEA: x86_insn = 332;
pub const x86_insn_X86_INS_LEAVE: x86_insn = 333;
pub const x86_insn_X86_INS_LES: x86_insn = 334;
pub const x86_insn_X86_INS_LFENCE: x86_insn = 335;
pub const x86_insn_X86_INS_LFS: x86_insn = 336;
pub const x86_insn_X86_INS_LGDT: x86_insn = 337;
pub const x86_insn_X86_INS_LGS: x86_insn = 338;
pub const x86_insn_X86_INS_LIDT: x86_insn = 339;
pub const x86_insn_X86_INS_LLDT: x86_insn = 340;
pub const x86_insn_X86_INS_LLWPCB: x86_insn = 341;
pub const x86_insn_X86_INS_LMSW: x86_insn = 342;
pub const x86_insn_X86_INS_LOCK: x86_insn = 343;
pub const x86_insn_X86_INS_LODSB: x86_insn = 344;
pub const x86_insn_X86_INS_LODSD: x86_insn = 345;
pub const x86_insn_X86_INS_LODSQ: x86_insn = 346;
pub const x86_insn_X86_INS_LODSW: x86_insn = 347;
pub const x86_insn_X86_INS_LOOP: x86_insn = 348;
pub const x86_insn_X86_INS_LOOPE: x86_insn = 349;
pub const x86_insn_X86_INS_LOOPNE: x86_insn = 350;
pub const x86_insn_X86_INS_RETF: x86_insn = 351;
pub const x86_insn_X86_INS_RETFQ: x86_insn = 352;
pub const x86_insn_X86_INS_LSL: x86_insn = 353;
pub const x86_insn_X86_INS_LSS: x86_insn = 354;
pub const x86_insn_X86_INS_LTR: x86_insn = 355;
pub const x86_insn_X86_INS_LWPINS: x86_insn = 356;
pub const x86_insn_X86_INS_LWPVAL: x86_insn = 357;
pub const x86_insn_X86_INS_LZCNT: x86_insn = 358;
pub const x86_insn_X86_INS_MASKMOVDQU: x86_insn = 359;
pub const x86_insn_X86_INS_MAXPD: x86_insn = 360;
pub const x86_insn_X86_INS_MAXPS: x86_insn = 361;
pub const x86_insn_X86_INS_MAXSD: x86_insn = 362;
pub const x86_insn_X86_INS_MAXSS: x86_insn = 363;
pub const x86_insn_X86_INS_MFENCE: x86_insn = 364;
pub const x86_insn_X86_INS_MINPD: x86_insn = 365;
pub const x86_insn_X86_INS_MINPS: x86_insn = 366;
pub const x86_insn_X86_INS_MINSD: x86_insn = 367;
pub const x86_insn_X86_INS_MINSS: x86_insn = 368;
pub const x86_insn_X86_INS_CVTPD2PI: x86_insn = 369;
pub const x86_insn_X86_INS_CVTPI2PD: x86_insn = 370;
pub const x86_insn_X86_INS_CVTPI2PS: x86_insn = 371;
pub const x86_insn_X86_INS_CVTPS2PI: x86_insn = 372;
pub const x86_insn_X86_INS_CVTTPD2PI: x86_insn = 373;
pub const x86_insn_X86_INS_CVTTPS2PI: x86_insn = 374;
pub const x86_insn_X86_INS_EMMS: x86_insn = 375;
pub const x86_insn_X86_INS_MASKMOVQ: x86_insn = 376;
pub const x86_insn_X86_INS_MOVD: x86_insn = 377;
pub const x86_insn_X86_INS_MOVQ: x86_insn = 378;
pub const x86_insn_X86_INS_MOVDQ2Q: x86_insn = 379;
pub const x86_insn_X86_INS_MOVNTQ: x86_insn = 380;
pub const x86_insn_X86_INS_MOVQ2DQ: x86_insn = 381;
pub const x86_insn_X86_INS_PABSB: x86_insn = 382;
pub const x86_insn_X86_INS_PABSD: x86_insn = 383;
pub const x86_insn_X86_INS_PABSW: x86_insn = 384;
pub const x86_insn_X86_INS_PACKSSDW: x86_insn = 385;
pub const x86_insn_X86_INS_PACKSSWB: x86_insn = 386;
pub const x86_insn_X86_INS_PACKUSWB: x86_insn = 387;
pub const x86_insn_X86_INS_PADDB: x86_insn = 388;
pub const x86_insn_X86_INS_PADDD: x86_insn = 389;
pub const x86_insn_X86_INS_PADDQ: x86_insn = 390;
pub const x86_insn_X86_INS_PADDSB: x86_insn = 391;
pub const x86_insn_X86_INS_PADDSW: x86_insn = 392;
pub const x86_insn_X86_INS_PADDUSB: x86_insn = 393;
pub const x86_insn_X86_INS_PADDUSW: x86_insn = 394;
pub const x86_insn_X86_INS_PADDW: x86_insn = 395;
pub const x86_insn_X86_INS_PALIGNR: x86_insn = 396;
pub const x86_insn_X86_INS_PANDN: x86_insn = 397;
pub const x86_insn_X86_INS_PAND: x86_insn = 398;
pub const x86_insn_X86_INS_PAVGB: x86_insn = 399;
pub const x86_insn_X86_INS_PAVGW: x86_insn = 400;
pub const x86_insn_X86_INS_PCMPEQB: x86_insn = 401;
pub const x86_insn_X86_INS_PCMPEQD: x86_insn = 402;
pub const x86_insn_X86_INS_PCMPEQW: x86_insn = 403;
pub const x86_insn_X86_INS_PCMPGTB: x86_insn = 404;
pub const x86_insn_X86_INS_PCMPGTD: x86_insn = 405;
pub const x86_insn_X86_INS_PCMPGTW: x86_insn = 406;
pub const x86_insn_X86_INS_PEXTRW: x86_insn = 407;
pub const x86_insn_X86_INS_PHADDD: x86_insn = 408;
pub const x86_insn_X86_INS_PHADDSW: x86_insn = 409;
pub const x86_insn_X86_INS_PHADDW: x86_insn = 410;
pub const x86_insn_X86_INS_PHSUBD: x86_insn = 411;
pub const x86_insn_X86_INS_PHSUBSW: x86_insn = 412;
pub const x86_insn_X86_INS_PHSUBW: x86_insn = 413;
pub const x86_insn_X86_INS_PINSRW: x86_insn = 414;
pub const x86_insn_X86_INS_PMADDUBSW: x86_insn = 415;
pub const x86_insn_X86_INS_PMADDWD: x86_insn = 416;
pub const x86_insn_X86_INS_PMAXSW: x86_insn = 417;
pub const x86_insn_X86_INS_PMAXUB: x86_insn = 418;
pub const x86_insn_X86_INS_PMINSW: x86_insn = 419;
pub const x86_insn_X86_INS_PMINUB: x86_insn = 420;
pub const x86_insn_X86_INS_PMOVMSKB: x86_insn = 421;
pub const x86_insn_X86_INS_PMULHRSW: x86_insn = 422;
pub const x86_insn_X86_INS_PMULHUW: x86_insn = 423;
pub const x86_insn_X86_INS_PMULHW: x86_insn = 424;
pub const x86_insn_X86_INS_PMULLW: x86_insn = 425;
pub const x86_insn_X86_INS_PMULUDQ: x86_insn = 426;
pub const x86_insn_X86_INS_POR: x86_insn = 427;
pub const x86_insn_X86_INS_PSADBW: x86_insn = 428;
pub const x86_insn_X86_INS_PSHUFB: x86_insn = 429;
pub const x86_insn_X86_INS_PSHUFW: x86_insn = 430;
pub const x86_insn_X86_INS_PSIGNB: x86_insn = 431;
pub const x86_insn_X86_INS_PSIGND: x86_insn = 432;
pub const x86_insn_X86_INS_PSIGNW: x86_insn = 433;
pub const x86_insn_X86_INS_PSLLD: x86_insn = 434;
pub const x86_insn_X86_INS_PSLLQ: x86_insn = 435;
pub const x86_insn_X86_INS_PSLLW: x86_insn = 436;
pub const x86_insn_X86_INS_PSRAD: x86_insn = 437;
pub const x86_insn_X86_INS_PSRAW: x86_insn = 438;
pub const x86_insn_X86_INS_PSRLD: x86_insn = 439;
pub const x86_insn_X86_INS_PSRLQ: x86_insn = 440;
pub const x86_insn_X86_INS_PSRLW: x86_insn = 441;
pub const x86_insn_X86_INS_PSUBB: x86_insn = 442;
pub const x86_insn_X86_INS_PSUBD: x86_insn = 443;
pub const x86_insn_X86_INS_PSUBQ: x86_insn = 444;
pub const x86_insn_X86_INS_PSUBSB: x86_insn = 445;
pub const x86_insn_X86_INS_PSUBSW: x86_insn = 446;
pub const x86_insn_X86_INS_PSUBUSB: x86_insn = 447;
pub const x86_insn_X86_INS_PSUBUSW: x86_insn = 448;
pub const x86_insn_X86_INS_PSUBW: x86_insn = 449;
pub const x86_insn_X86_INS_PUNPCKHBW: x86_insn = 450;
pub const x86_insn_X86_INS_PUNPCKHDQ: x86_insn = 451;
pub const x86_insn_X86_INS_PUNPCKHWD: x86_insn = 452;
pub const x86_insn_X86_INS_PUNPCKLBW: x86_insn = 453;
pub const x86_insn_X86_INS_PUNPCKLDQ: x86_insn = 454;
pub const x86_insn_X86_INS_PUNPCKLWD: x86_insn = 455;
pub const x86_insn_X86_INS_PXOR: x86_insn = 456;
pub const x86_insn_X86_INS_MONITORX: x86_insn = 457;
pub const x86_insn_X86_INS_MONITOR: x86_insn = 458;
pub const x86_insn_X86_INS_MONTMUL: x86_insn = 459;
pub const x86_insn_X86_INS_MOV: x86_insn = 460;
pub const x86_insn_X86_INS_MOVABS: x86_insn = 461;
pub const x86_insn_X86_INS_MOVAPD: x86_insn = 462;
pub const x86_insn_X86_INS_MOVAPS: x86_insn = 463;
pub const x86_insn_X86_INS_MOVBE: x86_insn = 464;
pub const x86_insn_X86_INS_MOVDDUP: x86_insn = 465;
pub const x86_insn_X86_INS_MOVDIR64B: x86_insn = 466;
pub const x86_insn_X86_INS_MOVDIRI: x86_insn = 467;
pub const x86_insn_X86_INS_MOVDQA: x86_insn = 468;
pub const x86_insn_X86_INS_MOVDQU: x86_insn = 469;
pub const x86_insn_X86_INS_MOVHLPS: x86_insn = 470;
pub const x86_insn_X86_INS_MOVHPD: x86_insn = 471;
pub const x86_insn_X86_INS_MOVHPS: x86_insn = 472;
pub const x86_insn_X86_INS_MOVLHPS: x86_insn = 473;
pub const x86_insn_X86_INS_MOVLPD: x86_insn = 474;
pub const x86_insn_X86_INS_MOVLPS: x86_insn = 475;
pub const x86_insn_X86_INS_MOVMSKPD: x86_insn = 476;
pub const x86_insn_X86_INS_MOVMSKPS: x86_insn = 477;
pub const x86_insn_X86_INS_MOVNTDQA: x86_insn = 478;
pub const x86_insn_X86_INS_MOVNTDQ: x86_insn = 479;
pub const x86_insn_X86_INS_MOVNTI: x86_insn = 480;
pub const x86_insn_X86_INS_MOVNTPD: x86_insn = 481;
pub const x86_insn_X86_INS_MOVNTPS: x86_insn = 482;
pub const x86_insn_X86_INS_MOVNTSD: x86_insn = 483;
pub const x86_insn_X86_INS_MOVNTSS: x86_insn = 484;
pub const x86_insn_X86_INS_MOVSB: x86_insn = 485;
pub const x86_insn_X86_INS_MOVSD: x86_insn = 486;
pub const x86_insn_X86_INS_MOVSHDUP: x86_insn = 487;
pub const x86_insn_X86_INS_MOVSLDUP: x86_insn = 488;
pub const x86_insn_X86_INS_MOVSQ: x86_insn = 489;
pub const x86_insn_X86_INS_MOVSS: x86_insn = 490;
pub const x86_insn_X86_INS_MOVSW: x86_insn = 491;
pub const x86_insn_X86_INS_MOVSX: x86_insn = 492;
pub const x86_insn_X86_INS_MOVSXD: x86_insn = 493;
pub const x86_insn_X86_INS_MOVUPD: x86_insn = 494;
pub const x86_insn_X86_INS_MOVUPS: x86_insn = 495;
pub const x86_insn_X86_INS_MOVZX: x86_insn = 496;
pub const x86_insn_X86_INS_MPSADBW: x86_insn = 497;
pub const x86_insn_X86_INS_MUL: x86_insn = 498;
pub const x86_insn_X86_INS_MULPD: x86_insn = 499;
pub const x86_insn_X86_INS_MULPS: x86_insn = 500;
pub const x86_insn_X86_INS_MULSD: x86_insn = 501;
pub const x86_insn_X86_INS_MULSS: x86_insn = 502;
pub const x86_insn_X86_INS_MULX: x86_insn = 503;
pub const x86_insn_X86_INS_FMUL: x86_insn = 504;
pub const x86_insn_X86_INS_FIMUL: x86_insn = 505;
pub const x86_insn_X86_INS_FMULP: x86_insn = 506;
pub const x86_insn_X86_INS_MWAITX: x86_insn = 507;
pub const x86_insn_X86_INS_MWAIT: x86_insn = 508;
pub const x86_insn_X86_INS_NEG: x86_insn = 509;
pub const x86_insn_X86_INS_NOP: x86_insn = 510;
pub const x86_insn_X86_INS_NOT: x86_insn = 511;
pub const x86_insn_X86_INS_OR: x86_insn = 512;
pub const x86_insn_X86_INS_ORPD: x86_insn = 513;
pub const x86_insn_X86_INS_ORPS: x86_insn = 514;
pub const x86_insn_X86_INS_OUT: x86_insn = 515;
pub const x86_insn_X86_INS_OUTSB: x86_insn = 516;
pub const x86_insn_X86_INS_OUTSD: x86_insn = 517;
pub const x86_insn_X86_INS_OUTSW: x86_insn = 518;
pub const x86_insn_X86_INS_PACKUSDW: x86_insn = 519;
pub const x86_insn_X86_INS_PAUSE: x86_insn = 520;
pub const x86_insn_X86_INS_PAVGUSB: x86_insn = 521;
pub const x86_insn_X86_INS_PBLENDVB: x86_insn = 522;
pub const x86_insn_X86_INS_PBLENDW: x86_insn = 523;
pub const x86_insn_X86_INS_PCLMULQDQ: x86_insn = 524;
pub const x86_insn_X86_INS_PCMPEQQ: x86_insn = 525;
pub const x86_insn_X86_INS_PCMPESTRI: x86_insn = 526;
pub const x86_insn_X86_INS_PCMPESTRM: x86_insn = 527;
pub const x86_insn_X86_INS_PCMPGTQ: x86_insn = 528;
pub const x86_insn_X86_INS_PCMPISTRI: x86_insn = 529;
pub const x86_insn_X86_INS_PCMPISTRM: x86_insn = 530;
pub const x86_insn_X86_INS_PCONFIG: x86_insn = 531;
pub const x86_insn_X86_INS_PDEP: x86_insn = 532;
pub const x86_insn_X86_INS_PEXT: x86_insn = 533;
pub const x86_insn_X86_INS_PEXTRB: x86_insn = 534;
pub const x86_insn_X86_INS_PEXTRD: x86_insn = 535;
pub const x86_insn_X86_INS_PEXTRQ: x86_insn = 536;
pub const x86_insn_X86_INS_PF2ID: x86_insn = 537;
pub const x86_insn_X86_INS_PF2IW: x86_insn = 538;
pub const x86_insn_X86_INS_PFACC: x86_insn = 539;
pub const x86_insn_X86_INS_PFADD: x86_insn = 540;
pub const x86_insn_X86_INS_PFCMPEQ: x86_insn = 541;
pub const x86_insn_X86_INS_PFCMPGE: x86_insn = 542;
pub const x86_insn_X86_INS_PFCMPGT: x86_insn = 543;
pub const x86_insn_X86_INS_PFMAX: x86_insn = 544;
pub const x86_insn_X86_INS_PFMIN: x86_insn = 545;
pub const x86_insn_X86_INS_PFMUL: x86_insn = 546;
pub const x86_insn_X86_INS_PFNACC: x86_insn = 547;
pub const x86_insn_X86_INS_PFPNACC: x86_insn = 548;
pub const x86_insn_X86_INS_PFRCPIT1: x86_insn = 549;
pub const x86_insn_X86_INS_PFRCPIT2: x86_insn = 550;
pub const x86_insn_X86_INS_PFRCP: x86_insn = 551;
pub const x86_insn_X86_INS_PFRSQIT1: x86_insn = 552;
pub const x86_insn_X86_INS_PFRSQRT: x86_insn = 553;
pub const x86_insn_X86_INS_PFSUBR: x86_insn = 554;
pub const x86_insn_X86_INS_PFSUB: x86_insn = 555;
pub const x86_insn_X86_INS_PHMINPOSUW: x86_insn = 556;
pub const x86_insn_X86_INS_PI2FD: x86_insn = 557;
pub const x86_insn_X86_INS_PI2FW: x86_insn = 558;
pub const x86_insn_X86_INS_PINSRB: x86_insn = 559;
pub const x86_insn_X86_INS_PINSRD: x86_insn = 560;
pub const x86_insn_X86_INS_PINSRQ: x86_insn = 561;
pub const x86_insn_X86_INS_PMAXSB: x86_insn = 562;
pub const x86_insn_X86_INS_PMAXSD: x86_insn = 563;
pub const x86_insn_X86_INS_PMAXUD: x86_insn = 564;
pub const x86_insn_X86_INS_PMAXUW: x86_insn = 565;
pub const x86_insn_X86_INS_PMINSB: x86_insn = 566;
pub const x86_insn_X86_INS_PMINSD: x86_insn = 567;
pub const x86_insn_X86_INS_PMINUD: x86_insn = 568;
pub const x86_insn_X86_INS_PMINUW: x86_insn = 569;
pub const x86_insn_X86_INS_PMOVSXBD: x86_insn = 570;
pub const x86_insn_X86_INS_PMOVSXBQ: x86_insn = 571;
pub const x86_insn_X86_INS_PMOVSXBW: x86_insn = 572;
pub const x86_insn_X86_INS_PMOVSXDQ: x86_insn = 573;
pub const x86_insn_X86_INS_PMOVSXWD: x86_insn = 574;
pub const x86_insn_X86_INS_PMOVSXWQ: x86_insn = 575;
pub const x86_insn_X86_INS_PMOVZXBD: x86_insn = 576;
pub const x86_insn_X86_INS_PMOVZXBQ: x86_insn = 577;
pub const x86_insn_X86_INS_PMOVZXBW: x86_insn = 578;
pub const x86_insn_X86_INS_PMOVZXDQ: x86_insn = 579;
pub const x86_insn_X86_INS_PMOVZXWD: x86_insn = 580;
pub const x86_insn_X86_INS_PMOVZXWQ: x86_insn = 581;
pub const x86_insn_X86_INS_PMULDQ: x86_insn = 582;
pub const x86_insn_X86_INS_PMULHRW: x86_insn = 583;
pub const x86_insn_X86_INS_PMULLD: x86_insn = 584;
pub const x86_insn_X86_INS_POP: x86_insn = 585;
pub const x86_insn_X86_INS_POPAW: x86_insn = 586;
pub const x86_insn_X86_INS_POPAL: x86_insn = 587;
pub const x86_insn_X86_INS_POPCNT: x86_insn = 588;
pub const x86_insn_X86_INS_POPF: x86_insn = 589;
pub const x86_insn_X86_INS_POPFD: x86_insn = 590;
pub const x86_insn_X86_INS_POPFQ: x86_insn = 591;
pub const x86_insn_X86_INS_PREFETCH: x86_insn = 592;
pub const x86_insn_X86_INS_PREFETCHNTA: x86_insn = 593;
pub const x86_insn_X86_INS_PREFETCHT0: x86_insn = 594;
pub const x86_insn_X86_INS_PREFETCHT1: x86_insn = 595;
pub const x86_insn_X86_INS_PREFETCHT2: x86_insn = 596;
pub const x86_insn_X86_INS_PREFETCHW: x86_insn = 597;
pub const x86_insn_X86_INS_PREFETCHWT1: x86_insn = 598;
pub const x86_insn_X86_INS_PSHUFD: x86_insn = 599;
pub const x86_insn_X86_INS_PSHUFHW: x86_insn = 600;
pub const x86_insn_X86_INS_PSHUFLW: x86_insn = 601;
pub const x86_insn_X86_INS_PSLLDQ: x86_insn = 602;
pub const x86_insn_X86_INS_PSRLDQ: x86_insn = 603;
pub const x86_insn_X86_INS_PSWAPD: x86_insn = 604;
pub const x86_insn_X86_INS_PTEST: x86_insn = 605;
pub const x86_insn_X86_INS_PTWRITE: x86_insn = 606;
pub const x86_insn_X86_INS_PUNPCKHQDQ: x86_insn = 607;
pub const x86_insn_X86_INS_PUNPCKLQDQ: x86_insn = 608;
pub const x86_insn_X86_INS_PUSH: x86_insn = 609;
pub const x86_insn_X86_INS_PUSHAW: x86_insn = 610;
pub const x86_insn_X86_INS_PUSHAL: x86_insn = 611;
pub const x86_insn_X86_INS_PUSHF: x86_insn = 612;
pub const x86_insn_X86_INS_PUSHFD: x86_insn = 613;
pub const x86_insn_X86_INS_PUSHFQ: x86_insn = 614;
pub const x86_insn_X86_INS_RCL: x86_insn = 615;
pub const x86_insn_X86_INS_RCPPS: x86_insn = 616;
pub const x86_insn_X86_INS_RCPSS: x86_insn = 617;
pub const x86_insn_X86_INS_RCR: x86_insn = 618;
pub const x86_insn_X86_INS_RDFSBASE: x86_insn = 619;
pub const x86_insn_X86_INS_RDGSBASE: x86_insn = 620;
pub const x86_insn_X86_INS_RDMSR: x86_insn = 621;
pub const x86_insn_X86_INS_RDPID: x86_insn = 622;
pub const x86_insn_X86_INS_RDPKRU: x86_insn = 623;
pub const x86_insn_X86_INS_RDPMC: x86_insn = 624;
pub const x86_insn_X86_INS_RDRAND: x86_insn = 625;
pub const x86_insn_X86_INS_RDSEED: x86_insn = 626;
pub const x86_insn_X86_INS_RDSSPD: x86_insn = 627;
pub const x86_insn_X86_INS_RDSSPQ: x86_insn = 628;
pub const x86_insn_X86_INS_RDTSC: x86_insn = 629;
pub const x86_insn_X86_INS_RDTSCP: x86_insn = 630;
pub const x86_insn_X86_INS_REPNE: x86_insn = 631;
pub const x86_insn_X86_INS_REP: x86_insn = 632;
pub const x86_insn_X86_INS_RET: x86_insn = 633;
pub const x86_insn_X86_INS_REX64: x86_insn = 634;
pub const x86_insn_X86_INS_ROL: x86_insn = 635;
pub const x86_insn_X86_INS_ROR: x86_insn = 636;
pub const x86_insn_X86_INS_RORX: x86_insn = 637;
pub const x86_insn_X86_INS_ROUNDPD: x86_insn = 638;
pub const x86_insn_X86_INS_ROUNDPS: x86_insn = 639;
pub const x86_insn_X86_INS_ROUNDSD: x86_insn = 640;
pub const x86_insn_X86_INS_ROUNDSS: x86_insn = 641;
pub const x86_insn_X86_INS_RSM: x86_insn = 642;
pub const x86_insn_X86_INS_RSQRTPS: x86_insn = 643;
pub const x86_insn_X86_INS_RSQRTSS: x86_insn = 644;
pub const x86_insn_X86_INS_RSTORSSP: x86_insn = 645;
pub const x86_insn_X86_INS_SAHF: x86_insn = 646;
pub const x86_insn_X86_INS_SAL: x86_insn = 647;
pub const x86_insn_X86_INS_SALC: x86_insn = 648;
pub const x86_insn_X86_INS_SAR: x86_insn = 649;
pub const x86_insn_X86_INS_SARX: x86_insn = 650;
pub const x86_insn_X86_INS_SAVEPREVSSP: x86_insn = 651;
pub const x86_insn_X86_INS_SBB: x86_insn = 652;
pub const x86_insn_X86_INS_SCASB: x86_insn = 653;
pub const x86_insn_X86_INS_SCASD: x86_insn = 654;
pub const x86_insn_X86_INS_SCASQ: x86_insn = 655;
pub const x86_insn_X86_INS_SCASW: x86_insn = 656;
pub const x86_insn_X86_INS_SETAE: x86_insn = 657;
pub const x86_insn_X86_INS_SETA: x86_insn = 658;
pub const x86_insn_X86_INS_SETBE: x86_insn = 659;
pub const x86_insn_X86_INS_SETB: x86_insn = 660;
pub const x86_insn_X86_INS_SETE: x86_insn = 661;
pub const x86_insn_X86_INS_SETGE: x86_insn = 662;
pub const x86_insn_X86_INS_SETG: x86_insn = 663;
pub const x86_insn_X86_INS_SETLE: x86_insn = 664;
pub const x86_insn_X86_INS_SETL: x86_insn = 665;
pub const x86_insn_X86_INS_SETNE: x86_insn = 666;
pub const x86_insn_X86_INS_SETNO: x86_insn = 667;
pub const x86_insn_X86_INS_SETNP: x86_insn = 668;
pub const x86_insn_X86_INS_SETNS: x86_insn = 669;
pub const x86_insn_X86_INS_SETO: x86_insn = 670;
pub const x86_insn_X86_INS_SETP: x86_insn = 671;
pub const x86_insn_X86_INS_SETSSBSY: x86_insn = 672;
pub const x86_insn_X86_INS_SETS: x86_insn = 673;
pub const x86_insn_X86_INS_SFENCE: x86_insn = 674;
pub const x86_insn_X86_INS_SGDT: x86_insn = 675;
pub const x86_insn_X86_INS_SHA1MSG1: x86_insn = 676;
pub const x86_insn_X86_INS_SHA1MSG2: x86_insn = 677;
pub const x86_insn_X86_INS_SHA1NEXTE: x86_insn = 678;
pub const x86_insn_X86_INS_SHA1RNDS4: x86_insn = 679;
pub const x86_insn_X86_INS_SHA256MSG1: x86_insn = 680;
pub const x86_insn_X86_INS_SHA256MSG2: x86_insn = 681;
pub const x86_insn_X86_INS_SHA256RNDS2: x86_insn = 682;
pub const x86_insn_X86_INS_SHL: x86_insn = 683;
pub const x86_insn_X86_INS_SHLD: x86_insn = 684;
pub const x86_insn_X86_INS_SHLX: x86_insn = 685;
pub const x86_insn_X86_INS_SHR: x86_insn = 686;
pub const x86_insn_X86_INS_SHRD: x86_insn = 687;
pub const x86_insn_X86_INS_SHRX: x86_insn = 688;
pub const x86_insn_X86_INS_SHUFPD: x86_insn = 689;
pub const x86_insn_X86_INS_SHUFPS: x86_insn = 690;
pub const x86_insn_X86_INS_SIDT: x86_insn = 691;
pub const x86_insn_X86_INS_FSIN: x86_insn = 692;
pub const x86_insn_X86_INS_SKINIT: x86_insn = 693;
pub const x86_insn_X86_INS_SLDT: x86_insn = 694;
pub const x86_insn_X86_INS_SLWPCB: x86_insn = 695;
pub const x86_insn_X86_INS_SMSW: x86_insn = 696;
pub const x86_insn_X86_INS_SQRTPD: x86_insn = 697;
pub const x86_insn_X86_INS_SQRTPS: x86_insn = 698;
pub const x86_insn_X86_INS_SQRTSD: x86_insn = 699;
pub const x86_insn_X86_INS_SQRTSS: x86_insn = 700;
pub const x86_insn_X86_INS_FSQRT: x86_insn = 701;
pub const x86_insn_X86_INS_STAC: x86_insn = 702;
pub const x86_insn_X86_INS_STC: x86_insn = 703;
pub const x86_insn_X86_INS_STD: x86_insn = 704;
pub const x86_insn_X86_INS_STGI: x86_insn = 705;
pub const x86_insn_X86_INS_STI: x86_insn = 706;
pub const x86_insn_X86_INS_STMXCSR: x86_insn = 707;
pub const x86_insn_X86_INS_STOSB: x86_insn = 708;
pub const x86_insn_X86_INS_STOSD: x86_insn = 709;
pub const x86_insn_X86_INS_STOSQ: x86_insn = 710;
pub const x86_insn_X86_INS_STOSW: x86_insn = 711;
pub const x86_insn_X86_INS_STR: x86_insn = 712;
pub const x86_insn_X86_INS_FST: x86_insn = 713;
pub const x86_insn_X86_INS_FSTP: x86_insn = 714;
pub const x86_insn_X86_INS_SUB: x86_insn = 715;
pub const x86_insn_X86_INS_SUBPD: x86_insn = 716;
pub const x86_insn_X86_INS_SUBPS: x86_insn = 717;
pub const x86_insn_X86_INS_FSUBR: x86_insn = 718;
pub const x86_insn_X86_INS_FISUBR: x86_insn = 719;
pub const x86_insn_X86_INS_FSUBRP: x86_insn = 720;
pub const x86_insn_X86_INS_SUBSD: x86_insn = 721;
pub const x86_insn_X86_INS_SUBSS: x86_insn = 722;
pub const x86_insn_X86_INS_FSUB: x86_insn = 723;
pub const x86_insn_X86_INS_FISUB: x86_insn = 724;
pub const x86_insn_X86_INS_FSUBP: x86_insn = 725;
pub const x86_insn_X86_INS_SWAPGS: x86_insn = 726;
pub const x86_insn_X86_INS_SYSCALL: x86_insn = 727;
pub const x86_insn_X86_INS_SYSENTER: x86_insn = 728;
pub const x86_insn_X86_INS_SYSEXIT: x86_insn = 729;
pub const x86_insn_X86_INS_SYSEXITQ: x86_insn = 730;
pub const x86_insn_X86_INS_SYSRET: x86_insn = 731;
pub const x86_insn_X86_INS_SYSRETQ: x86_insn = 732;
pub const x86_insn_X86_INS_T1MSKC: x86_insn = 733;
pub const x86_insn_X86_INS_TEST: x86_insn = 734;
pub const x86_insn_X86_INS_TPAUSE: x86_insn = 735;
pub const x86_insn_X86_INS_FTST: x86_insn = 736;
pub const x86_insn_X86_INS_TZCNT: x86_insn = 737;
pub const x86_insn_X86_INS_TZMSK: x86_insn = 738;
pub const x86_insn_X86_INS_UCOMISD: x86_insn = 739;
pub const x86_insn_X86_INS_UCOMISS: x86_insn = 740;
pub const x86_insn_X86_INS_FUCOMPI: x86_insn = 741;
pub const x86_insn_X86_INS_FUCOMI: x86_insn = 742;
pub const x86_insn_X86_INS_FUCOMPP: x86_insn = 743;
pub const x86_insn_X86_INS_FUCOMP: x86_insn = 744;
pub const x86_insn_X86_INS_FUCOM: x86_insn = 745;
pub const x86_insn_X86_INS_UD0: x86_insn = 746;
pub const x86_insn_X86_INS_UD1: x86_insn = 747;
pub const x86_insn_X86_INS_UD2: x86_insn = 748;
pub const x86_insn_X86_INS_UMONITOR: x86_insn = 749;
pub const x86_insn_X86_INS_UMWAIT: x86_insn = 750;
pub const x86_insn_X86_INS_UNPCKHPD: x86_insn = 751;
pub const x86_insn_X86_INS_UNPCKHPS: x86_insn = 752;
pub const x86_insn_X86_INS_UNPCKLPD: x86_insn = 753;
pub const x86_insn_X86_INS_UNPCKLPS: x86_insn = 754;
pub const x86_insn_X86_INS_V4FMADDPS: x86_insn = 755;
pub const x86_insn_X86_INS_V4FMADDSS: x86_insn = 756;
pub const x86_insn_X86_INS_V4FNMADDPS: x86_insn = 757;
pub const x86_insn_X86_INS_V4FNMADDSS: x86_insn = 758;
pub const x86_insn_X86_INS_VADDPD: x86_insn = 759;
pub const x86_insn_X86_INS_VADDPS: x86_insn = 760;
pub const x86_insn_X86_INS_VADDSD: x86_insn = 761;
pub const x86_insn_X86_INS_VADDSS: x86_insn = 762;
pub const x86_insn_X86_INS_VADDSUBPD: x86_insn = 763;
pub const x86_insn_X86_INS_VADDSUBPS: x86_insn = 764;
pub const x86_insn_X86_INS_VAESDECLAST: x86_insn = 765;
pub const x86_insn_X86_INS_VAESDEC: x86_insn = 766;
pub const x86_insn_X86_INS_VAESENCLAST: x86_insn = 767;
pub const x86_insn_X86_INS_VAESENC: x86_insn = 768;
pub const x86_insn_X86_INS_VAESIMC: x86_insn = 769;
pub const x86_insn_X86_INS_VAESKEYGENASSIST: x86_insn = 770;
pub const x86_insn_X86_INS_VALIGND: x86_insn = 771;
pub const x86_insn_X86_INS_VALIGNQ: x86_insn = 772;
pub const x86_insn_X86_INS_VANDNPD: x86_insn = 773;
pub const x86_insn_X86_INS_VANDNPS: x86_insn = 774;
pub const x86_insn_X86_INS_VANDPD: x86_insn = 775;
pub const x86_insn_X86_INS_VANDPS: x86_insn = 776;
pub const x86_insn_X86_INS_VBLENDMPD: x86_insn = 777;
pub const x86_insn_X86_INS_VBLENDMPS: x86_insn = 778;
pub const x86_insn_X86_INS_VBLENDPD: x86_insn = 779;
pub const x86_insn_X86_INS_VBLENDPS: x86_insn = 780;
pub const x86_insn_X86_INS_VBLENDVPD: x86_insn = 781;
pub const x86_insn_X86_INS_VBLENDVPS: x86_insn = 782;
pub const x86_insn_X86_INS_VBROADCASTF128: x86_insn = 783;
pub const x86_insn_X86_INS_VBROADCASTF32X2: x86_insn = 784;
pub const x86_insn_X86_INS_VBROADCASTF32X4: x86_insn = 785;
pub const x86_insn_X86_INS_VBROADCASTF32X8: x86_insn = 786;
pub const x86_insn_X86_INS_VBROADCASTF64X2: x86_insn = 787;
pub const x86_insn_X86_INS_VBROADCASTF64X4: x86_insn = 788;
pub const x86_insn_X86_INS_VBROADCASTI128: x86_insn = 789;
pub const x86_insn_X86_INS_VBROADCASTI32X2: x86_insn = 790;
pub const x86_insn_X86_INS_VBROADCASTI32X4: x86_insn = 791;
pub const x86_insn_X86_INS_VBROADCASTI32X8: x86_insn = 792;
pub const x86_insn_X86_INS_VBROADCASTI64X2: x86_insn = 793;
pub const x86_insn_X86_INS_VBROADCASTI64X4: x86_insn = 794;
pub const x86_insn_X86_INS_VBROADCASTSD: x86_insn = 795;
pub const x86_insn_X86_INS_VBROADCASTSS: x86_insn = 796;
pub const x86_insn_X86_INS_VCMP: x86_insn = 797;
pub const x86_insn_X86_INS_VCMPPD: x86_insn = 798;
pub const x86_insn_X86_INS_VCMPPS: x86_insn = 799;
pub const x86_insn_X86_INS_VCMPSD: x86_insn = 800;
pub const x86_insn_X86_INS_VCMPSS: x86_insn = 801;
pub const x86_insn_X86_INS_VCOMISD: x86_insn = 802;
pub const x86_insn_X86_INS_VCOMISS: x86_insn = 803;
pub const x86_insn_X86_INS_VCOMPRESSPD: x86_insn = 804;
pub const x86_insn_X86_INS_VCOMPRESSPS: x86_insn = 805;
pub const x86_insn_X86_INS_VCVTDQ2PD: x86_insn = 806;
pub const x86_insn_X86_INS_VCVTDQ2PS: x86_insn = 807;
pub const x86_insn_X86_INS_VCVTPD2DQ: x86_insn = 808;
pub const x86_insn_X86_INS_VCVTPD2PS: x86_insn = 809;
pub const x86_insn_X86_INS_VCVTPD2QQ: x86_insn = 810;
pub const x86_insn_X86_INS_VCVTPD2UDQ: x86_insn = 811;
pub const x86_insn_X86_INS_VCVTPD2UQQ: x86_insn = 812;
pub const x86_insn_X86_INS_VCVTPH2PS: x86_insn = 813;
pub const x86_insn_X86_INS_VCVTPS2DQ: x86_insn = 814;
pub const x86_insn_X86_INS_VCVTPS2PD: x86_insn = 815;
pub const x86_insn_X86_INS_VCVTPS2PH: x86_insn = 816;
pub const x86_insn_X86_INS_VCVTPS2QQ: x86_insn = 817;
pub const x86_insn_X86_INS_VCVTPS2UDQ: x86_insn = 818;
pub const x86_insn_X86_INS_VCVTPS2UQQ: x86_insn = 819;
pub const x86_insn_X86_INS_VCVTQQ2PD: x86_insn = 820;
pub const x86_insn_X86_INS_VCVTQQ2PS: x86_insn = 821;
pub const x86_insn_X86_INS_VCVTSD2SI: x86_insn = 822;
pub const x86_insn_X86_INS_VCVTSD2SS: x86_insn = 823;
pub const x86_insn_X86_INS_VCVTSD2USI: x86_insn = 824;
pub const x86_insn_X86_INS_VCVTSI2SD: x86_insn = 825;
pub const x86_insn_X86_INS_VCVTSI2SS: x86_insn = 826;
pub const x86_insn_X86_INS_VCVTSS2SD: x86_insn = 827;
pub const x86_insn_X86_INS_VCVTSS2SI: x86_insn = 828;
pub const x86_insn_X86_INS_VCVTSS2USI: x86_insn = 829;
pub const x86_insn_X86_INS_VCVTTPD2DQ: x86_insn = 830;
pub const x86_insn_X86_INS_VCVTTPD2QQ: x86_insn = 831;
pub const x86_insn_X86_INS_VCVTTPD2UDQ: x86_insn = 832;
pub const x86_insn_X86_INS_VCVTTPD2UQQ: x86_insn = 833;
pub const x86_insn_X86_INS_VCVTTPS2DQ: x86_insn = 834;
pub const x86_insn_X86_INS_VCVTTPS2QQ: x86_insn = 835;
pub const x86_insn_X86_INS_VCVTTPS2UDQ: x86_insn = 836;
pub const x86_insn_X86_INS_VCVTTPS2UQQ: x86_insn = 837;
pub const x86_insn_X86_INS_VCVTTSD2SI: x86_insn = 838;
pub const x86_insn_X86_INS_VCVTTSD2USI: x86_insn = 839;
pub const x86_insn_X86_INS_VCVTTSS2SI: x86_insn = 840;
pub const x86_insn_X86_INS_VCVTTSS2USI: x86_insn = 841;
pub const x86_insn_X86_INS_VCVTUDQ2PD: x86_insn = 842;
pub const x86_insn_X86_INS_VCVTUDQ2PS: x86_insn = 843;
pub const x86_insn_X86_INS_VCVTUQQ2PD: x86_insn = 844;
pub const x86_insn_X86_INS_VCVTUQQ2PS: x86_insn = 845;
pub const x86_insn_X86_INS_VCVTUSI2SD: x86_insn = 846;
pub const x86_insn_X86_INS_VCVTUSI2SS: x86_insn = 847;
pub const x86_insn_X86_INS_VDBPSADBW: x86_insn = 848;
pub const x86_insn_X86_INS_VDIVPD: x86_insn = 849;
pub const x86_insn_X86_INS_VDIVPS: x86_insn = 850;
pub const x86_insn_X86_INS_VDIVSD: x86_insn = 851;
pub const x86_insn_X86_INS_VDIVSS: x86_insn = 852;
pub const x86_insn_X86_INS_VDPPD: x86_insn = 853;
pub const x86_insn_X86_INS_VDPPS: x86_insn = 854;
pub const x86_insn_X86_INS_VERR: x86_insn = 855;
pub const x86_insn_X86_INS_VERW: x86_insn = 856;
pub const x86_insn_X86_INS_VEXP2PD: x86_insn = 857;
pub const x86_insn_X86_INS_VEXP2PS: x86_insn = 858;
pub const x86_insn_X86_INS_VEXPANDPD: x86_insn = 859;
pub const x86_insn_X86_INS_VEXPANDPS: x86_insn = 860;
pub const x86_insn_X86_INS_VEXTRACTF128: x86_insn = 861;
pub const x86_insn_X86_INS_VEXTRACTF32X4: x86_insn = 862;
pub const x86_insn_X86_INS_VEXTRACTF32X8: x86_insn = 863;
pub const x86_insn_X86_INS_VEXTRACTF64X2: x86_insn = 864;
pub const x86_insn_X86_INS_VEXTRACTF64X4: x86_insn = 865;
pub const x86_insn_X86_INS_VEXTRACTI128: x86_insn = 866;
pub const x86_insn_X86_INS_VEXTRACTI32X4: x86_insn = 867;
pub const x86_insn_X86_INS_VEXTRACTI32X8: x86_insn = 868;
pub const x86_insn_X86_INS_VEXTRACTI64X2: x86_insn = 869;
pub const x86_insn_X86_INS_VEXTRACTI64X4: x86_insn = 870;
pub const x86_insn_X86_INS_VEXTRACTPS: x86_insn = 871;
pub const x86_insn_X86_INS_VFIXUPIMMPD: x86_insn = 872;
pub const x86_insn_X86_INS_VFIXUPIMMPS: x86_insn = 873;
pub const x86_insn_X86_INS_VFIXUPIMMSD: x86_insn = 874;
pub const x86_insn_X86_INS_VFIXUPIMMSS: x86_insn = 875;
pub const x86_insn_X86_INS_VFMADD132PD: x86_insn = 876;
pub const x86_insn_X86_INS_VFMADD132PS: x86_insn = 877;
pub const x86_insn_X86_INS_VFMADD132SD: x86_insn = 878;
pub const x86_insn_X86_INS_VFMADD132SS: x86_insn = 879;
pub const x86_insn_X86_INS_VFMADD213PD: x86_insn = 880;
pub const x86_insn_X86_INS_VFMADD213PS: x86_insn = 881;
pub const x86_insn_X86_INS_VFMADD213SD: x86_insn = 882;
pub const x86_insn_X86_INS_VFMADD213SS: x86_insn = 883;
pub const x86_insn_X86_INS_VFMADD231PD: x86_insn = 884;
pub const x86_insn_X86_INS_VFMADD231PS: x86_insn = 885;
pub const x86_insn_X86_INS_VFMADD231SD: x86_insn = 886;
pub const x86_insn_X86_INS_VFMADD231SS: x86_insn = 887;
pub const x86_insn_X86_INS_VFMADDPD: x86_insn = 888;
pub const x86_insn_X86_INS_VFMADDPS: x86_insn = 889;
pub const x86_insn_X86_INS_VFMADDSD: x86_insn = 890;
pub const x86_insn_X86_INS_VFMADDSS: x86_insn = 891;
pub const x86_insn_X86_INS_VFMADDSUB132PD: x86_insn = 892;
pub const x86_insn_X86_INS_VFMADDSUB132PS: x86_insn = 893;
pub const x86_insn_X86_INS_VFMADDSUB213PD: x86_insn = 894;
pub const x86_insn_X86_INS_VFMADDSUB213PS: x86_insn = 895;
pub const x86_insn_X86_INS_VFMADDSUB231PD: x86_insn = 896;
pub const x86_insn_X86_INS_VFMADDSUB231PS: x86_insn = 897;
pub const x86_insn_X86_INS_VFMADDSUBPD: x86_insn = 898;
pub const x86_insn_X86_INS_VFMADDSUBPS: x86_insn = 899;
pub const x86_insn_X86_INS_VFMSUB132PD: x86_insn = 900;
pub const x86_insn_X86_INS_VFMSUB132PS: x86_insn = 901;
pub const x86_insn_X86_INS_VFMSUB132SD: x86_insn = 902;
pub const x86_insn_X86_INS_VFMSUB132SS: x86_insn = 903;
pub const x86_insn_X86_INS_VFMSUB213PD: x86_insn = 904;
pub const x86_insn_X86_INS_VFMSUB213PS: x86_insn = 905;
pub const x86_insn_X86_INS_VFMSUB213SD: x86_insn = 906;
pub const x86_insn_X86_INS_VFMSUB213SS: x86_insn = 907;
pub const x86_insn_X86_INS_VFMSUB231PD: x86_insn = 908;
pub const x86_insn_X86_INS_VFMSUB231PS: x86_insn = 909;
pub const x86_insn_X86_INS_VFMSUB231SD: x86_insn = 910;
pub const x86_insn_X86_INS_VFMSUB231SS: x86_insn = 911;
pub const x86_insn_X86_INS_VFMSUBADD132PD: x86_insn = 912;
pub const x86_insn_X86_INS_VFMSUBADD132PS: x86_insn = 913;
pub const x86_insn_X86_INS_VFMSUBADD213PD: x86_insn = 914;
pub const x86_insn_X86_INS_VFMSUBADD213PS: x86_insn = 915;
pub const x86_insn_X86_INS_VFMSUBADD231PD: x86_insn = 916;
pub const x86_insn_X86_INS_VFMSUBADD231PS: x86_insn = 917;
pub const x86_insn_X86_INS_VFMSUBADDPD: x86_insn = 918;
pub const x86_insn_X86_INS_VFMSUBADDPS: x86_insn = 919;
pub const x86_insn_X86_INS_VFMSUBPD: x86_insn = 920;
pub const x86_insn_X86_INS_VFMSUBPS: x86_insn = 921;
pub const x86_insn_X86_INS_VFMSUBSD: x86_insn = 922;
pub const x86_insn_X86_INS_VFMSUBSS: x86_insn = 923;
pub const x86_insn_X86_INS_VFNMADD132PD: x86_insn = 924;
pub const x86_insn_X86_INS_VFNMADD132PS: x86_insn = 925;
pub const x86_insn_X86_INS_VFNMADD132SD: x86_insn = 926;
pub const x86_insn_X86_INS_VFNMADD132SS: x86_insn = 927;
pub const x86_insn_X86_INS_VFNMADD213PD: x86_insn = 928;
pub const x86_insn_X86_INS_VFNMADD213PS: x86_insn = 929;
pub const x86_insn_X86_INS_VFNMADD213SD: x86_insn = 930;
pub const x86_insn_X86_INS_VFNMADD213SS: x86_insn = 931;
pub const x86_insn_X86_INS_VFNMADD231PD: x86_insn = 932;
pub const x86_insn_X86_INS_VFNMADD231PS: x86_insn = 933;
pub const x86_insn_X86_INS_VFNMADD231SD: x86_insn = 934;
pub const x86_insn_X86_INS_VFNMADD231SS: x86_insn = 935;
pub const x86_insn_X86_INS_VFNMADDPD: x86_insn = 936;
pub const x86_insn_X86_INS_VFNMADDPS: x86_insn = 937;
pub const x86_insn_X86_INS_VFNMADDSD: x86_insn = 938;
pub const x86_insn_X86_INS_VFNMADDSS: x86_insn = 939;
pub const x86_insn_X86_INS_VFNMSUB132PD: x86_insn = 940;
pub const x86_insn_X86_INS_VFNMSUB132PS: x86_insn = 941;
pub const x86_insn_X86_INS_VFNMSUB132SD: x86_insn = 942;
pub const x86_insn_X86_INS_VFNMSUB132SS: x86_insn = 943;
pub const x86_insn_X86_INS_VFNMSUB213PD: x86_insn = 944;
pub const x86_insn_X86_INS_VFNMSUB213PS: x86_insn = 945;
pub const x86_insn_X86_INS_VFNMSUB213SD: x86_insn = 946;
pub const x86_insn_X86_INS_VFNMSUB213SS: x86_insn = 947;
pub const x86_insn_X86_INS_VFNMSUB231PD: x86_insn = 948;
pub const x86_insn_X86_INS_VFNMSUB231PS: x86_insn = 949;
pub const x86_insn_X86_INS_VFNMSUB231SD: x86_insn = 950;
pub const x86_insn_X86_INS_VFNMSUB231SS: x86_insn = 951;
pub const x86_insn_X86_INS_VFNMSUBPD: x86_insn = 952;
pub const x86_insn_X86_INS_VFNMSUBPS: x86_insn = 953;
pub const x86_insn_X86_INS_VFNMSUBSD: x86_insn = 954;
pub const x86_insn_X86_INS_VFNMSUBSS: x86_insn = 955;
pub const x86_insn_X86_INS_VFPCLASSPD: x86_insn = 956;
pub const x86_insn_X86_INS_VFPCLASSPS: x86_insn = 957;
pub const x86_insn_X86_INS_VFPCLASSSD: x86_insn = 958;
pub const x86_insn_X86_INS_VFPCLASSSS: x86_insn = 959;
pub const x86_insn_X86_INS_VFRCZPD: x86_insn = 960;
pub const x86_insn_X86_INS_VFRCZPS: x86_insn = 961;
pub const x86_insn_X86_INS_VFRCZSD: x86_insn = 962;
pub const x86_insn_X86_INS_VFRCZSS: x86_insn = 963;
pub const x86_insn_X86_INS_VGATHERDPD: x86_insn = 964;
pub const x86_insn_X86_INS_VGATHERDPS: x86_insn = 965;
pub const x86_insn_X86_INS_VGATHERPF0DPD: x86_insn = 966;
pub const x86_insn_X86_INS_VGATHERPF0DPS: x86_insn = 967;
pub const x86_insn_X86_INS_VGATHERPF0QPD: x86_insn = 968;
pub const x86_insn_X86_INS_VGATHERPF0QPS: x86_insn = 969;
pub const x86_insn_X86_INS_VGATHERPF1DPD: x86_insn = 970;
pub const x86_insn_X86_INS_VGATHERPF1DPS: x86_insn = 971;
pub const x86_insn_X86_INS_VGATHERPF1QPD: x86_insn = 972;
pub const x86_insn_X86_INS_VGATHERPF1QPS: x86_insn = 973;
pub const x86_insn_X86_INS_VGATHERQPD: x86_insn = 974;
pub const x86_insn_X86_INS_VGATHERQPS: x86_insn = 975;
pub const x86_insn_X86_INS_VGETEXPPD: x86_insn = 976;
pub const x86_insn_X86_INS_VGETEXPPS: x86_insn = 977;
pub const x86_insn_X86_INS_VGETEXPSD: x86_insn = 978;
pub const x86_insn_X86_INS_VGETEXPSS: x86_insn = 979;
pub const x86_insn_X86_INS_VGETMANTPD: x86_insn = 980;
pub const x86_insn_X86_INS_VGETMANTPS: x86_insn = 981;
pub const x86_insn_X86_INS_VGETMANTSD: x86_insn = 982;
pub const x86_insn_X86_INS_VGETMANTSS: x86_insn = 983;
pub const x86_insn_X86_INS_VGF2P8AFFINEINVQB: x86_insn = 984;
pub const x86_insn_X86_INS_VGF2P8AFFINEQB: x86_insn = 985;
pub const x86_insn_X86_INS_VGF2P8MULB: x86_insn = 986;
pub const x86_insn_X86_INS_VHADDPD: x86_insn = 987;
pub const x86_insn_X86_INS_VHADDPS: x86_insn = 988;
pub const x86_insn_X86_INS_VHSUBPD: x86_insn = 989;
pub const x86_insn_X86_INS_VHSUBPS: x86_insn = 990;
pub const x86_insn_X86_INS_VINSERTF128: x86_insn = 991;
pub const x86_insn_X86_INS_VINSERTF32X4: x86_insn = 992;
pub const x86_insn_X86_INS_VINSERTF32X8: x86_insn = 993;
pub const x86_insn_X86_INS_VINSERTF64X2: x86_insn = 994;
pub const x86_insn_X86_INS_VINSERTF64X4: x86_insn = 995;
pub const x86_insn_X86_INS_VINSERTI128: x86_insn = 996;
pub const x86_insn_X86_INS_VINSERTI32X4: x86_insn = 997;
pub const x86_insn_X86_INS_VINSERTI32X8: x86_insn = 998;
pub const x86_insn_X86_INS_VINSERTI64X2: x86_insn = 999;
pub const x86_insn_X86_INS_VINSERTI64X4: x86_insn = 1000;
pub const x86_insn_X86_INS_VINSERTPS: x86_insn = 1001;
pub const x86_insn_X86_INS_VLDDQU: x86_insn = 1002;
pub const x86_insn_X86_INS_VLDMXCSR: x86_insn = 1003;
pub const x86_insn_X86_INS_VMASKMOVDQU: x86_insn = 1004;
pub const x86_insn_X86_INS_VMASKMOVPD: x86_insn = 1005;
pub const x86_insn_X86_INS_VMASKMOVPS: x86_insn = 1006;
pub const x86_insn_X86_INS_VMAXPD: x86_insn = 1007;
pub const x86_insn_X86_INS_VMAXPS: x86_insn = 1008;
pub const x86_insn_X86_INS_VMAXSD: x86_insn = 1009;
pub const x86_insn_X86_INS_VMAXSS: x86_insn = 1010;
pub const x86_insn_X86_INS_VMCALL: x86_insn = 1011;
pub const x86_insn_X86_INS_VMCLEAR: x86_insn = 1012;
pub const x86_insn_X86_INS_VMFUNC: x86_insn = 1013;
pub const x86_insn_X86_INS_VMINPD: x86_insn = 1014;
pub const x86_insn_X86_INS_VMINPS: x86_insn = 1015;
pub const x86_insn_X86_INS_VMINSD: x86_insn = 1016;
pub const x86_insn_X86_INS_VMINSS: x86_insn = 1017;
pub const x86_insn_X86_INS_VMLAUNCH: x86_insn = 1018;
pub const x86_insn_X86_INS_VMLOAD: x86_insn = 1019;
pub const x86_insn_X86_INS_VMMCALL: x86_insn = 1020;
pub const x86_insn_X86_INS_VMOVQ: x86_insn = 1021;
pub const x86_insn_X86_INS_VMOVAPD: x86_insn = 1022;
pub const x86_insn_X86_INS_VMOVAPS: x86_insn = 1023;
pub const x86_insn_X86_INS_VMOVDDUP: x86_insn = 1024;
pub const x86_insn_X86_INS_VMOVD: x86_insn = 1025;
pub const x86_insn_X86_INS_VMOVDQA32: x86_insn = 1026;
pub const x86_insn_X86_INS_VMOVDQA64: x86_insn = 1027;
pub const x86_insn_X86_INS_VMOVDQA: x86_insn = 1028;
pub const x86_insn_X86_INS_VMOVDQU16: x86_insn = 1029;
pub const x86_insn_X86_INS_VMOVDQU32: x86_insn = 1030;
pub const x86_insn_X86_INS_VMOVDQU64: x86_insn = 1031;
pub const x86_insn_X86_INS_VMOVDQU8: x86_insn = 1032;
pub const x86_insn_X86_INS_VMOVDQU: x86_insn = 1033;
pub const x86_insn_X86_INS_VMOVHLPS: x86_insn = 1034;
pub const x86_insn_X86_INS_VMOVHPD: x86_insn = 1035;
pub const x86_insn_X86_INS_VMOVHPS: x86_insn = 1036;
pub const x86_insn_X86_INS_VMOVLHPS: x86_insn = 1037;
pub const x86_insn_X86_INS_VMOVLPD: x86_insn = 1038;
pub const x86_insn_X86_INS_VMOVLPS: x86_insn = 1039;
pub const x86_insn_X86_INS_VMOVMSKPD: x86_insn = 1040;
pub const x86_insn_X86_INS_VMOVMSKPS: x86_insn = 1041;
pub const x86_insn_X86_INS_VMOVNTDQA: x86_insn = 1042;
pub const x86_insn_X86_INS_VMOVNTDQ: x86_insn = 1043;
pub const x86_insn_X86_INS_VMOVNTPD: x86_insn = 1044;
pub const x86_insn_X86_INS_VMOVNTPS: x86_insn = 1045;
pub const x86_insn_X86_INS_VMOVSD: x86_insn = 1046;
pub const x86_insn_X86_INS_VMOVSHDUP: x86_insn = 1047;
pub const x86_insn_X86_INS_VMOVSLDUP: x86_insn = 1048;
pub const x86_insn_X86_INS_VMOVSS: x86_insn = 1049;
pub const x86_insn_X86_INS_VMOVUPD: x86_insn = 1050;
pub const x86_insn_X86_INS_VMOVUPS: x86_insn = 1051;
pub const x86_insn_X86_INS_VMPSADBW: x86_insn = 1052;
pub const x86_insn_X86_INS_VMPTRLD: x86_insn = 1053;
pub const x86_insn_X86_INS_VMPTRST: x86_insn = 1054;
pub const x86_insn_X86_INS_VMREAD: x86_insn = 1055;
pub const x86_insn_X86_INS_VMRESUME: x86_insn = 1056;
pub const x86_insn_X86_INS_VMRUN: x86_insn = 1057;
pub const x86_insn_X86_INS_VMSAVE: x86_insn = 1058;
pub const x86_insn_X86_INS_VMULPD: x86_insn = 1059;
pub const x86_insn_X86_INS_VMULPS: x86_insn = 1060;
pub const x86_insn_X86_INS_VMULSD: x86_insn = 1061;
pub const x86_insn_X86_INS_VMULSS: x86_insn = 1062;
pub const x86_insn_X86_INS_VMWRITE: x86_insn = 1063;
pub const x86_insn_X86_INS_VMXOFF: x86_insn = 1064;
pub const x86_insn_X86_INS_VMXON: x86_insn = 1065;
pub const x86_insn_X86_INS_VORPD: x86_insn = 1066;
pub const x86_insn_X86_INS_VORPS: x86_insn = 1067;
pub const x86_insn_X86_INS_VP4DPWSSDS: x86_insn = 1068;
pub const x86_insn_X86_INS_VP4DPWSSD: x86_insn = 1069;
pub const x86_insn_X86_INS_VPABSB: x86_insn = 1070;
pub const x86_insn_X86_INS_VPABSD: x86_insn = 1071;
pub const x86_insn_X86_INS_VPABSQ: x86_insn = 1072;
pub const x86_insn_X86_INS_VPABSW: x86_insn = 1073;
pub const x86_insn_X86_INS_VPACKSSDW: x86_insn = 1074;
pub const x86_insn_X86_INS_VPACKSSWB: x86_insn = 1075;
pub const x86_insn_X86_INS_VPACKUSDW: x86_insn = 1076;
pub const x86_insn_X86_INS_VPACKUSWB: x86_insn = 1077;
pub const x86_insn_X86_INS_VPADDB: x86_insn = 1078;
pub const x86_insn_X86_INS_VPADDD: x86_insn = 1079;
pub const x86_insn_X86_INS_VPADDQ: x86_insn = 1080;
pub const x86_insn_X86_INS_VPADDSB: x86_insn = 1081;
pub const x86_insn_X86_INS_VPADDSW: x86_insn = 1082;
pub const x86_insn_X86_INS_VPADDUSB: x86_insn = 1083;
pub const x86_insn_X86_INS_VPADDUSW: x86_insn = 1084;
pub const x86_insn_X86_INS_VPADDW: x86_insn = 1085;
pub const x86_insn_X86_INS_VPALIGNR: x86_insn = 1086;
pub const x86_insn_X86_INS_VPANDD: x86_insn = 1087;
pub const x86_insn_X86_INS_VPANDND: x86_insn = 1088;
pub const x86_insn_X86_INS_VPANDNQ: x86_insn = 1089;
pub const x86_insn_X86_INS_VPANDN: x86_insn = 1090;
pub const x86_insn_X86_INS_VPANDQ: x86_insn = 1091;
pub const x86_insn_X86_INS_VPAND: x86_insn = 1092;
pub const x86_insn_X86_INS_VPAVGB: x86_insn = 1093;
pub const x86_insn_X86_INS_VPAVGW: x86_insn = 1094;
pub const x86_insn_X86_INS_VPBLENDD: x86_insn = 1095;
pub const x86_insn_X86_INS_VPBLENDMB: x86_insn = 1096;
pub const x86_insn_X86_INS_VPBLENDMD: x86_insn = 1097;
pub const x86_insn_X86_INS_VPBLENDMQ: x86_insn = 1098;
pub const x86_insn_X86_INS_VPBLENDMW: x86_insn = 1099;
pub const x86_insn_X86_INS_VPBLENDVB: x86_insn = 1100;
pub const x86_insn_X86_INS_VPBLENDW: x86_insn = 1101;
pub const x86_insn_X86_INS_VPBROADCASTB: x86_insn = 1102;
pub const x86_insn_X86_INS_VPBROADCASTD: x86_insn = 1103;
pub const x86_insn_X86_INS_VPBROADCASTMB2Q: x86_insn = 1104;
pub const x86_insn_X86_INS_VPBROADCASTMW2D: x86_insn = 1105;
pub const x86_insn_X86_INS_VPBROADCASTQ: x86_insn = 1106;
pub const x86_insn_X86_INS_VPBROADCASTW: x86_insn = 1107;
pub const x86_insn_X86_INS_VPCLMULQDQ: x86_insn = 1108;
pub const x86_insn_X86_INS_VPCMOV: x86_insn = 1109;
pub const x86_insn_X86_INS_VPCMP: x86_insn = 1110;
pub const x86_insn_X86_INS_VPCMPB: x86_insn = 1111;
pub const x86_insn_X86_INS_VPCMPD: x86_insn = 1112;
pub const x86_insn_X86_INS_VPCMPEQB: x86_insn = 1113;
pub const x86_insn_X86_INS_VPCMPEQD: x86_insn = 1114;
pub const x86_insn_X86_INS_VPCMPEQQ: x86_insn = 1115;
pub const x86_insn_X86_INS_VPCMPEQW: x86_insn = 1116;
pub const x86_insn_X86_INS_VPCMPESTRI: x86_insn = 1117;
pub const x86_insn_X86_INS_VPCMPESTRM: x86_insn = 1118;
pub const x86_insn_X86_INS_VPCMPGTB: x86_insn = 1119;
pub const x86_insn_X86_INS_VPCMPGTD: x86_insn = 1120;
pub const x86_insn_X86_INS_VPCMPGTQ: x86_insn = 1121;
pub const x86_insn_X86_INS_VPCMPGTW: x86_insn = 1122;
pub const x86_insn_X86_INS_VPCMPISTRI: x86_insn = 1123;
pub const x86_insn_X86_INS_VPCMPISTRM: x86_insn = 1124;
pub const x86_insn_X86_INS_VPCMPQ: x86_insn = 1125;
pub const x86_insn_X86_INS_VPCMPUB: x86_insn = 1126;
pub const x86_insn_X86_INS_VPCMPUD: x86_insn = 1127;
pub const x86_insn_X86_INS_VPCMPUQ: x86_insn = 1128;
pub const x86_insn_X86_INS_VPCMPUW: x86_insn = 1129;
pub const x86_insn_X86_INS_VPCMPW: x86_insn = 1130;
pub const x86_insn_X86_INS_VPCOM: x86_insn = 1131;
pub const x86_insn_X86_INS_VPCOMB: x86_insn = 1132;
pub const x86_insn_X86_INS_VPCOMD: x86_insn = 1133;
pub const x86_insn_X86_INS_VPCOMPRESSB: x86_insn = 1134;
pub const x86_insn_X86_INS_VPCOMPRESSD: x86_insn = 1135;
pub const x86_insn_X86_INS_VPCOMPRESSQ: x86_insn = 1136;
pub const x86_insn_X86_INS_VPCOMPRESSW: x86_insn = 1137;
pub const x86_insn_X86_INS_VPCOMQ: x86_insn = 1138;
pub const x86_insn_X86_INS_VPCOMUB: x86_insn = 1139;
pub const x86_insn_X86_INS_VPCOMUD: x86_insn = 1140;
pub const x86_insn_X86_INS_VPCOMUQ: x86_insn = 1141;
pub const x86_insn_X86_INS_VPCOMUW: x86_insn = 1142;
pub const x86_insn_X86_INS_VPCOMW: x86_insn = 1143;
pub const x86_insn_X86_INS_VPCONFLICTD: x86_insn = 1144;
pub const x86_insn_X86_INS_VPCONFLICTQ: x86_insn = 1145;
pub const x86_insn_X86_INS_VPDPBUSDS: x86_insn = 1146;
pub const x86_insn_X86_INS_VPDPBUSD: x86_insn = 1147;
pub const x86_insn_X86_INS_VPDPWSSDS: x86_insn = 1148;
pub const x86_insn_X86_INS_VPDPWSSD: x86_insn = 1149;
pub const x86_insn_X86_INS_VPERM2F128: x86_insn = 1150;
pub const x86_insn_X86_INS_VPERM2I128: x86_insn = 1151;
pub const x86_insn_X86_INS_VPERMB: x86_insn = 1152;
pub const x86_insn_X86_INS_VPERMD: x86_insn = 1153;
pub const x86_insn_X86_INS_VPERMI2B: x86_insn = 1154;
pub const x86_insn_X86_INS_VPERMI2D: x86_insn = 1155;
pub const x86_insn_X86_INS_VPERMI2PD: x86_insn = 1156;
pub const x86_insn_X86_INS_VPERMI2PS: x86_insn = 1157;
pub const x86_insn_X86_INS_VPERMI2Q: x86_insn = 1158;
pub const x86_insn_X86_INS_VPERMI2W: x86_insn = 1159;
pub const x86_insn_X86_INS_VPERMIL2PD: x86_insn = 1160;
pub const x86_insn_X86_INS_VPERMILPD: x86_insn = 1161;
pub const x86_insn_X86_INS_VPERMIL2PS: x86_insn = 1162;
pub const x86_insn_X86_INS_VPERMILPS: x86_insn = 1163;
pub const x86_insn_X86_INS_VPERMPD: x86_insn = 1164;
pub const x86_insn_X86_INS_VPERMPS: x86_insn = 1165;
pub const x86_insn_X86_INS_VPERMQ: x86_insn = 1166;
pub const x86_insn_X86_INS_VPERMT2B: x86_insn = 1167;
pub const x86_insn_X86_INS_VPERMT2D: x86_insn = 1168;
pub const x86_insn_X86_INS_VPERMT2PD: x86_insn = 1169;
pub const x86_insn_X86_INS_VPERMT2PS: x86_insn = 1170;
pub const x86_insn_X86_INS_VPERMT2Q: x86_insn = 1171;
pub const x86_insn_X86_INS_VPERMT2W: x86_insn = 1172;
pub const x86_insn_X86_INS_VPERMW: x86_insn = 1173;
pub const x86_insn_X86_INS_VPEXPANDB: x86_insn = 1174;
pub const x86_insn_X86_INS_VPEXPANDD: x86_insn = 1175;
pub const x86_insn_X86_INS_VPEXPANDQ: x86_insn = 1176;
pub const x86_insn_X86_INS_VPEXPANDW: x86_insn = 1177;
pub const x86_insn_X86_INS_VPEXTRB: x86_insn = 1178;
pub const x86_insn_X86_INS_VPEXTRD: x86_insn = 1179;
pub const x86_insn_X86_INS_VPEXTRQ: x86_insn = 1180;
pub const x86_insn_X86_INS_VPEXTRW: x86_insn = 1181;
pub const x86_insn_X86_INS_VPGATHERDD: x86_insn = 1182;
pub const x86_insn_X86_INS_VPGATHERDQ: x86_insn = 1183;
pub const x86_insn_X86_INS_VPGATHERQD: x86_insn = 1184;
pub const x86_insn_X86_INS_VPGATHERQQ: x86_insn = 1185;
pub const x86_insn_X86_INS_VPHADDBD: x86_insn = 1186;
pub const x86_insn_X86_INS_VPHADDBQ: x86_insn = 1187;
pub const x86_insn_X86_INS_VPHADDBW: x86_insn = 1188;
pub const x86_insn_X86_INS_VPHADDDQ: x86_insn = 1189;
pub const x86_insn_X86_INS_VPHADDD: x86_insn = 1190;
pub const x86_insn_X86_INS_VPHADDSW: x86_insn = 1191;
pub const x86_insn_X86_INS_VPHADDUBD: x86_insn = 1192;
pub const x86_insn_X86_INS_VPHADDUBQ: x86_insn = 1193;
pub const x86_insn_X86_INS_VPHADDUBW: x86_insn = 1194;
pub const x86_insn_X86_INS_VPHADDUDQ: x86_insn = 1195;
pub const x86_insn_X86_INS_VPHADDUWD: x86_insn = 1196;
pub const x86_insn_X86_INS_VPHADDUWQ: x86_insn = 1197;
pub const x86_insn_X86_INS_VPHADDWD: x86_insn = 1198;
pub const x86_insn_X86_INS_VPHADDWQ: x86_insn = 1199;
pub const x86_insn_X86_INS_VPHADDW: x86_insn = 1200;
pub const x86_insn_X86_INS_VPHMINPOSUW: x86_insn = 1201;
pub const x86_insn_X86_INS_VPHSUBBW: x86_insn = 1202;
pub const x86_insn_X86_INS_VPHSUBDQ: x86_insn = 1203;
pub const x86_insn_X86_INS_VPHSUBD: x86_insn = 1204;
pub const x86_insn_X86_INS_VPHSUBSW: x86_insn = 1205;
pub const x86_insn_X86_INS_VPHSUBWD: x86_insn = 1206;
pub const x86_insn_X86_INS_VPHSUBW: x86_insn = 1207;
pub const x86_insn_X86_INS_VPINSRB: x86_insn = 1208;
pub const x86_insn_X86_INS_VPINSRD: x86_insn = 1209;
pub const x86_insn_X86_INS_VPINSRQ: x86_insn = 1210;
pub const x86_insn_X86_INS_VPINSRW: x86_insn = 1211;
pub const x86_insn_X86_INS_VPLZCNTD: x86_insn = 1212;
pub const x86_insn_X86_INS_VPLZCNTQ: x86_insn = 1213;
pub const x86_insn_X86_INS_VPMACSDD: x86_insn = 1214;
pub const x86_insn_X86_INS_VPMACSDQH: x86_insn = 1215;
pub const x86_insn_X86_INS_VPMACSDQL: x86_insn = 1216;
pub const x86_insn_X86_INS_VPMACSSDD: x86_insn = 1217;
pub const x86_insn_X86_INS_VPMACSSDQH: x86_insn = 1218;
pub const x86_insn_X86_INS_VPMACSSDQL: x86_insn = 1219;
pub const x86_insn_X86_INS_VPMACSSWD: x86_insn = 1220;
pub const x86_insn_X86_INS_VPMACSSWW: x86_insn = 1221;
pub const x86_insn_X86_INS_VPMACSWD: x86_insn = 1222;
pub const x86_insn_X86_INS_VPMACSWW: x86_insn = 1223;
pub const x86_insn_X86_INS_VPMADCSSWD: x86_insn = 1224;
pub const x86_insn_X86_INS_VPMADCSWD: x86_insn = 1225;
pub const x86_insn_X86_INS_VPMADD52HUQ: x86_insn = 1226;
pub const x86_insn_X86_INS_VPMADD52LUQ: x86_insn = 1227;
pub const x86_insn_X86_INS_VPMADDUBSW: x86_insn = 1228;
pub const x86_insn_X86_INS_VPMADDWD: x86_insn = 1229;
pub const x86_insn_X86_INS_VPMASKMOVD: x86_insn = 1230;
pub const x86_insn_X86_INS_VPMASKMOVQ: x86_insn = 1231;
pub const x86_insn_X86_INS_VPMAXSB: x86_insn = 1232;
pub const x86_insn_X86_INS_VPMAXSD: x86_insn = 1233;
pub const x86_insn_X86_INS_VPMAXSQ: x86_insn = 1234;
pub const x86_insn_X86_INS_VPMAXSW: x86_insn = 1235;
pub const x86_insn_X86_INS_VPMAXUB: x86_insn = 1236;
pub const x86_insn_X86_INS_VPMAXUD: x86_insn = 1237;
pub const x86_insn_X86_INS_VPMAXUQ: x86_insn = 1238;
pub const x86_insn_X86_INS_VPMAXUW: x86_insn = 1239;
pub const x86_insn_X86_INS_VPMINSB: x86_insn = 1240;
pub const x86_insn_X86_INS_VPMINSD: x86_insn = 1241;
pub const x86_insn_X86_INS_VPMINSQ: x86_insn = 1242;
pub const x86_insn_X86_INS_VPMINSW: x86_insn = 1243;
pub const x86_insn_X86_INS_VPMINUB: x86_insn = 1244;
pub const x86_insn_X86_INS_VPMINUD: x86_insn = 1245;
pub const x86_insn_X86_INS_VPMINUQ: x86_insn = 1246;
pub const x86_insn_X86_INS_VPMINUW: x86_insn = 1247;
pub const x86_insn_X86_INS_VPMOVB2M: x86_insn = 1248;
pub const x86_insn_X86_INS_VPMOVD2M: x86_insn = 1249;
pub const x86_insn_X86_INS_VPMOVDB: x86_insn = 1250;
pub const x86_insn_X86_INS_VPMOVDW: x86_insn = 1251;
pub const x86_insn_X86_INS_VPMOVM2B: x86_insn = 1252;
pub const x86_insn_X86_INS_VPMOVM2D: x86_insn = 1253;
pub const x86_insn_X86_INS_VPMOVM2Q: x86_insn = 1254;
pub const x86_insn_X86_INS_VPMOVM2W: x86_insn = 1255;
pub const x86_insn_X86_INS_VPMOVMSKB: x86_insn = 1256;
pub const x86_insn_X86_INS_VPMOVQ2M: x86_insn = 1257;
pub const x86_insn_X86_INS_VPMOVQB: x86_insn = 1258;
pub const x86_insn_X86_INS_VPMOVQD: x86_insn = 1259;
pub const x86_insn_X86_INS_VPMOVQW: x86_insn = 1260;
pub const x86_insn_X86_INS_VPMOVSDB: x86_insn = 1261;
pub const x86_insn_X86_INS_VPMOVSDW: x86_insn = 1262;
pub const x86_insn_X86_INS_VPMOVSQB: x86_insn = 1263;
pub const x86_insn_X86_INS_VPMOVSQD: x86_insn = 1264;
pub const x86_insn_X86_INS_VPMOVSQW: x86_insn = 1265;
pub const x86_insn_X86_INS_VPMOVSWB: x86_insn = 1266;
pub const x86_insn_X86_INS_VPMOVSXBD: x86_insn = 1267;
pub const x86_insn_X86_INS_VPMOVSXBQ: x86_insn = 1268;
pub const x86_insn_X86_INS_VPMOVSXBW: x86_insn = 1269;
pub const x86_insn_X86_INS_VPMOVSXDQ: x86_insn = 1270;
pub const x86_insn_X86_INS_VPMOVSXWD: x86_insn = 1271;
pub const x86_insn_X86_INS_VPMOVSXWQ: x86_insn = 1272;
pub const x86_insn_X86_INS_VPMOVUSDB: x86_insn = 1273;
pub const x86_insn_X86_INS_VPMOVUSDW: x86_insn = 1274;
pub const x86_insn_X86_INS_VPMOVUSQB: x86_insn = 1275;
pub const x86_insn_X86_INS_VPMOVUSQD: x86_insn = 1276;
pub const x86_insn_X86_INS_VPMOVUSQW: x86_insn = 1277;
pub const x86_insn_X86_INS_VPMOVUSWB: x86_insn = 1278;
pub const x86_insn_X86_INS_VPMOVW2M: x86_insn = 1279;
pub const x86_insn_X86_INS_VPMOVWB: x86_insn = 1280;
pub const x86_insn_X86_INS_VPMOVZXBD: x86_insn = 1281;
pub const x86_insn_X86_INS_VPMOVZXBQ: x86_insn = 1282;
pub const x86_insn_X86_INS_VPMOVZXBW: x86_insn = 1283;
pub const x86_insn_X86_INS_VPMOVZXDQ: x86_insn = 1284;
pub const x86_insn_X86_INS_VPMOVZXWD: x86_insn = 1285;
pub const x86_insn_X86_INS_VPMOVZXWQ: x86_insn = 1286;
pub const x86_insn_X86_INS_VPMULDQ: x86_insn = 1287;
pub const x86_insn_X86_INS_VPMULHRSW: x86_insn = 1288;
pub const x86_insn_X86_INS_VPMULHUW: x86_insn = 1289;
pub const x86_insn_X86_INS_VPMULHW: x86_insn = 1290;
pub const x86_insn_X86_INS_VPMULLD: x86_insn = 1291;
pub const x86_insn_X86_INS_VPMULLQ: x86_insn = 1292;
pub const x86_insn_X86_INS_VPMULLW: x86_insn = 1293;
pub const x86_insn_X86_INS_VPMULTISHIFTQB: x86_insn = 1294;
pub const x86_insn_X86_INS_VPMULUDQ: x86_insn = 1295;
pub const x86_insn_X86_INS_VPOPCNTB: x86_insn = 1296;
pub const x86_insn_X86_INS_VPOPCNTD: x86_insn = 1297;
pub const x86_insn_X86_INS_VPOPCNTQ: x86_insn = 1298;
pub const x86_insn_X86_INS_VPOPCNTW: x86_insn = 1299;
pub const x86_insn_X86_INS_VPORD: x86_insn = 1300;
pub const x86_insn_X86_INS_VPORQ: x86_insn = 1301;
pub const x86_insn_X86_INS_VPOR: x86_insn = 1302;
pub const x86_insn_X86_INS_VPPERM: x86_insn = 1303;
pub const x86_insn_X86_INS_VPROLD: x86_insn = 1304;
pub const x86_insn_X86_INS_VPROLQ: x86_insn = 1305;
pub const x86_insn_X86_INS_VPROLVD: x86_insn = 1306;
pub const x86_insn_X86_INS_VPROLVQ: x86_insn = 1307;
pub const x86_insn_X86_INS_VPRORD: x86_insn = 1308;
pub const x86_insn_X86_INS_VPRORQ: x86_insn = 1309;
pub const x86_insn_X86_INS_VPRORVD: x86_insn = 1310;
pub const x86_insn_X86_INS_VPRORVQ: x86_insn = 1311;
pub const x86_insn_X86_INS_VPROTB: x86_insn = 1312;
pub const x86_insn_X86_INS_VPROTD: x86_insn = 1313;
pub const x86_insn_X86_INS_VPROTQ: x86_insn = 1314;
pub const x86_insn_X86_INS_VPROTW: x86_insn = 1315;
pub const x86_insn_X86_INS_VPSADBW: x86_insn = 1316;
pub const x86_insn_X86_INS_VPSCATTERDD: x86_insn = 1317;
pub const x86_insn_X86_INS_VPSCATTERDQ: x86_insn = 1318;
pub const x86_insn_X86_INS_VPSCATTERQD: x86_insn = 1319;
pub const x86_insn_X86_INS_VPSCATTERQQ: x86_insn = 1320;
pub const x86_insn_X86_INS_VPSHAB: x86_insn = 1321;
pub const x86_insn_X86_INS_VPSHAD: x86_insn = 1322;
pub const x86_insn_X86_INS_VPSHAQ: x86_insn = 1323;
pub const x86_insn_X86_INS_VPSHAW: x86_insn = 1324;
pub const x86_insn_X86_INS_VPSHLB: x86_insn = 1325;
pub const x86_insn_X86_INS_VPSHLDD: x86_insn = 1326;
pub const x86_insn_X86_INS_VPSHLDQ: x86_insn = 1327;
pub const x86_insn_X86_INS_VPSHLDVD: x86_insn = 1328;
pub const x86_insn_X86_INS_VPSHLDVQ: x86_insn = 1329;
pub const x86_insn_X86_INS_VPSHLDVW: x86_insn = 1330;
pub const x86_insn_X86_INS_VPSHLDW: x86_insn = 1331;
pub const x86_insn_X86_INS_VPSHLD: x86_insn = 1332;
pub const x86_insn_X86_INS_VPSHLQ: x86_insn = 1333;
pub const x86_insn_X86_INS_VPSHLW: x86_insn = 1334;
pub const x86_insn_X86_INS_VPSHRDD: x86_insn = 1335;
pub const x86_insn_X86_INS_VPSHRDQ: x86_insn = 1336;
pub const x86_insn_X86_INS_VPSHRDVD: x86_insn = 1337;
pub const x86_insn_X86_INS_VPSHRDVQ: x86_insn = 1338;
pub const x86_insn_X86_INS_VPSHRDVW: x86_insn = 1339;
pub const x86_insn_X86_INS_VPSHRDW: x86_insn = 1340;
pub const x86_insn_X86_INS_VPSHUFBITQMB: x86_insn = 1341;
pub const x86_insn_X86_INS_VPSHUFB: x86_insn = 1342;
pub const x86_insn_X86_INS_VPSHUFD: x86_insn = 1343;
pub const x86_insn_X86_INS_VPSHUFHW: x86_insn = 1344;
pub const x86_insn_X86_INS_VPSHUFLW: x86_insn = 1345;
pub const x86_insn_X86_INS_VPSIGNB: x86_insn = 1346;
pub const x86_insn_X86_INS_VPSIGND: x86_insn = 1347;
pub const x86_insn_X86_INS_VPSIGNW: x86_insn = 1348;
pub const x86_insn_X86_INS_VPSLLDQ: x86_insn = 1349;
pub const x86_insn_X86_INS_VPSLLD: x86_insn = 1350;
pub const x86_insn_X86_INS_VPSLLQ: x86_insn = 1351;
pub const x86_insn_X86_INS_VPSLLVD: x86_insn = 1352;
pub const x86_insn_X86_INS_VPSLLVQ: x86_insn = 1353;
pub const x86_insn_X86_INS_VPSLLVW: x86_insn = 1354;
pub const x86_insn_X86_INS_VPSLLW: x86_insn = 1355;
pub const x86_insn_X86_INS_VPSRAD: x86_insn = 1356;
pub const x86_insn_X86_INS_VPSRAQ: x86_insn = 1357;
pub const x86_insn_X86_INS_VPSRAVD: x86_insn = 1358;
pub const x86_insn_X86_INS_VPSRAVQ: x86_insn = 1359;
pub const x86_insn_X86_INS_VPSRAVW: x86_insn = 1360;
pub const x86_insn_X86_INS_VPSRAW: x86_insn = 1361;
pub const x86_insn_X86_INS_VPSRLDQ: x86_insn = 1362;
pub const x86_insn_X86_INS_VPSRLD: x86_insn = 1363;
pub const x86_insn_X86_INS_VPSRLQ: x86_insn = 1364;
pub const x86_insn_X86_INS_VPSRLVD: x86_insn = 1365;
pub const x86_insn_X86_INS_VPSRLVQ: x86_insn = 1366;
pub const x86_insn_X86_INS_VPSRLVW: x86_insn = 1367;
pub const x86_insn_X86_INS_VPSRLW: x86_insn = 1368;
pub const x86_insn_X86_INS_VPSUBB: x86_insn = 1369;
pub const x86_insn_X86_INS_VPSUBD: x86_insn = 1370;
pub const x86_insn_X86_INS_VPSUBQ: x86_insn = 1371;
pub const x86_insn_X86_INS_VPSUBSB: x86_insn = 1372;
pub const x86_insn_X86_INS_VPSUBSW: x86_insn = 1373;
pub const x86_insn_X86_INS_VPSUBUSB: x86_insn = 1374;
pub const x86_insn_X86_INS_VPSUBUSW: x86_insn = 1375;
pub const x86_insn_X86_INS_VPSUBW: x86_insn = 1376;
pub const x86_insn_X86_INS_VPTERNLOGD: x86_insn = 1377;
pub const x86_insn_X86_INS_VPTERNLOGQ: x86_insn = 1378;
pub const x86_insn_X86_INS_VPTESTMB: x86_insn = 1379;
pub const x86_insn_X86_INS_VPTESTMD: x86_insn = 1380;
pub const x86_insn_X86_INS_VPTESTMQ: x86_insn = 1381;
pub const x86_insn_X86_INS_VPTESTMW: x86_insn = 1382;
pub const x86_insn_X86_INS_VPTESTNMB: x86_insn = 1383;
pub const x86_insn_X86_INS_VPTESTNMD: x86_insn = 1384;
pub const x86_insn_X86_INS_VPTESTNMQ: x86_insn = 1385;
pub const x86_insn_X86_INS_VPTESTNMW: x86_insn = 1386;
pub const x86_insn_X86_INS_VPTEST: x86_insn = 1387;
pub const x86_insn_X86_INS_VPUNPCKHBW: x86_insn = 1388;
pub const x86_insn_X86_INS_VPUNPCKHDQ: x86_insn = 1389;
pub const x86_insn_X86_INS_VPUNPCKHQDQ: x86_insn = 1390;
pub const x86_insn_X86_INS_VPUNPCKHWD: x86_insn = 1391;
pub const x86_insn_X86_INS_VPUNPCKLBW: x86_insn = 1392;
pub const x86_insn_X86_INS_VPUNPCKLDQ: x86_insn = 1393;
pub const x86_insn_X86_INS_VPUNPCKLQDQ: x86_insn = 1394;
pub const x86_insn_X86_INS_VPUNPCKLWD: x86_insn = 1395;
pub const x86_insn_X86_INS_VPXORD: x86_insn = 1396;
pub const x86_insn_X86_INS_VPXORQ: x86_insn = 1397;
pub const x86_insn_X86_INS_VPXOR: x86_insn = 1398;
pub const x86_insn_X86_INS_VRANGEPD: x86_insn = 1399;
pub const x86_insn_X86_INS_VRANGEPS: x86_insn = 1400;
pub const x86_insn_X86_INS_VRANGESD: x86_insn = 1401;
pub const x86_insn_X86_INS_VRANGESS: x86_insn = 1402;
pub const x86_insn_X86_INS_VRCP14PD: x86_insn = 1403;
pub const x86_insn_X86_INS_VRCP14PS: x86_insn = 1404;
pub const x86_insn_X86_INS_VRCP14SD: x86_insn = 1405;
pub const x86_insn_X86_INS_VRCP14SS: x86_insn = 1406;
pub const x86_insn_X86_INS_VRCP28PD: x86_insn = 1407;
pub const x86_insn_X86_INS_VRCP28PS: x86_insn = 1408;
pub const x86_insn_X86_INS_VRCP28SD: x86_insn = 1409;
pub const x86_insn_X86_INS_VRCP28SS: x86_insn = 1410;
pub const x86_insn_X86_INS_VRCPPS: x86_insn = 1411;
pub const x86_insn_X86_INS_VRCPSS: x86_insn = 1412;
pub const x86_insn_X86_INS_VREDUCEPD: x86_insn = 1413;
pub const x86_insn_X86_INS_VREDUCEPS: x86_insn = 1414;
pub const x86_insn_X86_INS_VREDUCESD: x86_insn = 1415;
pub const x86_insn_X86_INS_VREDUCESS: x86_insn = 1416;
pub const x86_insn_X86_INS_VRNDSCALEPD: x86_insn = 1417;
pub const x86_insn_X86_INS_VRNDSCALEPS: x86_insn = 1418;
pub const x86_insn_X86_INS_VRNDSCALESD: x86_insn = 1419;
pub const x86_insn_X86_INS_VRNDSCALESS: x86_insn = 1420;
pub const x86_insn_X86_INS_VROUNDPD: x86_insn = 1421;
pub const x86_insn_X86_INS_VROUNDPS: x86_insn = 1422;
pub const x86_insn_X86_INS_VROUNDSD: x86_insn = 1423;
pub const x86_insn_X86_INS_VROUNDSS: x86_insn = 1424;
pub const x86_insn_X86_INS_VRSQRT14PD: x86_insn = 1425;
pub const x86_insn_X86_INS_VRSQRT14PS: x86_insn = 1426;
pub const x86_insn_X86_INS_VRSQRT14SD: x86_insn = 1427;
pub const x86_insn_X86_INS_VRSQRT14SS: x86_insn = 1428;
pub const x86_insn_X86_INS_VRSQRT28PD: x86_insn = 1429;
pub const x86_insn_X86_INS_VRSQRT28PS: x86_insn = 1430;
pub const x86_insn_X86_INS_VRSQRT28SD: x86_insn = 1431;
pub const x86_insn_X86_INS_VRSQRT28SS: x86_insn = 1432;
pub const x86_insn_X86_INS_VRSQRTPS: x86_insn = 1433;
pub const x86_insn_X86_INS_VRSQRTSS: x86_insn = 1434;
pub const x86_insn_X86_INS_VSCALEFPD: x86_insn = 1435;
pub const x86_insn_X86_INS_VSCALEFPS: x86_insn = 1436;
pub const x86_insn_X86_INS_VSCALEFSD: x86_insn = 1437;
pub const x86_insn_X86_INS_VSCALEFSS: x86_insn = 1438;
pub const x86_insn_X86_INS_VSCATTERDPD: x86_insn = 1439;
pub const x86_insn_X86_INS_VSCATTERDPS: x86_insn = 1440;
pub const x86_insn_X86_INS_VSCATTERPF0DPD: x86_insn = 1441;
pub const x86_insn_X86_INS_VSCATTERPF0DPS: x86_insn = 1442;
pub const x86_insn_X86_INS_VSCATTERPF0QPD: x86_insn = 1443;
pub const x86_insn_X86_INS_VSCATTERPF0QPS: x86_insn = 1444;
pub const x86_insn_X86_INS_VSCATTERPF1DPD: x86_insn = 1445;
pub const x86_insn_X86_INS_VSCATTERPF1DPS: x86_insn = 1446;
pub const x86_insn_X86_INS_VSCATTERPF1QPD: x86_insn = 1447;
pub const x86_insn_X86_INS_VSCATTERPF1QPS: x86_insn = 1448;
pub const x86_insn_X86_INS_VSCATTERQPD: x86_insn = 1449;
pub const x86_insn_X86_INS_VSCATTERQPS: x86_insn = 1450;
pub const x86_insn_X86_INS_VSHUFF32X4: x86_insn = 1451;
pub const x86_insn_X86_INS_VSHUFF64X2: x86_insn = 1452;
pub const x86_insn_X86_INS_VSHUFI32X4: x86_insn = 1453;
pub const x86_insn_X86_INS_VSHUFI64X2: x86_insn = 1454;
pub const x86_insn_X86_INS_VSHUFPD: x86_insn = 1455;
pub const x86_insn_X86_INS_VSHUFPS: x86_insn = 1456;
pub const x86_insn_X86_INS_VSQRTPD: x86_insn = 1457;
pub const x86_insn_X86_INS_VSQRTPS: x86_insn = 1458;
pub const x86_insn_X86_INS_VSQRTSD: x86_insn = 1459;
pub const x86_insn_X86_INS_VSQRTSS: x86_insn = 1460;
pub const x86_insn_X86_INS_VSTMXCSR: x86_insn = 1461;
pub const x86_insn_X86_INS_VSUBPD: x86_insn = 1462;
pub const x86_insn_X86_INS_VSUBPS: x86_insn = 1463;
pub const x86_insn_X86_INS_VSUBSD: x86_insn = 1464;
pub const x86_insn_X86_INS_VSUBSS: x86_insn = 1465;
pub const x86_insn_X86_INS_VTESTPD: x86_insn = 1466;
pub const x86_insn_X86_INS_VTESTPS: x86_insn = 1467;
pub const x86_insn_X86_INS_VUCOMISD: x86_insn = 1468;
pub const x86_insn_X86_INS_VUCOMISS: x86_insn = 1469;
pub const x86_insn_X86_INS_VUNPCKHPD: x86_insn = 1470;
pub const x86_insn_X86_INS_VUNPCKHPS: x86_insn = 1471;
pub const x86_insn_X86_INS_VUNPCKLPD: x86_insn = 1472;
pub const x86_insn_X86_INS_VUNPCKLPS: x86_insn = 1473;
pub const x86_insn_X86_INS_VXORPD: x86_insn = 1474;
pub const x86_insn_X86_INS_VXORPS: x86_insn = 1475;
pub const x86_insn_X86_INS_VZEROALL: x86_insn = 1476;
pub const x86_insn_X86_INS_VZEROUPPER: x86_insn = 1477;
pub const x86_insn_X86_INS_WAIT: x86_insn = 1478;
pub const x86_insn_X86_INS_WBINVD: x86_insn = 1479;
pub const x86_insn_X86_INS_WBNOINVD: x86_insn = 1480;
pub const x86_insn_X86_INS_WRFSBASE: x86_insn = 1481;
pub const x86_insn_X86_INS_WRGSBASE: x86_insn = 1482;
pub const x86_insn_X86_INS_WRMSR: x86_insn = 1483;
pub const x86_insn_X86_INS_WRPKRU: x86_insn = 1484;
pub const x86_insn_X86_INS_WRSSD: x86_insn = 1485;
pub const x86_insn_X86_INS_WRSSQ: x86_insn = 1486;
pub const x86_insn_X86_INS_WRUSSD: x86_insn = 1487;
pub const x86_insn_X86_INS_WRUSSQ: x86_insn = 1488;
pub const x86_insn_X86_INS_XABORT: x86_insn = 1489;
pub const x86_insn_X86_INS_XACQUIRE: x86_insn = 1490;
pub const x86_insn_X86_INS_XADD: x86_insn = 1491;
pub const x86_insn_X86_INS_XBEGIN: x86_insn = 1492;
pub const x86_insn_X86_INS_XCHG: x86_insn = 1493;
pub const x86_insn_X86_INS_FXCH: x86_insn = 1494;
pub const x86_insn_X86_INS_XCRYPTCBC: x86_insn = 1495;
pub const x86_insn_X86_INS_XCRYPTCFB: x86_insn = 1496;
pub const x86_insn_X86_INS_XCRYPTCTR: x86_insn = 1497;
pub const x86_insn_X86_INS_XCRYPTECB: x86_insn = 1498;
pub const x86_insn_X86_INS_XCRYPTOFB: x86_insn = 1499;
pub const x86_insn_X86_INS_XEND: x86_insn = 1500;
pub const x86_insn_X86_INS_XGETBV: x86_insn = 1501;
pub const x86_insn_X86_INS_XLATB: x86_insn = 1502;
pub const x86_insn_X86_INS_XOR: x86_insn = 1503;
pub const x86_insn_X86_INS_XORPD: x86_insn = 1504;
pub const x86_insn_X86_INS_XORPS: x86_insn = 1505;
pub const x86_insn_X86_INS_XRELEASE: x86_insn = 1506;
pub const x86_insn_X86_INS_XRSTOR: x86_insn = 1507;
pub const x86_insn_X86_INS_XRSTOR64: x86_insn = 1508;
pub const x86_insn_X86_INS_XRSTORS: x86_insn = 1509;
pub const x86_insn_X86_INS_XRSTORS64: x86_insn = 1510;
pub const x86_insn_X86_INS_XSAVE: x86_insn = 1511;
pub const x86_insn_X86_INS_XSAVE64: x86_insn = 1512;
pub const x86_insn_X86_INS_XSAVEC: x86_insn = 1513;
pub const x86_insn_X86_INS_XSAVEC64: x86_insn = 1514;
pub const x86_insn_X86_INS_XSAVEOPT: x86_insn = 1515;
pub const x86_insn_X86_INS_XSAVEOPT64: x86_insn = 1516;
pub const x86_insn_X86_INS_XSAVES: x86_insn = 1517;
pub const x86_insn_X86_INS_XSAVES64: x86_insn = 1518;
pub const x86_insn_X86_INS_XSETBV: x86_insn = 1519;
pub const x86_insn_X86_INS_XSHA1: x86_insn = 1520;
pub const x86_insn_X86_INS_XSHA256: x86_insn = 1521;
pub const x86_insn_X86_INS_XSTORE: x86_insn = 1522;
pub const x86_insn_X86_INS_XTEST: x86_insn = 1523;
pub const x86_insn_X86_INS_ENDING: x86_insn = 1524;
pub type x86_insn = ::core::ffi::c_uint;
pub const x86_insn_group_X86_GRP_INVALID: x86_insn_group = 0;
pub const x86_insn_group_X86_GRP_JUMP: x86_insn_group = 1;
pub const x86_insn_group_X86_GRP_CALL: x86_insn_group = 2;
pub const x86_insn_group_X86_GRP_RET: x86_insn_group = 3;
pub const x86_insn_group_X86_GRP_INT: x86_insn_group = 4;
pub const x86_insn_group_X86_GRP_IRET: x86_insn_group = 5;
pub const x86_insn_group_X86_GRP_PRIVILEGE: x86_insn_group = 6;
pub const x86_insn_group_X86_GRP_BRANCH_RELATIVE: x86_insn_group = 7;
pub const x86_insn_group_X86_GRP_VM: x86_insn_group = 128;
pub const x86_insn_group_X86_GRP_3DNOW: x86_insn_group = 129;
pub const x86_insn_group_X86_GRP_AES: x86_insn_group = 130;
pub const x86_insn_group_X86_GRP_ADX: x86_insn_group = 131;
pub const x86_insn_group_X86_GRP_AVX: x86_insn_group = 132;
pub const x86_insn_group_X86_GRP_AVX2: x86_insn_group = 133;
pub const x86_insn_group_X86_GRP_AVX512: x86_insn_group = 134;
pub const x86_insn_group_X86_GRP_BMI: x86_insn_group = 135;
pub const x86_insn_group_X86_GRP_BMI2: x86_insn_group = 136;
pub const x86_insn_group_X86_GRP_CMOV: x86_insn_group = 137;
pub const x86_insn_group_X86_GRP_F16C: x86_insn_group = 138;
pub const x86_insn_group_X86_GRP_FMA: x86_insn_group = 139;
pub const x86_insn_group_X86_GRP_FMA4: x86_insn_group = 140;
pub const x86_insn_group_X86_GRP_FSGSBASE: x86_insn_group = 141;
pub const x86_insn_group_X86_GRP_HLE: x86_insn_group = 142;
pub const x86_insn_group_X86_GRP_MMX: x86_insn_group = 143;
pub const x86_insn_group_X86_GRP_MODE32: x86_insn_group = 144;
pub const x86_insn_group_X86_GRP_MODE64: x86_insn_group = 145;
pub const x86_insn_group_X86_GRP_RTM: x86_insn_group = 146;
pub const x86_insn_group_X86_GRP_SHA: x86_insn_group = 147;
pub const x86_insn_group_X86_GRP_SSE1: x86_insn_group = 148;
pub const x86_insn_group_X86_GRP_SSE2: x86_insn_group = 149;
pub const x86_insn_group_X86_GRP_SSE3: x86_insn_group = 150;
pub const x86_insn_group_X86_GRP_SSE41: x86_insn_group = 151;
pub const x86_insn_group_X86_GRP_SSE42: x86_insn_group = 152;
pub const x86_insn_group_X86_GRP_SSE4A: x86_insn_group = 153;
pub const x86_insn_group_X86_GRP_SSSE3: x86_insn_group = 154;
pub const x86_insn_group_X86_GRP_PCLMUL: x86_insn_group = 155;
pub const x86_insn_group_X86_GRP_XOP: x86_insn_group = 156;
pub const x86_insn_group_X86_GRP_CDI: x86_insn_group = 157;
pub const x86_insn_group_X86_GRP_ERI: x86_insn_group = 158;
pub const x86_insn_group_X86_GRP_TBM: x86_insn_group = 159;
pub const x86_insn_group_X86_GRP_16BITMODE: x86_insn_group = 160;
pub const x86_insn_group_X86_GRP_NOT64BITMODE: x86_insn_group = 161;
pub const x86_insn_group_X86_GRP_SGX: x86_insn_group = 162;
pub const x86_insn_group_X86_GRP_DQI: x86_insn_group = 163;
pub const x86_insn_group_X86_GRP_BWI: x86_insn_group = 164;
pub const x86_insn_group_X86_GRP_PFI: x86_insn_group = 165;
pub const x86_insn_group_X86_GRP_VLX: x86_insn_group = 166;
pub const x86_insn_group_X86_GRP_SMAP: x86_insn_group = 167;
pub const x86_insn_group_X86_GRP_NOVLX: x86_insn_group = 168;
pub const x86_insn_group_X86_GRP_FPU: x86_insn_group = 169;
pub const x86_insn_group_X86_GRP_ENDING: x86_insn_group = 170;
pub type x86_insn_group = ::core::ffi::c_uint;
pub const xcore_op_type_XCORE_OP_INVALID: xcore_op_type = 0;
pub const xcore_op_type_XCORE_OP_REG: xcore_op_type = 1;
pub const xcore_op_type_XCORE_OP_IMM: xcore_op_type = 2;
pub const xcore_op_type_XCORE_OP_MEM: xcore_op_type = 3;
pub type xcore_op_type = ::core::ffi::c_uint;
pub const xcore_reg_XCORE_REG_INVALID: xcore_reg = 0;
pub const xcore_reg_XCORE_REG_CP: xcore_reg = 1;
pub const xcore_reg_XCORE_REG_DP: xcore_reg = 2;
pub const xcore_reg_XCORE_REG_LR: xcore_reg = 3;
pub const xcore_reg_XCORE_REG_SP: xcore_reg = 4;
pub const xcore_reg_XCORE_REG_R0: xcore_reg = 5;
pub const xcore_reg_XCORE_REG_R1: xcore_reg = 6;
pub const xcore_reg_XCORE_REG_R2: xcore_reg = 7;
pub const xcore_reg_XCORE_REG_R3: xcore_reg = 8;
pub const xcore_reg_XCORE_REG_R4: xcore_reg = 9;
pub const xcore_reg_XCORE_REG_R5: xcore_reg = 10;
pub const xcore_reg_XCORE_REG_R6: xcore_reg = 11;
pub const xcore_reg_XCORE_REG_R7: xcore_reg = 12;
pub const xcore_reg_XCORE_REG_R8: xcore_reg = 13;
pub const xcore_reg_XCORE_REG_R9: xcore_reg = 14;
pub const xcore_reg_XCORE_REG_R10: xcore_reg = 15;
pub const xcore_reg_XCORE_REG_R11: xcore_reg = 16;
pub const xcore_reg_XCORE_REG_PC: xcore_reg = 17;
pub const xcore_reg_XCORE_REG_SCP: xcore_reg = 18;
pub const xcore_reg_XCORE_REG_SSR: xcore_reg = 19;
pub const xcore_reg_XCORE_REG_ET: xcore_reg = 20;
pub const xcore_reg_XCORE_REG_ED: xcore_reg = 21;
pub const xcore_reg_XCORE_REG_SED: xcore_reg = 22;
pub const xcore_reg_XCORE_REG_KEP: xcore_reg = 23;
pub const xcore_reg_XCORE_REG_KSP: xcore_reg = 24;
pub const xcore_reg_XCORE_REG_ID: xcore_reg = 25;
pub const xcore_reg_XCORE_REG_ENDING: xcore_reg = 26;
pub type xcore_reg = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcore_op_mem {
    pub base: u8,
    pub index: u8,
    pub disp: i32,
    pub direct: ::core::ffi::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_xcore_op {
    pub type_: xcore_op_type,
    pub __bindgen_anon_1: cs_xcore_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_xcore_op__bindgen_ty_1 {
    pub reg: xcore_reg,
    pub imm: i32,
    pub mem: xcore_op_mem,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_xcore {
    pub op_count: u8,
    pub operands: [cs_xcore_op; 8usize],
}
pub const xcore_insn_XCORE_INS_INVALID: xcore_insn = 0;
pub const xcore_insn_XCORE_INS_ADD: xcore_insn = 1;
pub const xcore_insn_XCORE_INS_ANDNOT: xcore_insn = 2;
pub const xcore_insn_XCORE_INS_AND: xcore_insn = 3;
pub const xcore_insn_XCORE_INS_ASHR: xcore_insn = 4;
pub const xcore_insn_XCORE_INS_BAU: xcore_insn = 5;
pub const xcore_insn_XCORE_INS_BITREV: xcore_insn = 6;
pub const xcore_insn_XCORE_INS_BLA: xcore_insn = 7;
pub const xcore_insn_XCORE_INS_BLAT: xcore_insn = 8;
pub const xcore_insn_XCORE_INS_BL: xcore_insn = 9;
pub const xcore_insn_XCORE_INS_BF: xcore_insn = 10;
pub const xcore_insn_XCORE_INS_BT: xcore_insn = 11;
pub const xcore_insn_XCORE_INS_BU: xcore_insn = 12;
pub const xcore_insn_XCORE_INS_BRU: xcore_insn = 13;
pub const xcore_insn_XCORE_INS_BYTEREV: xcore_insn = 14;
pub const xcore_insn_XCORE_INS_CHKCT: xcore_insn = 15;
pub const xcore_insn_XCORE_INS_CLRE: xcore_insn = 16;
pub const xcore_insn_XCORE_INS_CLRPT: xcore_insn = 17;
pub const xcore_insn_XCORE_INS_CLRSR: xcore_insn = 18;
pub const xcore_insn_XCORE_INS_CLZ: xcore_insn = 19;
pub const xcore_insn_XCORE_INS_CRC8: xcore_insn = 20;
pub const xcore_insn_XCORE_INS_CRC32: xcore_insn = 21;
pub const xcore_insn_XCORE_INS_DCALL: xcore_insn = 22;
pub const xcore_insn_XCORE_INS_DENTSP: xcore_insn = 23;
pub const xcore_insn_XCORE_INS_DGETREG: xcore_insn = 24;
pub const xcore_insn_XCORE_INS_DIVS: xcore_insn = 25;
pub const xcore_insn_XCORE_INS_DIVU: xcore_insn = 26;
pub const xcore_insn_XCORE_INS_DRESTSP: xcore_insn = 27;
pub const xcore_insn_XCORE_INS_DRET: xcore_insn = 28;
pub const xcore_insn_XCORE_INS_ECALLF: xcore_insn = 29;
pub const xcore_insn_XCORE_INS_ECALLT: xcore_insn = 30;
pub const xcore_insn_XCORE_INS_EDU: xcore_insn = 31;
pub const xcore_insn_XCORE_INS_EEF: xcore_insn = 32;
pub const xcore_insn_XCORE_INS_EET: xcore_insn = 33;
pub const xcore_insn_XCORE_INS_EEU: xcore_insn = 34;
pub const xcore_insn_XCORE_INS_ENDIN: xcore_insn = 35;
pub const xcore_insn_XCORE_INS_ENTSP: xcore_insn = 36;
pub const xcore_insn_XCORE_INS_EQ: xcore_insn = 37;
pub const xcore_insn_XCORE_INS_EXTDP: xcore_insn = 38;
pub const xcore_insn_XCORE_INS_EXTSP: xcore_insn = 39;
pub const xcore_insn_XCORE_INS_FREER: xcore_insn = 40;
pub const xcore_insn_XCORE_INS_FREET: xcore_insn = 41;
pub const xcore_insn_XCORE_INS_GETD: xcore_insn = 42;
pub const xcore_insn_XCORE_INS_GET: xcore_insn = 43;
pub const xcore_insn_XCORE_INS_GETN: xcore_insn = 44;
pub const xcore_insn_XCORE_INS_GETR: xcore_insn = 45;
pub const xcore_insn_XCORE_INS_GETSR: xcore_insn = 46;
pub const xcore_insn_XCORE_INS_GETST: xcore_insn = 47;
pub const xcore_insn_XCORE_INS_GETTS: xcore_insn = 48;
pub const xcore_insn_XCORE_INS_INCT: xcore_insn = 49;
pub const xcore_insn_XCORE_INS_INIT: xcore_insn = 50;
pub const xcore_insn_XCORE_INS_INPW: xcore_insn = 51;
pub const xcore_insn_XCORE_INS_INSHR: xcore_insn = 52;
pub const xcore_insn_XCORE_INS_INT: xcore_insn = 53;
pub const xcore_insn_XCORE_INS_IN: xcore_insn = 54;
pub const xcore_insn_XCORE_INS_KCALL: xcore_insn = 55;
pub const xcore_insn_XCORE_INS_KENTSP: xcore_insn = 56;
pub const xcore_insn_XCORE_INS_KRESTSP: xcore_insn = 57;
pub const xcore_insn_XCORE_INS_KRET: xcore_insn = 58;
pub const xcore_insn_XCORE_INS_LADD: xcore_insn = 59;
pub const xcore_insn_XCORE_INS_LD16S: xcore_insn = 60;
pub const xcore_insn_XCORE_INS_LD8U: xcore_insn = 61;
pub const xcore_insn_XCORE_INS_LDA16: xcore_insn = 62;
pub const xcore_insn_XCORE_INS_LDAP: xcore_insn = 63;
pub const xcore_insn_XCORE_INS_LDAW: xcore_insn = 64;
pub const xcore_insn_XCORE_INS_LDC: xcore_insn = 65;
pub const xcore_insn_XCORE_INS_LDW: xcore_insn = 66;
pub const xcore_insn_XCORE_INS_LDIVU: xcore_insn = 67;
pub const xcore_insn_XCORE_INS_LMUL: xcore_insn = 68;
pub const xcore_insn_XCORE_INS_LSS: xcore_insn = 69;
pub const xcore_insn_XCORE_INS_LSUB: xcore_insn = 70;
pub const xcore_insn_XCORE_INS_LSU: xcore_insn = 71;
pub const xcore_insn_XCORE_INS_MACCS: xcore_insn = 72;
pub const xcore_insn_XCORE_INS_MACCU: xcore_insn = 73;
pub const xcore_insn_XCORE_INS_MJOIN: xcore_insn = 74;
pub const xcore_insn_XCORE_INS_MKMSK: xcore_insn = 75;
pub const xcore_insn_XCORE_INS_MSYNC: xcore_insn = 76;
pub const xcore_insn_XCORE_INS_MUL: xcore_insn = 77;
pub const xcore_insn_XCORE_INS_NEG: xcore_insn = 78;
pub const xcore_insn_XCORE_INS_NOT: xcore_insn = 79;
pub const xcore_insn_XCORE_INS_OR: xcore_insn = 80;
pub const xcore_insn_XCORE_INS_OUTCT: xcore_insn = 81;
pub const xcore_insn_XCORE_INS_OUTPW: xcore_insn = 82;
pub const xcore_insn_XCORE_INS_OUTSHR: xcore_insn = 83;
pub const xcore_insn_XCORE_INS_OUTT: xcore_insn = 84;
pub const xcore_insn_XCORE_INS_OUT: xcore_insn = 85;
pub const xcore_insn_XCORE_INS_PEEK: xcore_insn = 86;
pub const xcore_insn_XCORE_INS_REMS: xcore_insn = 87;
pub const xcore_insn_XCORE_INS_REMU: xcore_insn = 88;
pub const xcore_insn_XCORE_INS_RETSP: xcore_insn = 89;
pub const xcore_insn_XCORE_INS_SETCLK: xcore_insn = 90;
pub const xcore_insn_XCORE_INS_SET: xcore_insn = 91;
pub const xcore_insn_XCORE_INS_SETC: xcore_insn = 92;
pub const xcore_insn_XCORE_INS_SETD: xcore_insn = 93;
pub const xcore_insn_XCORE_INS_SETEV: xcore_insn = 94;
pub const xcore_insn_XCORE_INS_SETN: xcore_insn = 95;
pub const xcore_insn_XCORE_INS_SETPSC: xcore_insn = 96;
pub const xcore_insn_XCORE_INS_SETPT: xcore_insn = 97;
pub const xcore_insn_XCORE_INS_SETRDY: xcore_insn = 98;
pub const xcore_insn_XCORE_INS_SETSR: xcore_insn = 99;
pub const xcore_insn_XCORE_INS_SETTW: xcore_insn = 100;
pub const xcore_insn_XCORE_INS_SETV: xcore_insn = 101;
pub const xcore_insn_XCORE_INS_SEXT: xcore_insn = 102;
pub const xcore_insn_XCORE_INS_SHL: xcore_insn = 103;
pub const xcore_insn_XCORE_INS_SHR: xcore_insn = 104;
pub const xcore_insn_XCORE_INS_SSYNC: xcore_insn = 105;
pub const xcore_insn_XCORE_INS_ST16: xcore_insn = 106;
pub const xcore_insn_XCORE_INS_ST8: xcore_insn = 107;
pub const xcore_insn_XCORE_INS_STW: xcore_insn = 108;
pub const xcore_insn_XCORE_INS_SUB: xcore_insn = 109;
pub const xcore_insn_XCORE_INS_SYNCR: xcore_insn = 110;
pub const xcore_insn_XCORE_INS_TESTCT: xcore_insn = 111;
pub const xcore_insn_XCORE_INS_TESTLCL: xcore_insn = 112;
pub const xcore_insn_XCORE_INS_TESTWCT: xcore_insn = 113;
pub const xcore_insn_XCORE_INS_TSETMR: xcore_insn = 114;
pub const xcore_insn_XCORE_INS_START: xcore_insn = 115;
pub const xcore_insn_XCORE_INS_WAITEF: xcore_insn = 116;
pub const xcore_insn_XCORE_INS_WAITET: xcore_insn = 117;
pub const xcore_insn_XCORE_INS_WAITEU: xcore_insn = 118;
pub const xcore_insn_XCORE_INS_XOR: xcore_insn = 119;
pub const xcore_insn_XCORE_INS_ZEXT: xcore_insn = 120;
pub const xcore_insn_XCORE_INS_ENDING: xcore_insn = 121;
pub type xcore_insn = ::core::ffi::c_uint;
pub const xcore_insn_group_XCORE_GRP_INVALID: xcore_insn_group = 0;
pub const xcore_insn_group_XCORE_GRP_JUMP: xcore_insn_group = 1;
pub const xcore_insn_group_XCORE_GRP_ENDING: xcore_insn_group = 2;
pub type xcore_insn_group = ::core::ffi::c_uint;
pub const tms320c64x_op_type_TMS320C64X_OP_INVALID: tms320c64x_op_type = 0;
pub const tms320c64x_op_type_TMS320C64X_OP_REG: tms320c64x_op_type = 1;
pub const tms320c64x_op_type_TMS320C64X_OP_IMM: tms320c64x_op_type = 2;
pub const tms320c64x_op_type_TMS320C64X_OP_MEM: tms320c64x_op_type = 3;
pub const tms320c64x_op_type_TMS320C64X_OP_REGPAIR: tms320c64x_op_type = 64;
pub type tms320c64x_op_type = ::core::ffi::c_uint;
pub const tms320c64x_mem_disp_TMS320C64X_MEM_DISP_INVALID: tms320c64x_mem_disp = 0;
pub const tms320c64x_mem_disp_TMS320C64X_MEM_DISP_CONSTANT: tms320c64x_mem_disp = 1;
pub const tms320c64x_mem_disp_TMS320C64X_MEM_DISP_REGISTER: tms320c64x_mem_disp = 2;
pub type tms320c64x_mem_disp = ::core::ffi::c_uint;
pub const tms320c64x_mem_dir_TMS320C64X_MEM_DIR_INVALID: tms320c64x_mem_dir = 0;
pub const tms320c64x_mem_dir_TMS320C64X_MEM_DIR_FW: tms320c64x_mem_dir = 1;
pub const tms320c64x_mem_dir_TMS320C64X_MEM_DIR_BW: tms320c64x_mem_dir = 2;
pub type tms320c64x_mem_dir = ::core::ffi::c_uint;
pub const tms320c64x_mem_mod_TMS320C64X_MEM_MOD_INVALID: tms320c64x_mem_mod = 0;
pub const tms320c64x_mem_mod_TMS320C64X_MEM_MOD_NO: tms320c64x_mem_mod = 1;
pub const tms320c64x_mem_mod_TMS320C64X_MEM_MOD_PRE: tms320c64x_mem_mod = 2;
pub const tms320c64x_mem_mod_TMS320C64X_MEM_MOD_POST: tms320c64x_mem_mod = 3;
pub type tms320c64x_mem_mod = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tms320c64x_op_mem {
    pub base: ::core::ffi::c_uint,
    pub disp: ::core::ffi::c_uint,
    pub unit: ::core::ffi::c_uint,
    pub scaled: ::core::ffi::c_uint,
    pub disptype: ::core::ffi::c_uint,
    pub direction: ::core::ffi::c_uint,
    pub modify: ::core::ffi::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_tms320c64x_op {
    pub type_: tms320c64x_op_type,
    pub __bindgen_anon_1: cs_tms320c64x_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_tms320c64x_op__bindgen_ty_1 {
    pub reg: ::core::ffi::c_uint,
    pub imm: i32,
    pub mem: tms320c64x_op_mem,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_tms320c64x {
    pub op_count: u8,
    pub operands: [cs_tms320c64x_op; 8usize],
    pub condition: cs_tms320c64x__bindgen_ty_1,
    pub funit: cs_tms320c64x__bindgen_ty_2,
    pub parallel: ::core::ffi::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cs_tms320c64x__bindgen_ty_1 {
    pub reg: ::core::ffi::c_uint,
    pub zero: ::core::ffi::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cs_tms320c64x__bindgen_ty_2 {
    pub unit: ::core::ffi::c_uint,
    pub side: ::core::ffi::c_uint,
    pub crosspath: ::core::ffi::c_uint,
}
pub const tms320c64x_reg_TMS320C64X_REG_INVALID: tms320c64x_reg = 0;
pub const tms320c64x_reg_TMS320C64X_REG_AMR: tms320c64x_reg = 1;
pub const tms320c64x_reg_TMS320C64X_REG_CSR: tms320c64x_reg = 2;
pub const tms320c64x_reg_TMS320C64X_REG_DIER: tms320c64x_reg = 3;
pub const tms320c64x_reg_TMS320C64X_REG_DNUM: tms320c64x_reg = 4;
pub const tms320c64x_reg_TMS320C64X_REG_ECR: tms320c64x_reg = 5;
pub const tms320c64x_reg_TMS320C64X_REG_GFPGFR: tms320c64x_reg = 6;
pub const tms320c64x_reg_TMS320C64X_REG_GPLYA: tms320c64x_reg = 7;
pub const tms320c64x_reg_TMS320C64X_REG_GPLYB: tms320c64x_reg = 8;
pub const tms320c64x_reg_TMS320C64X_REG_ICR: tms320c64x_reg = 9;
pub const tms320c64x_reg_TMS320C64X_REG_IER: tms320c64x_reg = 10;
pub const tms320c64x_reg_TMS320C64X_REG_IERR: tms320c64x_reg = 11;
pub const tms320c64x_reg_TMS320C64X_REG_ILC: tms320c64x_reg = 12;
pub const tms320c64x_reg_TMS320C64X_REG_IRP: tms320c64x_reg = 13;
pub const tms320c64x_reg_TMS320C64X_REG_ISR: tms320c64x_reg = 14;
pub const tms320c64x_reg_TMS320C64X_REG_ISTP: tms320c64x_reg = 15;
pub const tms320c64x_reg_TMS320C64X_REG_ITSR: tms320c64x_reg = 16;
pub const tms320c64x_reg_TMS320C64X_REG_NRP: tms320c64x_reg = 17;
pub const tms320c64x_reg_TMS320C64X_REG_NTSR: tms320c64x_reg = 18;
pub const tms320c64x_reg_TMS320C64X_REG_REP: tms320c64x_reg = 19;
pub const tms320c64x_reg_TMS320C64X_REG_RILC: tms320c64x_reg = 20;
pub const tms320c64x_reg_TMS320C64X_REG_SSR: tms320c64x_reg = 21;
pub const tms320c64x_reg_TMS320C64X_REG_TSCH: tms320c64x_reg = 22;
pub const tms320c64x_reg_TMS320C64X_REG_TSCL: tms320c64x_reg = 23;
pub const tms320c64x_reg_TMS320C64X_REG_TSR: tms320c64x_reg = 24;
pub const tms320c64x_reg_TMS320C64X_REG_A0: tms320c64x_reg = 25;
pub const tms320c64x_reg_TMS320C64X_REG_A1: tms320c64x_reg = 26;
pub const tms320c64x_reg_TMS320C64X_REG_A2: tms320c64x_reg = 27;
pub const tms320c64x_reg_TMS320C64X_REG_A3: tms320c64x_reg = 28;
pub const tms320c64x_reg_TMS320C64X_REG_A4: tms320c64x_reg = 29;
pub const tms320c64x_reg_TMS320C64X_REG_A5: tms320c64x_reg = 30;
pub const tms320c64x_reg_TMS320C64X_REG_A6: tms320c64x_reg = 31;
pub const tms320c64x_reg_TMS320C64X_REG_A7: tms320c64x_reg = 32;
pub const tms320c64x_reg_TMS320C64X_REG_A8: tms320c64x_reg = 33;
pub const tms320c64x_reg_TMS320C64X_REG_A9: tms320c64x_reg = 34;
pub const tms320c64x_reg_TMS320C64X_REG_A10: tms320c64x_reg = 35;
pub const tms320c64x_reg_TMS320C64X_REG_A11: tms320c64x_reg = 36;
pub const tms320c64x_reg_TMS320C64X_REG_A12: tms320c64x_reg = 37;
pub const tms320c64x_reg_TMS320C64X_REG_A13: tms320c64x_reg = 38;
pub const tms320c64x_reg_TMS320C64X_REG_A14: tms320c64x_reg = 39;
pub const tms320c64x_reg_TMS320C64X_REG_A15: tms320c64x_reg = 40;
pub const tms320c64x_reg_TMS320C64X_REG_A16: tms320c64x_reg = 41;
pub const tms320c64x_reg_TMS320C64X_REG_A17: tms320c64x_reg = 42;
pub const tms320c64x_reg_TMS320C64X_REG_A18: tms320c64x_reg = 43;
pub const tms320c64x_reg_TMS320C64X_REG_A19: tms320c64x_reg = 44;
pub const tms320c64x_reg_TMS320C64X_REG_A20: tms320c64x_reg = 45;
pub const tms320c64x_reg_TMS320C64X_REG_A21: tms320c64x_reg = 46;
pub const tms320c64x_reg_TMS320C64X_REG_A22: tms320c64x_reg = 47;
pub const tms320c64x_reg_TMS320C64X_REG_A23: tms320c64x_reg = 48;
pub const tms320c64x_reg_TMS320C64X_REG_A24: tms320c64x_reg = 49;
pub const tms320c64x_reg_TMS320C64X_REG_A25: tms320c64x_reg = 50;
pub const tms320c64x_reg_TMS320C64X_REG_A26: tms320c64x_reg = 51;
pub const tms320c64x_reg_TMS320C64X_REG_A27: tms320c64x_reg = 52;
pub const tms320c64x_reg_TMS320C64X_REG_A28: tms320c64x_reg = 53;
pub const tms320c64x_reg_TMS320C64X_REG_A29: tms320c64x_reg = 54;
pub const tms320c64x_reg_TMS320C64X_REG_A30: tms320c64x_reg = 55;
pub const tms320c64x_reg_TMS320C64X_REG_A31: tms320c64x_reg = 56;
pub const tms320c64x_reg_TMS320C64X_REG_B0: tms320c64x_reg = 57;
pub const tms320c64x_reg_TMS320C64X_REG_B1: tms320c64x_reg = 58;
pub const tms320c64x_reg_TMS320C64X_REG_B2: tms320c64x_reg = 59;
pub const tms320c64x_reg_TMS320C64X_REG_B3: tms320c64x_reg = 60;
pub const tms320c64x_reg_TMS320C64X_REG_B4: tms320c64x_reg = 61;
pub const tms320c64x_reg_TMS320C64X_REG_B5: tms320c64x_reg = 62;
pub const tms320c64x_reg_TMS320C64X_REG_B6: tms320c64x_reg = 63;
pub const tms320c64x_reg_TMS320C64X_REG_B7: tms320c64x_reg = 64;
pub const tms320c64x_reg_TMS320C64X_REG_B8: tms320c64x_reg = 65;
pub const tms320c64x_reg_TMS320C64X_REG_B9: tms320c64x_reg = 66;
pub const tms320c64x_reg_TMS320C64X_REG_B10: tms320c64x_reg = 67;
pub const tms320c64x_reg_TMS320C64X_REG_B11: tms320c64x_reg = 68;
pub const tms320c64x_reg_TMS320C64X_REG_B12: tms320c64x_reg = 69;
pub const tms320c64x_reg_TMS320C64X_REG_B13: tms320c64x_reg = 70;
pub const tms320c64x_reg_TMS320C64X_REG_B14: tms320c64x_reg = 71;
pub const tms320c64x_reg_TMS320C64X_REG_B15: tms320c64x_reg = 72;
pub const tms320c64x_reg_TMS320C64X_REG_B16: tms320c64x_reg = 73;
pub const tms320c64x_reg_TMS320C64X_REG_B17: tms320c64x_reg = 74;
pub const tms320c64x_reg_TMS320C64X_REG_B18: tms320c64x_reg = 75;
pub const tms320c64x_reg_TMS320C64X_REG_B19: tms320c64x_reg = 76;
pub const tms320c64x_reg_TMS320C64X_REG_B20: tms320c64x_reg = 77;
pub const tms320c64x_reg_TMS320C64X_REG_B21: tms320c64x_reg = 78;
pub const tms320c64x_reg_TMS320C64X_REG_B22: tms320c64x_reg = 79;
pub const tms320c64x_reg_TMS320C64X_REG_B23: tms320c64x_reg = 80;
pub const tms320c64x_reg_TMS320C64X_REG_B24: tms320c64x_reg = 81;
pub const tms320c64x_reg_TMS320C64X_REG_B25: tms320c64x_reg = 82;
pub const tms320c64x_reg_TMS320C64X_REG_B26: tms320c64x_reg = 83;
pub const tms320c64x_reg_TMS320C64X_REG_B27: tms320c64x_reg = 84;
pub const tms320c64x_reg_TMS320C64X_REG_B28: tms320c64x_reg = 85;
pub const tms320c64x_reg_TMS320C64X_REG_B29: tms320c64x_reg = 86;
pub const tms320c64x_reg_TMS320C64X_REG_B30: tms320c64x_reg = 87;
pub const tms320c64x_reg_TMS320C64X_REG_B31: tms320c64x_reg = 88;
pub const tms320c64x_reg_TMS320C64X_REG_PCE1: tms320c64x_reg = 89;
pub const tms320c64x_reg_TMS320C64X_REG_ENDING: tms320c64x_reg = 90;
pub const tms320c64x_reg_TMS320C64X_REG_EFR: tms320c64x_reg = 5;
pub const tms320c64x_reg_TMS320C64X_REG_IFR: tms320c64x_reg = 14;
pub type tms320c64x_reg = ::core::ffi::c_uint;
pub const tms320c64x_insn_TMS320C64X_INS_INVALID: tms320c64x_insn = 0;
pub const tms320c64x_insn_TMS320C64X_INS_ABS: tms320c64x_insn = 1;
pub const tms320c64x_insn_TMS320C64X_INS_ABS2: tms320c64x_insn = 2;
pub const tms320c64x_insn_TMS320C64X_INS_ADD: tms320c64x_insn = 3;
pub const tms320c64x_insn_TMS320C64X_INS_ADD2: tms320c64x_insn = 4;
pub const tms320c64x_insn_TMS320C64X_INS_ADD4: tms320c64x_insn = 5;
pub const tms320c64x_insn_TMS320C64X_INS_ADDAB: tms320c64x_insn = 6;
pub const tms320c64x_insn_TMS320C64X_INS_ADDAD: tms320c64x_insn = 7;
pub const tms320c64x_insn_TMS320C64X_INS_ADDAH: tms320c64x_insn = 8;
pub const tms320c64x_insn_TMS320C64X_INS_ADDAW: tms320c64x_insn = 9;
pub const tms320c64x_insn_TMS320C64X_INS_ADDK: tms320c64x_insn = 10;
pub const tms320c64x_insn_TMS320C64X_INS_ADDKPC: tms320c64x_insn = 11;
pub const tms320c64x_insn_TMS320C64X_INS_ADDU: tms320c64x_insn = 12;
pub const tms320c64x_insn_TMS320C64X_INS_AND: tms320c64x_insn = 13;
pub const tms320c64x_insn_TMS320C64X_INS_ANDN: tms320c64x_insn = 14;
pub const tms320c64x_insn_TMS320C64X_INS_AVG2: tms320c64x_insn = 15;
pub const tms320c64x_insn_TMS320C64X_INS_AVGU4: tms320c64x_insn = 16;
pub const tms320c64x_insn_TMS320C64X_INS_B: tms320c64x_insn = 17;
pub const tms320c64x_insn_TMS320C64X_INS_BDEC: tms320c64x_insn = 18;
pub const tms320c64x_insn_TMS320C64X_INS_BITC4: tms320c64x_insn = 19;
pub const tms320c64x_insn_TMS320C64X_INS_BNOP: tms320c64x_insn = 20;
pub const tms320c64x_insn_TMS320C64X_INS_BPOS: tms320c64x_insn = 21;
pub const tms320c64x_insn_TMS320C64X_INS_CLR: tms320c64x_insn = 22;
pub const tms320c64x_insn_TMS320C64X_INS_CMPEQ: tms320c64x_insn = 23;
pub const tms320c64x_insn_TMS320C64X_INS_CMPEQ2: tms320c64x_insn = 24;
pub const tms320c64x_insn_TMS320C64X_INS_CMPEQ4: tms320c64x_insn = 25;
pub const tms320c64x_insn_TMS320C64X_INS_CMPGT: tms320c64x_insn = 26;
pub const tms320c64x_insn_TMS320C64X_INS_CMPGT2: tms320c64x_insn = 27;
pub const tms320c64x_insn_TMS320C64X_INS_CMPGTU4: tms320c64x_insn = 28;
pub const tms320c64x_insn_TMS320C64X_INS_CMPLT: tms320c64x_insn = 29;
pub const tms320c64x_insn_TMS320C64X_INS_CMPLTU: tms320c64x_insn = 30;
pub const tms320c64x_insn_TMS320C64X_INS_DEAL: tms320c64x_insn = 31;
pub const tms320c64x_insn_TMS320C64X_INS_DOTP2: tms320c64x_insn = 32;
pub const tms320c64x_insn_TMS320C64X_INS_DOTPN2: tms320c64x_insn = 33;
pub const tms320c64x_insn_TMS320C64X_INS_DOTPNRSU2: tms320c64x_insn = 34;
pub const tms320c64x_insn_TMS320C64X_INS_DOTPRSU2: tms320c64x_insn = 35;
pub const tms320c64x_insn_TMS320C64X_INS_DOTPSU4: tms320c64x_insn = 36;
pub const tms320c64x_insn_TMS320C64X_INS_DOTPU4: tms320c64x_insn = 37;
pub const tms320c64x_insn_TMS320C64X_INS_EXT: tms320c64x_insn = 38;
pub const tms320c64x_insn_TMS320C64X_INS_EXTU: tms320c64x_insn = 39;
pub const tms320c64x_insn_TMS320C64X_INS_GMPGTU: tms320c64x_insn = 40;
pub const tms320c64x_insn_TMS320C64X_INS_GMPY4: tms320c64x_insn = 41;
pub const tms320c64x_insn_TMS320C64X_INS_LDB: tms320c64x_insn = 42;
pub const tms320c64x_insn_TMS320C64X_INS_LDBU: tms320c64x_insn = 43;
pub const tms320c64x_insn_TMS320C64X_INS_LDDW: tms320c64x_insn = 44;
pub const tms320c64x_insn_TMS320C64X_INS_LDH: tms320c64x_insn = 45;
pub const tms320c64x_insn_TMS320C64X_INS_LDHU: tms320c64x_insn = 46;
pub const tms320c64x_insn_TMS320C64X_INS_LDNDW: tms320c64x_insn = 47;
pub const tms320c64x_insn_TMS320C64X_INS_LDNW: tms320c64x_insn = 48;
pub const tms320c64x_insn_TMS320C64X_INS_LDW: tms320c64x_insn = 49;
pub const tms320c64x_insn_TMS320C64X_INS_LMBD: tms320c64x_insn = 50;
pub const tms320c64x_insn_TMS320C64X_INS_MAX2: tms320c64x_insn = 51;
pub const tms320c64x_insn_TMS320C64X_INS_MAXU4: tms320c64x_insn = 52;
pub const tms320c64x_insn_TMS320C64X_INS_MIN2: tms320c64x_insn = 53;
pub const tms320c64x_insn_TMS320C64X_INS_MINU4: tms320c64x_insn = 54;
pub const tms320c64x_insn_TMS320C64X_INS_MPY: tms320c64x_insn = 55;
pub const tms320c64x_insn_TMS320C64X_INS_MPY2: tms320c64x_insn = 56;
pub const tms320c64x_insn_TMS320C64X_INS_MPYH: tms320c64x_insn = 57;
pub const tms320c64x_insn_TMS320C64X_INS_MPYHI: tms320c64x_insn = 58;
pub const tms320c64x_insn_TMS320C64X_INS_MPYHIR: tms320c64x_insn = 59;
pub const tms320c64x_insn_TMS320C64X_INS_MPYHL: tms320c64x_insn = 60;
pub const tms320c64x_insn_TMS320C64X_INS_MPYHLU: tms320c64x_insn = 61;
pub const tms320c64x_insn_TMS320C64X_INS_MPYHSLU: tms320c64x_insn = 62;
pub const tms320c64x_insn_TMS320C64X_INS_MPYHSU: tms320c64x_insn = 63;
pub const tms320c64x_insn_TMS320C64X_INS_MPYHU: tms320c64x_insn = 64;
pub const tms320c64x_insn_TMS320C64X_INS_MPYHULS: tms320c64x_insn = 65;
pub const tms320c64x_insn_TMS320C64X_INS_MPYHUS: tms320c64x_insn = 66;
pub const tms320c64x_insn_TMS320C64X_INS_MPYLH: tms320c64x_insn = 67;
pub const tms320c64x_insn_TMS320C64X_INS_MPYLHU: tms320c64x_insn = 68;
pub const tms320c64x_insn_TMS320C64X_INS_MPYLI: tms320c64x_insn = 69;
pub const tms320c64x_insn_TMS320C64X_INS_MPYLIR: tms320c64x_insn = 70;
pub const tms320c64x_insn_TMS320C64X_INS_MPYLSHU: tms320c64x_insn = 71;
pub const tms320c64x_insn_TMS320C64X_INS_MPYLUHS: tms320c64x_insn = 72;
pub const tms320c64x_insn_TMS320C64X_INS_MPYSU: tms320c64x_insn = 73;
pub const tms320c64x_insn_TMS320C64X_INS_MPYSU4: tms320c64x_insn = 74;
pub const tms320c64x_insn_TMS320C64X_INS_MPYU: tms320c64x_insn = 75;
pub const tms320c64x_insn_TMS320C64X_INS_MPYU4: tms320c64x_insn = 76;
pub const tms320c64x_insn_TMS320C64X_INS_MPYUS: tms320c64x_insn = 77;
pub const tms320c64x_insn_TMS320C64X_INS_MVC: tms320c64x_insn = 78;
pub const tms320c64x_insn_TMS320C64X_INS_MVD: tms320c64x_insn = 79;
pub const tms320c64x_insn_TMS320C64X_INS_MVK: tms320c64x_insn = 80;
pub const tms320c64x_insn_TMS320C64X_INS_MVKL: tms320c64x_insn = 81;
pub const tms320c64x_insn_TMS320C64X_INS_MVKLH: tms320c64x_insn = 82;
pub const tms320c64x_insn_TMS320C64X_INS_NOP: tms320c64x_insn = 83;
pub const tms320c64x_insn_TMS320C64X_INS_NORM: tms320c64x_insn = 84;
pub const tms320c64x_insn_TMS320C64X_INS_OR: tms320c64x_insn = 85;
pub const tms320c64x_insn_TMS320C64X_INS_PACK2: tms320c64x_insn = 86;
pub const tms320c64x_insn_TMS320C64X_INS_PACKH2: tms320c64x_insn = 87;
pub const tms320c64x_insn_TMS320C64X_INS_PACKH4: tms320c64x_insn = 88;
pub const tms320c64x_insn_TMS320C64X_INS_PACKHL2: tms320c64x_insn = 89;
pub const tms320c64x_insn_TMS320C64X_INS_PACKL4: tms320c64x_insn = 90;
pub const tms320c64x_insn_TMS320C64X_INS_PACKLH2: tms320c64x_insn = 91;
pub const tms320c64x_insn_TMS320C64X_INS_ROTL: tms320c64x_insn = 92;
pub const tms320c64x_insn_TMS320C64X_INS_SADD: tms320c64x_insn = 93;
pub const tms320c64x_insn_TMS320C64X_INS_SADD2: tms320c64x_insn = 94;
pub const tms320c64x_insn_TMS320C64X_INS_SADDU4: tms320c64x_insn = 95;
pub const tms320c64x_insn_TMS320C64X_INS_SADDUS2: tms320c64x_insn = 96;
pub const tms320c64x_insn_TMS320C64X_INS_SAT: tms320c64x_insn = 97;
pub const tms320c64x_insn_TMS320C64X_INS_SET: tms320c64x_insn = 98;
pub const tms320c64x_insn_TMS320C64X_INS_SHFL: tms320c64x_insn = 99;
pub const tms320c64x_insn_TMS320C64X_INS_SHL: tms320c64x_insn = 100;
pub const tms320c64x_insn_TMS320C64X_INS_SHLMB: tms320c64x_insn = 101;
pub const tms320c64x_insn_TMS320C64X_INS_SHR: tms320c64x_insn = 102;
pub const tms320c64x_insn_TMS320C64X_INS_SHR2: tms320c64x_insn = 103;
pub const tms320c64x_insn_TMS320C64X_INS_SHRMB: tms320c64x_insn = 104;
pub const tms320c64x_insn_TMS320C64X_INS_SHRU: tms320c64x_insn = 105;
pub const tms320c64x_insn_TMS320C64X_INS_SHRU2: tms320c64x_insn = 106;
pub const tms320c64x_insn_TMS320C64X_INS_SMPY: tms320c64x_insn = 107;
pub const tms320c64x_insn_TMS320C64X_INS_SMPY2: tms320c64x_insn = 108;
pub const tms320c64x_insn_TMS320C64X_INS_SMPYH: tms320c64x_insn = 109;
pub const tms320c64x_insn_TMS320C64X_INS_SMPYHL: tms320c64x_insn = 110;
pub const tms320c64x_insn_TMS320C64X_INS_SMPYLH: tms320c64x_insn = 111;
pub const tms320c64x_insn_TMS320C64X_INS_SPACK2: tms320c64x_insn = 112;
pub const tms320c64x_insn_TMS320C64X_INS_SPACKU4: tms320c64x_insn = 113;
pub const tms320c64x_insn_TMS320C64X_INS_SSHL: tms320c64x_insn = 114;
pub const tms320c64x_insn_TMS320C64X_INS_SSHVL: tms320c64x_insn = 115;
pub const tms320c64x_insn_TMS320C64X_INS_SSHVR: tms320c64x_insn = 116;
pub const tms320c64x_insn_TMS320C64X_INS_SSUB: tms320c64x_insn = 117;
pub const tms320c64x_insn_TMS320C64X_INS_STB: tms320c64x_insn = 118;
pub const tms320c64x_insn_TMS320C64X_INS_STDW: tms320c64x_insn = 119;
pub const tms320c64x_insn_TMS320C64X_INS_STH: tms320c64x_insn = 120;
pub const tms320c64x_insn_TMS320C64X_INS_STNDW: tms320c64x_insn = 121;
pub const tms320c64x_insn_TMS320C64X_INS_STNW: tms320c64x_insn = 122;
pub const tms320c64x_insn_TMS320C64X_INS_STW: tms320c64x_insn = 123;
pub const tms320c64x_insn_TMS320C64X_INS_SUB: tms320c64x_insn = 124;
pub const tms320c64x_insn_TMS320C64X_INS_SUB2: tms320c64x_insn = 125;
pub const tms320c64x_insn_TMS320C64X_INS_SUB4: tms320c64x_insn = 126;
pub const tms320c64x_insn_TMS320C64X_INS_SUBAB: tms320c64x_insn = 127;
pub const tms320c64x_insn_TMS320C64X_INS_SUBABS4: tms320c64x_insn = 128;
pub const tms320c64x_insn_TMS320C64X_INS_SUBAH: tms320c64x_insn = 129;
pub const tms320c64x_insn_TMS320C64X_INS_SUBAW: tms320c64x_insn = 130;
pub const tms320c64x_insn_TMS320C64X_INS_SUBC: tms320c64x_insn = 131;
pub const tms320c64x_insn_TMS320C64X_INS_SUBU: tms320c64x_insn = 132;
pub const tms320c64x_insn_TMS320C64X_INS_SWAP4: tms320c64x_insn = 133;
pub const tms320c64x_insn_TMS320C64X_INS_UNPKHU4: tms320c64x_insn = 134;
pub const tms320c64x_insn_TMS320C64X_INS_UNPKLU4: tms320c64x_insn = 135;
pub const tms320c64x_insn_TMS320C64X_INS_XOR: tms320c64x_insn = 136;
pub const tms320c64x_insn_TMS320C64X_INS_XPND2: tms320c64x_insn = 137;
pub const tms320c64x_insn_TMS320C64X_INS_XPND4: tms320c64x_insn = 138;
pub const tms320c64x_insn_TMS320C64X_INS_IDLE: tms320c64x_insn = 139;
pub const tms320c64x_insn_TMS320C64X_INS_MV: tms320c64x_insn = 140;
pub const tms320c64x_insn_TMS320C64X_INS_NEG: tms320c64x_insn = 141;
pub const tms320c64x_insn_TMS320C64X_INS_NOT: tms320c64x_insn = 142;
pub const tms320c64x_insn_TMS320C64X_INS_SWAP2: tms320c64x_insn = 143;
pub const tms320c64x_insn_TMS320C64X_INS_ZERO: tms320c64x_insn = 144;
pub const tms320c64x_insn_TMS320C64X_INS_ENDING: tms320c64x_insn = 145;
pub type tms320c64x_insn = ::core::ffi::c_uint;
pub const tms320c64x_insn_group_TMS320C64X_GRP_INVALID: tms320c64x_insn_group = 0;
pub const tms320c64x_insn_group_TMS320C64X_GRP_JUMP: tms320c64x_insn_group = 1;
pub const tms320c64x_insn_group_TMS320C64X_GRP_FUNIT_D: tms320c64x_insn_group = 128;
pub const tms320c64x_insn_group_TMS320C64X_GRP_FUNIT_L: tms320c64x_insn_group = 129;
pub const tms320c64x_insn_group_TMS320C64X_GRP_FUNIT_M: tms320c64x_insn_group = 130;
pub const tms320c64x_insn_group_TMS320C64X_GRP_FUNIT_S: tms320c64x_insn_group = 131;
pub const tms320c64x_insn_group_TMS320C64X_GRP_FUNIT_NO: tms320c64x_insn_group = 132;
pub const tms320c64x_insn_group_TMS320C64X_GRP_ENDING: tms320c64x_insn_group = 133;
pub type tms320c64x_insn_group = ::core::ffi::c_uint;
pub const tms320c64x_funit_TMS320C64X_FUNIT_INVALID: tms320c64x_funit = 0;
pub const tms320c64x_funit_TMS320C64X_FUNIT_D: tms320c64x_funit = 1;
pub const tms320c64x_funit_TMS320C64X_FUNIT_L: tms320c64x_funit = 2;
pub const tms320c64x_funit_TMS320C64X_FUNIT_M: tms320c64x_funit = 3;
pub const tms320c64x_funit_TMS320C64X_FUNIT_S: tms320c64x_funit = 4;
pub const tms320c64x_funit_TMS320C64X_FUNIT_NO: tms320c64x_funit = 5;
pub type tms320c64x_funit = ::core::ffi::c_uint;
pub const m680x_reg_M680X_REG_INVALID: m680x_reg = 0;
pub const m680x_reg_M680X_REG_A: m680x_reg = 1;
pub const m680x_reg_M680X_REG_B: m680x_reg = 2;
pub const m680x_reg_M680X_REG_E: m680x_reg = 3;
pub const m680x_reg_M680X_REG_F: m680x_reg = 4;
pub const m680x_reg_M680X_REG_0: m680x_reg = 5;
pub const m680x_reg_M680X_REG_D: m680x_reg = 6;
pub const m680x_reg_M680X_REG_W: m680x_reg = 7;
pub const m680x_reg_M680X_REG_CC: m680x_reg = 8;
pub const m680x_reg_M680X_REG_DP: m680x_reg = 9;
pub const m680x_reg_M680X_REG_MD: m680x_reg = 10;
pub const m680x_reg_M680X_REG_HX: m680x_reg = 11;
pub const m680x_reg_M680X_REG_H: m680x_reg = 12;
pub const m680x_reg_M680X_REG_X: m680x_reg = 13;
pub const m680x_reg_M680X_REG_Y: m680x_reg = 14;
pub const m680x_reg_M680X_REG_S: m680x_reg = 15;
pub const m680x_reg_M680X_REG_U: m680x_reg = 16;
pub const m680x_reg_M680X_REG_V: m680x_reg = 17;
pub const m680x_reg_M680X_REG_Q: m680x_reg = 18;
pub const m680x_reg_M680X_REG_PC: m680x_reg = 19;
pub const m680x_reg_M680X_REG_TMP2: m680x_reg = 20;
pub const m680x_reg_M680X_REG_TMP3: m680x_reg = 21;
pub const m680x_reg_M680X_REG_ENDING: m680x_reg = 22;
pub type m680x_reg = ::core::ffi::c_uint;
pub const m680x_op_type_M680X_OP_INVALID: m680x_op_type = 0;
pub const m680x_op_type_M680X_OP_REGISTER: m680x_op_type = 1;
pub const m680x_op_type_M680X_OP_IMMEDIATE: m680x_op_type = 2;
pub const m680x_op_type_M680X_OP_INDEXED: m680x_op_type = 3;
pub const m680x_op_type_M680X_OP_EXTENDED: m680x_op_type = 4;
pub const m680x_op_type_M680X_OP_DIRECT: m680x_op_type = 5;
pub const m680x_op_type_M680X_OP_RELATIVE: m680x_op_type = 6;
pub const m680x_op_type_M680X_OP_CONSTANT: m680x_op_type = 7;
pub type m680x_op_type = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m680x_op_idx {
    pub base_reg: m680x_reg,
    pub offset_reg: m680x_reg,
    pub offset: i16,
    pub offset_addr: u16,
    pub offset_bits: u8,
    pub inc_dec: i8,
    pub flags: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m680x_op_rel {
    pub address: u16,
    pub offset: i16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m680x_op_ext {
    pub address: u16,
    pub indirect: bool,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_m680x_op {
    pub type_: m680x_op_type,
    pub __bindgen_anon_1: cs_m680x_op__bindgen_ty_1,
    pub size: u8,
    pub access: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_m680x_op__bindgen_ty_1 {
    pub imm: i32,
    pub reg: m680x_reg,
    pub idx: m680x_op_idx,
    pub rel: m680x_op_rel,
    pub ext: m680x_op_ext,
    pub direct_addr: u8,
    pub const_val: u8,
}
pub const m680x_group_type_M680X_GRP_INVALID: m680x_group_type = 0;
pub const m680x_group_type_M680X_GRP_JUMP: m680x_group_type = 1;
pub const m680x_group_type_M680X_GRP_CALL: m680x_group_type = 2;
pub const m680x_group_type_M680X_GRP_RET: m680x_group_type = 3;
pub const m680x_group_type_M680X_GRP_INT: m680x_group_type = 4;
pub const m680x_group_type_M680X_GRP_IRET: m680x_group_type = 5;
pub const m680x_group_type_M680X_GRP_PRIV: m680x_group_type = 6;
pub const m680x_group_type_M680X_GRP_BRAREL: m680x_group_type = 7;
pub const m680x_group_type_M680X_GRP_ENDING: m680x_group_type = 8;
pub type m680x_group_type = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_m680x {
    pub flags: u8,
    pub op_count: u8,
    pub operands: [cs_m680x_op; 9usize],
}
pub const m680x_insn_M680X_INS_INVLD: m680x_insn = 0;
pub const m680x_insn_M680X_INS_ABA: m680x_insn = 1;
pub const m680x_insn_M680X_INS_ABX: m680x_insn = 2;
pub const m680x_insn_M680X_INS_ABY: m680x_insn = 3;
pub const m680x_insn_M680X_INS_ADC: m680x_insn = 4;
pub const m680x_insn_M680X_INS_ADCA: m680x_insn = 5;
pub const m680x_insn_M680X_INS_ADCB: m680x_insn = 6;
pub const m680x_insn_M680X_INS_ADCD: m680x_insn = 7;
pub const m680x_insn_M680X_INS_ADCR: m680x_insn = 8;
pub const m680x_insn_M680X_INS_ADD: m680x_insn = 9;
pub const m680x_insn_M680X_INS_ADDA: m680x_insn = 10;
pub const m680x_insn_M680X_INS_ADDB: m680x_insn = 11;
pub const m680x_insn_M680X_INS_ADDD: m680x_insn = 12;
pub const m680x_insn_M680X_INS_ADDE: m680x_insn = 13;
pub const m680x_insn_M680X_INS_ADDF: m680x_insn = 14;
pub const m680x_insn_M680X_INS_ADDR: m680x_insn = 15;
pub const m680x_insn_M680X_INS_ADDW: m680x_insn = 16;
pub const m680x_insn_M680X_INS_AIM: m680x_insn = 17;
pub const m680x_insn_M680X_INS_AIS: m680x_insn = 18;
pub const m680x_insn_M680X_INS_AIX: m680x_insn = 19;
pub const m680x_insn_M680X_INS_AND: m680x_insn = 20;
pub const m680x_insn_M680X_INS_ANDA: m680x_insn = 21;
pub const m680x_insn_M680X_INS_ANDB: m680x_insn = 22;
pub const m680x_insn_M680X_INS_ANDCC: m680x_insn = 23;
pub const m680x_insn_M680X_INS_ANDD: m680x_insn = 24;
pub const m680x_insn_M680X_INS_ANDR: m680x_insn = 25;
pub const m680x_insn_M680X_INS_ASL: m680x_insn = 26;
pub const m680x_insn_M680X_INS_ASLA: m680x_insn = 27;
pub const m680x_insn_M680X_INS_ASLB: m680x_insn = 28;
pub const m680x_insn_M680X_INS_ASLD: m680x_insn = 29;
pub const m680x_insn_M680X_INS_ASR: m680x_insn = 30;
pub const m680x_insn_M680X_INS_ASRA: m680x_insn = 31;
pub const m680x_insn_M680X_INS_ASRB: m680x_insn = 32;
pub const m680x_insn_M680X_INS_ASRD: m680x_insn = 33;
pub const m680x_insn_M680X_INS_ASRX: m680x_insn = 34;
pub const m680x_insn_M680X_INS_BAND: m680x_insn = 35;
pub const m680x_insn_M680X_INS_BCC: m680x_insn = 36;
pub const m680x_insn_M680X_INS_BCLR: m680x_insn = 37;
pub const m680x_insn_M680X_INS_BCS: m680x_insn = 38;
pub const m680x_insn_M680X_INS_BEOR: m680x_insn = 39;
pub const m680x_insn_M680X_INS_BEQ: m680x_insn = 40;
pub const m680x_insn_M680X_INS_BGE: m680x_insn = 41;
pub const m680x_insn_M680X_INS_BGND: m680x_insn = 42;
pub const m680x_insn_M680X_INS_BGT: m680x_insn = 43;
pub const m680x_insn_M680X_INS_BHCC: m680x_insn = 44;
pub const m680x_insn_M680X_INS_BHCS: m680x_insn = 45;
pub const m680x_insn_M680X_INS_BHI: m680x_insn = 46;
pub const m680x_insn_M680X_INS_BIAND: m680x_insn = 47;
pub const m680x_insn_M680X_INS_BIEOR: m680x_insn = 48;
pub const m680x_insn_M680X_INS_BIH: m680x_insn = 49;
pub const m680x_insn_M680X_INS_BIL: m680x_insn = 50;
pub const m680x_insn_M680X_INS_BIOR: m680x_insn = 51;
pub const m680x_insn_M680X_INS_BIT: m680x_insn = 52;
pub const m680x_insn_M680X_INS_BITA: m680x_insn = 53;
pub const m680x_insn_M680X_INS_BITB: m680x_insn = 54;
pub const m680x_insn_M680X_INS_BITD: m680x_insn = 55;
pub const m680x_insn_M680X_INS_BITMD: m680x_insn = 56;
pub const m680x_insn_M680X_INS_BLE: m680x_insn = 57;
pub const m680x_insn_M680X_INS_BLS: m680x_insn = 58;
pub const m680x_insn_M680X_INS_BLT: m680x_insn = 59;
pub const m680x_insn_M680X_INS_BMC: m680x_insn = 60;
pub const m680x_insn_M680X_INS_BMI: m680x_insn = 61;
pub const m680x_insn_M680X_INS_BMS: m680x_insn = 62;
pub const m680x_insn_M680X_INS_BNE: m680x_insn = 63;
pub const m680x_insn_M680X_INS_BOR: m680x_insn = 64;
pub const m680x_insn_M680X_INS_BPL: m680x_insn = 65;
pub const m680x_insn_M680X_INS_BRCLR: m680x_insn = 66;
pub const m680x_insn_M680X_INS_BRSET: m680x_insn = 67;
pub const m680x_insn_M680X_INS_BRA: m680x_insn = 68;
pub const m680x_insn_M680X_INS_BRN: m680x_insn = 69;
pub const m680x_insn_M680X_INS_BSET: m680x_insn = 70;
pub const m680x_insn_M680X_INS_BSR: m680x_insn = 71;
pub const m680x_insn_M680X_INS_BVC: m680x_insn = 72;
pub const m680x_insn_M680X_INS_BVS: m680x_insn = 73;
pub const m680x_insn_M680X_INS_CALL: m680x_insn = 74;
pub const m680x_insn_M680X_INS_CBA: m680x_insn = 75;
pub const m680x_insn_M680X_INS_CBEQ: m680x_insn = 76;
pub const m680x_insn_M680X_INS_CBEQA: m680x_insn = 77;
pub const m680x_insn_M680X_INS_CBEQX: m680x_insn = 78;
pub const m680x_insn_M680X_INS_CLC: m680x_insn = 79;
pub const m680x_insn_M680X_INS_CLI: m680x_insn = 80;
pub const m680x_insn_M680X_INS_CLR: m680x_insn = 81;
pub const m680x_insn_M680X_INS_CLRA: m680x_insn = 82;
pub const m680x_insn_M680X_INS_CLRB: m680x_insn = 83;
pub const m680x_insn_M680X_INS_CLRD: m680x_insn = 84;
pub const m680x_insn_M680X_INS_CLRE: m680x_insn = 85;
pub const m680x_insn_M680X_INS_CLRF: m680x_insn = 86;
pub const m680x_insn_M680X_INS_CLRH: m680x_insn = 87;
pub const m680x_insn_M680X_INS_CLRW: m680x_insn = 88;
pub const m680x_insn_M680X_INS_CLRX: m680x_insn = 89;
pub const m680x_insn_M680X_INS_CLV: m680x_insn = 90;
pub const m680x_insn_M680X_INS_CMP: m680x_insn = 91;
pub const m680x_insn_M680X_INS_CMPA: m680x_insn = 92;
pub const m680x_insn_M680X_INS_CMPB: m680x_insn = 93;
pub const m680x_insn_M680X_INS_CMPD: m680x_insn = 94;
pub const m680x_insn_M680X_INS_CMPE: m680x_insn = 95;
pub const m680x_insn_M680X_INS_CMPF: m680x_insn = 96;
pub const m680x_insn_M680X_INS_CMPR: m680x_insn = 97;
pub const m680x_insn_M680X_INS_CMPS: m680x_insn = 98;
pub const m680x_insn_M680X_INS_CMPU: m680x_insn = 99;
pub const m680x_insn_M680X_INS_CMPW: m680x_insn = 100;
pub const m680x_insn_M680X_INS_CMPX: m680x_insn = 101;
pub const m680x_insn_M680X_INS_CMPY: m680x_insn = 102;
pub const m680x_insn_M680X_INS_COM: m680x_insn = 103;
pub const m680x_insn_M680X_INS_COMA: m680x_insn = 104;
pub const m680x_insn_M680X_INS_COMB: m680x_insn = 105;
pub const m680x_insn_M680X_INS_COMD: m680x_insn = 106;
pub const m680x_insn_M680X_INS_COME: m680x_insn = 107;
pub const m680x_insn_M680X_INS_COMF: m680x_insn = 108;
pub const m680x_insn_M680X_INS_COMW: m680x_insn = 109;
pub const m680x_insn_M680X_INS_COMX: m680x_insn = 110;
pub const m680x_insn_M680X_INS_CPD: m680x_insn = 111;
pub const m680x_insn_M680X_INS_CPHX: m680x_insn = 112;
pub const m680x_insn_M680X_INS_CPS: m680x_insn = 113;
pub const m680x_insn_M680X_INS_CPX: m680x_insn = 114;
pub const m680x_insn_M680X_INS_CPY: m680x_insn = 115;
pub const m680x_insn_M680X_INS_CWAI: m680x_insn = 116;
pub const m680x_insn_M680X_INS_DAA: m680x_insn = 117;
pub const m680x_insn_M680X_INS_DBEQ: m680x_insn = 118;
pub const m680x_insn_M680X_INS_DBNE: m680x_insn = 119;
pub const m680x_insn_M680X_INS_DBNZ: m680x_insn = 120;
pub const m680x_insn_M680X_INS_DBNZA: m680x_insn = 121;
pub const m680x_insn_M680X_INS_DBNZX: m680x_insn = 122;
pub const m680x_insn_M680X_INS_DEC: m680x_insn = 123;
pub const m680x_insn_M680X_INS_DECA: m680x_insn = 124;
pub const m680x_insn_M680X_INS_DECB: m680x_insn = 125;
pub const m680x_insn_M680X_INS_DECD: m680x_insn = 126;
pub const m680x_insn_M680X_INS_DECE: m680x_insn = 127;
pub const m680x_insn_M680X_INS_DECF: m680x_insn = 128;
pub const m680x_insn_M680X_INS_DECW: m680x_insn = 129;
pub const m680x_insn_M680X_INS_DECX: m680x_insn = 130;
pub const m680x_insn_M680X_INS_DES: m680x_insn = 131;
pub const m680x_insn_M680X_INS_DEX: m680x_insn = 132;
pub const m680x_insn_M680X_INS_DEY: m680x_insn = 133;
pub const m680x_insn_M680X_INS_DIV: m680x_insn = 134;
pub const m680x_insn_M680X_INS_DIVD: m680x_insn = 135;
pub const m680x_insn_M680X_INS_DIVQ: m680x_insn = 136;
pub const m680x_insn_M680X_INS_EDIV: m680x_insn = 137;
pub const m680x_insn_M680X_INS_EDIVS: m680x_insn = 138;
pub const m680x_insn_M680X_INS_EIM: m680x_insn = 139;
pub const m680x_insn_M680X_INS_EMACS: m680x_insn = 140;
pub const m680x_insn_M680X_INS_EMAXD: m680x_insn = 141;
pub const m680x_insn_M680X_INS_EMAXM: m680x_insn = 142;
pub const m680x_insn_M680X_INS_EMIND: m680x_insn = 143;
pub const m680x_insn_M680X_INS_EMINM: m680x_insn = 144;
pub const m680x_insn_M680X_INS_EMUL: m680x_insn = 145;
pub const m680x_insn_M680X_INS_EMULS: m680x_insn = 146;
pub const m680x_insn_M680X_INS_EOR: m680x_insn = 147;
pub const m680x_insn_M680X_INS_EORA: m680x_insn = 148;
pub const m680x_insn_M680X_INS_EORB: m680x_insn = 149;
pub const m680x_insn_M680X_INS_EORD: m680x_insn = 150;
pub const m680x_insn_M680X_INS_EORR: m680x_insn = 151;
pub const m680x_insn_M680X_INS_ETBL: m680x_insn = 152;
pub const m680x_insn_M680X_INS_EXG: m680x_insn = 153;
pub const m680x_insn_M680X_INS_FDIV: m680x_insn = 154;
pub const m680x_insn_M680X_INS_IBEQ: m680x_insn = 155;
pub const m680x_insn_M680X_INS_IBNE: m680x_insn = 156;
pub const m680x_insn_M680X_INS_IDIV: m680x_insn = 157;
pub const m680x_insn_M680X_INS_IDIVS: m680x_insn = 158;
pub const m680x_insn_M680X_INS_ILLGL: m680x_insn = 159;
pub const m680x_insn_M680X_INS_INC: m680x_insn = 160;
pub const m680x_insn_M680X_INS_INCA: m680x_insn = 161;
pub const m680x_insn_M680X_INS_INCB: m680x_insn = 162;
pub const m680x_insn_M680X_INS_INCD: m680x_insn = 163;
pub const m680x_insn_M680X_INS_INCE: m680x_insn = 164;
pub const m680x_insn_M680X_INS_INCF: m680x_insn = 165;
pub const m680x_insn_M680X_INS_INCW: m680x_insn = 166;
pub const m680x_insn_M680X_INS_INCX: m680x_insn = 167;
pub const m680x_insn_M680X_INS_INS: m680x_insn = 168;
pub const m680x_insn_M680X_INS_INX: m680x_insn = 169;
pub const m680x_insn_M680X_INS_INY: m680x_insn = 170;
pub const m680x_insn_M680X_INS_JMP: m680x_insn = 171;
pub const m680x_insn_M680X_INS_JSR: m680x_insn = 172;
pub const m680x_insn_M680X_INS_LBCC: m680x_insn = 173;
pub const m680x_insn_M680X_INS_LBCS: m680x_insn = 174;
pub const m680x_insn_M680X_INS_LBEQ: m680x_insn = 175;
pub const m680x_insn_M680X_INS_LBGE: m680x_insn = 176;
pub const m680x_insn_M680X_INS_LBGT: m680x_insn = 177;
pub const m680x_insn_M680X_INS_LBHI: m680x_insn = 178;
pub const m680x_insn_M680X_INS_LBLE: m680x_insn = 179;
pub const m680x_insn_M680X_INS_LBLS: m680x_insn = 180;
pub const m680x_insn_M680X_INS_LBLT: m680x_insn = 181;
pub const m680x_insn_M680X_INS_LBMI: m680x_insn = 182;
pub const m680x_insn_M680X_INS_LBNE: m680x_insn = 183;
pub const m680x_insn_M680X_INS_LBPL: m680x_insn = 184;
pub const m680x_insn_M680X_INS_LBRA: m680x_insn = 185;
pub const m680x_insn_M680X_INS_LBRN: m680x_insn = 186;
pub const m680x_insn_M680X_INS_LBSR: m680x_insn = 187;
pub const m680x_insn_M680X_INS_LBVC: m680x_insn = 188;
pub const m680x_insn_M680X_INS_LBVS: m680x_insn = 189;
pub const m680x_insn_M680X_INS_LDA: m680x_insn = 190;
pub const m680x_insn_M680X_INS_LDAA: m680x_insn = 191;
pub const m680x_insn_M680X_INS_LDAB: m680x_insn = 192;
pub const m680x_insn_M680X_INS_LDB: m680x_insn = 193;
pub const m680x_insn_M680X_INS_LDBT: m680x_insn = 194;
pub const m680x_insn_M680X_INS_LDD: m680x_insn = 195;
pub const m680x_insn_M680X_INS_LDE: m680x_insn = 196;
pub const m680x_insn_M680X_INS_LDF: m680x_insn = 197;
pub const m680x_insn_M680X_INS_LDHX: m680x_insn = 198;
pub const m680x_insn_M680X_INS_LDMD: m680x_insn = 199;
pub const m680x_insn_M680X_INS_LDQ: m680x_insn = 200;
pub const m680x_insn_M680X_INS_LDS: m680x_insn = 201;
pub const m680x_insn_M680X_INS_LDU: m680x_insn = 202;
pub const m680x_insn_M680X_INS_LDW: m680x_insn = 203;
pub const m680x_insn_M680X_INS_LDX: m680x_insn = 204;
pub const m680x_insn_M680X_INS_LDY: m680x_insn = 205;
pub const m680x_insn_M680X_INS_LEAS: m680x_insn = 206;
pub const m680x_insn_M680X_INS_LEAU: m680x_insn = 207;
pub const m680x_insn_M680X_INS_LEAX: m680x_insn = 208;
pub const m680x_insn_M680X_INS_LEAY: m680x_insn = 209;
pub const m680x_insn_M680X_INS_LSL: m680x_insn = 210;
pub const m680x_insn_M680X_INS_LSLA: m680x_insn = 211;
pub const m680x_insn_M680X_INS_LSLB: m680x_insn = 212;
pub const m680x_insn_M680X_INS_LSLD: m680x_insn = 213;
pub const m680x_insn_M680X_INS_LSLX: m680x_insn = 214;
pub const m680x_insn_M680X_INS_LSR: m680x_insn = 215;
pub const m680x_insn_M680X_INS_LSRA: m680x_insn = 216;
pub const m680x_insn_M680X_INS_LSRB: m680x_insn = 217;
pub const m680x_insn_M680X_INS_LSRD: m680x_insn = 218;
pub const m680x_insn_M680X_INS_LSRW: m680x_insn = 219;
pub const m680x_insn_M680X_INS_LSRX: m680x_insn = 220;
pub const m680x_insn_M680X_INS_MAXA: m680x_insn = 221;
pub const m680x_insn_M680X_INS_MAXM: m680x_insn = 222;
pub const m680x_insn_M680X_INS_MEM: m680x_insn = 223;
pub const m680x_insn_M680X_INS_MINA: m680x_insn = 224;
pub const m680x_insn_M680X_INS_MINM: m680x_insn = 225;
pub const m680x_insn_M680X_INS_MOV: m680x_insn = 226;
pub const m680x_insn_M680X_INS_MOVB: m680x_insn = 227;
pub const m680x_insn_M680X_INS_MOVW: m680x_insn = 228;
pub const m680x_insn_M680X_INS_MUL: m680x_insn = 229;
pub const m680x_insn_M680X_INS_MULD: m680x_insn = 230;
pub const m680x_insn_M680X_INS_NEG: m680x_insn = 231;
pub const m680x_insn_M680X_INS_NEGA: m680x_insn = 232;
pub const m680x_insn_M680X_INS_NEGB: m680x_insn = 233;
pub const m680x_insn_M680X_INS_NEGD: m680x_insn = 234;
pub const m680x_insn_M680X_INS_NEGX: m680x_insn = 235;
pub const m680x_insn_M680X_INS_NOP: m680x_insn = 236;
pub const m680x_insn_M680X_INS_NSA: m680x_insn = 237;
pub const m680x_insn_M680X_INS_OIM: m680x_insn = 238;
pub const m680x_insn_M680X_INS_ORA: m680x_insn = 239;
pub const m680x_insn_M680X_INS_ORAA: m680x_insn = 240;
pub const m680x_insn_M680X_INS_ORAB: m680x_insn = 241;
pub const m680x_insn_M680X_INS_ORB: m680x_insn = 242;
pub const m680x_insn_M680X_INS_ORCC: m680x_insn = 243;
pub const m680x_insn_M680X_INS_ORD: m680x_insn = 244;
pub const m680x_insn_M680X_INS_ORR: m680x_insn = 245;
pub const m680x_insn_M680X_INS_PSHA: m680x_insn = 246;
pub const m680x_insn_M680X_INS_PSHB: m680x_insn = 247;
pub const m680x_insn_M680X_INS_PSHC: m680x_insn = 248;
pub const m680x_insn_M680X_INS_PSHD: m680x_insn = 249;
pub const m680x_insn_M680X_INS_PSHH: m680x_insn = 250;
pub const m680x_insn_M680X_INS_PSHS: m680x_insn = 251;
pub const m680x_insn_M680X_INS_PSHSW: m680x_insn = 252;
pub const m680x_insn_M680X_INS_PSHU: m680x_insn = 253;
pub const m680x_insn_M680X_INS_PSHUW: m680x_insn = 254;
pub const m680x_insn_M680X_INS_PSHX: m680x_insn = 255;
pub const m680x_insn_M680X_INS_PSHY: m680x_insn = 256;
pub const m680x_insn_M680X_INS_PULA: m680x_insn = 257;
pub const m680x_insn_M680X_INS_PULB: m680x_insn = 258;
pub const m680x_insn_M680X_INS_PULC: m680x_insn = 259;
pub const m680x_insn_M680X_INS_PULD: m680x_insn = 260;
pub const m680x_insn_M680X_INS_PULH: m680x_insn = 261;
pub const m680x_insn_M680X_INS_PULS: m680x_insn = 262;
pub const m680x_insn_M680X_INS_PULSW: m680x_insn = 263;
pub const m680x_insn_M680X_INS_PULU: m680x_insn = 264;
pub const m680x_insn_M680X_INS_PULUW: m680x_insn = 265;
pub const m680x_insn_M680X_INS_PULX: m680x_insn = 266;
pub const m680x_insn_M680X_INS_PULY: m680x_insn = 267;
pub const m680x_insn_M680X_INS_REV: m680x_insn = 268;
pub const m680x_insn_M680X_INS_REVW: m680x_insn = 269;
pub const m680x_insn_M680X_INS_ROL: m680x_insn = 270;
pub const m680x_insn_M680X_INS_ROLA: m680x_insn = 271;
pub const m680x_insn_M680X_INS_ROLB: m680x_insn = 272;
pub const m680x_insn_M680X_INS_ROLD: m680x_insn = 273;
pub const m680x_insn_M680X_INS_ROLW: m680x_insn = 274;
pub const m680x_insn_M680X_INS_ROLX: m680x_insn = 275;
pub const m680x_insn_M680X_INS_ROR: m680x_insn = 276;
pub const m680x_insn_M680X_INS_RORA: m680x_insn = 277;
pub const m680x_insn_M680X_INS_RORB: m680x_insn = 278;
pub const m680x_insn_M680X_INS_RORD: m680x_insn = 279;
pub const m680x_insn_M680X_INS_RORW: m680x_insn = 280;
pub const m680x_insn_M680X_INS_RORX: m680x_insn = 281;
pub const m680x_insn_M680X_INS_RSP: m680x_insn = 282;
pub const m680x_insn_M680X_INS_RTC: m680x_insn = 283;
pub const m680x_insn_M680X_INS_RTI: m680x_insn = 284;
pub const m680x_insn_M680X_INS_RTS: m680x_insn = 285;
pub const m680x_insn_M680X_INS_SBA: m680x_insn = 286;
pub const m680x_insn_M680X_INS_SBC: m680x_insn = 287;
pub const m680x_insn_M680X_INS_SBCA: m680x_insn = 288;
pub const m680x_insn_M680X_INS_SBCB: m680x_insn = 289;
pub const m680x_insn_M680X_INS_SBCD: m680x_insn = 290;
pub const m680x_insn_M680X_INS_SBCR: m680x_insn = 291;
pub const m680x_insn_M680X_INS_SEC: m680x_insn = 292;
pub const m680x_insn_M680X_INS_SEI: m680x_insn = 293;
pub const m680x_insn_M680X_INS_SEV: m680x_insn = 294;
pub const m680x_insn_M680X_INS_SEX: m680x_insn = 295;
pub const m680x_insn_M680X_INS_SEXW: m680x_insn = 296;
pub const m680x_insn_M680X_INS_SLP: m680x_insn = 297;
pub const m680x_insn_M680X_INS_STA: m680x_insn = 298;
pub const m680x_insn_M680X_INS_STAA: m680x_insn = 299;
pub const m680x_insn_M680X_INS_STAB: m680x_insn = 300;
pub const m680x_insn_M680X_INS_STB: m680x_insn = 301;
pub const m680x_insn_M680X_INS_STBT: m680x_insn = 302;
pub const m680x_insn_M680X_INS_STD: m680x_insn = 303;
pub const m680x_insn_M680X_INS_STE: m680x_insn = 304;
pub const m680x_insn_M680X_INS_STF: m680x_insn = 305;
pub const m680x_insn_M680X_INS_STOP: m680x_insn = 306;
pub const m680x_insn_M680X_INS_STHX: m680x_insn = 307;
pub const m680x_insn_M680X_INS_STQ: m680x_insn = 308;
pub const m680x_insn_M680X_INS_STS: m680x_insn = 309;
pub const m680x_insn_M680X_INS_STU: m680x_insn = 310;
pub const m680x_insn_M680X_INS_STW: m680x_insn = 311;
pub const m680x_insn_M680X_INS_STX: m680x_insn = 312;
pub const m680x_insn_M680X_INS_STY: m680x_insn = 313;
pub const m680x_insn_M680X_INS_SUB: m680x_insn = 314;
pub const m680x_insn_M680X_INS_SUBA: m680x_insn = 315;
pub const m680x_insn_M680X_INS_SUBB: m680x_insn = 316;
pub const m680x_insn_M680X_INS_SUBD: m680x_insn = 317;
pub const m680x_insn_M680X_INS_SUBE: m680x_insn = 318;
pub const m680x_insn_M680X_INS_SUBF: m680x_insn = 319;
pub const m680x_insn_M680X_INS_SUBR: m680x_insn = 320;
pub const m680x_insn_M680X_INS_SUBW: m680x_insn = 321;
pub const m680x_insn_M680X_INS_SWI: m680x_insn = 322;
pub const m680x_insn_M680X_INS_SWI2: m680x_insn = 323;
pub const m680x_insn_M680X_INS_SWI3: m680x_insn = 324;
pub const m680x_insn_M680X_INS_SYNC: m680x_insn = 325;
pub const m680x_insn_M680X_INS_TAB: m680x_insn = 326;
pub const m680x_insn_M680X_INS_TAP: m680x_insn = 327;
pub const m680x_insn_M680X_INS_TAX: m680x_insn = 328;
pub const m680x_insn_M680X_INS_TBA: m680x_insn = 329;
pub const m680x_insn_M680X_INS_TBEQ: m680x_insn = 330;
pub const m680x_insn_M680X_INS_TBL: m680x_insn = 331;
pub const m680x_insn_M680X_INS_TBNE: m680x_insn = 332;
pub const m680x_insn_M680X_INS_TEST: m680x_insn = 333;
pub const m680x_insn_M680X_INS_TFM: m680x_insn = 334;
pub const m680x_insn_M680X_INS_TFR: m680x_insn = 335;
pub const m680x_insn_M680X_INS_TIM: m680x_insn = 336;
pub const m680x_insn_M680X_INS_TPA: m680x_insn = 337;
pub const m680x_insn_M680X_INS_TST: m680x_insn = 338;
pub const m680x_insn_M680X_INS_TSTA: m680x_insn = 339;
pub const m680x_insn_M680X_INS_TSTB: m680x_insn = 340;
pub const m680x_insn_M680X_INS_TSTD: m680x_insn = 341;
pub const m680x_insn_M680X_INS_TSTE: m680x_insn = 342;
pub const m680x_insn_M680X_INS_TSTF: m680x_insn = 343;
pub const m680x_insn_M680X_INS_TSTW: m680x_insn = 344;
pub const m680x_insn_M680X_INS_TSTX: m680x_insn = 345;
pub const m680x_insn_M680X_INS_TSX: m680x_insn = 346;
pub const m680x_insn_M680X_INS_TSY: m680x_insn = 347;
pub const m680x_insn_M680X_INS_TXA: m680x_insn = 348;
pub const m680x_insn_M680X_INS_TXS: m680x_insn = 349;
pub const m680x_insn_M680X_INS_TYS: m680x_insn = 350;
pub const m680x_insn_M680X_INS_WAI: m680x_insn = 351;
pub const m680x_insn_M680X_INS_WAIT: m680x_insn = 352;
pub const m680x_insn_M680X_INS_WAV: m680x_insn = 353;
pub const m680x_insn_M680X_INS_WAVR: m680x_insn = 354;
pub const m680x_insn_M680X_INS_XGDX: m680x_insn = 355;
pub const m680x_insn_M680X_INS_XGDY: m680x_insn = 356;
pub const m680x_insn_M680X_INS_ENDING: m680x_insn = 357;
pub type m680x_insn = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cs_evm {
    pub pop: ::core::ffi::c_uchar,
    pub push: ::core::ffi::c_uchar,
    pub fee: ::core::ffi::c_uint,
}
pub const evm_insn_EVM_INS_STOP: evm_insn = 0;
pub const evm_insn_EVM_INS_ADD: evm_insn = 1;
pub const evm_insn_EVM_INS_MUL: evm_insn = 2;
pub const evm_insn_EVM_INS_SUB: evm_insn = 3;
pub const evm_insn_EVM_INS_DIV: evm_insn = 4;
pub const evm_insn_EVM_INS_SDIV: evm_insn = 5;
pub const evm_insn_EVM_INS_MOD: evm_insn = 6;
pub const evm_insn_EVM_INS_SMOD: evm_insn = 7;
pub const evm_insn_EVM_INS_ADDMOD: evm_insn = 8;
pub const evm_insn_EVM_INS_MULMOD: evm_insn = 9;
pub const evm_insn_EVM_INS_EXP: evm_insn = 10;
pub const evm_insn_EVM_INS_SIGNEXTEND: evm_insn = 11;
pub const evm_insn_EVM_INS_LT: evm_insn = 16;
pub const evm_insn_EVM_INS_GT: evm_insn = 17;
pub const evm_insn_EVM_INS_SLT: evm_insn = 18;
pub const evm_insn_EVM_INS_SGT: evm_insn = 19;
pub const evm_insn_EVM_INS_EQ: evm_insn = 20;
pub const evm_insn_EVM_INS_ISZERO: evm_insn = 21;
pub const evm_insn_EVM_INS_AND: evm_insn = 22;
pub const evm_insn_EVM_INS_OR: evm_insn = 23;
pub const evm_insn_EVM_INS_XOR: evm_insn = 24;
pub const evm_insn_EVM_INS_NOT: evm_insn = 25;
pub const evm_insn_EVM_INS_BYTE: evm_insn = 26;
pub const evm_insn_EVM_INS_SHA3: evm_insn = 32;
pub const evm_insn_EVM_INS_ADDRESS: evm_insn = 48;
pub const evm_insn_EVM_INS_BALANCE: evm_insn = 49;
pub const evm_insn_EVM_INS_ORIGIN: evm_insn = 50;
pub const evm_insn_EVM_INS_CALLER: evm_insn = 51;
pub const evm_insn_EVM_INS_CALLVALUE: evm_insn = 52;
pub const evm_insn_EVM_INS_CALLDATALOAD: evm_insn = 53;
pub const evm_insn_EVM_INS_CALLDATASIZE: evm_insn = 54;
pub const evm_insn_EVM_INS_CALLDATACOPY: evm_insn = 55;
pub const evm_insn_EVM_INS_CODESIZE: evm_insn = 56;
pub const evm_insn_EVM_INS_CODECOPY: evm_insn = 57;
pub const evm_insn_EVM_INS_GASPRICE: evm_insn = 58;
pub const evm_insn_EVM_INS_EXTCODESIZE: evm_insn = 59;
pub const evm_insn_EVM_INS_EXTCODECOPY: evm_insn = 60;
pub const evm_insn_EVM_INS_RETURNDATASIZE: evm_insn = 61;
pub const evm_insn_EVM_INS_RETURNDATACOPY: evm_insn = 62;
pub const evm_insn_EVM_INS_BLOCKHASH: evm_insn = 64;
pub const evm_insn_EVM_INS_COINBASE: evm_insn = 65;
pub const evm_insn_EVM_INS_TIMESTAMP: evm_insn = 66;
pub const evm_insn_EVM_INS_NUMBER: evm_insn = 67;
pub const evm_insn_EVM_INS_DIFFICULTY: evm_insn = 68;
pub const evm_insn_EVM_INS_GASLIMIT: evm_insn = 69;
pub const evm_insn_EVM_INS_POP: evm_insn = 80;
pub const evm_insn_EVM_INS_MLOAD: evm_insn = 81;
pub const evm_insn_EVM_INS_MSTORE: evm_insn = 82;
pub const evm_insn_EVM_INS_MSTORE8: evm_insn = 83;
pub const evm_insn_EVM_INS_SLOAD: evm_insn = 84;
pub const evm_insn_EVM_INS_SSTORE: evm_insn = 85;
pub const evm_insn_EVM_INS_JUMP: evm_insn = 86;
pub const evm_insn_EVM_INS_JUMPI: evm_insn = 87;
pub const evm_insn_EVM_INS_PC: evm_insn = 88;
pub const evm_insn_EVM_INS_MSIZE: evm_insn = 89;
pub const evm_insn_EVM_INS_GAS: evm_insn = 90;
pub const evm_insn_EVM_INS_JUMPDEST: evm_insn = 91;
pub const evm_insn_EVM_INS_PUSH1: evm_insn = 96;
pub const evm_insn_EVM_INS_PUSH2: evm_insn = 97;
pub const evm_insn_EVM_INS_PUSH3: evm_insn = 98;
pub const evm_insn_EVM_INS_PUSH4: evm_insn = 99;
pub const evm_insn_EVM_INS_PUSH5: evm_insn = 100;
pub const evm_insn_EVM_INS_PUSH6: evm_insn = 101;
pub const evm_insn_EVM_INS_PUSH7: evm_insn = 102;
pub const evm_insn_EVM_INS_PUSH8: evm_insn = 103;
pub const evm_insn_EVM_INS_PUSH9: evm_insn = 104;
pub const evm_insn_EVM_INS_PUSH10: evm_insn = 105;
pub const evm_insn_EVM_INS_PUSH11: evm_insn = 106;
pub const evm_insn_EVM_INS_PUSH12: evm_insn = 107;
pub const evm_insn_EVM_INS_PUSH13: evm_insn = 108;
pub const evm_insn_EVM_INS_PUSH14: evm_insn = 109;
pub const evm_insn_EVM_INS_PUSH15: evm_insn = 110;
pub const evm_insn_EVM_INS_PUSH16: evm_insn = 111;
pub const evm_insn_EVM_INS_PUSH17: evm_insn = 112;
pub const evm_insn_EVM_INS_PUSH18: evm_insn = 113;
pub const evm_insn_EVM_INS_PUSH19: evm_insn = 114;
pub const evm_insn_EVM_INS_PUSH20: evm_insn = 115;
pub const evm_insn_EVM_INS_PUSH21: evm_insn = 116;
pub const evm_insn_EVM_INS_PUSH22: evm_insn = 117;
pub const evm_insn_EVM_INS_PUSH23: evm_insn = 118;
pub const evm_insn_EVM_INS_PUSH24: evm_insn = 119;
pub const evm_insn_EVM_INS_PUSH25: evm_insn = 120;
pub const evm_insn_EVM_INS_PUSH26: evm_insn = 121;
pub const evm_insn_EVM_INS_PUSH27: evm_insn = 122;
pub const evm_insn_EVM_INS_PUSH28: evm_insn = 123;
pub const evm_insn_EVM_INS_PUSH29: evm_insn = 124;
pub const evm_insn_EVM_INS_PUSH30: evm_insn = 125;
pub const evm_insn_EVM_INS_PUSH31: evm_insn = 126;
pub const evm_insn_EVM_INS_PUSH32: evm_insn = 127;
pub const evm_insn_EVM_INS_DUP1: evm_insn = 128;
pub const evm_insn_EVM_INS_DUP2: evm_insn = 129;
pub const evm_insn_EVM_INS_DUP3: evm_insn = 130;
pub const evm_insn_EVM_INS_DUP4: evm_insn = 131;
pub const evm_insn_EVM_INS_DUP5: evm_insn = 132;
pub const evm_insn_EVM_INS_DUP6: evm_insn = 133;
pub const evm_insn_EVM_INS_DUP7: evm_insn = 134;
pub const evm_insn_EVM_INS_DUP8: evm_insn = 135;
pub const evm_insn_EVM_INS_DUP9: evm_insn = 136;
pub const evm_insn_EVM_INS_DUP10: evm_insn = 137;
pub const evm_insn_EVM_INS_DUP11: evm_insn = 138;
pub const evm_insn_EVM_INS_DUP12: evm_insn = 139;
pub const evm_insn_EVM_INS_DUP13: evm_insn = 140;
pub const evm_insn_EVM_INS_DUP14: evm_insn = 141;
pub const evm_insn_EVM_INS_DUP15: evm_insn = 142;
pub const evm_insn_EVM_INS_DUP16: evm_insn = 143;
pub const evm_insn_EVM_INS_SWAP1: evm_insn = 144;
pub const evm_insn_EVM_INS_SWAP2: evm_insn = 145;
pub const evm_insn_EVM_INS_SWAP3: evm_insn = 146;
pub const evm_insn_EVM_INS_SWAP4: evm_insn = 147;
pub const evm_insn_EVM_INS_SWAP5: evm_insn = 148;
pub const evm_insn_EVM_INS_SWAP6: evm_insn = 149;
pub const evm_insn_EVM_INS_SWAP7: evm_insn = 150;
pub const evm_insn_EVM_INS_SWAP8: evm_insn = 151;
pub const evm_insn_EVM_INS_SWAP9: evm_insn = 152;
pub const evm_insn_EVM_INS_SWAP10: evm_insn = 153;
pub const evm_insn_EVM_INS_SWAP11: evm_insn = 154;
pub const evm_insn_EVM_INS_SWAP12: evm_insn = 155;
pub const evm_insn_EVM_INS_SWAP13: evm_insn = 156;
pub const evm_insn_EVM_INS_SWAP14: evm_insn = 157;
pub const evm_insn_EVM_INS_SWAP15: evm_insn = 158;
pub const evm_insn_EVM_INS_SWAP16: evm_insn = 159;
pub const evm_insn_EVM_INS_LOG0: evm_insn = 160;
pub const evm_insn_EVM_INS_LOG1: evm_insn = 161;
pub const evm_insn_EVM_INS_LOG2: evm_insn = 162;
pub const evm_insn_EVM_INS_LOG3: evm_insn = 163;
pub const evm_insn_EVM_INS_LOG4: evm_insn = 164;
pub const evm_insn_EVM_INS_CREATE: evm_insn = 240;
pub const evm_insn_EVM_INS_CALL: evm_insn = 241;
pub const evm_insn_EVM_INS_CALLCODE: evm_insn = 242;
pub const evm_insn_EVM_INS_RETURN: evm_insn = 243;
pub const evm_insn_EVM_INS_DELEGATECALL: evm_insn = 244;
pub const evm_insn_EVM_INS_CALLBLACKBOX: evm_insn = 245;
pub const evm_insn_EVM_INS_STATICCALL: evm_insn = 250;
pub const evm_insn_EVM_INS_REVERT: evm_insn = 253;
pub const evm_insn_EVM_INS_SUICIDE: evm_insn = 255;
pub const evm_insn_EVM_INS_INVALID: evm_insn = 512;
pub const evm_insn_EVM_INS_ENDING: evm_insn = 513;
pub type evm_insn = ::core::ffi::c_uint;
pub const evm_insn_group_EVM_GRP_INVALID: evm_insn_group = 0;
pub const evm_insn_group_EVM_GRP_JUMP: evm_insn_group = 1;
pub const evm_insn_group_EVM_GRP_MATH: evm_insn_group = 8;
pub const evm_insn_group_EVM_GRP_STACK_WRITE: evm_insn_group = 9;
pub const evm_insn_group_EVM_GRP_STACK_READ: evm_insn_group = 10;
pub const evm_insn_group_EVM_GRP_MEM_WRITE: evm_insn_group = 11;
pub const evm_insn_group_EVM_GRP_MEM_READ: evm_insn_group = 12;
pub const evm_insn_group_EVM_GRP_STORE_WRITE: evm_insn_group = 13;
pub const evm_insn_group_EVM_GRP_STORE_READ: evm_insn_group = 14;
pub const evm_insn_group_EVM_GRP_HALT: evm_insn_group = 15;
pub const evm_insn_group_EVM_GRP_ENDING: evm_insn_group = 16;
pub type evm_insn_group = ::core::ffi::c_uint;
pub const riscv_op_type_RISCV_OP_INVALID: riscv_op_type = 0;
pub const riscv_op_type_RISCV_OP_REG: riscv_op_type = 1;
pub const riscv_op_type_RISCV_OP_IMM: riscv_op_type = 2;
pub const riscv_op_type_RISCV_OP_MEM: riscv_op_type = 3;
pub type riscv_op_type = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct riscv_op_mem {
    pub base: ::core::ffi::c_uint,
    pub disp: i64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_riscv_op {
    pub type_: riscv_op_type,
    pub __bindgen_anon_1: cs_riscv_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_riscv_op__bindgen_ty_1 {
    pub reg: ::core::ffi::c_uint,
    pub imm: i64,
    pub mem: riscv_op_mem,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_riscv {
    pub need_effective_addr: bool,
    pub op_count: u8,
    pub operands: [cs_riscv_op; 8usize],
}
pub const riscv_reg_RISCV_REG_INVALID: riscv_reg = 0;
pub const riscv_reg_RISCV_REG_X0: riscv_reg = 1;
pub const riscv_reg_RISCV_REG_ZERO: riscv_reg = 1;
pub const riscv_reg_RISCV_REG_X1: riscv_reg = 2;
pub const riscv_reg_RISCV_REG_RA: riscv_reg = 2;
pub const riscv_reg_RISCV_REG_X2: riscv_reg = 3;
pub const riscv_reg_RISCV_REG_SP: riscv_reg = 3;
pub const riscv_reg_RISCV_REG_X3: riscv_reg = 4;
pub const riscv_reg_RISCV_REG_GP: riscv_reg = 4;
pub const riscv_reg_RISCV_REG_X4: riscv_reg = 5;
pub const riscv_reg_RISCV_REG_TP: riscv_reg = 5;
pub const riscv_reg_RISCV_REG_X5: riscv_reg = 6;
pub const riscv_reg_RISCV_REG_T0: riscv_reg = 6;
pub const riscv_reg_RISCV_REG_X6: riscv_reg = 7;
pub const riscv_reg_RISCV_REG_T1: riscv_reg = 7;
pub const riscv_reg_RISCV_REG_X7: riscv_reg = 8;
pub const riscv_reg_RISCV_REG_T2: riscv_reg = 8;
pub const riscv_reg_RISCV_REG_X8: riscv_reg = 9;
pub const riscv_reg_RISCV_REG_S0: riscv_reg = 9;
pub const riscv_reg_RISCV_REG_FP: riscv_reg = 9;
pub const riscv_reg_RISCV_REG_X9: riscv_reg = 10;
pub const riscv_reg_RISCV_REG_S1: riscv_reg = 10;
pub const riscv_reg_RISCV_REG_X10: riscv_reg = 11;
pub const riscv_reg_RISCV_REG_A0: riscv_reg = 11;
pub const riscv_reg_RISCV_REG_X11: riscv_reg = 12;
pub const riscv_reg_RISCV_REG_A1: riscv_reg = 12;
pub const riscv_reg_RISCV_REG_X12: riscv_reg = 13;
pub const riscv_reg_RISCV_REG_A2: riscv_reg = 13;
pub const riscv_reg_RISCV_REG_X13: riscv_reg = 14;
pub const riscv_reg_RISCV_REG_A3: riscv_reg = 14;
pub const riscv_reg_RISCV_REG_X14: riscv_reg = 15;
pub const riscv_reg_RISCV_REG_A4: riscv_reg = 15;
pub const riscv_reg_RISCV_REG_X15: riscv_reg = 16;
pub const riscv_reg_RISCV_REG_A5: riscv_reg = 16;
pub const riscv_reg_RISCV_REG_X16: riscv_reg = 17;
pub const riscv_reg_RISCV_REG_A6: riscv_reg = 17;
pub const riscv_reg_RISCV_REG_X17: riscv_reg = 18;
pub const riscv_reg_RISCV_REG_A7: riscv_reg = 18;
pub const riscv_reg_RISCV_REG_X18: riscv_reg = 19;
pub const riscv_reg_RISCV_REG_S2: riscv_reg = 19;
pub const riscv_reg_RISCV_REG_X19: riscv_reg = 20;
pub const riscv_reg_RISCV_REG_S3: riscv_reg = 20;
pub const riscv_reg_RISCV_REG_X20: riscv_reg = 21;
pub const riscv_reg_RISCV_REG_S4: riscv_reg = 21;
pub const riscv_reg_RISCV_REG_X21: riscv_reg = 22;
pub const riscv_reg_RISCV_REG_S5: riscv_reg = 22;
pub const riscv_reg_RISCV_REG_X22: riscv_reg = 23;
pub const riscv_reg_RISCV_REG_S6: riscv_reg = 23;
pub const riscv_reg_RISCV_REG_X23: riscv_reg = 24;
pub const riscv_reg_RISCV_REG_S7: riscv_reg = 24;
pub const riscv_reg_RISCV_REG_X24: riscv_reg = 25;
pub const riscv_reg_RISCV_REG_S8: riscv_reg = 25;
pub const riscv_reg_RISCV_REG_X25: riscv_reg = 26;
pub const riscv_reg_RISCV_REG_S9: riscv_reg = 26;
pub const riscv_reg_RISCV_REG_X26: riscv_reg = 27;
pub const riscv_reg_RISCV_REG_S10: riscv_reg = 27;
pub const riscv_reg_RISCV_REG_X27: riscv_reg = 28;
pub const riscv_reg_RISCV_REG_S11: riscv_reg = 28;
pub const riscv_reg_RISCV_REG_X28: riscv_reg = 29;
pub const riscv_reg_RISCV_REG_T3: riscv_reg = 29;
pub const riscv_reg_RISCV_REG_X29: riscv_reg = 30;
pub const riscv_reg_RISCV_REG_T4: riscv_reg = 30;
pub const riscv_reg_RISCV_REG_X30: riscv_reg = 31;
pub const riscv_reg_RISCV_REG_T5: riscv_reg = 31;
pub const riscv_reg_RISCV_REG_X31: riscv_reg = 32;
pub const riscv_reg_RISCV_REG_T6: riscv_reg = 32;
pub const riscv_reg_RISCV_REG_F0_32: riscv_reg = 33;
pub const riscv_reg_RISCV_REG_F0_64: riscv_reg = 34;
pub const riscv_reg_RISCV_REG_F1_32: riscv_reg = 35;
pub const riscv_reg_RISCV_REG_F1_64: riscv_reg = 36;
pub const riscv_reg_RISCV_REG_F2_32: riscv_reg = 37;
pub const riscv_reg_RISCV_REG_F2_64: riscv_reg = 38;
pub const riscv_reg_RISCV_REG_F3_32: riscv_reg = 39;
pub const riscv_reg_RISCV_REG_F3_64: riscv_reg = 40;
pub const riscv_reg_RISCV_REG_F4_32: riscv_reg = 41;
pub const riscv_reg_RISCV_REG_F4_64: riscv_reg = 42;
pub const riscv_reg_RISCV_REG_F5_32: riscv_reg = 43;
pub const riscv_reg_RISCV_REG_F5_64: riscv_reg = 44;
pub const riscv_reg_RISCV_REG_F6_32: riscv_reg = 45;
pub const riscv_reg_RISCV_REG_F6_64: riscv_reg = 46;
pub const riscv_reg_RISCV_REG_F7_32: riscv_reg = 47;
pub const riscv_reg_RISCV_REG_F7_64: riscv_reg = 48;
pub const riscv_reg_RISCV_REG_F8_32: riscv_reg = 49;
pub const riscv_reg_RISCV_REG_F8_64: riscv_reg = 50;
pub const riscv_reg_RISCV_REG_F9_32: riscv_reg = 51;
pub const riscv_reg_RISCV_REG_F9_64: riscv_reg = 52;
pub const riscv_reg_RISCV_REG_F10_32: riscv_reg = 53;
pub const riscv_reg_RISCV_REG_F10_64: riscv_reg = 54;
pub const riscv_reg_RISCV_REG_F11_32: riscv_reg = 55;
pub const riscv_reg_RISCV_REG_F11_64: riscv_reg = 56;
pub const riscv_reg_RISCV_REG_F12_32: riscv_reg = 57;
pub const riscv_reg_RISCV_REG_F12_64: riscv_reg = 58;
pub const riscv_reg_RISCV_REG_F13_32: riscv_reg = 59;
pub const riscv_reg_RISCV_REG_F13_64: riscv_reg = 60;
pub const riscv_reg_RISCV_REG_F14_32: riscv_reg = 61;
pub const riscv_reg_RISCV_REG_F14_64: riscv_reg = 62;
pub const riscv_reg_RISCV_REG_F15_32: riscv_reg = 63;
pub const riscv_reg_RISCV_REG_F15_64: riscv_reg = 64;
pub const riscv_reg_RISCV_REG_F16_32: riscv_reg = 65;
pub const riscv_reg_RISCV_REG_F16_64: riscv_reg = 66;
pub const riscv_reg_RISCV_REG_F17_32: riscv_reg = 67;
pub const riscv_reg_RISCV_REG_F17_64: riscv_reg = 68;
pub const riscv_reg_RISCV_REG_F18_32: riscv_reg = 69;
pub const riscv_reg_RISCV_REG_F18_64: riscv_reg = 70;
pub const riscv_reg_RISCV_REG_F19_32: riscv_reg = 71;
pub const riscv_reg_RISCV_REG_F19_64: riscv_reg = 72;
pub const riscv_reg_RISCV_REG_F20_32: riscv_reg = 73;
pub const riscv_reg_RISCV_REG_F20_64: riscv_reg = 74;
pub const riscv_reg_RISCV_REG_F21_32: riscv_reg = 75;
pub const riscv_reg_RISCV_REG_F21_64: riscv_reg = 76;
pub const riscv_reg_RISCV_REG_F22_32: riscv_reg = 77;
pub const riscv_reg_RISCV_REG_F22_64: riscv_reg = 78;
pub const riscv_reg_RISCV_REG_F23_32: riscv_reg = 79;
pub const riscv_reg_RISCV_REG_F23_64: riscv_reg = 80;
pub const riscv_reg_RISCV_REG_F24_32: riscv_reg = 81;
pub const riscv_reg_RISCV_REG_F24_64: riscv_reg = 82;
pub const riscv_reg_RISCV_REG_F25_32: riscv_reg = 83;
pub const riscv_reg_RISCV_REG_F25_64: riscv_reg = 84;
pub const riscv_reg_RISCV_REG_F26_32: riscv_reg = 85;
pub const riscv_reg_RISCV_REG_F26_64: riscv_reg = 86;
pub const riscv_reg_RISCV_REG_F27_32: riscv_reg = 87;
pub const riscv_reg_RISCV_REG_F27_64: riscv_reg = 88;
pub const riscv_reg_RISCV_REG_F28_32: riscv_reg = 89;
pub const riscv_reg_RISCV_REG_F28_64: riscv_reg = 90;
pub const riscv_reg_RISCV_REG_F29_32: riscv_reg = 91;
pub const riscv_reg_RISCV_REG_F29_64: riscv_reg = 92;
pub const riscv_reg_RISCV_REG_F30_32: riscv_reg = 93;
pub const riscv_reg_RISCV_REG_F30_64: riscv_reg = 94;
pub const riscv_reg_RISCV_REG_F31_32: riscv_reg = 95;
pub const riscv_reg_RISCV_REG_F31_64: riscv_reg = 96;
pub const riscv_reg_RISCV_REG_ENDING: riscv_reg = 97;
pub type riscv_reg = ::core::ffi::c_uint;
pub const riscv_insn_RISCV_INS_INVALID: riscv_insn = 0;
pub const riscv_insn_RISCV_INS_ADD: riscv_insn = 1;
pub const riscv_insn_RISCV_INS_ADDI: riscv_insn = 2;
pub const riscv_insn_RISCV_INS_ADDIW: riscv_insn = 3;
pub const riscv_insn_RISCV_INS_ADDW: riscv_insn = 4;
pub const riscv_insn_RISCV_INS_AMOADD_D: riscv_insn = 5;
pub const riscv_insn_RISCV_INS_AMOADD_D_AQ: riscv_insn = 6;
pub const riscv_insn_RISCV_INS_AMOADD_D_AQ_RL: riscv_insn = 7;
pub const riscv_insn_RISCV_INS_AMOADD_D_RL: riscv_insn = 8;
pub const riscv_insn_RISCV_INS_AMOADD_W: riscv_insn = 9;
pub const riscv_insn_RISCV_INS_AMOADD_W_AQ: riscv_insn = 10;
pub const riscv_insn_RISCV_INS_AMOADD_W_AQ_RL: riscv_insn = 11;
pub const riscv_insn_RISCV_INS_AMOADD_W_RL: riscv_insn = 12;
pub const riscv_insn_RISCV_INS_AMOAND_D: riscv_insn = 13;
pub const riscv_insn_RISCV_INS_AMOAND_D_AQ: riscv_insn = 14;
pub const riscv_insn_RISCV_INS_AMOAND_D_AQ_RL: riscv_insn = 15;
pub const riscv_insn_RISCV_INS_AMOAND_D_RL: riscv_insn = 16;
pub const riscv_insn_RISCV_INS_AMOAND_W: riscv_insn = 17;
pub const riscv_insn_RISCV_INS_AMOAND_W_AQ: riscv_insn = 18;
pub const riscv_insn_RISCV_INS_AMOAND_W_AQ_RL: riscv_insn = 19;
pub const riscv_insn_RISCV_INS_AMOAND_W_RL: riscv_insn = 20;
pub const riscv_insn_RISCV_INS_AMOMAXU_D: riscv_insn = 21;
pub const riscv_insn_RISCV_INS_AMOMAXU_D_AQ: riscv_insn = 22;
pub const riscv_insn_RISCV_INS_AMOMAXU_D_AQ_RL: riscv_insn = 23;
pub const riscv_insn_RISCV_INS_AMOMAXU_D_RL: riscv_insn = 24;
pub const riscv_insn_RISCV_INS_AMOMAXU_W: riscv_insn = 25;
pub const riscv_insn_RISCV_INS_AMOMAXU_W_AQ: riscv_insn = 26;
pub const riscv_insn_RISCV_INS_AMOMAXU_W_AQ_RL: riscv_insn = 27;
pub const riscv_insn_RISCV_INS_AMOMAXU_W_RL: riscv_insn = 28;
pub const riscv_insn_RISCV_INS_AMOMAX_D: riscv_insn = 29;
pub const riscv_insn_RISCV_INS_AMOMAX_D_AQ: riscv_insn = 30;
pub const riscv_insn_RISCV_INS_AMOMAX_D_AQ_RL: riscv_insn = 31;
pub const riscv_insn_RISCV_INS_AMOMAX_D_RL: riscv_insn = 32;
pub const riscv_insn_RISCV_INS_AMOMAX_W: riscv_insn = 33;
pub const riscv_insn_RISCV_INS_AMOMAX_W_AQ: riscv_insn = 34;
pub const riscv_insn_RISCV_INS_AMOMAX_W_AQ_RL: riscv_insn = 35;
pub const riscv_insn_RISCV_INS_AMOMAX_W_RL: riscv_insn = 36;
pub const riscv_insn_RISCV_INS_AMOMINU_D: riscv_insn = 37;
pub const riscv_insn_RISCV_INS_AMOMINU_D_AQ: riscv_insn = 38;
pub const riscv_insn_RISCV_INS_AMOMINU_D_AQ_RL: riscv_insn = 39;
pub const riscv_insn_RISCV_INS_AMOMINU_D_RL: riscv_insn = 40;
pub const riscv_insn_RISCV_INS_AMOMINU_W: riscv_insn = 41;
pub const riscv_insn_RISCV_INS_AMOMINU_W_AQ: riscv_insn = 42;
pub const riscv_insn_RISCV_INS_AMOMINU_W_AQ_RL: riscv_insn = 43;
pub const riscv_insn_RISCV_INS_AMOMINU_W_RL: riscv_insn = 44;
pub const riscv_insn_RISCV_INS_AMOMIN_D: riscv_insn = 45;
pub const riscv_insn_RISCV_INS_AMOMIN_D_AQ: riscv_insn = 46;
pub const riscv_insn_RISCV_INS_AMOMIN_D_AQ_RL: riscv_insn = 47;
pub const riscv_insn_RISCV_INS_AMOMIN_D_RL: riscv_insn = 48;
pub const riscv_insn_RISCV_INS_AMOMIN_W: riscv_insn = 49;
pub const riscv_insn_RISCV_INS_AMOMIN_W_AQ: riscv_insn = 50;
pub const riscv_insn_RISCV_INS_AMOMIN_W_AQ_RL: riscv_insn = 51;
pub const riscv_insn_RISCV_INS_AMOMIN_W_RL: riscv_insn = 52;
pub const riscv_insn_RISCV_INS_AMOOR_D: riscv_insn = 53;
pub const riscv_insn_RISCV_INS_AMOOR_D_AQ: riscv_insn = 54;
pub const riscv_insn_RISCV_INS_AMOOR_D_AQ_RL: riscv_insn = 55;
pub const riscv_insn_RISCV_INS_AMOOR_D_RL: riscv_insn = 56;
pub const riscv_insn_RISCV_INS_AMOOR_W: riscv_insn = 57;
pub const riscv_insn_RISCV_INS_AMOOR_W_AQ: riscv_insn = 58;
pub const riscv_insn_RISCV_INS_AMOOR_W_AQ_RL: riscv_insn = 59;
pub const riscv_insn_RISCV_INS_AMOOR_W_RL: riscv_insn = 60;
pub const riscv_insn_RISCV_INS_AMOSWAP_D: riscv_insn = 61;
pub const riscv_insn_RISCV_INS_AMOSWAP_D_AQ: riscv_insn = 62;
pub const riscv_insn_RISCV_INS_AMOSWAP_D_AQ_RL: riscv_insn = 63;
pub const riscv_insn_RISCV_INS_AMOSWAP_D_RL: riscv_insn = 64;
pub const riscv_insn_RISCV_INS_AMOSWAP_W: riscv_insn = 65;
pub const riscv_insn_RISCV_INS_AMOSWAP_W_AQ: riscv_insn = 66;
pub const riscv_insn_RISCV_INS_AMOSWAP_W_AQ_RL: riscv_insn = 67;
pub const riscv_insn_RISCV_INS_AMOSWAP_W_RL: riscv_insn = 68;
pub const riscv_insn_RISCV_INS_AMOXOR_D: riscv_insn = 69;
pub const riscv_insn_RISCV_INS_AMOXOR_D_AQ: riscv_insn = 70;
pub const riscv_insn_RISCV_INS_AMOXOR_D_AQ_RL: riscv_insn = 71;
pub const riscv_insn_RISCV_INS_AMOXOR_D_RL: riscv_insn = 72;
pub const riscv_insn_RISCV_INS_AMOXOR_W: riscv_insn = 73;
pub const riscv_insn_RISCV_INS_AMOXOR_W_AQ: riscv_insn = 74;
pub const riscv_insn_RISCV_INS_AMOXOR_W_AQ_RL: riscv_insn = 75;
pub const riscv_insn_RISCV_INS_AMOXOR_W_RL: riscv_insn = 76;
pub const riscv_insn_RISCV_INS_AND: riscv_insn = 77;
pub const riscv_insn_RISCV_INS_ANDI: riscv_insn = 78;
pub const riscv_insn_RISCV_INS_AUIPC: riscv_insn = 79;
pub const riscv_insn_RISCV_INS_BEQ: riscv_insn = 80;
pub const riscv_insn_RISCV_INS_BGE: riscv_insn = 81;
pub const riscv_insn_RISCV_INS_BGEU: riscv_insn = 82;
pub const riscv_insn_RISCV_INS_BLT: riscv_insn = 83;
pub const riscv_insn_RISCV_INS_BLTU: riscv_insn = 84;
pub const riscv_insn_RISCV_INS_BNE: riscv_insn = 85;
pub const riscv_insn_RISCV_INS_CSRRC: riscv_insn = 86;
pub const riscv_insn_RISCV_INS_CSRRCI: riscv_insn = 87;
pub const riscv_insn_RISCV_INS_CSRRS: riscv_insn = 88;
pub const riscv_insn_RISCV_INS_CSRRSI: riscv_insn = 89;
pub const riscv_insn_RISCV_INS_CSRRW: riscv_insn = 90;
pub const riscv_insn_RISCV_INS_CSRRWI: riscv_insn = 91;
pub const riscv_insn_RISCV_INS_C_ADD: riscv_insn = 92;
pub const riscv_insn_RISCV_INS_C_ADDI: riscv_insn = 93;
pub const riscv_insn_RISCV_INS_C_ADDI16SP: riscv_insn = 94;
pub const riscv_insn_RISCV_INS_C_ADDI4SPN: riscv_insn = 95;
pub const riscv_insn_RISCV_INS_C_ADDIW: riscv_insn = 96;
pub const riscv_insn_RISCV_INS_C_ADDW: riscv_insn = 97;
pub const riscv_insn_RISCV_INS_C_AND: riscv_insn = 98;
pub const riscv_insn_RISCV_INS_C_ANDI: riscv_insn = 99;
pub const riscv_insn_RISCV_INS_C_BEQZ: riscv_insn = 100;
pub const riscv_insn_RISCV_INS_C_BNEZ: riscv_insn = 101;
pub const riscv_insn_RISCV_INS_C_EBREAK: riscv_insn = 102;
pub const riscv_insn_RISCV_INS_C_FLD: riscv_insn = 103;
pub const riscv_insn_RISCV_INS_C_FLDSP: riscv_insn = 104;
pub const riscv_insn_RISCV_INS_C_FLW: riscv_insn = 105;
pub const riscv_insn_RISCV_INS_C_FLWSP: riscv_insn = 106;
pub const riscv_insn_RISCV_INS_C_FSD: riscv_insn = 107;
pub const riscv_insn_RISCV_INS_C_FSDSP: riscv_insn = 108;
pub const riscv_insn_RISCV_INS_C_FSW: riscv_insn = 109;
pub const riscv_insn_RISCV_INS_C_FSWSP: riscv_insn = 110;
pub const riscv_insn_RISCV_INS_C_J: riscv_insn = 111;
pub const riscv_insn_RISCV_INS_C_JAL: riscv_insn = 112;
pub const riscv_insn_RISCV_INS_C_JALR: riscv_insn = 113;
pub const riscv_insn_RISCV_INS_C_JR: riscv_insn = 114;
pub const riscv_insn_RISCV_INS_C_LD: riscv_insn = 115;
pub const riscv_insn_RISCV_INS_C_LDSP: riscv_insn = 116;
pub const riscv_insn_RISCV_INS_C_LI: riscv_insn = 117;
pub const riscv_insn_RISCV_INS_C_LUI: riscv_insn = 118;
pub const riscv_insn_RISCV_INS_C_LW: riscv_insn = 119;
pub const riscv_insn_RISCV_INS_C_LWSP: riscv_insn = 120;
pub const riscv_insn_RISCV_INS_C_MV: riscv_insn = 121;
pub const riscv_insn_RISCV_INS_C_NOP: riscv_insn = 122;
pub const riscv_insn_RISCV_INS_C_OR: riscv_insn = 123;
pub const riscv_insn_RISCV_INS_C_SD: riscv_insn = 124;
pub const riscv_insn_RISCV_INS_C_SDSP: riscv_insn = 125;
pub const riscv_insn_RISCV_INS_C_SLLI: riscv_insn = 126;
pub const riscv_insn_RISCV_INS_C_SRAI: riscv_insn = 127;
pub const riscv_insn_RISCV_INS_C_SRLI: riscv_insn = 128;
pub const riscv_insn_RISCV_INS_C_SUB: riscv_insn = 129;
pub const riscv_insn_RISCV_INS_C_SUBW: riscv_insn = 130;
pub const riscv_insn_RISCV_INS_C_SW: riscv_insn = 131;
pub const riscv_insn_RISCV_INS_C_SWSP: riscv_insn = 132;
pub const riscv_insn_RISCV_INS_C_UNIMP: riscv_insn = 133;
pub const riscv_insn_RISCV_INS_C_XOR: riscv_insn = 134;
pub const riscv_insn_RISCV_INS_DIV: riscv_insn = 135;
pub const riscv_insn_RISCV_INS_DIVU: riscv_insn = 136;
pub const riscv_insn_RISCV_INS_DIVUW: riscv_insn = 137;
pub const riscv_insn_RISCV_INS_DIVW: riscv_insn = 138;
pub const riscv_insn_RISCV_INS_EBREAK: riscv_insn = 139;
pub const riscv_insn_RISCV_INS_ECALL: riscv_insn = 140;
pub const riscv_insn_RISCV_INS_FADD_D: riscv_insn = 141;
pub const riscv_insn_RISCV_INS_FADD_S: riscv_insn = 142;
pub const riscv_insn_RISCV_INS_FCLASS_D: riscv_insn = 143;
pub const riscv_insn_RISCV_INS_FCLASS_S: riscv_insn = 144;
pub const riscv_insn_RISCV_INS_FCVT_D_L: riscv_insn = 145;
pub const riscv_insn_RISCV_INS_FCVT_D_LU: riscv_insn = 146;
pub const riscv_insn_RISCV_INS_FCVT_D_S: riscv_insn = 147;
pub const riscv_insn_RISCV_INS_FCVT_D_W: riscv_insn = 148;
pub const riscv_insn_RISCV_INS_FCVT_D_WU: riscv_insn = 149;
pub const riscv_insn_RISCV_INS_FCVT_LU_D: riscv_insn = 150;
pub const riscv_insn_RISCV_INS_FCVT_LU_S: riscv_insn = 151;
pub const riscv_insn_RISCV_INS_FCVT_L_D: riscv_insn = 152;
pub const riscv_insn_RISCV_INS_FCVT_L_S: riscv_insn = 153;
pub const riscv_insn_RISCV_INS_FCVT_S_D: riscv_insn = 154;
pub const riscv_insn_RISCV_INS_FCVT_S_L: riscv_insn = 155;
pub const riscv_insn_RISCV_INS_FCVT_S_LU: riscv_insn = 156;
pub const riscv_insn_RISCV_INS_FCVT_S_W: riscv_insn = 157;
pub const riscv_insn_RISCV_INS_FCVT_S_WU: riscv_insn = 158;
pub const riscv_insn_RISCV_INS_FCVT_WU_D: riscv_insn = 159;
pub const riscv_insn_RISCV_INS_FCVT_WU_S: riscv_insn = 160;
pub const riscv_insn_RISCV_INS_FCVT_W_D: riscv_insn = 161;
pub const riscv_insn_RISCV_INS_FCVT_W_S: riscv_insn = 162;
pub const riscv_insn_RISCV_INS_FDIV_D: riscv_insn = 163;
pub const riscv_insn_RISCV_INS_FDIV_S: riscv_insn = 164;
pub const riscv_insn_RISCV_INS_FENCE: riscv_insn = 165;
pub const riscv_insn_RISCV_INS_FENCE_I: riscv_insn = 166;
pub const riscv_insn_RISCV_INS_FENCE_TSO: riscv_insn = 167;
pub const riscv_insn_RISCV_INS_FEQ_D: riscv_insn = 168;
pub const riscv_insn_RISCV_INS_FEQ_S: riscv_insn = 169;
pub const riscv_insn_RISCV_INS_FLD: riscv_insn = 170;
pub const riscv_insn_RISCV_INS_FLE_D: riscv_insn = 171;
pub const riscv_insn_RISCV_INS_FLE_S: riscv_insn = 172;
pub const riscv_insn_RISCV_INS_FLT_D: riscv_insn = 173;
pub const riscv_insn_RISCV_INS_FLT_S: riscv_insn = 174;
pub const riscv_insn_RISCV_INS_FLW: riscv_insn = 175;
pub const riscv_insn_RISCV_INS_FMADD_D: riscv_insn = 176;
pub const riscv_insn_RISCV_INS_FMADD_S: riscv_insn = 177;
pub const riscv_insn_RISCV_INS_FMAX_D: riscv_insn = 178;
pub const riscv_insn_RISCV_INS_FMAX_S: riscv_insn = 179;
pub const riscv_insn_RISCV_INS_FMIN_D: riscv_insn = 180;
pub const riscv_insn_RISCV_INS_FMIN_S: riscv_insn = 181;
pub const riscv_insn_RISCV_INS_FMSUB_D: riscv_insn = 182;
pub const riscv_insn_RISCV_INS_FMSUB_S: riscv_insn = 183;
pub const riscv_insn_RISCV_INS_FMUL_D: riscv_insn = 184;
pub const riscv_insn_RISCV_INS_FMUL_S: riscv_insn = 185;
pub const riscv_insn_RISCV_INS_FMV_D_X: riscv_insn = 186;
pub const riscv_insn_RISCV_INS_FMV_W_X: riscv_insn = 187;
pub const riscv_insn_RISCV_INS_FMV_X_D: riscv_insn = 188;
pub const riscv_insn_RISCV_INS_FMV_X_W: riscv_insn = 189;
pub const riscv_insn_RISCV_INS_FNMADD_D: riscv_insn = 190;
pub const riscv_insn_RISCV_INS_FNMADD_S: riscv_insn = 191;
pub const riscv_insn_RISCV_INS_FNMSUB_D: riscv_insn = 192;
pub const riscv_insn_RISCV_INS_FNMSUB_S: riscv_insn = 193;
pub const riscv_insn_RISCV_INS_FSD: riscv_insn = 194;
pub const riscv_insn_RISCV_INS_FSGNJN_D: riscv_insn = 195;
pub const riscv_insn_RISCV_INS_FSGNJN_S: riscv_insn = 196;
pub const riscv_insn_RISCV_INS_FSGNJX_D: riscv_insn = 197;
pub const riscv_insn_RISCV_INS_FSGNJX_S: riscv_insn = 198;
pub const riscv_insn_RISCV_INS_FSGNJ_D: riscv_insn = 199;
pub const riscv_insn_RISCV_INS_FSGNJ_S: riscv_insn = 200;
pub const riscv_insn_RISCV_INS_FSQRT_D: riscv_insn = 201;
pub const riscv_insn_RISCV_INS_FSQRT_S: riscv_insn = 202;
pub const riscv_insn_RISCV_INS_FSUB_D: riscv_insn = 203;
pub const riscv_insn_RISCV_INS_FSUB_S: riscv_insn = 204;
pub const riscv_insn_RISCV_INS_FSW: riscv_insn = 205;
pub const riscv_insn_RISCV_INS_JAL: riscv_insn = 206;
pub const riscv_insn_RISCV_INS_JALR: riscv_insn = 207;
pub const riscv_insn_RISCV_INS_LB: riscv_insn = 208;
pub const riscv_insn_RISCV_INS_LBU: riscv_insn = 209;
pub const riscv_insn_RISCV_INS_LD: riscv_insn = 210;
pub const riscv_insn_RISCV_INS_LH: riscv_insn = 211;
pub const riscv_insn_RISCV_INS_LHU: riscv_insn = 212;
pub const riscv_insn_RISCV_INS_LR_D: riscv_insn = 213;
pub const riscv_insn_RISCV_INS_LR_D_AQ: riscv_insn = 214;
pub const riscv_insn_RISCV_INS_LR_D_AQ_RL: riscv_insn = 215;
pub const riscv_insn_RISCV_INS_LR_D_RL: riscv_insn = 216;
pub const riscv_insn_RISCV_INS_LR_W: riscv_insn = 217;
pub const riscv_insn_RISCV_INS_LR_W_AQ: riscv_insn = 218;
pub const riscv_insn_RISCV_INS_LR_W_AQ_RL: riscv_insn = 219;
pub const riscv_insn_RISCV_INS_LR_W_RL: riscv_insn = 220;
pub const riscv_insn_RISCV_INS_LUI: riscv_insn = 221;
pub const riscv_insn_RISCV_INS_LW: riscv_insn = 222;
pub const riscv_insn_RISCV_INS_LWU: riscv_insn = 223;
pub const riscv_insn_RISCV_INS_MRET: riscv_insn = 224;
pub const riscv_insn_RISCV_INS_MUL: riscv_insn = 225;
pub const riscv_insn_RISCV_INS_MULH: riscv_insn = 226;
pub const riscv_insn_RISCV_INS_MULHSU: riscv_insn = 227;
pub const riscv_insn_RISCV_INS_MULHU: riscv_insn = 228;
pub const riscv_insn_RISCV_INS_MULW: riscv_insn = 229;
pub const riscv_insn_RISCV_INS_OR: riscv_insn = 230;
pub const riscv_insn_RISCV_INS_ORI: riscv_insn = 231;
pub const riscv_insn_RISCV_INS_REM: riscv_insn = 232;
pub const riscv_insn_RISCV_INS_REMU: riscv_insn = 233;
pub const riscv_insn_RISCV_INS_REMUW: riscv_insn = 234;
pub const riscv_insn_RISCV_INS_REMW: riscv_insn = 235;
pub const riscv_insn_RISCV_INS_SB: riscv_insn = 236;
pub const riscv_insn_RISCV_INS_SC_D: riscv_insn = 237;
pub const riscv_insn_RISCV_INS_SC_D_AQ: riscv_insn = 238;
pub const riscv_insn_RISCV_INS_SC_D_AQ_RL: riscv_insn = 239;
pub const riscv_insn_RISCV_INS_SC_D_RL: riscv_insn = 240;
pub const riscv_insn_RISCV_INS_SC_W: riscv_insn = 241;
pub const riscv_insn_RISCV_INS_SC_W_AQ: riscv_insn = 242;
pub const riscv_insn_RISCV_INS_SC_W_AQ_RL: riscv_insn = 243;
pub const riscv_insn_RISCV_INS_SC_W_RL: riscv_insn = 244;
pub const riscv_insn_RISCV_INS_SD: riscv_insn = 245;
pub const riscv_insn_RISCV_INS_SFENCE_VMA: riscv_insn = 246;
pub const riscv_insn_RISCV_INS_SH: riscv_insn = 247;
pub const riscv_insn_RISCV_INS_SLL: riscv_insn = 248;
pub const riscv_insn_RISCV_INS_SLLI: riscv_insn = 249;
pub const riscv_insn_RISCV_INS_SLLIW: riscv_insn = 250;
pub const riscv_insn_RISCV_INS_SLLW: riscv_insn = 251;
pub const riscv_insn_RISCV_INS_SLT: riscv_insn = 252;
pub const riscv_insn_RISCV_INS_SLTI: riscv_insn = 253;
pub const riscv_insn_RISCV_INS_SLTIU: riscv_insn = 254;
pub const riscv_insn_RISCV_INS_SLTU: riscv_insn = 255;
pub const riscv_insn_RISCV_INS_SRA: riscv_insn = 256;
pub const riscv_insn_RISCV_INS_SRAI: riscv_insn = 257;
pub const riscv_insn_RISCV_INS_SRAIW: riscv_insn = 258;
pub const riscv_insn_RISCV_INS_SRAW: riscv_insn = 259;
pub const riscv_insn_RISCV_INS_SRET: riscv_insn = 260;
pub const riscv_insn_RISCV_INS_SRL: riscv_insn = 261;
pub const riscv_insn_RISCV_INS_SRLI: riscv_insn = 262;
pub const riscv_insn_RISCV_INS_SRLIW: riscv_insn = 263;
pub const riscv_insn_RISCV_INS_SRLW: riscv_insn = 264;
pub const riscv_insn_RISCV_INS_SUB: riscv_insn = 265;
pub const riscv_insn_RISCV_INS_SUBW: riscv_insn = 266;
pub const riscv_insn_RISCV_INS_SW: riscv_insn = 267;
pub const riscv_insn_RISCV_INS_UNIMP: riscv_insn = 268;
pub const riscv_insn_RISCV_INS_URET: riscv_insn = 269;
pub const riscv_insn_RISCV_INS_WFI: riscv_insn = 270;
pub const riscv_insn_RISCV_INS_XOR: riscv_insn = 271;
pub const riscv_insn_RISCV_INS_XORI: riscv_insn = 272;
pub const riscv_insn_RISCV_INS_ENDING: riscv_insn = 273;
pub type riscv_insn = ::core::ffi::c_uint;
pub const riscv_insn_group_RISCV_GRP_INVALID: riscv_insn_group = 0;
pub const riscv_insn_group_RISCV_GRP_JUMP: riscv_insn_group = 1;
pub const riscv_insn_group_RISCV_GRP_CALL: riscv_insn_group = 2;
pub const riscv_insn_group_RISCV_GRP_RET: riscv_insn_group = 3;
pub const riscv_insn_group_RISCV_GRP_INT: riscv_insn_group = 4;
pub const riscv_insn_group_RISCV_GRP_IRET: riscv_insn_group = 5;
pub const riscv_insn_group_RISCV_GRP_PRIVILEGE: riscv_insn_group = 6;
pub const riscv_insn_group_RISCV_GRP_BRANCH_RELATIVE: riscv_insn_group = 7;
pub const riscv_insn_group_RISCV_GRP_ISRV32: riscv_insn_group = 128;
pub const riscv_insn_group_RISCV_GRP_ISRV64: riscv_insn_group = 129;
pub const riscv_insn_group_RISCV_GRP_HASSTDEXTA: riscv_insn_group = 130;
pub const riscv_insn_group_RISCV_GRP_HASSTDEXTC: riscv_insn_group = 131;
pub const riscv_insn_group_RISCV_GRP_HASSTDEXTD: riscv_insn_group = 132;
pub const riscv_insn_group_RISCV_GRP_HASSTDEXTF: riscv_insn_group = 133;
pub const riscv_insn_group_RISCV_GRP_HASSTDEXTM: riscv_insn_group = 134;
pub const riscv_insn_group_RISCV_GRP_ENDING: riscv_insn_group = 135;
pub type riscv_insn_group = ::core::ffi::c_uint;
pub const wasm_op_type_WASM_OP_INVALID: wasm_op_type = 0;
pub const wasm_op_type_WASM_OP_NONE: wasm_op_type = 1;
pub const wasm_op_type_WASM_OP_INT7: wasm_op_type = 2;
pub const wasm_op_type_WASM_OP_VARUINT32: wasm_op_type = 3;
pub const wasm_op_type_WASM_OP_VARUINT64: wasm_op_type = 4;
pub const wasm_op_type_WASM_OP_UINT32: wasm_op_type = 5;
pub const wasm_op_type_WASM_OP_UINT64: wasm_op_type = 6;
pub const wasm_op_type_WASM_OP_IMM: wasm_op_type = 7;
pub const wasm_op_type_WASM_OP_BRTABLE: wasm_op_type = 8;
pub type wasm_op_type = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cs_wasm_brtable {
    pub length: u32,
    pub address: u64,
    pub default_target: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_wasm_op {
    pub type_: wasm_op_type,
    pub size: u32,
    pub __bindgen_anon_1: cs_wasm_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_wasm_op__bindgen_ty_1 {
    pub int7: i8,
    pub varuint32: u32,
    pub varuint64: u64,
    pub uint32: u32,
    pub uint64: u64,
    pub immediate: [u32; 2usize],
    pub brtable: cs_wasm_brtable,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_wasm {
    pub op_count: u8,
    pub operands: [cs_wasm_op; 2usize],
}
pub const wasm_insn_WASM_INS_UNREACHABLE: wasm_insn = 0;
pub const wasm_insn_WASM_INS_NOP: wasm_insn = 1;
pub const wasm_insn_WASM_INS_BLOCK: wasm_insn = 2;
pub const wasm_insn_WASM_INS_LOOP: wasm_insn = 3;
pub const wasm_insn_WASM_INS_IF: wasm_insn = 4;
pub const wasm_insn_WASM_INS_ELSE: wasm_insn = 5;
pub const wasm_insn_WASM_INS_END: wasm_insn = 11;
pub const wasm_insn_WASM_INS_BR: wasm_insn = 12;
pub const wasm_insn_WASM_INS_BR_IF: wasm_insn = 13;
pub const wasm_insn_WASM_INS_BR_TABLE: wasm_insn = 14;
pub const wasm_insn_WASM_INS_RETURN: wasm_insn = 15;
pub const wasm_insn_WASM_INS_CALL: wasm_insn = 16;
pub const wasm_insn_WASM_INS_CALL_INDIRECT: wasm_insn = 17;
pub const wasm_insn_WASM_INS_DROP: wasm_insn = 26;
pub const wasm_insn_WASM_INS_SELECT: wasm_insn = 27;
pub const wasm_insn_WASM_INS_GET_LOCAL: wasm_insn = 32;
pub const wasm_insn_WASM_INS_SET_LOCAL: wasm_insn = 33;
pub const wasm_insn_WASM_INS_TEE_LOCAL: wasm_insn = 34;
pub const wasm_insn_WASM_INS_GET_GLOBAL: wasm_insn = 35;
pub const wasm_insn_WASM_INS_SET_GLOBAL: wasm_insn = 36;
pub const wasm_insn_WASM_INS_I32_LOAD: wasm_insn = 40;
pub const wasm_insn_WASM_INS_I64_LOAD: wasm_insn = 41;
pub const wasm_insn_WASM_INS_F32_LOAD: wasm_insn = 42;
pub const wasm_insn_WASM_INS_F64_LOAD: wasm_insn = 43;
pub const wasm_insn_WASM_INS_I32_LOAD8_S: wasm_insn = 44;
pub const wasm_insn_WASM_INS_I32_LOAD8_U: wasm_insn = 45;
pub const wasm_insn_WASM_INS_I32_LOAD16_S: wasm_insn = 46;
pub const wasm_insn_WASM_INS_I32_LOAD16_U: wasm_insn = 47;
pub const wasm_insn_WASM_INS_I64_LOAD8_S: wasm_insn = 48;
pub const wasm_insn_WASM_INS_I64_LOAD8_U: wasm_insn = 49;
pub const wasm_insn_WASM_INS_I64_LOAD16_S: wasm_insn = 50;
pub const wasm_insn_WASM_INS_I64_LOAD16_U: wasm_insn = 51;
pub const wasm_insn_WASM_INS_I64_LOAD32_S: wasm_insn = 52;
pub const wasm_insn_WASM_INS_I64_LOAD32_U: wasm_insn = 53;
pub const wasm_insn_WASM_INS_I32_STORE: wasm_insn = 54;
pub const wasm_insn_WASM_INS_I64_STORE: wasm_insn = 55;
pub const wasm_insn_WASM_INS_F32_STORE: wasm_insn = 56;
pub const wasm_insn_WASM_INS_F64_STORE: wasm_insn = 57;
pub const wasm_insn_WASM_INS_I32_STORE8: wasm_insn = 58;
pub const wasm_insn_WASM_INS_I32_STORE16: wasm_insn = 59;
pub const wasm_insn_WASM_INS_I64_STORE8: wasm_insn = 60;
pub const wasm_insn_WASM_INS_I64_STORE16: wasm_insn = 61;
pub const wasm_insn_WASM_INS_I64_STORE32: wasm_insn = 62;
pub const wasm_insn_WASM_INS_CURRENT_MEMORY: wasm_insn = 63;
pub const wasm_insn_WASM_INS_GROW_MEMORY: wasm_insn = 64;
pub const wasm_insn_WASM_INS_I32_CONST: wasm_insn = 65;
pub const wasm_insn_WASM_INS_I64_CONST: wasm_insn = 66;
pub const wasm_insn_WASM_INS_F32_CONST: wasm_insn = 67;
pub const wasm_insn_WASM_INS_F64_CONST: wasm_insn = 68;
pub const wasm_insn_WASM_INS_I32_EQZ: wasm_insn = 69;
pub const wasm_insn_WASM_INS_I32_EQ: wasm_insn = 70;
pub const wasm_insn_WASM_INS_I32_NE: wasm_insn = 71;
pub const wasm_insn_WASM_INS_I32_LT_S: wasm_insn = 72;
pub const wasm_insn_WASM_INS_I32_LT_U: wasm_insn = 73;
pub const wasm_insn_WASM_INS_I32_GT_S: wasm_insn = 74;
pub const wasm_insn_WASM_INS_I32_GT_U: wasm_insn = 75;
pub const wasm_insn_WASM_INS_I32_LE_S: wasm_insn = 76;
pub const wasm_insn_WASM_INS_I32_LE_U: wasm_insn = 77;
pub const wasm_insn_WASM_INS_I32_GE_S: wasm_insn = 78;
pub const wasm_insn_WASM_INS_I32_GE_U: wasm_insn = 79;
pub const wasm_insn_WASM_INS_I64_EQZ: wasm_insn = 80;
pub const wasm_insn_WASM_INS_I64_EQ: wasm_insn = 81;
pub const wasm_insn_WASM_INS_I64_NE: wasm_insn = 82;
pub const wasm_insn_WASM_INS_I64_LT_S: wasm_insn = 83;
pub const wasm_insn_WASM_INS_I64_LT_U: wasm_insn = 84;
pub const wasm_insn_WASN_INS_I64_GT_S: wasm_insn = 85;
pub const wasm_insn_WASM_INS_I64_GT_U: wasm_insn = 86;
pub const wasm_insn_WASM_INS_I64_LE_S: wasm_insn = 87;
pub const wasm_insn_WASM_INS_I64_LE_U: wasm_insn = 88;
pub const wasm_insn_WASM_INS_I64_GE_S: wasm_insn = 89;
pub const wasm_insn_WASM_INS_I64_GE_U: wasm_insn = 90;
pub const wasm_insn_WASM_INS_F32_EQ: wasm_insn = 91;
pub const wasm_insn_WASM_INS_F32_NE: wasm_insn = 92;
pub const wasm_insn_WASM_INS_F32_LT: wasm_insn = 93;
pub const wasm_insn_WASM_INS_F32_GT: wasm_insn = 94;
pub const wasm_insn_WASM_INS_F32_LE: wasm_insn = 95;
pub const wasm_insn_WASM_INS_F32_GE: wasm_insn = 96;
pub const wasm_insn_WASM_INS_F64_EQ: wasm_insn = 97;
pub const wasm_insn_WASM_INS_F64_NE: wasm_insn = 98;
pub const wasm_insn_WASM_INS_F64_LT: wasm_insn = 99;
pub const wasm_insn_WASM_INS_F64_GT: wasm_insn = 100;
pub const wasm_insn_WASM_INS_F64_LE: wasm_insn = 101;
pub const wasm_insn_WASM_INS_F64_GE: wasm_insn = 102;
pub const wasm_insn_WASM_INS_I32_CLZ: wasm_insn = 103;
pub const wasm_insn_WASM_INS_I32_CTZ: wasm_insn = 104;
pub const wasm_insn_WASM_INS_I32_POPCNT: wasm_insn = 105;
pub const wasm_insn_WASM_INS_I32_ADD: wasm_insn = 106;
pub const wasm_insn_WASM_INS_I32_SUB: wasm_insn = 107;
pub const wasm_insn_WASM_INS_I32_MUL: wasm_insn = 108;
pub const wasm_insn_WASM_INS_I32_DIV_S: wasm_insn = 109;
pub const wasm_insn_WASM_INS_I32_DIV_U: wasm_insn = 110;
pub const wasm_insn_WASM_INS_I32_REM_S: wasm_insn = 111;
pub const wasm_insn_WASM_INS_I32_REM_U: wasm_insn = 112;
pub const wasm_insn_WASM_INS_I32_AND: wasm_insn = 113;
pub const wasm_insn_WASM_INS_I32_OR: wasm_insn = 114;
pub const wasm_insn_WASM_INS_I32_XOR: wasm_insn = 115;
pub const wasm_insn_WASM_INS_I32_SHL: wasm_insn = 116;
pub const wasm_insn_WASM_INS_I32_SHR_S: wasm_insn = 117;
pub const wasm_insn_WASM_INS_I32_SHR_U: wasm_insn = 118;
pub const wasm_insn_WASM_INS_I32_ROTL: wasm_insn = 119;
pub const wasm_insn_WASM_INS_I32_ROTR: wasm_insn = 120;
pub const wasm_insn_WASM_INS_I64_CLZ: wasm_insn = 121;
pub const wasm_insn_WASM_INS_I64_CTZ: wasm_insn = 122;
pub const wasm_insn_WASM_INS_I64_POPCNT: wasm_insn = 123;
pub const wasm_insn_WASM_INS_I64_ADD: wasm_insn = 124;
pub const wasm_insn_WASM_INS_I64_SUB: wasm_insn = 125;
pub const wasm_insn_WASM_INS_I64_MUL: wasm_insn = 126;
pub const wasm_insn_WASM_INS_I64_DIV_S: wasm_insn = 127;
pub const wasm_insn_WASM_INS_I64_DIV_U: wasm_insn = 128;
pub const wasm_insn_WASM_INS_I64_REM_S: wasm_insn = 129;
pub const wasm_insn_WASM_INS_I64_REM_U: wasm_insn = 130;
pub const wasm_insn_WASM_INS_I64_AND: wasm_insn = 131;
pub const wasm_insn_WASM_INS_I64_OR: wasm_insn = 132;
pub const wasm_insn_WASM_INS_I64_XOR: wasm_insn = 133;
pub const wasm_insn_WASM_INS_I64_SHL: wasm_insn = 134;
pub const wasm_insn_WASM_INS_I64_SHR_S: wasm_insn = 135;
pub const wasm_insn_WASM_INS_I64_SHR_U: wasm_insn = 136;
pub const wasm_insn_WASM_INS_I64_ROTL: wasm_insn = 137;
pub const wasm_insn_WASM_INS_I64_ROTR: wasm_insn = 138;
pub const wasm_insn_WASM_INS_F32_ABS: wasm_insn = 139;
pub const wasm_insn_WASM_INS_F32_NEG: wasm_insn = 140;
pub const wasm_insn_WASM_INS_F32_CEIL: wasm_insn = 141;
pub const wasm_insn_WASM_INS_F32_FLOOR: wasm_insn = 142;
pub const wasm_insn_WASM_INS_F32_TRUNC: wasm_insn = 143;
pub const wasm_insn_WASM_INS_F32_NEAREST: wasm_insn = 144;
pub const wasm_insn_WASM_INS_F32_SQRT: wasm_insn = 145;
pub const wasm_insn_WASM_INS_F32_ADD: wasm_insn = 146;
pub const wasm_insn_WASM_INS_F32_SUB: wasm_insn = 147;
pub const wasm_insn_WASM_INS_F32_MUL: wasm_insn = 148;
pub const wasm_insn_WASM_INS_F32_DIV: wasm_insn = 149;
pub const wasm_insn_WASM_INS_F32_MIN: wasm_insn = 150;
pub const wasm_insn_WASM_INS_F32_MAX: wasm_insn = 151;
pub const wasm_insn_WASM_INS_F32_COPYSIGN: wasm_insn = 152;
pub const wasm_insn_WASM_INS_F64_ABS: wasm_insn = 153;
pub const wasm_insn_WASM_INS_F64_NEG: wasm_insn = 154;
pub const wasm_insn_WASM_INS_F64_CEIL: wasm_insn = 155;
pub const wasm_insn_WASM_INS_F64_FLOOR: wasm_insn = 156;
pub const wasm_insn_WASM_INS_F64_TRUNC: wasm_insn = 157;
pub const wasm_insn_WASM_INS_F64_NEAREST: wasm_insn = 158;
pub const wasm_insn_WASM_INS_F64_SQRT: wasm_insn = 159;
pub const wasm_insn_WASM_INS_F64_ADD: wasm_insn = 160;
pub const wasm_insn_WASM_INS_F64_SUB: wasm_insn = 161;
pub const wasm_insn_WASM_INS_F64_MUL: wasm_insn = 162;
pub const wasm_insn_WASM_INS_F64_DIV: wasm_insn = 163;
pub const wasm_insn_WASM_INS_F64_MIN: wasm_insn = 164;
pub const wasm_insn_WASM_INS_F64_MAX: wasm_insn = 165;
pub const wasm_insn_WASM_INS_F64_COPYSIGN: wasm_insn = 166;
pub const wasm_insn_WASM_INS_I32_WARP_I64: wasm_insn = 167;
pub const wasm_insn_WASP_INS_I32_TRUNC_S_F32: wasm_insn = 168;
pub const wasm_insn_WASM_INS_I32_TRUNC_U_F32: wasm_insn = 169;
pub const wasm_insn_WASM_INS_I32_TRUNC_S_F64: wasm_insn = 170;
pub const wasm_insn_WASM_INS_I32_TRUNC_U_F64: wasm_insn = 171;
pub const wasm_insn_WASM_INS_I64_EXTEND_S_I32: wasm_insn = 172;
pub const wasm_insn_WASM_INS_I64_EXTEND_U_I32: wasm_insn = 173;
pub const wasm_insn_WASM_INS_I64_TRUNC_S_F32: wasm_insn = 174;
pub const wasm_insn_WASM_INS_I64_TRUNC_U_F32: wasm_insn = 175;
pub const wasm_insn_WASM_INS_I64_TRUNC_S_F64: wasm_insn = 176;
pub const wasm_insn_WASM_INS_I64_TRUNC_U_F64: wasm_insn = 177;
pub const wasm_insn_WASM_INS_F32_CONVERT_S_I32: wasm_insn = 178;
pub const wasm_insn_WASM_INS_F32_CONVERT_U_I32: wasm_insn = 179;
pub const wasm_insn_WASM_INS_F32_CONVERT_S_I64: wasm_insn = 180;
pub const wasm_insn_WASM_INS_F32_CONVERT_U_I64: wasm_insn = 181;
pub const wasm_insn_WASM_INS_F32_DEMOTE_F64: wasm_insn = 182;
pub const wasm_insn_WASM_INS_F64_CONVERT_S_I32: wasm_insn = 183;
pub const wasm_insn_WASM_INS_F64_CONVERT_U_I32: wasm_insn = 184;
pub const wasm_insn_WASM_INS_F64_CONVERT_S_I64: wasm_insn = 185;
pub const wasm_insn_WASM_INS_F64_CONVERT_U_I64: wasm_insn = 186;
pub const wasm_insn_WASM_INS_F64_PROMOTE_F32: wasm_insn = 187;
pub const wasm_insn_WASM_INS_I32_REINTERPRET_F32: wasm_insn = 188;
pub const wasm_insn_WASM_INS_I64_REINTERPRET_F64: wasm_insn = 189;
pub const wasm_insn_WASM_INS_F32_REINTERPRET_I32: wasm_insn = 190;
pub const wasm_insn_WASM_INS_F64_REINTERPRET_I64: wasm_insn = 191;
pub const wasm_insn_WASM_INS_INVALID: wasm_insn = 512;
pub const wasm_insn_WASM_INS_ENDING: wasm_insn = 513;
pub type wasm_insn = ::core::ffi::c_uint;
pub const wasm_insn_group_WASM_GRP_INVALID: wasm_insn_group = 0;
pub const wasm_insn_group_WASM_GRP_NUMBERIC: wasm_insn_group = 8;
pub const wasm_insn_group_WASM_GRP_PARAMETRIC: wasm_insn_group = 9;
pub const wasm_insn_group_WASM_GRP_VARIABLE: wasm_insn_group = 10;
pub const wasm_insn_group_WASM_GRP_MEMORY: wasm_insn_group = 11;
pub const wasm_insn_group_WASM_GRP_CONTROL: wasm_insn_group = 12;
pub const wasm_insn_group_WASM_GRP_ENDING: wasm_insn_group = 13;
pub type wasm_insn_group = ::core::ffi::c_uint;
pub const mos65xx_reg_MOS65XX_REG_INVALID: mos65xx_reg = 0;
pub const mos65xx_reg_MOS65XX_REG_ACC: mos65xx_reg = 1;
pub const mos65xx_reg_MOS65XX_REG_X: mos65xx_reg = 2;
pub const mos65xx_reg_MOS65XX_REG_Y: mos65xx_reg = 3;
pub const mos65xx_reg_MOS65XX_REG_P: mos65xx_reg = 4;
pub const mos65xx_reg_MOS65XX_REG_SP: mos65xx_reg = 5;
pub const mos65xx_reg_MOS65XX_REG_DP: mos65xx_reg = 6;
pub const mos65xx_reg_MOS65XX_REG_B: mos65xx_reg = 7;
pub const mos65xx_reg_MOS65XX_REG_K: mos65xx_reg = 8;
pub const mos65xx_reg_MOS65XX_REG_ENDING: mos65xx_reg = 9;
pub type mos65xx_reg = ::core::ffi::c_uint;
pub const mos65xx_address_mode_MOS65XX_AM_NONE: mos65xx_address_mode = 0;
pub const mos65xx_address_mode_MOS65XX_AM_IMP: mos65xx_address_mode = 1;
pub const mos65xx_address_mode_MOS65XX_AM_ACC: mos65xx_address_mode = 2;
pub const mos65xx_address_mode_MOS65XX_AM_IMM: mos65xx_address_mode = 3;
pub const mos65xx_address_mode_MOS65XX_AM_REL: mos65xx_address_mode = 4;
pub const mos65xx_address_mode_MOS65XX_AM_INT: mos65xx_address_mode = 5;
pub const mos65xx_address_mode_MOS65XX_AM_BLOCK: mos65xx_address_mode = 6;
pub const mos65xx_address_mode_MOS65XX_AM_ZP: mos65xx_address_mode = 7;
pub const mos65xx_address_mode_MOS65XX_AM_ZP_X: mos65xx_address_mode = 8;
pub const mos65xx_address_mode_MOS65XX_AM_ZP_Y: mos65xx_address_mode = 9;
pub const mos65xx_address_mode_MOS65XX_AM_ZP_REL: mos65xx_address_mode = 10;
pub const mos65xx_address_mode_MOS65XX_AM_ZP_IND: mos65xx_address_mode = 11;
pub const mos65xx_address_mode_MOS65XX_AM_ZP_X_IND: mos65xx_address_mode = 12;
pub const mos65xx_address_mode_MOS65XX_AM_ZP_IND_Y: mos65xx_address_mode = 13;
pub const mos65xx_address_mode_MOS65XX_AM_ZP_IND_LONG: mos65xx_address_mode = 14;
pub const mos65xx_address_mode_MOS65XX_AM_ZP_IND_LONG_Y: mos65xx_address_mode = 15;
pub const mos65xx_address_mode_MOS65XX_AM_ABS: mos65xx_address_mode = 16;
pub const mos65xx_address_mode_MOS65XX_AM_ABS_X: mos65xx_address_mode = 17;
pub const mos65xx_address_mode_MOS65XX_AM_ABS_Y: mos65xx_address_mode = 18;
pub const mos65xx_address_mode_MOS65XX_AM_ABS_IND: mos65xx_address_mode = 19;
pub const mos65xx_address_mode_MOS65XX_AM_ABS_X_IND: mos65xx_address_mode = 20;
pub const mos65xx_address_mode_MOS65XX_AM_ABS_IND_LONG: mos65xx_address_mode = 21;
pub const mos65xx_address_mode_MOS65XX_AM_ABS_LONG: mos65xx_address_mode = 22;
pub const mos65xx_address_mode_MOS65XX_AM_ABS_LONG_X: mos65xx_address_mode = 23;
pub const mos65xx_address_mode_MOS65XX_AM_SR: mos65xx_address_mode = 24;
pub const mos65xx_address_mode_MOS65XX_AM_SR_IND_Y: mos65xx_address_mode = 25;
pub type mos65xx_address_mode = ::core::ffi::c_uint;
pub const mos65xx_insn_MOS65XX_INS_INVALID: mos65xx_insn = 0;
pub const mos65xx_insn_MOS65XX_INS_ADC: mos65xx_insn = 1;
pub const mos65xx_insn_MOS65XX_INS_AND: mos65xx_insn = 2;
pub const mos65xx_insn_MOS65XX_INS_ASL: mos65xx_insn = 3;
pub const mos65xx_insn_MOS65XX_INS_BBR: mos65xx_insn = 4;
pub const mos65xx_insn_MOS65XX_INS_BBS: mos65xx_insn = 5;
pub const mos65xx_insn_MOS65XX_INS_BCC: mos65xx_insn = 6;
pub const mos65xx_insn_MOS65XX_INS_BCS: mos65xx_insn = 7;
pub const mos65xx_insn_MOS65XX_INS_BEQ: mos65xx_insn = 8;
pub const mos65xx_insn_MOS65XX_INS_BIT: mos65xx_insn = 9;
pub const mos65xx_insn_MOS65XX_INS_BMI: mos65xx_insn = 10;
pub const mos65xx_insn_MOS65XX_INS_BNE: mos65xx_insn = 11;
pub const mos65xx_insn_MOS65XX_INS_BPL: mos65xx_insn = 12;
pub const mos65xx_insn_MOS65XX_INS_BRA: mos65xx_insn = 13;
pub const mos65xx_insn_MOS65XX_INS_BRK: mos65xx_insn = 14;
pub const mos65xx_insn_MOS65XX_INS_BRL: mos65xx_insn = 15;
pub const mos65xx_insn_MOS65XX_INS_BVC: mos65xx_insn = 16;
pub const mos65xx_insn_MOS65XX_INS_BVS: mos65xx_insn = 17;
pub const mos65xx_insn_MOS65XX_INS_CLC: mos65xx_insn = 18;
pub const mos65xx_insn_MOS65XX_INS_CLD: mos65xx_insn = 19;
pub const mos65xx_insn_MOS65XX_INS_CLI: mos65xx_insn = 20;
pub const mos65xx_insn_MOS65XX_INS_CLV: mos65xx_insn = 21;
pub const mos65xx_insn_MOS65XX_INS_CMP: mos65xx_insn = 22;
pub const mos65xx_insn_MOS65XX_INS_COP: mos65xx_insn = 23;
pub const mos65xx_insn_MOS65XX_INS_CPX: mos65xx_insn = 24;
pub const mos65xx_insn_MOS65XX_INS_CPY: mos65xx_insn = 25;
pub const mos65xx_insn_MOS65XX_INS_DEC: mos65xx_insn = 26;
pub const mos65xx_insn_MOS65XX_INS_DEX: mos65xx_insn = 27;
pub const mos65xx_insn_MOS65XX_INS_DEY: mos65xx_insn = 28;
pub const mos65xx_insn_MOS65XX_INS_EOR: mos65xx_insn = 29;
pub const mos65xx_insn_MOS65XX_INS_INC: mos65xx_insn = 30;
pub const mos65xx_insn_MOS65XX_INS_INX: mos65xx_insn = 31;
pub const mos65xx_insn_MOS65XX_INS_INY: mos65xx_insn = 32;
pub const mos65xx_insn_MOS65XX_INS_JML: mos65xx_insn = 33;
pub const mos65xx_insn_MOS65XX_INS_JMP: mos65xx_insn = 34;
pub const mos65xx_insn_MOS65XX_INS_JSL: mos65xx_insn = 35;
pub const mos65xx_insn_MOS65XX_INS_JSR: mos65xx_insn = 36;
pub const mos65xx_insn_MOS65XX_INS_LDA: mos65xx_insn = 37;
pub const mos65xx_insn_MOS65XX_INS_LDX: mos65xx_insn = 38;
pub const mos65xx_insn_MOS65XX_INS_LDY: mos65xx_insn = 39;
pub const mos65xx_insn_MOS65XX_INS_LSR: mos65xx_insn = 40;
pub const mos65xx_insn_MOS65XX_INS_MVN: mos65xx_insn = 41;
pub const mos65xx_insn_MOS65XX_INS_MVP: mos65xx_insn = 42;
pub const mos65xx_insn_MOS65XX_INS_NOP: mos65xx_insn = 43;
pub const mos65xx_insn_MOS65XX_INS_ORA: mos65xx_insn = 44;
pub const mos65xx_insn_MOS65XX_INS_PEA: mos65xx_insn = 45;
pub const mos65xx_insn_MOS65XX_INS_PEI: mos65xx_insn = 46;
pub const mos65xx_insn_MOS65XX_INS_PER: mos65xx_insn = 47;
pub const mos65xx_insn_MOS65XX_INS_PHA: mos65xx_insn = 48;
pub const mos65xx_insn_MOS65XX_INS_PHB: mos65xx_insn = 49;
pub const mos65xx_insn_MOS65XX_INS_PHD: mos65xx_insn = 50;
pub const mos65xx_insn_MOS65XX_INS_PHK: mos65xx_insn = 51;
pub const mos65xx_insn_MOS65XX_INS_PHP: mos65xx_insn = 52;
pub const mos65xx_insn_MOS65XX_INS_PHX: mos65xx_insn = 53;
pub const mos65xx_insn_MOS65XX_INS_PHY: mos65xx_insn = 54;
pub const mos65xx_insn_MOS65XX_INS_PLA: mos65xx_insn = 55;
pub const mos65xx_insn_MOS65XX_INS_PLB: mos65xx_insn = 56;
pub const mos65xx_insn_MOS65XX_INS_PLD: mos65xx_insn = 57;
pub const mos65xx_insn_MOS65XX_INS_PLP: mos65xx_insn = 58;
pub const mos65xx_insn_MOS65XX_INS_PLX: mos65xx_insn = 59;
pub const mos65xx_insn_MOS65XX_INS_PLY: mos65xx_insn = 60;
pub const mos65xx_insn_MOS65XX_INS_REP: mos65xx_insn = 61;
pub const mos65xx_insn_MOS65XX_INS_RMB: mos65xx_insn = 62;
pub const mos65xx_insn_MOS65XX_INS_ROL: mos65xx_insn = 63;
pub const mos65xx_insn_MOS65XX_INS_ROR: mos65xx_insn = 64;
pub const mos65xx_insn_MOS65XX_INS_RTI: mos65xx_insn = 65;
pub const mos65xx_insn_MOS65XX_INS_RTL: mos65xx_insn = 66;
pub const mos65xx_insn_MOS65XX_INS_RTS: mos65xx_insn = 67;
pub const mos65xx_insn_MOS65XX_INS_SBC: mos65xx_insn = 68;
pub const mos65xx_insn_MOS65XX_INS_SEC: mos65xx_insn = 69;
pub const mos65xx_insn_MOS65XX_INS_SED: mos65xx_insn = 70;
pub const mos65xx_insn_MOS65XX_INS_SEI: mos65xx_insn = 71;
pub const mos65xx_insn_MOS65XX_INS_SEP: mos65xx_insn = 72;
pub const mos65xx_insn_MOS65XX_INS_SMB: mos65xx_insn = 73;
pub const mos65xx_insn_MOS65XX_INS_STA: mos65xx_insn = 74;
pub const mos65xx_insn_MOS65XX_INS_STP: mos65xx_insn = 75;
pub const mos65xx_insn_MOS65XX_INS_STX: mos65xx_insn = 76;
pub const mos65xx_insn_MOS65XX_INS_STY: mos65xx_insn = 77;
pub const mos65xx_insn_MOS65XX_INS_STZ: mos65xx_insn = 78;
pub const mos65xx_insn_MOS65XX_INS_TAX: mos65xx_insn = 79;
pub const mos65xx_insn_MOS65XX_INS_TAY: mos65xx_insn = 80;
pub const mos65xx_insn_MOS65XX_INS_TCD: mos65xx_insn = 81;
pub const mos65xx_insn_MOS65XX_INS_TCS: mos65xx_insn = 82;
pub const mos65xx_insn_MOS65XX_INS_TDC: mos65xx_insn = 83;
pub const mos65xx_insn_MOS65XX_INS_TRB: mos65xx_insn = 84;
pub const mos65xx_insn_MOS65XX_INS_TSB: mos65xx_insn = 85;
pub const mos65xx_insn_MOS65XX_INS_TSC: mos65xx_insn = 86;
pub const mos65xx_insn_MOS65XX_INS_TSX: mos65xx_insn = 87;
pub const mos65xx_insn_MOS65XX_INS_TXA: mos65xx_insn = 88;
pub const mos65xx_insn_MOS65XX_INS_TXS: mos65xx_insn = 89;
pub const mos65xx_insn_MOS65XX_INS_TXY: mos65xx_insn = 90;
pub const mos65xx_insn_MOS65XX_INS_TYA: mos65xx_insn = 91;
pub const mos65xx_insn_MOS65XX_INS_TYX: mos65xx_insn = 92;
pub const mos65xx_insn_MOS65XX_INS_WAI: mos65xx_insn = 93;
pub const mos65xx_insn_MOS65XX_INS_WDM: mos65xx_insn = 94;
pub const mos65xx_insn_MOS65XX_INS_XBA: mos65xx_insn = 95;
pub const mos65xx_insn_MOS65XX_INS_XCE: mos65xx_insn = 96;
pub const mos65xx_insn_MOS65XX_INS_ENDING: mos65xx_insn = 97;
pub type mos65xx_insn = ::core::ffi::c_uint;
pub const mos65xx_group_type_MOS65XX_GRP_INVALID: mos65xx_group_type = 0;
pub const mos65xx_group_type_MOS65XX_GRP_JUMP: mos65xx_group_type = 1;
pub const mos65xx_group_type_MOS65XX_GRP_CALL: mos65xx_group_type = 2;
pub const mos65xx_group_type_MOS65XX_GRP_RET: mos65xx_group_type = 3;
pub const mos65xx_group_type_MOS65XX_GRP_INT: mos65xx_group_type = 4;
pub const mos65xx_group_type_MOS65XX_GRP_IRET: mos65xx_group_type = 5;
pub const mos65xx_group_type_MOS65XX_GRP_BRANCH_RELATIVE: mos65xx_group_type = 6;
pub const mos65xx_group_type_MOS65XX_GRP_ENDING: mos65xx_group_type = 7;
pub type mos65xx_group_type = ::core::ffi::c_uint;
pub const mos65xx_op_type_MOS65XX_OP_INVALID: mos65xx_op_type = 0;
pub const mos65xx_op_type_MOS65XX_OP_REG: mos65xx_op_type = 1;
pub const mos65xx_op_type_MOS65XX_OP_IMM: mos65xx_op_type = 2;
pub const mos65xx_op_type_MOS65XX_OP_MEM: mos65xx_op_type = 3;
pub type mos65xx_op_type = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_mos65xx_op {
    pub type_: mos65xx_op_type,
    pub __bindgen_anon_1: cs_mos65xx_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_mos65xx_op__bindgen_ty_1 {
    pub reg: mos65xx_reg,
    pub imm: u16,
    pub mem: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_mos65xx {
    pub am: mos65xx_address_mode,
    pub modifies_flags: bool,
    pub op_count: u8,
    pub operands: [cs_mos65xx_op; 3usize],
}
pub const bpf_op_type_BPF_OP_INVALID: bpf_op_type = 0;
pub const bpf_op_type_BPF_OP_REG: bpf_op_type = 1;
pub const bpf_op_type_BPF_OP_IMM: bpf_op_type = 2;
pub const bpf_op_type_BPF_OP_OFF: bpf_op_type = 3;
pub const bpf_op_type_BPF_OP_MEM: bpf_op_type = 4;
pub const bpf_op_type_BPF_OP_MMEM: bpf_op_type = 5;
pub const bpf_op_type_BPF_OP_MSH: bpf_op_type = 6;
pub const bpf_op_type_BPF_OP_EXT: bpf_op_type = 7;
pub type bpf_op_type = ::core::ffi::c_uint;
pub const bpf_reg_BPF_REG_INVALID: bpf_reg = 0;
pub const bpf_reg_BPF_REG_A: bpf_reg = 1;
pub const bpf_reg_BPF_REG_X: bpf_reg = 2;
pub const bpf_reg_BPF_REG_R0: bpf_reg = 3;
pub const bpf_reg_BPF_REG_R1: bpf_reg = 4;
pub const bpf_reg_BPF_REG_R2: bpf_reg = 5;
pub const bpf_reg_BPF_REG_R3: bpf_reg = 6;
pub const bpf_reg_BPF_REG_R4: bpf_reg = 7;
pub const bpf_reg_BPF_REG_R5: bpf_reg = 8;
pub const bpf_reg_BPF_REG_R6: bpf_reg = 9;
pub const bpf_reg_BPF_REG_R7: bpf_reg = 10;
pub const bpf_reg_BPF_REG_R8: bpf_reg = 11;
pub const bpf_reg_BPF_REG_R9: bpf_reg = 12;
pub const bpf_reg_BPF_REG_R10: bpf_reg = 13;
pub const bpf_reg_BPF_REG_ENDING: bpf_reg = 14;
pub type bpf_reg = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bpf_op_mem {
    pub base: bpf_reg,
    pub disp: u32,
}
pub const bpf_ext_type_BPF_EXT_INVALID: bpf_ext_type = 0;
pub const bpf_ext_type_BPF_EXT_LEN: bpf_ext_type = 1;
pub type bpf_ext_type = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_bpf_op {
    pub type_: bpf_op_type,
    pub __bindgen_anon_1: cs_bpf_op__bindgen_ty_1,
    pub access: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_bpf_op__bindgen_ty_1 {
    pub reg: u8,
    pub imm: u64,
    pub off: u32,
    pub mem: bpf_op_mem,
    pub mmem: u32,
    pub msh: u32,
    pub ext: u32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_bpf {
    pub op_count: u8,
    pub operands: [cs_bpf_op; 4usize],
}
pub const bpf_insn_BPF_INS_INVALID: bpf_insn = 0;
pub const bpf_insn_BPF_INS_ADD: bpf_insn = 1;
pub const bpf_insn_BPF_INS_SUB: bpf_insn = 2;
pub const bpf_insn_BPF_INS_MUL: bpf_insn = 3;
pub const bpf_insn_BPF_INS_DIV: bpf_insn = 4;
pub const bpf_insn_BPF_INS_OR: bpf_insn = 5;
pub const bpf_insn_BPF_INS_AND: bpf_insn = 6;
pub const bpf_insn_BPF_INS_LSH: bpf_insn = 7;
pub const bpf_insn_BPF_INS_RSH: bpf_insn = 8;
pub const bpf_insn_BPF_INS_NEG: bpf_insn = 9;
pub const bpf_insn_BPF_INS_MOD: bpf_insn = 10;
pub const bpf_insn_BPF_INS_XOR: bpf_insn = 11;
pub const bpf_insn_BPF_INS_MOV: bpf_insn = 12;
pub const bpf_insn_BPF_INS_ARSH: bpf_insn = 13;
pub const bpf_insn_BPF_INS_ADD64: bpf_insn = 14;
pub const bpf_insn_BPF_INS_SUB64: bpf_insn = 15;
pub const bpf_insn_BPF_INS_MUL64: bpf_insn = 16;
pub const bpf_insn_BPF_INS_DIV64: bpf_insn = 17;
pub const bpf_insn_BPF_INS_OR64: bpf_insn = 18;
pub const bpf_insn_BPF_INS_AND64: bpf_insn = 19;
pub const bpf_insn_BPF_INS_LSH64: bpf_insn = 20;
pub const bpf_insn_BPF_INS_RSH64: bpf_insn = 21;
pub const bpf_insn_BPF_INS_NEG64: bpf_insn = 22;
pub const bpf_insn_BPF_INS_MOD64: bpf_insn = 23;
pub const bpf_insn_BPF_INS_XOR64: bpf_insn = 24;
pub const bpf_insn_BPF_INS_MOV64: bpf_insn = 25;
pub const bpf_insn_BPF_INS_ARSH64: bpf_insn = 26;
pub const bpf_insn_BPF_INS_LE16: bpf_insn = 27;
pub const bpf_insn_BPF_INS_LE32: bpf_insn = 28;
pub const bpf_insn_BPF_INS_LE64: bpf_insn = 29;
pub const bpf_insn_BPF_INS_BE16: bpf_insn = 30;
pub const bpf_insn_BPF_INS_BE32: bpf_insn = 31;
pub const bpf_insn_BPF_INS_BE64: bpf_insn = 32;
pub const bpf_insn_BPF_INS_LDW: bpf_insn = 33;
pub const bpf_insn_BPF_INS_LDH: bpf_insn = 34;
pub const bpf_insn_BPF_INS_LDB: bpf_insn = 35;
pub const bpf_insn_BPF_INS_LDDW: bpf_insn = 36;
pub const bpf_insn_BPF_INS_LDXW: bpf_insn = 37;
pub const bpf_insn_BPF_INS_LDXH: bpf_insn = 38;
pub const bpf_insn_BPF_INS_LDXB: bpf_insn = 39;
pub const bpf_insn_BPF_INS_LDXDW: bpf_insn = 40;
pub const bpf_insn_BPF_INS_STW: bpf_insn = 41;
pub const bpf_insn_BPF_INS_STH: bpf_insn = 42;
pub const bpf_insn_BPF_INS_STB: bpf_insn = 43;
pub const bpf_insn_BPF_INS_STDW: bpf_insn = 44;
pub const bpf_insn_BPF_INS_STXW: bpf_insn = 45;
pub const bpf_insn_BPF_INS_STXH: bpf_insn = 46;
pub const bpf_insn_BPF_INS_STXB: bpf_insn = 47;
pub const bpf_insn_BPF_INS_STXDW: bpf_insn = 48;
pub const bpf_insn_BPF_INS_XADDW: bpf_insn = 49;
pub const bpf_insn_BPF_INS_XADDDW: bpf_insn = 50;
pub const bpf_insn_BPF_INS_JMP: bpf_insn = 51;
pub const bpf_insn_BPF_INS_JEQ: bpf_insn = 52;
pub const bpf_insn_BPF_INS_JGT: bpf_insn = 53;
pub const bpf_insn_BPF_INS_JGE: bpf_insn = 54;
pub const bpf_insn_BPF_INS_JSET: bpf_insn = 55;
pub const bpf_insn_BPF_INS_JNE: bpf_insn = 56;
pub const bpf_insn_BPF_INS_JSGT: bpf_insn = 57;
pub const bpf_insn_BPF_INS_JSGE: bpf_insn = 58;
pub const bpf_insn_BPF_INS_CALL: bpf_insn = 59;
pub const bpf_insn_BPF_INS_CALLX: bpf_insn = 60;
pub const bpf_insn_BPF_INS_EXIT: bpf_insn = 61;
pub const bpf_insn_BPF_INS_JLT: bpf_insn = 62;
pub const bpf_insn_BPF_INS_JLE: bpf_insn = 63;
pub const bpf_insn_BPF_INS_JSLT: bpf_insn = 64;
pub const bpf_insn_BPF_INS_JSLE: bpf_insn = 65;
pub const bpf_insn_BPF_INS_RET: bpf_insn = 66;
pub const bpf_insn_BPF_INS_TAX: bpf_insn = 67;
pub const bpf_insn_BPF_INS_TXA: bpf_insn = 68;
pub const bpf_insn_BPF_INS_ENDING: bpf_insn = 69;
pub const bpf_insn_BPF_INS_LD: bpf_insn = 33;
pub const bpf_insn_BPF_INS_LDX: bpf_insn = 37;
pub const bpf_insn_BPF_INS_ST: bpf_insn = 41;
pub const bpf_insn_BPF_INS_STX: bpf_insn = 45;
pub type bpf_insn = ::core::ffi::c_uint;
pub const bpf_insn_group_BPF_GRP_INVALID: bpf_insn_group = 0;
pub const bpf_insn_group_BPF_GRP_LOAD: bpf_insn_group = 1;
pub const bpf_insn_group_BPF_GRP_STORE: bpf_insn_group = 2;
pub const bpf_insn_group_BPF_GRP_ALU: bpf_insn_group = 3;
pub const bpf_insn_group_BPF_GRP_JUMP: bpf_insn_group = 4;
pub const bpf_insn_group_BPF_GRP_CALL: bpf_insn_group = 5;
pub const bpf_insn_group_BPF_GRP_RETURN: bpf_insn_group = 6;
pub const bpf_insn_group_BPF_GRP_MISC: bpf_insn_group = 7;
pub const bpf_insn_group_BPF_GRP_ENDING: bpf_insn_group = 8;
pub type bpf_insn_group = ::core::ffi::c_uint;
pub const sh_reg_SH_REG_INVALID: sh_reg = 0;
pub const sh_reg_SH_REG_R0: sh_reg = 1;
pub const sh_reg_SH_REG_R1: sh_reg = 2;
pub const sh_reg_SH_REG_R2: sh_reg = 3;
pub const sh_reg_SH_REG_R3: sh_reg = 4;
pub const sh_reg_SH_REG_R4: sh_reg = 5;
pub const sh_reg_SH_REG_R5: sh_reg = 6;
pub const sh_reg_SH_REG_R6: sh_reg = 7;
pub const sh_reg_SH_REG_R7: sh_reg = 8;
pub const sh_reg_SH_REG_R8: sh_reg = 9;
pub const sh_reg_SH_REG_R9: sh_reg = 10;
pub const sh_reg_SH_REG_R10: sh_reg = 11;
pub const sh_reg_SH_REG_R11: sh_reg = 12;
pub const sh_reg_SH_REG_R12: sh_reg = 13;
pub const sh_reg_SH_REG_R13: sh_reg = 14;
pub const sh_reg_SH_REG_R14: sh_reg = 15;
pub const sh_reg_SH_REG_R15: sh_reg = 16;
pub const sh_reg_SH_REG_R0_BANK: sh_reg = 17;
pub const sh_reg_SH_REG_R1_BANK: sh_reg = 18;
pub const sh_reg_SH_REG_R2_BANK: sh_reg = 19;
pub const sh_reg_SH_REG_R3_BANK: sh_reg = 20;
pub const sh_reg_SH_REG_R4_BANK: sh_reg = 21;
pub const sh_reg_SH_REG_R5_BANK: sh_reg = 22;
pub const sh_reg_SH_REG_R6_BANK: sh_reg = 23;
pub const sh_reg_SH_REG_R7_BANK: sh_reg = 24;
pub const sh_reg_SH_REG_FR0: sh_reg = 25;
pub const sh_reg_SH_REG_FR1: sh_reg = 26;
pub const sh_reg_SH_REG_FR2: sh_reg = 27;
pub const sh_reg_SH_REG_FR3: sh_reg = 28;
pub const sh_reg_SH_REG_FR4: sh_reg = 29;
pub const sh_reg_SH_REG_FR5: sh_reg = 30;
pub const sh_reg_SH_REG_FR6: sh_reg = 31;
pub const sh_reg_SH_REG_FR7: sh_reg = 32;
pub const sh_reg_SH_REG_FR8: sh_reg = 33;
pub const sh_reg_SH_REG_FR9: sh_reg = 34;
pub const sh_reg_SH_REG_FR10: sh_reg = 35;
pub const sh_reg_SH_REG_FR11: sh_reg = 36;
pub const sh_reg_SH_REG_FR12: sh_reg = 37;
pub const sh_reg_SH_REG_FR13: sh_reg = 38;
pub const sh_reg_SH_REG_FR14: sh_reg = 39;
pub const sh_reg_SH_REG_FR15: sh_reg = 40;
pub const sh_reg_SH_REG_DR0: sh_reg = 41;
pub const sh_reg_SH_REG_DR2: sh_reg = 42;
pub const sh_reg_SH_REG_DR4: sh_reg = 43;
pub const sh_reg_SH_REG_DR6: sh_reg = 44;
pub const sh_reg_SH_REG_DR8: sh_reg = 45;
pub const sh_reg_SH_REG_DR10: sh_reg = 46;
pub const sh_reg_SH_REG_DR12: sh_reg = 47;
pub const sh_reg_SH_REG_DR14: sh_reg = 48;
pub const sh_reg_SH_REG_XD0: sh_reg = 49;
pub const sh_reg_SH_REG_XD2: sh_reg = 50;
pub const sh_reg_SH_REG_XD4: sh_reg = 51;
pub const sh_reg_SH_REG_XD6: sh_reg = 52;
pub const sh_reg_SH_REG_XD8: sh_reg = 53;
pub const sh_reg_SH_REG_XD10: sh_reg = 54;
pub const sh_reg_SH_REG_XD12: sh_reg = 55;
pub const sh_reg_SH_REG_XD14: sh_reg = 56;
pub const sh_reg_SH_REG_XF0: sh_reg = 57;
pub const sh_reg_SH_REG_XF1: sh_reg = 58;
pub const sh_reg_SH_REG_XF2: sh_reg = 59;
pub const sh_reg_SH_REG_XF3: sh_reg = 60;
pub const sh_reg_SH_REG_XF4: sh_reg = 61;
pub const sh_reg_SH_REG_XF5: sh_reg = 62;
pub const sh_reg_SH_REG_XF6: sh_reg = 63;
pub const sh_reg_SH_REG_XF7: sh_reg = 64;
pub const sh_reg_SH_REG_XF8: sh_reg = 65;
pub const sh_reg_SH_REG_XF9: sh_reg = 66;
pub const sh_reg_SH_REG_XF10: sh_reg = 67;
pub const sh_reg_SH_REG_XF11: sh_reg = 68;
pub const sh_reg_SH_REG_XF12: sh_reg = 69;
pub const sh_reg_SH_REG_XF13: sh_reg = 70;
pub const sh_reg_SH_REG_XF14: sh_reg = 71;
pub const sh_reg_SH_REG_XF15: sh_reg = 72;
pub const sh_reg_SH_REG_FV0: sh_reg = 73;
pub const sh_reg_SH_REG_FV4: sh_reg = 74;
pub const sh_reg_SH_REG_FV8: sh_reg = 75;
pub const sh_reg_SH_REG_FV12: sh_reg = 76;
pub const sh_reg_SH_REG_XMATRX: sh_reg = 77;
pub const sh_reg_SH_REG_PC: sh_reg = 78;
pub const sh_reg_SH_REG_PR: sh_reg = 79;
pub const sh_reg_SH_REG_MACH: sh_reg = 80;
pub const sh_reg_SH_REG_MACL: sh_reg = 81;
pub const sh_reg_SH_REG_SR: sh_reg = 82;
pub const sh_reg_SH_REG_GBR: sh_reg = 83;
pub const sh_reg_SH_REG_SSR: sh_reg = 84;
pub const sh_reg_SH_REG_SPC: sh_reg = 85;
pub const sh_reg_SH_REG_SGR: sh_reg = 86;
pub const sh_reg_SH_REG_DBR: sh_reg = 87;
pub const sh_reg_SH_REG_VBR: sh_reg = 88;
pub const sh_reg_SH_REG_TBR: sh_reg = 89;
pub const sh_reg_SH_REG_RS: sh_reg = 90;
pub const sh_reg_SH_REG_RE: sh_reg = 91;
pub const sh_reg_SH_REG_MOD: sh_reg = 92;
pub const sh_reg_SH_REG_FPUL: sh_reg = 93;
pub const sh_reg_SH_REG_FPSCR: sh_reg = 94;
pub const sh_reg_SH_REG_DSP_X0: sh_reg = 95;
pub const sh_reg_SH_REG_DSP_X1: sh_reg = 96;
pub const sh_reg_SH_REG_DSP_Y0: sh_reg = 97;
pub const sh_reg_SH_REG_DSP_Y1: sh_reg = 98;
pub const sh_reg_SH_REG_DSP_A0: sh_reg = 99;
pub const sh_reg_SH_REG_DSP_A1: sh_reg = 100;
pub const sh_reg_SH_REG_DSP_A0G: sh_reg = 101;
pub const sh_reg_SH_REG_DSP_A1G: sh_reg = 102;
pub const sh_reg_SH_REG_DSP_M0: sh_reg = 103;
pub const sh_reg_SH_REG_DSP_M1: sh_reg = 104;
pub const sh_reg_SH_REG_DSP_DSR: sh_reg = 105;
pub const sh_reg_SH_REG_DSP_RSV0: sh_reg = 106;
pub const sh_reg_SH_REG_DSP_RSV1: sh_reg = 107;
pub const sh_reg_SH_REG_DSP_RSV2: sh_reg = 108;
pub const sh_reg_SH_REG_DSP_RSV3: sh_reg = 109;
pub const sh_reg_SH_REG_DSP_RSV4: sh_reg = 110;
pub const sh_reg_SH_REG_DSP_RSV5: sh_reg = 111;
pub const sh_reg_SH_REG_DSP_RSV6: sh_reg = 112;
pub const sh_reg_SH_REG_DSP_RSV7: sh_reg = 113;
pub const sh_reg_SH_REG_DSP_RSV8: sh_reg = 114;
pub const sh_reg_SH_REG_DSP_RSV9: sh_reg = 115;
pub const sh_reg_SH_REG_DSP_RSVA: sh_reg = 116;
pub const sh_reg_SH_REG_DSP_RSVB: sh_reg = 117;
pub const sh_reg_SH_REG_DSP_RSVC: sh_reg = 118;
pub const sh_reg_SH_REG_DSP_RSVD: sh_reg = 119;
pub const sh_reg_SH_REG_DSP_RSVE: sh_reg = 120;
pub const sh_reg_SH_REG_DSP_RSVF: sh_reg = 121;
pub const sh_reg_SH_REG_ENDING: sh_reg = 122;
pub type sh_reg = ::core::ffi::c_uint;
pub const sh_op_type_SH_OP_INVALID: sh_op_type = 0;
pub const sh_op_type_SH_OP_REG: sh_op_type = 1;
pub const sh_op_type_SH_OP_IMM: sh_op_type = 2;
pub const sh_op_type_SH_OP_MEM: sh_op_type = 3;
pub type sh_op_type = ::core::ffi::c_uint;
pub const sh_op_mem_type_SH_OP_MEM_INVALID: sh_op_mem_type = 0;
pub const sh_op_mem_type_SH_OP_MEM_REG_IND: sh_op_mem_type = 1;
pub const sh_op_mem_type_SH_OP_MEM_REG_POST: sh_op_mem_type = 2;
pub const sh_op_mem_type_SH_OP_MEM_REG_PRE: sh_op_mem_type = 3;
pub const sh_op_mem_type_SH_OP_MEM_REG_DISP: sh_op_mem_type = 4;
pub const sh_op_mem_type_SH_OP_MEM_REG_R0: sh_op_mem_type = 5;
pub const sh_op_mem_type_SH_OP_MEM_GBR_DISP: sh_op_mem_type = 6;
pub const sh_op_mem_type_SH_OP_MEM_GBR_R0: sh_op_mem_type = 7;
pub const sh_op_mem_type_SH_OP_MEM_PCR: sh_op_mem_type = 8;
pub const sh_op_mem_type_SH_OP_MEM_TBR_DISP: sh_op_mem_type = 9;
pub type sh_op_mem_type = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sh_op_mem {
    pub address: sh_op_mem_type,
    pub reg: sh_reg,
    pub disp: u32,
}
pub const sh_dsp_insn_type_SH_INS_DSP_INVALID: sh_dsp_insn_type = 0;
pub const sh_dsp_insn_type_SH_INS_DSP_DOUBLE: sh_dsp_insn_type = 1;
pub const sh_dsp_insn_type_SH_INS_DSP_SINGLE: sh_dsp_insn_type = 2;
pub const sh_dsp_insn_type_SH_INS_DSP_PARALLEL: sh_dsp_insn_type = 3;
pub type sh_dsp_insn_type = ::core::ffi::c_uint;
pub const sh_dsp_insn_SH_INS_DSP_NOP: sh_dsp_insn = 1;
pub const sh_dsp_insn_SH_INS_DSP_MOV: sh_dsp_insn = 2;
pub const sh_dsp_insn_SH_INS_DSP_PSHL: sh_dsp_insn = 3;
pub const sh_dsp_insn_SH_INS_DSP_PSHA: sh_dsp_insn = 4;
pub const sh_dsp_insn_SH_INS_DSP_PMULS: sh_dsp_insn = 5;
pub const sh_dsp_insn_SH_INS_DSP_PCLR_PMULS: sh_dsp_insn = 6;
pub const sh_dsp_insn_SH_INS_DSP_PSUB_PMULS: sh_dsp_insn = 7;
pub const sh_dsp_insn_SH_INS_DSP_PADD_PMULS: sh_dsp_insn = 8;
pub const sh_dsp_insn_SH_INS_DSP_PSUBC: sh_dsp_insn = 9;
pub const sh_dsp_insn_SH_INS_DSP_PADDC: sh_dsp_insn = 10;
pub const sh_dsp_insn_SH_INS_DSP_PCMP: sh_dsp_insn = 11;
pub const sh_dsp_insn_SH_INS_DSP_PABS: sh_dsp_insn = 12;
pub const sh_dsp_insn_SH_INS_DSP_PRND: sh_dsp_insn = 13;
pub const sh_dsp_insn_SH_INS_DSP_PSUB: sh_dsp_insn = 14;
pub const sh_dsp_insn_SH_INS_DSP_PSUBr: sh_dsp_insn = 15;
pub const sh_dsp_insn_SH_INS_DSP_PADD: sh_dsp_insn = 16;
pub const sh_dsp_insn_SH_INS_DSP_PAND: sh_dsp_insn = 17;
pub const sh_dsp_insn_SH_INS_DSP_PXOR: sh_dsp_insn = 18;
pub const sh_dsp_insn_SH_INS_DSP_POR: sh_dsp_insn = 19;
pub const sh_dsp_insn_SH_INS_DSP_PDEC: sh_dsp_insn = 20;
pub const sh_dsp_insn_SH_INS_DSP_PINC: sh_dsp_insn = 21;
pub const sh_dsp_insn_SH_INS_DSP_PCLR: sh_dsp_insn = 22;
pub const sh_dsp_insn_SH_INS_DSP_PDMSB: sh_dsp_insn = 23;
pub const sh_dsp_insn_SH_INS_DSP_PNEG: sh_dsp_insn = 24;
pub const sh_dsp_insn_SH_INS_DSP_PCOPY: sh_dsp_insn = 25;
pub const sh_dsp_insn_SH_INS_DSP_PSTS: sh_dsp_insn = 26;
pub const sh_dsp_insn_SH_INS_DSP_PLDS: sh_dsp_insn = 27;
pub const sh_dsp_insn_SH_INS_DSP_PSWAP: sh_dsp_insn = 28;
pub const sh_dsp_insn_SH_INS_DSP_PWAD: sh_dsp_insn = 29;
pub const sh_dsp_insn_SH_INS_DSP_PWSB: sh_dsp_insn = 30;
pub type sh_dsp_insn = ::core::ffi::c_uint;
pub const sh_dsp_operand_SH_OP_DSP_INVALID: sh_dsp_operand = 0;
pub const sh_dsp_operand_SH_OP_DSP_REG_PRE: sh_dsp_operand = 1;
pub const sh_dsp_operand_SH_OP_DSP_REG_IND: sh_dsp_operand = 2;
pub const sh_dsp_operand_SH_OP_DSP_REG_POST: sh_dsp_operand = 3;
pub const sh_dsp_operand_SH_OP_DSP_REG_INDEX: sh_dsp_operand = 4;
pub const sh_dsp_operand_SH_OP_DSP_REG: sh_dsp_operand = 5;
pub const sh_dsp_operand_SH_OP_DSP_IMM: sh_dsp_operand = 6;
pub type sh_dsp_operand = ::core::ffi::c_uint;
pub const sh_dsp_cc_SH_DSP_CC_INVALID: sh_dsp_cc = 0;
pub const sh_dsp_cc_SH_DSP_CC_NONE: sh_dsp_cc = 1;
pub const sh_dsp_cc_SH_DSP_CC_DCT: sh_dsp_cc = 2;
pub const sh_dsp_cc_SH_DSP_CC_DCF: sh_dsp_cc = 3;
pub type sh_dsp_cc = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sh_op_dsp {
    pub insn: sh_dsp_insn,
    pub operand: [sh_dsp_operand; 2usize],
    pub r: [sh_reg; 6usize],
    pub cc: sh_dsp_cc,
    pub imm: u8,
    pub size: ::core::ffi::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_sh_op {
    pub type_: sh_op_type,
    pub __bindgen_anon_1: cs_sh_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_sh_op__bindgen_ty_1 {
    pub imm: u64,
    pub reg: sh_reg,
    pub mem: sh_op_mem,
    pub dsp: sh_op_dsp,
}
pub const sh_insn_SH_INS_INVALID: sh_insn = 0;
pub const sh_insn_SH_INS_ADD_r: sh_insn = 1;
pub const sh_insn_SH_INS_ADD: sh_insn = 2;
pub const sh_insn_SH_INS_ADDC: sh_insn = 3;
pub const sh_insn_SH_INS_ADDV: sh_insn = 4;
pub const sh_insn_SH_INS_AND: sh_insn = 5;
pub const sh_insn_SH_INS_BAND: sh_insn = 6;
pub const sh_insn_SH_INS_BANDNOT: sh_insn = 7;
pub const sh_insn_SH_INS_BCLR: sh_insn = 8;
pub const sh_insn_SH_INS_BF: sh_insn = 9;
pub const sh_insn_SH_INS_BF_S: sh_insn = 10;
pub const sh_insn_SH_INS_BLD: sh_insn = 11;
pub const sh_insn_SH_INS_BLDNOT: sh_insn = 12;
pub const sh_insn_SH_INS_BOR: sh_insn = 13;
pub const sh_insn_SH_INS_BORNOT: sh_insn = 14;
pub const sh_insn_SH_INS_BRA: sh_insn = 15;
pub const sh_insn_SH_INS_BRAF: sh_insn = 16;
pub const sh_insn_SH_INS_BSET: sh_insn = 17;
pub const sh_insn_SH_INS_BSR: sh_insn = 18;
pub const sh_insn_SH_INS_BSRF: sh_insn = 19;
pub const sh_insn_SH_INS_BST: sh_insn = 20;
pub const sh_insn_SH_INS_BT: sh_insn = 21;
pub const sh_insn_SH_INS_BT_S: sh_insn = 22;
pub const sh_insn_SH_INS_BXOR: sh_insn = 23;
pub const sh_insn_SH_INS_CLIPS: sh_insn = 24;
pub const sh_insn_SH_INS_CLIPU: sh_insn = 25;
pub const sh_insn_SH_INS_CLRDMXY: sh_insn = 26;
pub const sh_insn_SH_INS_CLRMAC: sh_insn = 27;
pub const sh_insn_SH_INS_CLRS: sh_insn = 28;
pub const sh_insn_SH_INS_CLRT: sh_insn = 29;
pub const sh_insn_SH_INS_CMP_EQ: sh_insn = 30;
pub const sh_insn_SH_INS_CMP_GE: sh_insn = 31;
pub const sh_insn_SH_INS_CMP_GT: sh_insn = 32;
pub const sh_insn_SH_INS_CMP_HI: sh_insn = 33;
pub const sh_insn_SH_INS_CMP_HS: sh_insn = 34;
pub const sh_insn_SH_INS_CMP_PL: sh_insn = 35;
pub const sh_insn_SH_INS_CMP_PZ: sh_insn = 36;
pub const sh_insn_SH_INS_CMP_STR: sh_insn = 37;
pub const sh_insn_SH_INS_DIV0S: sh_insn = 38;
pub const sh_insn_SH_INS_DIV0U: sh_insn = 39;
pub const sh_insn_SH_INS_DIV1: sh_insn = 40;
pub const sh_insn_SH_INS_DIVS: sh_insn = 41;
pub const sh_insn_SH_INS_DIVU: sh_insn = 42;
pub const sh_insn_SH_INS_DMULS_L: sh_insn = 43;
pub const sh_insn_SH_INS_DMULU_L: sh_insn = 44;
pub const sh_insn_SH_INS_DT: sh_insn = 45;
pub const sh_insn_SH_INS_EXTS_B: sh_insn = 46;
pub const sh_insn_SH_INS_EXTS_W: sh_insn = 47;
pub const sh_insn_SH_INS_EXTU_B: sh_insn = 48;
pub const sh_insn_SH_INS_EXTU_W: sh_insn = 49;
pub const sh_insn_SH_INS_FABS: sh_insn = 50;
pub const sh_insn_SH_INS_FADD: sh_insn = 51;
pub const sh_insn_SH_INS_FCMP_EQ: sh_insn = 52;
pub const sh_insn_SH_INS_FCMP_GT: sh_insn = 53;
pub const sh_insn_SH_INS_FCNVDS: sh_insn = 54;
pub const sh_insn_SH_INS_FCNVSD: sh_insn = 55;
pub const sh_insn_SH_INS_FDIV: sh_insn = 56;
pub const sh_insn_SH_INS_FIPR: sh_insn = 57;
pub const sh_insn_SH_INS_FLDI0: sh_insn = 58;
pub const sh_insn_SH_INS_FLDI1: sh_insn = 59;
pub const sh_insn_SH_INS_FLDS: sh_insn = 60;
pub const sh_insn_SH_INS_FLOAT: sh_insn = 61;
pub const sh_insn_SH_INS_FMAC: sh_insn = 62;
pub const sh_insn_SH_INS_FMOV: sh_insn = 63;
pub const sh_insn_SH_INS_FMUL: sh_insn = 64;
pub const sh_insn_SH_INS_FNEG: sh_insn = 65;
pub const sh_insn_SH_INS_FPCHG: sh_insn = 66;
pub const sh_insn_SH_INS_FRCHG: sh_insn = 67;
pub const sh_insn_SH_INS_FSCA: sh_insn = 68;
pub const sh_insn_SH_INS_FSCHG: sh_insn = 69;
pub const sh_insn_SH_INS_FSQRT: sh_insn = 70;
pub const sh_insn_SH_INS_FSRRA: sh_insn = 71;
pub const sh_insn_SH_INS_FSTS: sh_insn = 72;
pub const sh_insn_SH_INS_FSUB: sh_insn = 73;
pub const sh_insn_SH_INS_FTRC: sh_insn = 74;
pub const sh_insn_SH_INS_FTRV: sh_insn = 75;
pub const sh_insn_SH_INS_ICBI: sh_insn = 76;
pub const sh_insn_SH_INS_JMP: sh_insn = 77;
pub const sh_insn_SH_INS_JSR: sh_insn = 78;
pub const sh_insn_SH_INS_JSR_N: sh_insn = 79;
pub const sh_insn_SH_INS_LDBANK: sh_insn = 80;
pub const sh_insn_SH_INS_LDC: sh_insn = 81;
pub const sh_insn_SH_INS_LDRC: sh_insn = 82;
pub const sh_insn_SH_INS_LDRE: sh_insn = 83;
pub const sh_insn_SH_INS_LDRS: sh_insn = 84;
pub const sh_insn_SH_INS_LDS: sh_insn = 85;
pub const sh_insn_SH_INS_LDTLB: sh_insn = 86;
pub const sh_insn_SH_INS_MAC_L: sh_insn = 87;
pub const sh_insn_SH_INS_MAC_W: sh_insn = 88;
pub const sh_insn_SH_INS_MOV: sh_insn = 89;
pub const sh_insn_SH_INS_MOVA: sh_insn = 90;
pub const sh_insn_SH_INS_MOVCA: sh_insn = 91;
pub const sh_insn_SH_INS_MOVCO: sh_insn = 92;
pub const sh_insn_SH_INS_MOVI20: sh_insn = 93;
pub const sh_insn_SH_INS_MOVI20S: sh_insn = 94;
pub const sh_insn_SH_INS_MOVLI: sh_insn = 95;
pub const sh_insn_SH_INS_MOVML: sh_insn = 96;
pub const sh_insn_SH_INS_MOVMU: sh_insn = 97;
pub const sh_insn_SH_INS_MOVRT: sh_insn = 98;
pub const sh_insn_SH_INS_MOVT: sh_insn = 99;
pub const sh_insn_SH_INS_MOVU: sh_insn = 100;
pub const sh_insn_SH_INS_MOVUA: sh_insn = 101;
pub const sh_insn_SH_INS_MUL_L: sh_insn = 102;
pub const sh_insn_SH_INS_MULR: sh_insn = 103;
pub const sh_insn_SH_INS_MULS_W: sh_insn = 104;
pub const sh_insn_SH_INS_MULU_W: sh_insn = 105;
pub const sh_insn_SH_INS_NEG: sh_insn = 106;
pub const sh_insn_SH_INS_NEGC: sh_insn = 107;
pub const sh_insn_SH_INS_NOP: sh_insn = 108;
pub const sh_insn_SH_INS_NOT: sh_insn = 109;
pub const sh_insn_SH_INS_NOTT: sh_insn = 110;
pub const sh_insn_SH_INS_OCBI: sh_insn = 111;
pub const sh_insn_SH_INS_OCBP: sh_insn = 112;
pub const sh_insn_SH_INS_OCBWB: sh_insn = 113;
pub const sh_insn_SH_INS_OR: sh_insn = 114;
pub const sh_insn_SH_INS_PREF: sh_insn = 115;
pub const sh_insn_SH_INS_PREFI: sh_insn = 116;
pub const sh_insn_SH_INS_RESBANK: sh_insn = 117;
pub const sh_insn_SH_INS_ROTCL: sh_insn = 118;
pub const sh_insn_SH_INS_ROTCR: sh_insn = 119;
pub const sh_insn_SH_INS_ROTL: sh_insn = 120;
pub const sh_insn_SH_INS_ROTR: sh_insn = 121;
pub const sh_insn_SH_INS_RTE: sh_insn = 122;
pub const sh_insn_SH_INS_RTS: sh_insn = 123;
pub const sh_insn_SH_INS_RTS_N: sh_insn = 124;
pub const sh_insn_SH_INS_RTV_N: sh_insn = 125;
pub const sh_insn_SH_INS_SETDMX: sh_insn = 126;
pub const sh_insn_SH_INS_SETDMY: sh_insn = 127;
pub const sh_insn_SH_INS_SETRC: sh_insn = 128;
pub const sh_insn_SH_INS_SETS: sh_insn = 129;
pub const sh_insn_SH_INS_SETT: sh_insn = 130;
pub const sh_insn_SH_INS_SHAD: sh_insn = 131;
pub const sh_insn_SH_INS_SHAL: sh_insn = 132;
pub const sh_insn_SH_INS_SHAR: sh_insn = 133;
pub const sh_insn_SH_INS_SHLD: sh_insn = 134;
pub const sh_insn_SH_INS_SHLL: sh_insn = 135;
pub const sh_insn_SH_INS_SHLL16: sh_insn = 136;
pub const sh_insn_SH_INS_SHLL2: sh_insn = 137;
pub const sh_insn_SH_INS_SHLL8: sh_insn = 138;
pub const sh_insn_SH_INS_SHLR: sh_insn = 139;
pub const sh_insn_SH_INS_SHLR16: sh_insn = 140;
pub const sh_insn_SH_INS_SHLR2: sh_insn = 141;
pub const sh_insn_SH_INS_SHLR8: sh_insn = 142;
pub const sh_insn_SH_INS_SLEEP: sh_insn = 143;
pub const sh_insn_SH_INS_STBANK: sh_insn = 144;
pub const sh_insn_SH_INS_STC: sh_insn = 145;
pub const sh_insn_SH_INS_STS: sh_insn = 146;
pub const sh_insn_SH_INS_SUB: sh_insn = 147;
pub const sh_insn_SH_INS_SUBC: sh_insn = 148;
pub const sh_insn_SH_INS_SUBV: sh_insn = 149;
pub const sh_insn_SH_INS_SWAP_B: sh_insn = 150;
pub const sh_insn_SH_INS_SWAP_W: sh_insn = 151;
pub const sh_insn_SH_INS_SYNCO: sh_insn = 152;
pub const sh_insn_SH_INS_TAS: sh_insn = 153;
pub const sh_insn_SH_INS_TRAPA: sh_insn = 154;
pub const sh_insn_SH_INS_TST: sh_insn = 155;
pub const sh_insn_SH_INS_XOR: sh_insn = 156;
pub const sh_insn_SH_INS_XTRCT: sh_insn = 157;
pub const sh_insn_SH_INS_DSP: sh_insn = 158;
pub const sh_insn_SH_INS_ENDING: sh_insn = 159;
pub type sh_insn = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_sh {
    pub insn: sh_insn,
    pub size: u8,
    pub op_count: u8,
    pub operands: [cs_sh_op; 3usize],
}
pub const sh_insn_group_SH_GRP_INVALID: sh_insn_group = 0;
pub const sh_insn_group_SH_GRP_JUMP: sh_insn_group = 1;
pub const sh_insn_group_SH_GRP_CALL: sh_insn_group = 2;
pub const sh_insn_group_SH_GRP_INT: sh_insn_group = 3;
pub const sh_insn_group_SH_GRP_RET: sh_insn_group = 4;
pub const sh_insn_group_SH_GRP_IRET: sh_insn_group = 5;
pub const sh_insn_group_SH_GRP_PRIVILEGE: sh_insn_group = 6;
pub const sh_insn_group_SH_GRP_BRANCH_RELATIVE: sh_insn_group = 7;
pub const sh_insn_group_SH_GRP_SH1: sh_insn_group = 8;
pub const sh_insn_group_SH_GRP_SH2: sh_insn_group = 9;
pub const sh_insn_group_SH_GRP_SH2E: sh_insn_group = 10;
pub const sh_insn_group_SH_GRP_SH2DSP: sh_insn_group = 11;
pub const sh_insn_group_SH_GRP_SH2A: sh_insn_group = 12;
pub const sh_insn_group_SH_GRP_SH2AFPU: sh_insn_group = 13;
pub const sh_insn_group_SH_GRP_SH3: sh_insn_group = 14;
pub const sh_insn_group_SH_GRP_SH3DSP: sh_insn_group = 15;
pub const sh_insn_group_SH_GRP_SH4: sh_insn_group = 16;
pub const sh_insn_group_SH_GRP_SH4A: sh_insn_group = 17;
pub const sh_insn_group_SH_GRP_ENDING: sh_insn_group = 18;
pub type sh_insn_group = ::core::ffi::c_uint;
pub const tricore_op_type_TRICORE_OP_INVALID: tricore_op_type = 0;
pub const tricore_op_type_TRICORE_OP_REG: tricore_op_type = 1;
pub const tricore_op_type_TRICORE_OP_IMM: tricore_op_type = 2;
pub const tricore_op_type_TRICORE_OP_MEM: tricore_op_type = 128;
pub type tricore_op_type = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tricore_op_mem {
    pub base: u8,
    pub disp: i32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_tricore_op {
    pub type_: tricore_op_type,
    pub __bindgen_anon_1: cs_tricore_op__bindgen_ty_1,
    pub access: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_tricore_op__bindgen_ty_1 {
    pub reg: ::core::ffi::c_uint,
    pub imm: i32,
    pub mem: tricore_op_mem,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_tricore {
    pub op_count: u8,
    pub operands: [cs_tricore_op; 8usize],
    pub update_flags: bool,
}
pub const tricore_reg_TRICORE_REG_INVALID: tricore_reg = 0;
pub const tricore_reg_TRICORE_REG_FCX: tricore_reg = 1;
pub const tricore_reg_TRICORE_REG_PC: tricore_reg = 2;
pub const tricore_reg_TRICORE_REG_PCXI: tricore_reg = 3;
pub const tricore_reg_TRICORE_REG_PSW: tricore_reg = 4;
pub const tricore_reg_TRICORE_REG_A0: tricore_reg = 5;
pub const tricore_reg_TRICORE_REG_A1: tricore_reg = 6;
pub const tricore_reg_TRICORE_REG_A2: tricore_reg = 7;
pub const tricore_reg_TRICORE_REG_A3: tricore_reg = 8;
pub const tricore_reg_TRICORE_REG_A4: tricore_reg = 9;
pub const tricore_reg_TRICORE_REG_A5: tricore_reg = 10;
pub const tricore_reg_TRICORE_REG_A6: tricore_reg = 11;
pub const tricore_reg_TRICORE_REG_A7: tricore_reg = 12;
pub const tricore_reg_TRICORE_REG_A8: tricore_reg = 13;
pub const tricore_reg_TRICORE_REG_A9: tricore_reg = 14;
pub const tricore_reg_TRICORE_REG_A10: tricore_reg = 15;
pub const tricore_reg_TRICORE_REG_A11: tricore_reg = 16;
pub const tricore_reg_TRICORE_REG_A12: tricore_reg = 17;
pub const tricore_reg_TRICORE_REG_A13: tricore_reg = 18;
pub const tricore_reg_TRICORE_REG_A14: tricore_reg = 19;
pub const tricore_reg_TRICORE_REG_A15: tricore_reg = 20;
pub const tricore_reg_TRICORE_REG_D0: tricore_reg = 21;
pub const tricore_reg_TRICORE_REG_D1: tricore_reg = 22;
pub const tricore_reg_TRICORE_REG_D2: tricore_reg = 23;
pub const tricore_reg_TRICORE_REG_D3: tricore_reg = 24;
pub const tricore_reg_TRICORE_REG_D4: tricore_reg = 25;
pub const tricore_reg_TRICORE_REG_D5: tricore_reg = 26;
pub const tricore_reg_TRICORE_REG_D6: tricore_reg = 27;
pub const tricore_reg_TRICORE_REG_D7: tricore_reg = 28;
pub const tricore_reg_TRICORE_REG_D8: tricore_reg = 29;
pub const tricore_reg_TRICORE_REG_D9: tricore_reg = 30;
pub const tricore_reg_TRICORE_REG_D10: tricore_reg = 31;
pub const tricore_reg_TRICORE_REG_D11: tricore_reg = 32;
pub const tricore_reg_TRICORE_REG_D12: tricore_reg = 33;
pub const tricore_reg_TRICORE_REG_D13: tricore_reg = 34;
pub const tricore_reg_TRICORE_REG_D14: tricore_reg = 35;
pub const tricore_reg_TRICORE_REG_D15: tricore_reg = 36;
pub const tricore_reg_TRICORE_REG_E0: tricore_reg = 37;
pub const tricore_reg_TRICORE_REG_E2: tricore_reg = 38;
pub const tricore_reg_TRICORE_REG_E4: tricore_reg = 39;
pub const tricore_reg_TRICORE_REG_E6: tricore_reg = 40;
pub const tricore_reg_TRICORE_REG_E8: tricore_reg = 41;
pub const tricore_reg_TRICORE_REG_E10: tricore_reg = 42;
pub const tricore_reg_TRICORE_REG_E12: tricore_reg = 43;
pub const tricore_reg_TRICORE_REG_E14: tricore_reg = 44;
pub const tricore_reg_TRICORE_REG_P0: tricore_reg = 45;
pub const tricore_reg_TRICORE_REG_P2: tricore_reg = 46;
pub const tricore_reg_TRICORE_REG_P4: tricore_reg = 47;
pub const tricore_reg_TRICORE_REG_P6: tricore_reg = 48;
pub const tricore_reg_TRICORE_REG_P8: tricore_reg = 49;
pub const tricore_reg_TRICORE_REG_P10: tricore_reg = 50;
pub const tricore_reg_TRICORE_REG_P12: tricore_reg = 51;
pub const tricore_reg_TRICORE_REG_P14: tricore_reg = 52;
pub const tricore_reg_TRICORE_REG_A0_A1: tricore_reg = 53;
pub const tricore_reg_TRICORE_REG_A2_A3: tricore_reg = 54;
pub const tricore_reg_TRICORE_REG_A4_A5: tricore_reg = 55;
pub const tricore_reg_TRICORE_REG_A6_A7: tricore_reg = 56;
pub const tricore_reg_TRICORE_REG_A8_A9: tricore_reg = 57;
pub const tricore_reg_TRICORE_REG_A10_A11: tricore_reg = 58;
pub const tricore_reg_TRICORE_REG_A12_A13: tricore_reg = 59;
pub const tricore_reg_TRICORE_REG_A14_A15: tricore_reg = 60;
pub const tricore_reg_TRICORE_REG_ENDING: tricore_reg = 61;
pub type tricore_reg = ::core::ffi::c_uint;
pub const tricore_insn_TRICORE_INS_INVALID: tricore_insn = 0;
pub const tricore_insn_TRICORE_INS_XOR_T: tricore_insn = 1;
pub const tricore_insn_TRICORE_INS_ABSDIFS_B: tricore_insn = 2;
pub const tricore_insn_TRICORE_INS_ABSDIFS_H: tricore_insn = 3;
pub const tricore_insn_TRICORE_INS_ABSDIFS: tricore_insn = 4;
pub const tricore_insn_TRICORE_INS_ABSDIF_B: tricore_insn = 5;
pub const tricore_insn_TRICORE_INS_ABSDIF_H: tricore_insn = 6;
pub const tricore_insn_TRICORE_INS_ABSDIF: tricore_insn = 7;
pub const tricore_insn_TRICORE_INS_ABSS_B: tricore_insn = 8;
pub const tricore_insn_TRICORE_INS_ABSS_H: tricore_insn = 9;
pub const tricore_insn_TRICORE_INS_ABSS: tricore_insn = 10;
pub const tricore_insn_TRICORE_INS_ABS_B: tricore_insn = 11;
pub const tricore_insn_TRICORE_INS_ABS_H: tricore_insn = 12;
pub const tricore_insn_TRICORE_INS_ABS: tricore_insn = 13;
pub const tricore_insn_TRICORE_INS_ADDC: tricore_insn = 14;
pub const tricore_insn_TRICORE_INS_ADDIH_A: tricore_insn = 15;
pub const tricore_insn_TRICORE_INS_ADDIH: tricore_insn = 16;
pub const tricore_insn_TRICORE_INS_ADDI: tricore_insn = 17;
pub const tricore_insn_TRICORE_INS_ADDSC_AT: tricore_insn = 18;
pub const tricore_insn_TRICORE_INS_ADDSC_A: tricore_insn = 19;
pub const tricore_insn_TRICORE_INS_ADDS_BU: tricore_insn = 20;
pub const tricore_insn_TRICORE_INS_ADDS_B: tricore_insn = 21;
pub const tricore_insn_TRICORE_INS_ADDS_H: tricore_insn = 22;
pub const tricore_insn_TRICORE_INS_ADDS_HU: tricore_insn = 23;
pub const tricore_insn_TRICORE_INS_ADDS_U: tricore_insn = 24;
pub const tricore_insn_TRICORE_INS_ADDS: tricore_insn = 25;
pub const tricore_insn_TRICORE_INS_ADDX: tricore_insn = 26;
pub const tricore_insn_TRICORE_INS_ADD_A: tricore_insn = 27;
pub const tricore_insn_TRICORE_INS_ADD_B: tricore_insn = 28;
pub const tricore_insn_TRICORE_INS_ADD_F: tricore_insn = 29;
pub const tricore_insn_TRICORE_INS_ADD_H: tricore_insn = 30;
pub const tricore_insn_TRICORE_INS_ADD: tricore_insn = 31;
pub const tricore_insn_TRICORE_INS_ANDN_T: tricore_insn = 32;
pub const tricore_insn_TRICORE_INS_ANDN: tricore_insn = 33;
pub const tricore_insn_TRICORE_INS_AND_ANDN_T: tricore_insn = 34;
pub const tricore_insn_TRICORE_INS_AND_AND_T: tricore_insn = 35;
pub const tricore_insn_TRICORE_INS_AND_EQ: tricore_insn = 36;
pub const tricore_insn_TRICORE_INS_AND_GE_U: tricore_insn = 37;
pub const tricore_insn_TRICORE_INS_AND_GE: tricore_insn = 38;
pub const tricore_insn_TRICORE_INS_AND_LT_U: tricore_insn = 39;
pub const tricore_insn_TRICORE_INS_AND_LT: tricore_insn = 40;
pub const tricore_insn_TRICORE_INS_AND_NE: tricore_insn = 41;
pub const tricore_insn_TRICORE_INS_AND_NOR_T: tricore_insn = 42;
pub const tricore_insn_TRICORE_INS_AND_OR_T: tricore_insn = 43;
pub const tricore_insn_TRICORE_INS_AND_T: tricore_insn = 44;
pub const tricore_insn_TRICORE_INS_AND: tricore_insn = 45;
pub const tricore_insn_TRICORE_INS_BISR: tricore_insn = 46;
pub const tricore_insn_TRICORE_INS_BMERGE: tricore_insn = 47;
pub const tricore_insn_TRICORE_INS_BSPLIT: tricore_insn = 48;
pub const tricore_insn_TRICORE_INS_CACHEA_I: tricore_insn = 49;
pub const tricore_insn_TRICORE_INS_CACHEA_WI: tricore_insn = 50;
pub const tricore_insn_TRICORE_INS_CACHEA_W: tricore_insn = 51;
pub const tricore_insn_TRICORE_INS_CACHEI_I: tricore_insn = 52;
pub const tricore_insn_TRICORE_INS_CACHEI_WI: tricore_insn = 53;
pub const tricore_insn_TRICORE_INS_CACHEI_W: tricore_insn = 54;
pub const tricore_insn_TRICORE_INS_CADDN_A: tricore_insn = 55;
pub const tricore_insn_TRICORE_INS_CADDN: tricore_insn = 56;
pub const tricore_insn_TRICORE_INS_CADD_A: tricore_insn = 57;
pub const tricore_insn_TRICORE_INS_CADD: tricore_insn = 58;
pub const tricore_insn_TRICORE_INS_CALLA: tricore_insn = 59;
pub const tricore_insn_TRICORE_INS_CALLI: tricore_insn = 60;
pub const tricore_insn_TRICORE_INS_CALL: tricore_insn = 61;
pub const tricore_insn_TRICORE_INS_CLO_B: tricore_insn = 62;
pub const tricore_insn_TRICORE_INS_CLO_H: tricore_insn = 63;
pub const tricore_insn_TRICORE_INS_CLO: tricore_insn = 64;
pub const tricore_insn_TRICORE_INS_CLS_B: tricore_insn = 65;
pub const tricore_insn_TRICORE_INS_CLS_H: tricore_insn = 66;
pub const tricore_insn_TRICORE_INS_CLS: tricore_insn = 67;
pub const tricore_insn_TRICORE_INS_CLZ_B: tricore_insn = 68;
pub const tricore_insn_TRICORE_INS_CLZ_H: tricore_insn = 69;
pub const tricore_insn_TRICORE_INS_CLZ: tricore_insn = 70;
pub const tricore_insn_TRICORE_INS_CMOVN: tricore_insn = 71;
pub const tricore_insn_TRICORE_INS_CMOV: tricore_insn = 72;
pub const tricore_insn_TRICORE_INS_CMPSWAP_W: tricore_insn = 73;
pub const tricore_insn_TRICORE_INS_CMP_F: tricore_insn = 74;
pub const tricore_insn_TRICORE_INS_CRC32B_W: tricore_insn = 75;
pub const tricore_insn_TRICORE_INS_CRC32L_W: tricore_insn = 76;
pub const tricore_insn_TRICORE_INS_CRC32_B: tricore_insn = 77;
pub const tricore_insn_TRICORE_INS_CRCN: tricore_insn = 78;
pub const tricore_insn_TRICORE_INS_CSUBN_A: tricore_insn = 79;
pub const tricore_insn_TRICORE_INS_CSUBN: tricore_insn = 80;
pub const tricore_insn_TRICORE_INS_CSUB_A: tricore_insn = 81;
pub const tricore_insn_TRICORE_INS_CSUB: tricore_insn = 82;
pub const tricore_insn_TRICORE_INS_DEBUG: tricore_insn = 83;
pub const tricore_insn_TRICORE_INS_DEXTR: tricore_insn = 84;
pub const tricore_insn_TRICORE_INS_DIFSC_A: tricore_insn = 85;
pub const tricore_insn_TRICORE_INS_DISABLE: tricore_insn = 86;
pub const tricore_insn_TRICORE_INS_DIV_F: tricore_insn = 87;
pub const tricore_insn_TRICORE_INS_DIV_U: tricore_insn = 88;
pub const tricore_insn_TRICORE_INS_DIV: tricore_insn = 89;
pub const tricore_insn_TRICORE_INS_DSYNC: tricore_insn = 90;
pub const tricore_insn_TRICORE_INS_DVADJ: tricore_insn = 91;
pub const tricore_insn_TRICORE_INS_DVINIT_BU: tricore_insn = 92;
pub const tricore_insn_TRICORE_INS_DVINIT_B: tricore_insn = 93;
pub const tricore_insn_TRICORE_INS_DVINIT_HU: tricore_insn = 94;
pub const tricore_insn_TRICORE_INS_DVINIT_H: tricore_insn = 95;
pub const tricore_insn_TRICORE_INS_DVINIT_U: tricore_insn = 96;
pub const tricore_insn_TRICORE_INS_DVINIT: tricore_insn = 97;
pub const tricore_insn_TRICORE_INS_DVSTEP_U: tricore_insn = 98;
pub const tricore_insn_TRICORE_INS_DVSTEP: tricore_insn = 99;
pub const tricore_insn_TRICORE_INS_ENABLE: tricore_insn = 100;
pub const tricore_insn_TRICORE_INS_EQANY_B: tricore_insn = 101;
pub const tricore_insn_TRICORE_INS_EQANY_H: tricore_insn = 102;
pub const tricore_insn_TRICORE_INS_EQZ_A: tricore_insn = 103;
pub const tricore_insn_TRICORE_INS_EQ_A: tricore_insn = 104;
pub const tricore_insn_TRICORE_INS_EQ_B: tricore_insn = 105;
pub const tricore_insn_TRICORE_INS_EQ_H: tricore_insn = 106;
pub const tricore_insn_TRICORE_INS_EQ_W: tricore_insn = 107;
pub const tricore_insn_TRICORE_INS_EQ: tricore_insn = 108;
pub const tricore_insn_TRICORE_INS_EXTR_U: tricore_insn = 109;
pub const tricore_insn_TRICORE_INS_EXTR: tricore_insn = 110;
pub const tricore_insn_TRICORE_INS_FCALLA: tricore_insn = 111;
pub const tricore_insn_TRICORE_INS_FCALLI: tricore_insn = 112;
pub const tricore_insn_TRICORE_INS_FCALL: tricore_insn = 113;
pub const tricore_insn_TRICORE_INS_FRET: tricore_insn = 114;
pub const tricore_insn_TRICORE_INS_FTOHP: tricore_insn = 115;
pub const tricore_insn_TRICORE_INS_FTOIZ: tricore_insn = 116;
pub const tricore_insn_TRICORE_INS_FTOI: tricore_insn = 117;
pub const tricore_insn_TRICORE_INS_FTOQ31Z: tricore_insn = 118;
pub const tricore_insn_TRICORE_INS_FTOQ31: tricore_insn = 119;
pub const tricore_insn_TRICORE_INS_FTOUZ: tricore_insn = 120;
pub const tricore_insn_TRICORE_INS_FTOU: tricore_insn = 121;
pub const tricore_insn_TRICORE_INS_GE_A: tricore_insn = 122;
pub const tricore_insn_TRICORE_INS_GE_U: tricore_insn = 123;
pub const tricore_insn_TRICORE_INS_GE: tricore_insn = 124;
pub const tricore_insn_TRICORE_INS_HPTOF: tricore_insn = 125;
pub const tricore_insn_TRICORE_INS_IMASK: tricore_insn = 126;
pub const tricore_insn_TRICORE_INS_INSERT: tricore_insn = 127;
pub const tricore_insn_TRICORE_INS_INSN_T: tricore_insn = 128;
pub const tricore_insn_TRICORE_INS_INS_T: tricore_insn = 129;
pub const tricore_insn_TRICORE_INS_ISYNC: tricore_insn = 130;
pub const tricore_insn_TRICORE_INS_ITOF: tricore_insn = 131;
pub const tricore_insn_TRICORE_INS_IXMAX_U: tricore_insn = 132;
pub const tricore_insn_TRICORE_INS_IXMAX: tricore_insn = 133;
pub const tricore_insn_TRICORE_INS_IXMIN_U: tricore_insn = 134;
pub const tricore_insn_TRICORE_INS_IXMIN: tricore_insn = 135;
pub const tricore_insn_TRICORE_INS_JA: tricore_insn = 136;
pub const tricore_insn_TRICORE_INS_JEQ_A: tricore_insn = 137;
pub const tricore_insn_TRICORE_INS_JEQ: tricore_insn = 138;
pub const tricore_insn_TRICORE_INS_JGEZ: tricore_insn = 139;
pub const tricore_insn_TRICORE_INS_JGE_U: tricore_insn = 140;
pub const tricore_insn_TRICORE_INS_JGE: tricore_insn = 141;
pub const tricore_insn_TRICORE_INS_JGTZ: tricore_insn = 142;
pub const tricore_insn_TRICORE_INS_JI: tricore_insn = 143;
pub const tricore_insn_TRICORE_INS_JLA: tricore_insn = 144;
pub const tricore_insn_TRICORE_INS_JLEZ: tricore_insn = 145;
pub const tricore_insn_TRICORE_INS_JLI: tricore_insn = 146;
pub const tricore_insn_TRICORE_INS_JLTZ: tricore_insn = 147;
pub const tricore_insn_TRICORE_INS_JLT_U: tricore_insn = 148;
pub const tricore_insn_TRICORE_INS_JLT: tricore_insn = 149;
pub const tricore_insn_TRICORE_INS_JL: tricore_insn = 150;
pub const tricore_insn_TRICORE_INS_JNED: tricore_insn = 151;
pub const tricore_insn_TRICORE_INS_JNEI: tricore_insn = 152;
pub const tricore_insn_TRICORE_INS_JNE_A: tricore_insn = 153;
pub const tricore_insn_TRICORE_INS_JNE: tricore_insn = 154;
pub const tricore_insn_TRICORE_INS_JNZ_A: tricore_insn = 155;
pub const tricore_insn_TRICORE_INS_JNZ_T: tricore_insn = 156;
pub const tricore_insn_TRICORE_INS_JNZ: tricore_insn = 157;
pub const tricore_insn_TRICORE_INS_JZ_A: tricore_insn = 158;
pub const tricore_insn_TRICORE_INS_JZ_T: tricore_insn = 159;
pub const tricore_insn_TRICORE_INS_JZ: tricore_insn = 160;
pub const tricore_insn_TRICORE_INS_J: tricore_insn = 161;
pub const tricore_insn_TRICORE_INS_LDLCX: tricore_insn = 162;
pub const tricore_insn_TRICORE_INS_LDMST: tricore_insn = 163;
pub const tricore_insn_TRICORE_INS_LDUCX: tricore_insn = 164;
pub const tricore_insn_TRICORE_INS_LD_A: tricore_insn = 165;
pub const tricore_insn_TRICORE_INS_LD_BU: tricore_insn = 166;
pub const tricore_insn_TRICORE_INS_LD_B: tricore_insn = 167;
pub const tricore_insn_TRICORE_INS_LD_DA: tricore_insn = 168;
pub const tricore_insn_TRICORE_INS_LD_D: tricore_insn = 169;
pub const tricore_insn_TRICORE_INS_LD_HU: tricore_insn = 170;
pub const tricore_insn_TRICORE_INS_LD_H: tricore_insn = 171;
pub const tricore_insn_TRICORE_INS_LD_Q: tricore_insn = 172;
pub const tricore_insn_TRICORE_INS_LD_W: tricore_insn = 173;
pub const tricore_insn_TRICORE_INS_LEA: tricore_insn = 174;
pub const tricore_insn_TRICORE_INS_LHA: tricore_insn = 175;
pub const tricore_insn_TRICORE_INS_LOOPU: tricore_insn = 176;
pub const tricore_insn_TRICORE_INS_LOOP: tricore_insn = 177;
pub const tricore_insn_TRICORE_INS_LT_A: tricore_insn = 178;
pub const tricore_insn_TRICORE_INS_LT_B: tricore_insn = 179;
pub const tricore_insn_TRICORE_INS_LT_BU: tricore_insn = 180;
pub const tricore_insn_TRICORE_INS_LT_H: tricore_insn = 181;
pub const tricore_insn_TRICORE_INS_LT_HU: tricore_insn = 182;
pub const tricore_insn_TRICORE_INS_LT_U: tricore_insn = 183;
pub const tricore_insn_TRICORE_INS_LT_W: tricore_insn = 184;
pub const tricore_insn_TRICORE_INS_LT_WU: tricore_insn = 185;
pub const tricore_insn_TRICORE_INS_LT: tricore_insn = 186;
pub const tricore_insn_TRICORE_INS_MADDMS_H: tricore_insn = 187;
pub const tricore_insn_TRICORE_INS_MADDMS_U: tricore_insn = 188;
pub const tricore_insn_TRICORE_INS_MADDMS: tricore_insn = 189;
pub const tricore_insn_TRICORE_INS_MADDM_H: tricore_insn = 190;
pub const tricore_insn_TRICORE_INS_MADDM_Q: tricore_insn = 191;
pub const tricore_insn_TRICORE_INS_MADDM_U: tricore_insn = 192;
pub const tricore_insn_TRICORE_INS_MADDM: tricore_insn = 193;
pub const tricore_insn_TRICORE_INS_MADDRS_H: tricore_insn = 194;
pub const tricore_insn_TRICORE_INS_MADDRS_Q: tricore_insn = 195;
pub const tricore_insn_TRICORE_INS_MADDR_H: tricore_insn = 196;
pub const tricore_insn_TRICORE_INS_MADDR_Q: tricore_insn = 197;
pub const tricore_insn_TRICORE_INS_MADDSUMS_H: tricore_insn = 198;
pub const tricore_insn_TRICORE_INS_MADDSUM_H: tricore_insn = 199;
pub const tricore_insn_TRICORE_INS_MADDSURS_H: tricore_insn = 200;
pub const tricore_insn_TRICORE_INS_MADDSUR_H: tricore_insn = 201;
pub const tricore_insn_TRICORE_INS_MADDSUS_H: tricore_insn = 202;
pub const tricore_insn_TRICORE_INS_MADDSU_H: tricore_insn = 203;
pub const tricore_insn_TRICORE_INS_MADDS_H: tricore_insn = 204;
pub const tricore_insn_TRICORE_INS_MADDS_Q: tricore_insn = 205;
pub const tricore_insn_TRICORE_INS_MADDS_U: tricore_insn = 206;
pub const tricore_insn_TRICORE_INS_MADDS: tricore_insn = 207;
pub const tricore_insn_TRICORE_INS_MADD_F: tricore_insn = 208;
pub const tricore_insn_TRICORE_INS_MADD_H: tricore_insn = 209;
pub const tricore_insn_TRICORE_INS_MADD_Q: tricore_insn = 210;
pub const tricore_insn_TRICORE_INS_MADD_U: tricore_insn = 211;
pub const tricore_insn_TRICORE_INS_MADD: tricore_insn = 212;
pub const tricore_insn_TRICORE_INS_MAX_B: tricore_insn = 213;
pub const tricore_insn_TRICORE_INS_MAX_BU: tricore_insn = 214;
pub const tricore_insn_TRICORE_INS_MAX_H: tricore_insn = 215;
pub const tricore_insn_TRICORE_INS_MAX_HU: tricore_insn = 216;
pub const tricore_insn_TRICORE_INS_MAX_U: tricore_insn = 217;
pub const tricore_insn_TRICORE_INS_MAX: tricore_insn = 218;
pub const tricore_insn_TRICORE_INS_MFCR: tricore_insn = 219;
pub const tricore_insn_TRICORE_INS_MIN_B: tricore_insn = 220;
pub const tricore_insn_TRICORE_INS_MIN_BU: tricore_insn = 221;
pub const tricore_insn_TRICORE_INS_MIN_H: tricore_insn = 222;
pub const tricore_insn_TRICORE_INS_MIN_HU: tricore_insn = 223;
pub const tricore_insn_TRICORE_INS_MIN_U: tricore_insn = 224;
pub const tricore_insn_TRICORE_INS_MIN: tricore_insn = 225;
pub const tricore_insn_TRICORE_INS_MOVH_A: tricore_insn = 226;
pub const tricore_insn_TRICORE_INS_MOVH: tricore_insn = 227;
pub const tricore_insn_TRICORE_INS_MOVZ_A: tricore_insn = 228;
pub const tricore_insn_TRICORE_INS_MOV_AA: tricore_insn = 229;
pub const tricore_insn_TRICORE_INS_MOV_A: tricore_insn = 230;
pub const tricore_insn_TRICORE_INS_MOV_D: tricore_insn = 231;
pub const tricore_insn_TRICORE_INS_MOV_U: tricore_insn = 232;
pub const tricore_insn_TRICORE_INS_MOV: tricore_insn = 233;
pub const tricore_insn_TRICORE_INS_MSUBADMS_H: tricore_insn = 234;
pub const tricore_insn_TRICORE_INS_MSUBADM_H: tricore_insn = 235;
pub const tricore_insn_TRICORE_INS_MSUBADRS_H: tricore_insn = 236;
pub const tricore_insn_TRICORE_INS_MSUBADR_H: tricore_insn = 237;
pub const tricore_insn_TRICORE_INS_MSUBADS_H: tricore_insn = 238;
pub const tricore_insn_TRICORE_INS_MSUBAD_H: tricore_insn = 239;
pub const tricore_insn_TRICORE_INS_MSUBMS_H: tricore_insn = 240;
pub const tricore_insn_TRICORE_INS_MSUBMS_U: tricore_insn = 241;
pub const tricore_insn_TRICORE_INS_MSUBMS: tricore_insn = 242;
pub const tricore_insn_TRICORE_INS_MSUBM_H: tricore_insn = 243;
pub const tricore_insn_TRICORE_INS_MSUBM_Q: tricore_insn = 244;
pub const tricore_insn_TRICORE_INS_MSUBM_U: tricore_insn = 245;
pub const tricore_insn_TRICORE_INS_MSUBM: tricore_insn = 246;
pub const tricore_insn_TRICORE_INS_MSUBRS_H: tricore_insn = 247;
pub const tricore_insn_TRICORE_INS_MSUBRS_Q: tricore_insn = 248;
pub const tricore_insn_TRICORE_INS_MSUBR_H: tricore_insn = 249;
pub const tricore_insn_TRICORE_INS_MSUBR_Q: tricore_insn = 250;
pub const tricore_insn_TRICORE_INS_MSUBS_H: tricore_insn = 251;
pub const tricore_insn_TRICORE_INS_MSUBS_Q: tricore_insn = 252;
pub const tricore_insn_TRICORE_INS_MSUBS_U: tricore_insn = 253;
pub const tricore_insn_TRICORE_INS_MSUBS: tricore_insn = 254;
pub const tricore_insn_TRICORE_INS_MSUB_F: tricore_insn = 255;
pub const tricore_insn_TRICORE_INS_MSUB_H: tricore_insn = 256;
pub const tricore_insn_TRICORE_INS_MSUB_Q: tricore_insn = 257;
pub const tricore_insn_TRICORE_INS_MSUB_U: tricore_insn = 258;
pub const tricore_insn_TRICORE_INS_MSUB: tricore_insn = 259;
pub const tricore_insn_TRICORE_INS_MTCR: tricore_insn = 260;
pub const tricore_insn_TRICORE_INS_MULMS_H: tricore_insn = 261;
pub const tricore_insn_TRICORE_INS_MULM_H: tricore_insn = 262;
pub const tricore_insn_TRICORE_INS_MULM_U: tricore_insn = 263;
pub const tricore_insn_TRICORE_INS_MULM: tricore_insn = 264;
pub const tricore_insn_TRICORE_INS_MULR_H: tricore_insn = 265;
pub const tricore_insn_TRICORE_INS_MULR_Q: tricore_insn = 266;
pub const tricore_insn_TRICORE_INS_MULS_U: tricore_insn = 267;
pub const tricore_insn_TRICORE_INS_MULS: tricore_insn = 268;
pub const tricore_insn_TRICORE_INS_MUL_F: tricore_insn = 269;
pub const tricore_insn_TRICORE_INS_MUL_H: tricore_insn = 270;
pub const tricore_insn_TRICORE_INS_MUL_Q: tricore_insn = 271;
pub const tricore_insn_TRICORE_INS_MUL_U: tricore_insn = 272;
pub const tricore_insn_TRICORE_INS_MUL: tricore_insn = 273;
pub const tricore_insn_TRICORE_INS_NAND_T: tricore_insn = 274;
pub const tricore_insn_TRICORE_INS_NAND: tricore_insn = 275;
pub const tricore_insn_TRICORE_INS_NEZ_A: tricore_insn = 276;
pub const tricore_insn_TRICORE_INS_NE_A: tricore_insn = 277;
pub const tricore_insn_TRICORE_INS_NE: tricore_insn = 278;
pub const tricore_insn_TRICORE_INS_NOP: tricore_insn = 279;
pub const tricore_insn_TRICORE_INS_NOR_T: tricore_insn = 280;
pub const tricore_insn_TRICORE_INS_NOR: tricore_insn = 281;
pub const tricore_insn_TRICORE_INS_NOT: tricore_insn = 282;
pub const tricore_insn_TRICORE_INS_ORN_T: tricore_insn = 283;
pub const tricore_insn_TRICORE_INS_ORN: tricore_insn = 284;
pub const tricore_insn_TRICORE_INS_OR_ANDN_T: tricore_insn = 285;
pub const tricore_insn_TRICORE_INS_OR_AND_T: tricore_insn = 286;
pub const tricore_insn_TRICORE_INS_OR_EQ: tricore_insn = 287;
pub const tricore_insn_TRICORE_INS_OR_GE_U: tricore_insn = 288;
pub const tricore_insn_TRICORE_INS_OR_GE: tricore_insn = 289;
pub const tricore_insn_TRICORE_INS_OR_LT_U: tricore_insn = 290;
pub const tricore_insn_TRICORE_INS_OR_LT: tricore_insn = 291;
pub const tricore_insn_TRICORE_INS_OR_NE: tricore_insn = 292;
pub const tricore_insn_TRICORE_INS_OR_NOR_T: tricore_insn = 293;
pub const tricore_insn_TRICORE_INS_OR_OR_T: tricore_insn = 294;
pub const tricore_insn_TRICORE_INS_OR_T: tricore_insn = 295;
pub const tricore_insn_TRICORE_INS_OR: tricore_insn = 296;
pub const tricore_insn_TRICORE_INS_PACK: tricore_insn = 297;
pub const tricore_insn_TRICORE_INS_PARITY: tricore_insn = 298;
pub const tricore_insn_TRICORE_INS_POPCNT_W: tricore_insn = 299;
pub const tricore_insn_TRICORE_INS_Q31TOF: tricore_insn = 300;
pub const tricore_insn_TRICORE_INS_QSEED_F: tricore_insn = 301;
pub const tricore_insn_TRICORE_INS_RESTORE: tricore_insn = 302;
pub const tricore_insn_TRICORE_INS_RET: tricore_insn = 303;
pub const tricore_insn_TRICORE_INS_RFE: tricore_insn = 304;
pub const tricore_insn_TRICORE_INS_RFM: tricore_insn = 305;
pub const tricore_insn_TRICORE_INS_RSLCX: tricore_insn = 306;
pub const tricore_insn_TRICORE_INS_RSTV: tricore_insn = 307;
pub const tricore_insn_TRICORE_INS_RSUBS_U: tricore_insn = 308;
pub const tricore_insn_TRICORE_INS_RSUBS: tricore_insn = 309;
pub const tricore_insn_TRICORE_INS_RSUB: tricore_insn = 310;
pub const tricore_insn_TRICORE_INS_SAT_BU: tricore_insn = 311;
pub const tricore_insn_TRICORE_INS_SAT_B: tricore_insn = 312;
pub const tricore_insn_TRICORE_INS_SAT_HU: tricore_insn = 313;
pub const tricore_insn_TRICORE_INS_SAT_H: tricore_insn = 314;
pub const tricore_insn_TRICORE_INS_SELN_A: tricore_insn = 315;
pub const tricore_insn_TRICORE_INS_SELN: tricore_insn = 316;
pub const tricore_insn_TRICORE_INS_SEL_A: tricore_insn = 317;
pub const tricore_insn_TRICORE_INS_SEL: tricore_insn = 318;
pub const tricore_insn_TRICORE_INS_SHAS: tricore_insn = 319;
pub const tricore_insn_TRICORE_INS_SHA_B: tricore_insn = 320;
pub const tricore_insn_TRICORE_INS_SHA_H: tricore_insn = 321;
pub const tricore_insn_TRICORE_INS_SHA: tricore_insn = 322;
pub const tricore_insn_TRICORE_INS_SHUFFLE: tricore_insn = 323;
pub const tricore_insn_TRICORE_INS_SH_ANDN_T: tricore_insn = 324;
pub const tricore_insn_TRICORE_INS_SH_AND_T: tricore_insn = 325;
pub const tricore_insn_TRICORE_INS_SH_B: tricore_insn = 326;
pub const tricore_insn_TRICORE_INS_SH_EQ: tricore_insn = 327;
pub const tricore_insn_TRICORE_INS_SH_GE_U: tricore_insn = 328;
pub const tricore_insn_TRICORE_INS_SH_GE: tricore_insn = 329;
pub const tricore_insn_TRICORE_INS_SH_H: tricore_insn = 330;
pub const tricore_insn_TRICORE_INS_SH_LT_U: tricore_insn = 331;
pub const tricore_insn_TRICORE_INS_SH_LT: tricore_insn = 332;
pub const tricore_insn_TRICORE_INS_SH_NAND_T: tricore_insn = 333;
pub const tricore_insn_TRICORE_INS_SH_NE: tricore_insn = 334;
pub const tricore_insn_TRICORE_INS_SH_NOR_T: tricore_insn = 335;
pub const tricore_insn_TRICORE_INS_SH_ORN_T: tricore_insn = 336;
pub const tricore_insn_TRICORE_INS_SH_OR_T: tricore_insn = 337;
pub const tricore_insn_TRICORE_INS_SH_XNOR_T: tricore_insn = 338;
pub const tricore_insn_TRICORE_INS_SH_XOR_T: tricore_insn = 339;
pub const tricore_insn_TRICORE_INS_SH: tricore_insn = 340;
pub const tricore_insn_TRICORE_INS_STLCX: tricore_insn = 341;
pub const tricore_insn_TRICORE_INS_STUCX: tricore_insn = 342;
pub const tricore_insn_TRICORE_INS_ST_A: tricore_insn = 343;
pub const tricore_insn_TRICORE_INS_ST_B: tricore_insn = 344;
pub const tricore_insn_TRICORE_INS_ST_DA: tricore_insn = 345;
pub const tricore_insn_TRICORE_INS_ST_D: tricore_insn = 346;
pub const tricore_insn_TRICORE_INS_ST_H: tricore_insn = 347;
pub const tricore_insn_TRICORE_INS_ST_Q: tricore_insn = 348;
pub const tricore_insn_TRICORE_INS_ST_T: tricore_insn = 349;
pub const tricore_insn_TRICORE_INS_ST_W: tricore_insn = 350;
pub const tricore_insn_TRICORE_INS_SUBC: tricore_insn = 351;
pub const tricore_insn_TRICORE_INS_SUBSC_A: tricore_insn = 352;
pub const tricore_insn_TRICORE_INS_SUBS_BU: tricore_insn = 353;
pub const tricore_insn_TRICORE_INS_SUBS_B: tricore_insn = 354;
pub const tricore_insn_TRICORE_INS_SUBS_HU: tricore_insn = 355;
pub const tricore_insn_TRICORE_INS_SUBS_H: tricore_insn = 356;
pub const tricore_insn_TRICORE_INS_SUBS_U: tricore_insn = 357;
pub const tricore_insn_TRICORE_INS_SUBS: tricore_insn = 358;
pub const tricore_insn_TRICORE_INS_SUBX: tricore_insn = 359;
pub const tricore_insn_TRICORE_INS_SUB_A: tricore_insn = 360;
pub const tricore_insn_TRICORE_INS_SUB_B: tricore_insn = 361;
pub const tricore_insn_TRICORE_INS_SUB_F: tricore_insn = 362;
pub const tricore_insn_TRICORE_INS_SUB_H: tricore_insn = 363;
pub const tricore_insn_TRICORE_INS_SUB: tricore_insn = 364;
pub const tricore_insn_TRICORE_INS_SVLCX: tricore_insn = 365;
pub const tricore_insn_TRICORE_INS_SWAPMSK_W: tricore_insn = 366;
pub const tricore_insn_TRICORE_INS_SWAP_A: tricore_insn = 367;
pub const tricore_insn_TRICORE_INS_SWAP_W: tricore_insn = 368;
pub const tricore_insn_TRICORE_INS_SYSCALL: tricore_insn = 369;
pub const tricore_insn_TRICORE_INS_TLBDEMAP: tricore_insn = 370;
pub const tricore_insn_TRICORE_INS_TLBFLUSH_A: tricore_insn = 371;
pub const tricore_insn_TRICORE_INS_TLBFLUSH_B: tricore_insn = 372;
pub const tricore_insn_TRICORE_INS_TLBMAP: tricore_insn = 373;
pub const tricore_insn_TRICORE_INS_TLBPROBE_A: tricore_insn = 374;
pub const tricore_insn_TRICORE_INS_TLBPROBE_I: tricore_insn = 375;
pub const tricore_insn_TRICORE_INS_TRAPSV: tricore_insn = 376;
pub const tricore_insn_TRICORE_INS_TRAPV: tricore_insn = 377;
pub const tricore_insn_TRICORE_INS_UNPACK: tricore_insn = 378;
pub const tricore_insn_TRICORE_INS_UPDFL: tricore_insn = 379;
pub const tricore_insn_TRICORE_INS_UTOF: tricore_insn = 380;
pub const tricore_insn_TRICORE_INS_WAIT: tricore_insn = 381;
pub const tricore_insn_TRICORE_INS_XNOR_T: tricore_insn = 382;
pub const tricore_insn_TRICORE_INS_XNOR: tricore_insn = 383;
pub const tricore_insn_TRICORE_INS_XOR_EQ: tricore_insn = 384;
pub const tricore_insn_TRICORE_INS_XOR_GE_U: tricore_insn = 385;
pub const tricore_insn_TRICORE_INS_XOR_GE: tricore_insn = 386;
pub const tricore_insn_TRICORE_INS_XOR_LT_U: tricore_insn = 387;
pub const tricore_insn_TRICORE_INS_XOR_LT: tricore_insn = 388;
pub const tricore_insn_TRICORE_INS_XOR_NE: tricore_insn = 389;
pub const tricore_insn_TRICORE_INS_XOR: tricore_insn = 390;
pub const tricore_insn_TRICORE_INS_ENDING: tricore_insn = 391;
pub type tricore_insn = ::core::ffi::c_uint;
pub const tricore_insn_group_TRICORE_GRP_INVALID: tricore_insn_group = 0;
pub const tricore_insn_group_TRICORE_GRP_CALL: tricore_insn_group = 1;
pub const tricore_insn_group_TRICORE_GRP_JUMP: tricore_insn_group = 2;
pub const tricore_insn_group_TRICORE_GRP_ENDING: tricore_insn_group = 3;
pub type tricore_insn_group = ::core::ffi::c_uint;
pub const tricore_feature_t_TRICORE_FEATURE_INVALID: tricore_feature_t = 0;
pub const tricore_feature_t_TRICORE_FEATURE_HasV110: tricore_feature_t = 128;
pub const tricore_feature_t_TRICORE_FEATURE_HasV120_UP: tricore_feature_t = 129;
pub const tricore_feature_t_TRICORE_FEATURE_HasV130_UP: tricore_feature_t = 130;
pub const tricore_feature_t_TRICORE_FEATURE_HasV161: tricore_feature_t = 131;
pub const tricore_feature_t_TRICORE_FEATURE_HasV160_UP: tricore_feature_t = 132;
pub const tricore_feature_t_TRICORE_FEATURE_HasV131_UP: tricore_feature_t = 133;
pub const tricore_feature_t_TRICORE_FEATURE_HasV161_UP: tricore_feature_t = 134;
pub const tricore_feature_t_TRICORE_FEATURE_HasV162: tricore_feature_t = 135;
pub const tricore_feature_t_TRICORE_FEATURE_HasV162_UP: tricore_feature_t = 136;
pub const tricore_feature_t_TRICORE_FEATURE_ENDING: tricore_feature_t = 137;
pub type tricore_feature_t = ::core::ffi::c_uint;
pub use self::tricore_feature_t as tricore_feature;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_detail {
    pub regs_read: [u16; 20usize],
    pub regs_read_count: u8,
    pub regs_write: [u16; 20usize],
    pub regs_write_count: u8,
    pub groups: [u8; 8usize],
    pub groups_count: u8,
    pub writeback: bool,
    pub __bindgen_anon_1: cs_detail__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_detail__bindgen_ty_1 {
    pub x86: cs_x86,
    pub arm64: cs_arm64,
    pub arm: cs_arm,
    pub m68k: cs_m68k,
    pub mips: cs_mips,
    pub ppc: cs_ppc,
    pub sparc: cs_sparc,
    pub sysz: cs_sysz,
    pub xcore: cs_xcore,
    pub tms320c64x: cs_tms320c64x,
    pub m680x: cs_m680x,
    pub evm: cs_evm,
    pub mos65xx: cs_mos65xx,
    pub wasm: cs_wasm,
    pub bpf: cs_bpf,
    pub riscv: cs_riscv,
    pub sh: cs_sh,
    pub tricore: cs_tricore,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cs_insn {
    pub id: ::core::ffi::c_uint,
    pub address: u64,
    pub size: u16,
    pub bytes: [u8; 24usize],
    pub mnemonic: [::core::ffi::c_char; 32usize],
    pub op_str: [::core::ffi::c_char; 160usize],
    pub detail: *mut cs_detail,
}
pub const cs_err_CS_ERR_OK: cs_err = 0;
pub const cs_err_CS_ERR_MEM: cs_err = 1;
pub const cs_err_CS_ERR_ARCH: cs_err = 2;
pub const cs_err_CS_ERR_HANDLE: cs_err = 3;
pub const cs_err_CS_ERR_CSH: cs_err = 4;
pub const cs_err_CS_ERR_MODE: cs_err = 5;
pub const cs_err_CS_ERR_OPTION: cs_err = 6;
pub const cs_err_CS_ERR_DETAIL: cs_err = 7;
pub const cs_err_CS_ERR_MEMSETUP: cs_err = 8;
pub const cs_err_CS_ERR_VERSION: cs_err = 9;
pub const cs_err_CS_ERR_DIET: cs_err = 10;
pub const cs_err_CS_ERR_SKIPDATA: cs_err = 11;
pub const cs_err_CS_ERR_X86_ATT: cs_err = 12;
pub const cs_err_CS_ERR_X86_INTEL: cs_err = 13;
pub const cs_err_CS_ERR_X86_MASM: cs_err = 14;
pub type cs_err = ::core::ffi::c_uint;
extern "C" {
    pub fn _frida_cs_version(
        major: *mut ::core::ffi::c_int,
        minor: *mut ::core::ffi::c_int,
    ) -> ::core::ffi::c_uint;
}
extern "C" {
    pub fn _frida_cs_arch_register_arm();
}
extern "C" {
    pub fn _frida_cs_arch_register_arm64();
}
extern "C" {
    pub fn _frida_cs_arch_register_mips();
}
extern "C" {
    pub fn _frida_cs_arch_register_x86();
}
extern "C" {
    pub fn _frida_cs_arch_register_ppc();
}
extern "C" {
    pub fn _frida_cs_arch_register_sparc();
}
extern "C" {
    pub fn _frida_cs_arch_register_sysz();
}
extern "C" {
    pub fn _frida_cs_arch_register_xcore();
}
extern "C" {
    pub fn _frida_cs_arch_register_m68k();
}
extern "C" {
    pub fn _frida_cs_arch_register_tms320c64x();
}
extern "C" {
    pub fn _frida_cs_arch_register_m680x();
}
extern "C" {
    pub fn _frida_cs_arch_register_evm();
}
extern "C" {
    pub fn _frida_cs_arch_register_mos65xx();
}
extern "C" {
    pub fn _frida_cs_arch_register_wasm();
}
extern "C" {
    pub fn _frida_cs_arch_register_bpf();
}
extern "C" {
    pub fn _frida_cs_arch_register_riscv();
}
extern "C" {
    pub fn _frida_cs_arch_register_sh();
}
extern "C" {
    pub fn _frida_cs_arch_register_tricore();
}
extern "C" {
    pub fn _frida_cs_support(query: ::core::ffi::c_int) -> bool;
}
extern "C" {
    pub fn _frida_cs_open(arch: cs_arch, mode: cs_mode, handle: *mut csh) -> cs_err;
}
extern "C" {
    pub fn _frida_cs_close(handle: *mut csh) -> cs_err;
}
extern "C" {
    pub fn _frida_cs_option(handle: csh, type_: cs_opt_type, value: usize) -> cs_err;
}
extern "C" {
    pub fn _frida_cs_errno(handle: csh) -> cs_err;
}
extern "C" {
    pub fn _frida_cs_strerror(code: cs_err) -> *const ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_cs_disasm(
        handle: csh,
        code: *const u8,
        code_size: usize,
        address: u64,
        count: usize,
        insn: *mut *mut cs_insn,
    ) -> usize;
}
extern "C" {
    pub fn _frida_cs_free(insn: *mut cs_insn, count: usize);
}
extern "C" {
    pub fn _frida_cs_malloc(handle: csh) -> *mut cs_insn;
}
extern "C" {
    pub fn _frida_cs_disasm_iter(
        handle: csh,
        code: *mut *const u8,
        size: *mut usize,
        address: *mut u64,
        insn: *mut cs_insn,
    ) -> bool;
}
extern "C" {
    pub fn _frida_cs_reg_name(
        handle: csh,
        reg_id: ::core::ffi::c_uint,
    ) -> *const ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_cs_insn_name(
        handle: csh,
        insn_id: ::core::ffi::c_uint,
    ) -> *const ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_cs_group_name(
        handle: csh,
        group_id: ::core::ffi::c_uint,
    ) -> *const ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_cs_insn_group(
        handle: csh,
        insn: *const cs_insn,
        group_id: ::core::ffi::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn _frida_cs_reg_read(
        handle: csh,
        insn: *const cs_insn,
        reg_id: ::core::ffi::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn _frida_cs_reg_write(
        handle: csh,
        insn: *const cs_insn,
        reg_id: ::core::ffi::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn _frida_cs_op_count(
        handle: csh,
        insn: *const cs_insn,
        op_type: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _frida_cs_op_index(
        handle: csh,
        insn: *const cs_insn,
        op_type: ::core::ffi::c_uint,
        position: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_int;
}
pub type cs_regs = [u16; 64usize];
extern "C" {
    pub fn _frida_cs_regs_access(
        handle: csh,
        insn: *const cs_insn,
        regs_read: *mut u16,
        regs_read_count: *mut u8,
        regs_write: *mut u16,
        regs_write_count: *mut u8,
    ) -> cs_err;
}
pub type GumX86Writer = _GumX86Writer;
pub type GumX86Reg = guint;
pub type GumX86PtrTarget = guint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumX86Writer {
    pub ref_count: gint,
    pub flush_on_destroy: gboolean,
    pub target_cpu: GumCpuType,
    pub target_abi: GumAbiType,
    pub base: *mut guint8,
    pub code: *mut guint8,
    pub pc: GumAddress,
    pub label_defs: *mut GumMetalHashTable,
    pub label_refs: GumMetalArray,
}
pub const _GumX86Reg_GUM_X86_EAX: _GumX86Reg = 0;
pub const _GumX86Reg_GUM_X86_ECX: _GumX86Reg = 1;
pub const _GumX86Reg_GUM_X86_EDX: _GumX86Reg = 2;
pub const _GumX86Reg_GUM_X86_EBX: _GumX86Reg = 3;
pub const _GumX86Reg_GUM_X86_ESP: _GumX86Reg = 4;
pub const _GumX86Reg_GUM_X86_EBP: _GumX86Reg = 5;
pub const _GumX86Reg_GUM_X86_ESI: _GumX86Reg = 6;
pub const _GumX86Reg_GUM_X86_EDI: _GumX86Reg = 7;
pub const _GumX86Reg_GUM_X86_R8D: _GumX86Reg = 8;
pub const _GumX86Reg_GUM_X86_R9D: _GumX86Reg = 9;
pub const _GumX86Reg_GUM_X86_R10D: _GumX86Reg = 10;
pub const _GumX86Reg_GUM_X86_R11D: _GumX86Reg = 11;
pub const _GumX86Reg_GUM_X86_R12D: _GumX86Reg = 12;
pub const _GumX86Reg_GUM_X86_R13D: _GumX86Reg = 13;
pub const _GumX86Reg_GUM_X86_R14D: _GumX86Reg = 14;
pub const _GumX86Reg_GUM_X86_R15D: _GumX86Reg = 15;
pub const _GumX86Reg_GUM_X86_EIP: _GumX86Reg = 16;
pub const _GumX86Reg_GUM_X86_RAX: _GumX86Reg = 17;
pub const _GumX86Reg_GUM_X86_RCX: _GumX86Reg = 18;
pub const _GumX86Reg_GUM_X86_RDX: _GumX86Reg = 19;
pub const _GumX86Reg_GUM_X86_RBX: _GumX86Reg = 20;
pub const _GumX86Reg_GUM_X86_RSP: _GumX86Reg = 21;
pub const _GumX86Reg_GUM_X86_RBP: _GumX86Reg = 22;
pub const _GumX86Reg_GUM_X86_RSI: _GumX86Reg = 23;
pub const _GumX86Reg_GUM_X86_RDI: _GumX86Reg = 24;
pub const _GumX86Reg_GUM_X86_R8: _GumX86Reg = 25;
pub const _GumX86Reg_GUM_X86_R9: _GumX86Reg = 26;
pub const _GumX86Reg_GUM_X86_R10: _GumX86Reg = 27;
pub const _GumX86Reg_GUM_X86_R11: _GumX86Reg = 28;
pub const _GumX86Reg_GUM_X86_R12: _GumX86Reg = 29;
pub const _GumX86Reg_GUM_X86_R13: _GumX86Reg = 30;
pub const _GumX86Reg_GUM_X86_R14: _GumX86Reg = 31;
pub const _GumX86Reg_GUM_X86_R15: _GumX86Reg = 32;
pub const _GumX86Reg_GUM_X86_RIP: _GumX86Reg = 33;
pub const _GumX86Reg_GUM_X86_XAX: _GumX86Reg = 34;
pub const _GumX86Reg_GUM_X86_XCX: _GumX86Reg = 35;
pub const _GumX86Reg_GUM_X86_XDX: _GumX86Reg = 36;
pub const _GumX86Reg_GUM_X86_XBX: _GumX86Reg = 37;
pub const _GumX86Reg_GUM_X86_XSP: _GumX86Reg = 38;
pub const _GumX86Reg_GUM_X86_XBP: _GumX86Reg = 39;
pub const _GumX86Reg_GUM_X86_XSI: _GumX86Reg = 40;
pub const _GumX86Reg_GUM_X86_XDI: _GumX86Reg = 41;
pub const _GumX86Reg_GUM_X86_XIP: _GumX86Reg = 42;
pub const _GumX86Reg_GUM_X86_NONE: _GumX86Reg = 43;
pub type _GumX86Reg = ::core::ffi::c_uint;
pub const _GumX86PtrTarget_GUM_X86_PTR_BYTE: _GumX86PtrTarget = 0;
pub const _GumX86PtrTarget_GUM_X86_PTR_DWORD: _GumX86PtrTarget = 1;
pub const _GumX86PtrTarget_GUM_X86_PTR_QWORD: _GumX86PtrTarget = 2;
pub type _GumX86PtrTarget = ::core::ffi::c_uint;
extern "C" {
    pub fn gum_x86_writer_new(code_address: gpointer) -> *mut GumX86Writer;
}
extern "C" {
    pub fn gum_x86_writer_ref(writer: *mut GumX86Writer) -> *mut GumX86Writer;
}
extern "C" {
    pub fn gum_x86_writer_unref(writer: *mut GumX86Writer);
}
extern "C" {
    pub fn gum_x86_writer_init(writer: *mut GumX86Writer, code_address: gpointer);
}
extern "C" {
    pub fn gum_x86_writer_clear(writer: *mut GumX86Writer);
}
extern "C" {
    pub fn gum_x86_writer_reset(writer: *mut GumX86Writer, code_address: gpointer);
}
extern "C" {
    pub fn gum_x86_writer_set_target_cpu(self_: *mut GumX86Writer, cpu_type: GumCpuType);
}
extern "C" {
    pub fn gum_x86_writer_set_target_abi(self_: *mut GumX86Writer, abi_type: GumAbiType);
}
extern "C" {
    pub fn gum_x86_writer_cur(self_: *mut GumX86Writer) -> gpointer;
}
extern "C" {
    pub fn gum_x86_writer_offset(self_: *mut GumX86Writer) -> guint;
}
extern "C" {
    pub fn gum_x86_writer_flush(self_: *mut GumX86Writer) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_get_cpu_register_for_nth_argument(
        self_: *mut GumX86Writer,
        n: guint,
    ) -> GumX86Reg;
}
extern "C" {
    pub fn gum_x86_writer_put_label(self_: *mut GumX86Writer, id: gconstpointer) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_can_branch_directly_between(from: GumAddress, to: GumAddress)
        -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_call_address_with_arguments(
        self_: *mut GumX86Writer,
        conv: GumCallingConvention,
        func: GumAddress,
        n_args: guint,
        ...
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_call_address_with_arguments_array(
        self_: *mut GumX86Writer,
        conv: GumCallingConvention,
        func: GumAddress,
        n_args: guint,
        args: *const GumArgument,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_call_address_with_aligned_arguments(
        self_: *mut GumX86Writer,
        conv: GumCallingConvention,
        func: GumAddress,
        n_args: guint,
        ...
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_call_address_with_aligned_arguments_array(
        self_: *mut GumX86Writer,
        conv: GumCallingConvention,
        func: GumAddress,
        n_args: guint,
        args: *const GumArgument,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_call_reg_with_arguments(
        self_: *mut GumX86Writer,
        conv: GumCallingConvention,
        reg: GumX86Reg,
        n_args: guint,
        ...
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_call_reg_with_arguments_array(
        self_: *mut GumX86Writer,
        conv: GumCallingConvention,
        reg: GumX86Reg,
        n_args: guint,
        args: *const GumArgument,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_call_reg_with_aligned_arguments(
        self_: *mut GumX86Writer,
        conv: GumCallingConvention,
        reg: GumX86Reg,
        n_args: guint,
        ...
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_call_reg_with_aligned_arguments_array(
        self_: *mut GumX86Writer,
        conv: GumCallingConvention,
        reg: GumX86Reg,
        n_args: guint,
        args: *const GumArgument,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_call_reg_offset_ptr_with_arguments(
        self_: *mut GumX86Writer,
        conv: GumCallingConvention,
        reg: GumX86Reg,
        offset: gssize,
        n_args: guint,
        ...
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_call_reg_offset_ptr_with_arguments_array(
        self_: *mut GumX86Writer,
        conv: GumCallingConvention,
        reg: GumX86Reg,
        offset: gssize,
        n_args: guint,
        args: *const GumArgument,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_call_reg_offset_ptr_with_aligned_arguments(
        self_: *mut GumX86Writer,
        conv: GumCallingConvention,
        reg: GumX86Reg,
        offset: gssize,
        n_args: guint,
        ...
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_call_reg_offset_ptr_with_aligned_arguments_array(
        self_: *mut GumX86Writer,
        conv: GumCallingConvention,
        reg: GumX86Reg,
        offset: gssize,
        n_args: guint,
        args: *const GumArgument,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_call_address(
        self_: *mut GumX86Writer,
        address: GumAddress,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_call_reg(self_: *mut GumX86Writer, reg: GumX86Reg) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_call_reg_offset_ptr(
        self_: *mut GumX86Writer,
        reg: GumX86Reg,
        offset: gssize,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_call_indirect(self_: *mut GumX86Writer, addr: GumAddress)
        -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_call_indirect_label(
        self_: *mut GumX86Writer,
        label_id: gconstpointer,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_call_near_label(self_: *mut GumX86Writer, label_id: gconstpointer);
}
extern "C" {
    pub fn gum_x86_writer_put_leave(self_: *mut GumX86Writer);
}
extern "C" {
    pub fn gum_x86_writer_put_ret(self_: *mut GumX86Writer);
}
extern "C" {
    pub fn gum_x86_writer_put_ret_imm(self_: *mut GumX86Writer, imm_value: guint16);
}
extern "C" {
    pub fn gum_x86_writer_put_jmp_address(
        self_: *mut GumX86Writer,
        address: GumAddress,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_jmp_short_label(self_: *mut GumX86Writer, label_id: gconstpointer);
}
extern "C" {
    pub fn gum_x86_writer_put_jmp_near_label(self_: *mut GumX86Writer, label_id: gconstpointer);
}
extern "C" {
    pub fn gum_x86_writer_put_jmp_reg(self_: *mut GumX86Writer, reg: GumX86Reg) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_jmp_reg_ptr(self_: *mut GumX86Writer, reg: GumX86Reg) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_jmp_reg_offset_ptr(
        self_: *mut GumX86Writer,
        reg: GumX86Reg,
        offset: gssize,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_jmp_near_ptr(
        self_: *mut GumX86Writer,
        address: GumAddress,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_jcc_short(
        self_: *mut GumX86Writer,
        instruction_id: x86_insn,
        target: gconstpointer,
        hint: GumBranchHint,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_jcc_near(
        self_: *mut GumX86Writer,
        instruction_id: x86_insn,
        target: gconstpointer,
        hint: GumBranchHint,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_jcc_short_label(
        self_: *mut GumX86Writer,
        instruction_id: x86_insn,
        label_id: gconstpointer,
        hint: GumBranchHint,
    );
}
extern "C" {
    pub fn gum_x86_writer_put_jcc_near_label(
        self_: *mut GumX86Writer,
        instruction_id: x86_insn,
        label_id: gconstpointer,
        hint: GumBranchHint,
    );
}
extern "C" {
    pub fn gum_x86_writer_put_add_reg_imm(
        self_: *mut GumX86Writer,
        reg: GumX86Reg,
        imm_value: gssize,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_add_reg_reg(
        self_: *mut GumX86Writer,
        dst_reg: GumX86Reg,
        src_reg: GumX86Reg,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_add_reg_near_ptr(
        self_: *mut GumX86Writer,
        dst_reg: GumX86Reg,
        src_address: GumAddress,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_sub_reg_imm(
        self_: *mut GumX86Writer,
        reg: GumX86Reg,
        imm_value: gssize,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_sub_reg_reg(
        self_: *mut GumX86Writer,
        dst_reg: GumX86Reg,
        src_reg: GumX86Reg,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_sub_reg_near_ptr(
        self_: *mut GumX86Writer,
        dst_reg: GumX86Reg,
        src_address: GumAddress,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_inc_reg(self_: *mut GumX86Writer, reg: GumX86Reg) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_dec_reg(self_: *mut GumX86Writer, reg: GumX86Reg) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_inc_reg_ptr(
        self_: *mut GumX86Writer,
        target: GumX86PtrTarget,
        reg: GumX86Reg,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_dec_reg_ptr(
        self_: *mut GumX86Writer,
        target: GumX86PtrTarget,
        reg: GumX86Reg,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_lock_xadd_reg_ptr_reg(
        self_: *mut GumX86Writer,
        dst_reg: GumX86Reg,
        src_reg: GumX86Reg,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_lock_cmpxchg_reg_ptr_reg(
        self_: *mut GumX86Writer,
        dst_reg: GumX86Reg,
        src_reg: GumX86Reg,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_lock_inc_imm32_ptr(
        self_: *mut GumX86Writer,
        target: gpointer,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_lock_dec_imm32_ptr(
        self_: *mut GumX86Writer,
        target: gpointer,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_and_reg_reg(
        self_: *mut GumX86Writer,
        dst_reg: GumX86Reg,
        src_reg: GumX86Reg,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_and_reg_u32(
        self_: *mut GumX86Writer,
        reg: GumX86Reg,
        imm_value: guint32,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_shl_reg_u8(
        self_: *mut GumX86Writer,
        reg: GumX86Reg,
        imm_value: guint8,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_shr_reg_u8(
        self_: *mut GumX86Writer,
        reg: GumX86Reg,
        imm_value: guint8,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_xor_reg_reg(
        self_: *mut GumX86Writer,
        dst_reg: GumX86Reg,
        src_reg: GumX86Reg,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_mov_reg_reg(
        self_: *mut GumX86Writer,
        dst_reg: GumX86Reg,
        src_reg: GumX86Reg,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_mov_reg_u32(
        self_: *mut GumX86Writer,
        dst_reg: GumX86Reg,
        imm_value: guint32,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_mov_reg_u64(
        self_: *mut GumX86Writer,
        dst_reg: GumX86Reg,
        imm_value: guint64,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_mov_reg_address(
        self_: *mut GumX86Writer,
        dst_reg: GumX86Reg,
        address: GumAddress,
    );
}
extern "C" {
    pub fn gum_x86_writer_put_mov_reg_ptr_u32(
        self_: *mut GumX86Writer,
        dst_reg: GumX86Reg,
        imm_value: guint32,
    );
}
extern "C" {
    pub fn gum_x86_writer_put_mov_reg_offset_ptr_u32(
        self_: *mut GumX86Writer,
        dst_reg: GumX86Reg,
        dst_offset: gssize,
        imm_value: guint32,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_mov_reg_ptr_reg(
        self_: *mut GumX86Writer,
        dst_reg: GumX86Reg,
        src_reg: GumX86Reg,
    );
}
extern "C" {
    pub fn gum_x86_writer_put_mov_reg_offset_ptr_reg(
        self_: *mut GumX86Writer,
        dst_reg: GumX86Reg,
        dst_offset: gssize,
        src_reg: GumX86Reg,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_mov_reg_reg_ptr(
        self_: *mut GumX86Writer,
        dst_reg: GumX86Reg,
        src_reg: GumX86Reg,
    );
}
extern "C" {
    pub fn gum_x86_writer_put_mov_reg_reg_offset_ptr(
        self_: *mut GumX86Writer,
        dst_reg: GumX86Reg,
        src_reg: GumX86Reg,
        src_offset: gssize,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_mov_reg_base_index_scale_offset_ptr(
        self_: *mut GumX86Writer,
        dst_reg: GumX86Reg,
        base_reg: GumX86Reg,
        index_reg: GumX86Reg,
        scale: guint8,
        offset: gssize,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_mov_reg_near_ptr(
        self_: *mut GumX86Writer,
        dst_reg: GumX86Reg,
        src_address: GumAddress,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_mov_near_ptr_reg(
        self_: *mut GumX86Writer,
        dst_address: GumAddress,
        src_reg: GumX86Reg,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_mov_fs_u32_ptr_reg(
        self_: *mut GumX86Writer,
        fs_offset: guint32,
        src_reg: GumX86Reg,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_mov_reg_fs_u32_ptr(
        self_: *mut GumX86Writer,
        dst_reg: GumX86Reg,
        fs_offset: guint32,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_mov_fs_reg_ptr_reg(
        self_: *mut GumX86Writer,
        fs_offset: GumX86Reg,
        src_reg: GumX86Reg,
    );
}
extern "C" {
    pub fn gum_x86_writer_put_mov_reg_fs_reg_ptr(
        self_: *mut GumX86Writer,
        dst_reg: GumX86Reg,
        fs_offset: GumX86Reg,
    );
}
extern "C" {
    pub fn gum_x86_writer_put_mov_gs_u32_ptr_reg(
        self_: *mut GumX86Writer,
        fs_offset: guint32,
        src_reg: GumX86Reg,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_mov_reg_gs_u32_ptr(
        self_: *mut GumX86Writer,
        dst_reg: GumX86Reg,
        fs_offset: guint32,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_mov_gs_reg_ptr_reg(
        self_: *mut GumX86Writer,
        gs_offset: GumX86Reg,
        src_reg: GumX86Reg,
    );
}
extern "C" {
    pub fn gum_x86_writer_put_mov_reg_gs_reg_ptr(
        self_: *mut GumX86Writer,
        dst_reg: GumX86Reg,
        gs_offset: GumX86Reg,
    );
}
extern "C" {
    pub fn gum_x86_writer_put_movq_xmm0_esp_offset_ptr(self_: *mut GumX86Writer, offset: gint8);
}
extern "C" {
    pub fn gum_x86_writer_put_movq_eax_offset_ptr_xmm0(self_: *mut GumX86Writer, offset: gint8);
}
extern "C" {
    pub fn gum_x86_writer_put_movdqu_xmm0_esp_offset_ptr(self_: *mut GumX86Writer, offset: gint8);
}
extern "C" {
    pub fn gum_x86_writer_put_movdqu_eax_offset_ptr_xmm0(self_: *mut GumX86Writer, offset: gint8);
}
extern "C" {
    pub fn gum_x86_writer_put_lea_reg_reg_offset(
        self_: *mut GumX86Writer,
        dst_reg: GumX86Reg,
        src_reg: GumX86Reg,
        src_offset: gssize,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_xchg_reg_reg_ptr(
        self_: *mut GumX86Writer,
        left_reg: GumX86Reg,
        right_reg: GumX86Reg,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_push_u32(self_: *mut GumX86Writer, imm_value: guint32);
}
extern "C" {
    pub fn gum_x86_writer_put_push_near_ptr(
        self_: *mut GumX86Writer,
        address: GumAddress,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_push_reg(self_: *mut GumX86Writer, reg: GumX86Reg) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_pop_reg(self_: *mut GumX86Writer, reg: GumX86Reg) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_push_imm_ptr(self_: *mut GumX86Writer, imm_ptr: gconstpointer);
}
extern "C" {
    pub fn gum_x86_writer_put_pushax(self_: *mut GumX86Writer);
}
extern "C" {
    pub fn gum_x86_writer_put_popax(self_: *mut GumX86Writer);
}
extern "C" {
    pub fn gum_x86_writer_put_pushfx(self_: *mut GumX86Writer);
}
extern "C" {
    pub fn gum_x86_writer_put_popfx(self_: *mut GumX86Writer);
}
extern "C" {
    pub fn gum_x86_writer_put_sahf(self_: *mut GumX86Writer);
}
extern "C" {
    pub fn gum_x86_writer_put_lahf(self_: *mut GumX86Writer);
}
extern "C" {
    pub fn gum_x86_writer_put_test_reg_reg(
        self_: *mut GumX86Writer,
        reg_a: GumX86Reg,
        reg_b: GumX86Reg,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_test_reg_u32(
        self_: *mut GumX86Writer,
        reg: GumX86Reg,
        imm_value: guint32,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_cmp_reg_i32(
        self_: *mut GumX86Writer,
        reg: GumX86Reg,
        imm_value: gint32,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_cmp_reg_offset_ptr_reg(
        self_: *mut GumX86Writer,
        reg_a: GumX86Reg,
        offset: gssize,
        reg_b: GumX86Reg,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_cmp_imm_ptr_imm_u32(
        self_: *mut GumX86Writer,
        imm_ptr: gconstpointer,
        imm_value: guint32,
    );
}
extern "C" {
    pub fn gum_x86_writer_put_cmp_reg_reg(
        self_: *mut GumX86Writer,
        reg_a: GumX86Reg,
        reg_b: GumX86Reg,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_clc(self_: *mut GumX86Writer);
}
extern "C" {
    pub fn gum_x86_writer_put_stc(self_: *mut GumX86Writer);
}
extern "C" {
    pub fn gum_x86_writer_put_cld(self_: *mut GumX86Writer);
}
extern "C" {
    pub fn gum_x86_writer_put_std(self_: *mut GumX86Writer);
}
extern "C" {
    pub fn gum_x86_writer_put_cpuid(self_: *mut GumX86Writer);
}
extern "C" {
    pub fn gum_x86_writer_put_lfence(self_: *mut GumX86Writer);
}
extern "C" {
    pub fn gum_x86_writer_put_rdtsc(self_: *mut GumX86Writer);
}
extern "C" {
    pub fn gum_x86_writer_put_pause(self_: *mut GumX86Writer);
}
extern "C" {
    pub fn gum_x86_writer_put_nop(self_: *mut GumX86Writer);
}
extern "C" {
    pub fn gum_x86_writer_put_breakpoint(self_: *mut GumX86Writer);
}
extern "C" {
    pub fn gum_x86_writer_put_padding(self_: *mut GumX86Writer, n: guint);
}
extern "C" {
    pub fn gum_x86_writer_put_nop_padding(self_: *mut GumX86Writer, n: guint);
}
extern "C" {
    pub fn gum_x86_writer_put_fxsave_reg_ptr(self_: *mut GumX86Writer, reg: GumX86Reg) -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_fxrstor_reg_ptr(self_: *mut GumX86Writer, reg: GumX86Reg)
        -> gboolean;
}
extern "C" {
    pub fn gum_x86_writer_put_u8(self_: *mut GumX86Writer, value: guint8);
}
extern "C" {
    pub fn gum_x86_writer_put_s8(self_: *mut GumX86Writer, value: gint8);
}
extern "C" {
    pub fn gum_x86_writer_put_bytes(self_: *mut GumX86Writer, data: *const guint8, n: guint);
}
pub type GumArmWriter = _GumArmWriter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumArmWriter {
    pub ref_count: gint,
    pub flush_on_destroy: gboolean,
    pub target_os: GumOS,
    pub cpu_features: GumCpuFeatures,
    pub base: *mut guint32,
    pub code: *mut guint32,
    pub pc: GumAddress,
    pub label_defs: *mut GumMetalHashTable,
    pub label_refs: GumMetalArray,
    pub literal_refs: GumMetalArray,
    pub earliest_literal_insn: *const guint32,
}
extern "C" {
    pub fn gum_arm_writer_new(code_address: gpointer) -> *mut GumArmWriter;
}
extern "C" {
    pub fn gum_arm_writer_ref(writer: *mut GumArmWriter) -> *mut GumArmWriter;
}
extern "C" {
    pub fn gum_arm_writer_unref(writer: *mut GumArmWriter);
}
extern "C" {
    pub fn gum_arm_writer_init(writer: *mut GumArmWriter, code_address: gpointer);
}
extern "C" {
    pub fn gum_arm_writer_clear(writer: *mut GumArmWriter);
}
extern "C" {
    pub fn gum_arm_writer_reset(writer: *mut GumArmWriter, code_address: gpointer);
}
extern "C" {
    pub fn gum_arm_writer_set_target_os(self_: *mut GumArmWriter, os: GumOS);
}
extern "C" {
    pub fn gum_arm_writer_cur(self_: *mut GumArmWriter) -> gpointer;
}
extern "C" {
    pub fn gum_arm_writer_offset(self_: *mut GumArmWriter) -> guint;
}
extern "C" {
    pub fn gum_arm_writer_skip(self_: *mut GumArmWriter, n_bytes: guint);
}
extern "C" {
    pub fn gum_arm_writer_flush(self_: *mut GumArmWriter) -> gboolean;
}
extern "C" {
    pub fn gum_arm_writer_put_label(self_: *mut GumArmWriter, id: gconstpointer) -> gboolean;
}
extern "C" {
    pub fn gum_arm_writer_put_call_address_with_arguments(
        self_: *mut GumArmWriter,
        func: GumAddress,
        n_args: guint,
        ...
    );
}
extern "C" {
    pub fn gum_arm_writer_put_call_address_with_arguments_array(
        self_: *mut GumArmWriter,
        func: GumAddress,
        n_args: guint,
        args: *const GumArgument,
    );
}
extern "C" {
    pub fn gum_arm_writer_put_call_reg(self_: *mut GumArmWriter, reg: arm_reg);
}
extern "C" {
    pub fn gum_arm_writer_put_call_reg_with_arguments(
        self_: *mut GumArmWriter,
        reg: arm_reg,
        n_args: guint,
        ...
    );
}
extern "C" {
    pub fn gum_arm_writer_put_call_reg_with_arguments_array(
        self_: *mut GumArmWriter,
        reg: arm_reg,
        n_args: guint,
        args: *const GumArgument,
    );
}
extern "C" {
    pub fn gum_arm_writer_put_branch_address(self_: *mut GumArmWriter, address: GumAddress);
}
extern "C" {
    pub fn gum_arm_writer_can_branch_directly_between(
        self_: *mut GumArmWriter,
        from: GumAddress,
        to: GumAddress,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_arm_writer_put_b_imm(self_: *mut GumArmWriter, target: GumAddress) -> gboolean;
}
extern "C" {
    pub fn gum_arm_writer_put_b_cond_imm(
        self_: *mut GumArmWriter,
        cc: arm_cc,
        target: GumAddress,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_arm_writer_put_b_label(self_: *mut GumArmWriter, label_id: gconstpointer);
}
extern "C" {
    pub fn gum_arm_writer_put_b_cond_label(
        self_: *mut GumArmWriter,
        cc: arm_cc,
        label_id: gconstpointer,
    );
}
extern "C" {
    pub fn gum_arm_writer_put_bl_imm(self_: *mut GumArmWriter, target: GumAddress) -> gboolean;
}
extern "C" {
    pub fn gum_arm_writer_put_blx_imm(self_: *mut GumArmWriter, target: GumAddress) -> gboolean;
}
extern "C" {
    pub fn gum_arm_writer_put_bl_label(self_: *mut GumArmWriter, label_id: gconstpointer);
}
extern "C" {
    pub fn gum_arm_writer_put_bx_reg(self_: *mut GumArmWriter, reg: arm_reg);
}
extern "C" {
    pub fn gum_arm_writer_put_bl_reg(self_: *mut GumArmWriter, reg: arm_reg);
}
extern "C" {
    pub fn gum_arm_writer_put_blx_reg(self_: *mut GumArmWriter, reg: arm_reg);
}
extern "C" {
    pub fn gum_arm_writer_put_ret(self_: *mut GumArmWriter);
}
extern "C" {
    pub fn gum_arm_writer_put_push_regs(self_: *mut GumArmWriter, n: guint, ...);
}
extern "C" {
    pub fn gum_arm_writer_put_pop_regs(self_: *mut GumArmWriter, n: guint, ...);
}
extern "C" {
    pub fn gum_arm_writer_put_vpush_range(
        self_: *mut GumArmWriter,
        first_reg: arm_reg,
        last_reg: arm_reg,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_arm_writer_put_vpop_range(
        self_: *mut GumArmWriter,
        first_reg: arm_reg,
        last_reg: arm_reg,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_arm_writer_put_ldr_reg_address(
        self_: *mut GumArmWriter,
        reg: arm_reg,
        address: GumAddress,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_arm_writer_put_ldr_reg_u32(
        self_: *mut GumArmWriter,
        reg: arm_reg,
        val: guint32,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_arm_writer_put_ldr_reg_reg(
        self_: *mut GumArmWriter,
        dst_reg: arm_reg,
        src_reg: arm_reg,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_arm_writer_put_ldr_reg_reg_offset(
        self_: *mut GumArmWriter,
        dst_reg: arm_reg,
        src_reg: arm_reg,
        src_offset: gssize,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_arm_writer_put_ldr_cond_reg_reg_offset(
        self_: *mut GumArmWriter,
        cc: arm_cc,
        dst_reg: arm_reg,
        src_reg: arm_reg,
        src_offset: gssize,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_arm_writer_put_ldmia_reg_mask(self_: *mut GumArmWriter, reg: arm_reg, mask: guint16);
}
extern "C" {
    pub fn gum_arm_writer_put_ldmia_reg_mask_wb(
        self_: *mut GumArmWriter,
        reg: arm_reg,
        mask: guint16,
    );
}
extern "C" {
    pub fn gum_arm_writer_put_str_reg_reg(
        self_: *mut GumArmWriter,
        src_reg: arm_reg,
        dst_reg: arm_reg,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_arm_writer_put_str_reg_reg_offset(
        self_: *mut GumArmWriter,
        src_reg: arm_reg,
        dst_reg: arm_reg,
        dst_offset: gssize,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_arm_writer_put_str_cond_reg_reg_offset(
        self_: *mut GumArmWriter,
        cc: arm_cc,
        src_reg: arm_reg,
        dst_reg: arm_reg,
        dst_offset: gssize,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_arm_writer_put_mov_reg_reg(
        self_: *mut GumArmWriter,
        dst_reg: arm_reg,
        src_reg: arm_reg,
    );
}
extern "C" {
    pub fn gum_arm_writer_put_mov_reg_reg_shift(
        self_: *mut GumArmWriter,
        dst_reg: arm_reg,
        src_reg: arm_reg,
        shift: arm_shifter,
        shift_value: guint16,
    );
}
extern "C" {
    pub fn gum_arm_writer_put_mov_reg_cpsr(self_: *mut GumArmWriter, reg: arm_reg);
}
extern "C" {
    pub fn gum_arm_writer_put_mov_cpsr_reg(self_: *mut GumArmWriter, reg: arm_reg);
}
extern "C" {
    pub fn gum_arm_writer_put_add_reg_u16(self_: *mut GumArmWriter, dst_reg: arm_reg, val: guint16);
}
extern "C" {
    pub fn gum_arm_writer_put_add_reg_u32(self_: *mut GumArmWriter, dst_reg: arm_reg, val: guint32);
}
extern "C" {
    pub fn gum_arm_writer_put_add_reg_reg_imm(
        self_: *mut GumArmWriter,
        dst_reg: arm_reg,
        src_reg: arm_reg,
        imm_val: guint32,
    );
}
extern "C" {
    pub fn gum_arm_writer_put_add_reg_reg_reg(
        self_: *mut GumArmWriter,
        dst_reg: arm_reg,
        src_reg1: arm_reg,
        src_reg2: arm_reg,
    );
}
extern "C" {
    pub fn gum_arm_writer_put_add_reg_reg_reg_shift(
        self_: *mut GumArmWriter,
        dst_reg: arm_reg,
        src_reg1: arm_reg,
        src_reg2: arm_reg,
        shift: arm_shifter,
        shift_value: guint16,
    );
}
extern "C" {
    pub fn gum_arm_writer_put_sub_reg_u16(self_: *mut GumArmWriter, dst_reg: arm_reg, val: guint16);
}
extern "C" {
    pub fn gum_arm_writer_put_sub_reg_u32(self_: *mut GumArmWriter, dst_reg: arm_reg, val: guint32);
}
extern "C" {
    pub fn gum_arm_writer_put_sub_reg_reg_imm(
        self_: *mut GumArmWriter,
        dst_reg: arm_reg,
        src_reg: arm_reg,
        imm_val: guint32,
    );
}
extern "C" {
    pub fn gum_arm_writer_put_sub_reg_reg_reg(
        self_: *mut GumArmWriter,
        dst_reg: arm_reg,
        src_reg1: arm_reg,
        src_reg2: arm_reg,
    );
}
extern "C" {
    pub fn gum_arm_writer_put_rsb_reg_reg_imm(
        self_: *mut GumArmWriter,
        dst_reg: arm_reg,
        src_reg: arm_reg,
        imm_val: guint32,
    );
}
extern "C" {
    pub fn gum_arm_writer_put_ands_reg_reg_imm(
        self_: *mut GumArmWriter,
        dst_reg: arm_reg,
        src_reg: arm_reg,
        imm_val: guint32,
    );
}
extern "C" {
    pub fn gum_arm_writer_put_cmp_reg_imm(
        self_: *mut GumArmWriter,
        dst_reg: arm_reg,
        imm_val: guint32,
    );
}
extern "C" {
    pub fn gum_arm_writer_put_nop(self_: *mut GumArmWriter);
}
extern "C" {
    pub fn gum_arm_writer_put_breakpoint(self_: *mut GumArmWriter);
}
extern "C" {
    pub fn gum_arm_writer_put_brk_imm(self_: *mut GumArmWriter, imm: guint16);
}
extern "C" {
    pub fn gum_arm_writer_put_instruction(self_: *mut GumArmWriter, insn: guint32);
}
extern "C" {
    pub fn gum_arm_writer_put_bytes(
        self_: *mut GumArmWriter,
        data: *const guint8,
        n: guint,
    ) -> gboolean;
}
pub type GumThumbWriter = _GumThumbWriter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumThumbWriter {
    pub ref_count: gint,
    pub flush_on_destroy: gboolean,
    pub target_os: GumOS,
    pub base: *mut guint16,
    pub code: *mut guint16,
    pub pc: GumAddress,
    pub label_defs: *mut GumMetalHashTable,
    pub label_refs: GumMetalArray,
    pub literal_refs: GumMetalArray,
    pub earliest_literal_insn: *const guint16,
}
extern "C" {
    pub fn gum_thumb_writer_new(code_address: gpointer) -> *mut GumThumbWriter;
}
extern "C" {
    pub fn gum_thumb_writer_ref(writer: *mut GumThumbWriter) -> *mut GumThumbWriter;
}
extern "C" {
    pub fn gum_thumb_writer_unref(writer: *mut GumThumbWriter);
}
extern "C" {
    pub fn gum_thumb_writer_init(writer: *mut GumThumbWriter, code_address: gpointer);
}
extern "C" {
    pub fn gum_thumb_writer_clear(writer: *mut GumThumbWriter);
}
extern "C" {
    pub fn gum_thumb_writer_reset(writer: *mut GumThumbWriter, code_address: gpointer);
}
extern "C" {
    pub fn gum_thumb_writer_set_target_os(self_: *mut GumThumbWriter, os: GumOS);
}
extern "C" {
    pub fn gum_thumb_writer_cur(self_: *mut GumThumbWriter) -> gpointer;
}
extern "C" {
    pub fn gum_thumb_writer_offset(self_: *mut GumThumbWriter) -> guint;
}
extern "C" {
    pub fn gum_thumb_writer_skip(self_: *mut GumThumbWriter, n_bytes: guint);
}
extern "C" {
    pub fn gum_thumb_writer_flush(self_: *mut GumThumbWriter) -> gboolean;
}
extern "C" {
    pub fn gum_thumb_writer_put_label(self_: *mut GumThumbWriter, id: gconstpointer) -> gboolean;
}
extern "C" {
    pub fn gum_thumb_writer_commit_label(self_: *mut GumThumbWriter, id: gconstpointer)
        -> gboolean;
}
extern "C" {
    pub fn gum_thumb_writer_put_call_address_with_arguments(
        self_: *mut GumThumbWriter,
        func: GumAddress,
        n_args: guint,
        ...
    );
}
extern "C" {
    pub fn gum_thumb_writer_put_call_address_with_arguments_array(
        self_: *mut GumThumbWriter,
        func: GumAddress,
        n_args: guint,
        args: *const GumArgument,
    );
}
extern "C" {
    pub fn gum_thumb_writer_put_call_reg_with_arguments(
        self_: *mut GumThumbWriter,
        reg: arm_reg,
        n_args: guint,
        ...
    );
}
extern "C" {
    pub fn gum_thumb_writer_put_call_reg_with_arguments_array(
        self_: *mut GumThumbWriter,
        reg: arm_reg,
        n_args: guint,
        args: *const GumArgument,
    );
}
extern "C" {
    pub fn gum_thumb_writer_put_branch_address(self_: *mut GumThumbWriter, address: GumAddress);
}
extern "C" {
    pub fn gum_thumb_writer_can_branch_directly_between(
        self_: *mut GumThumbWriter,
        from: GumAddress,
        to: GumAddress,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_thumb_writer_put_b_imm(self_: *mut GumThumbWriter, target: GumAddress);
}
extern "C" {
    pub fn gum_thumb_writer_put_b_label(self_: *mut GumThumbWriter, label_id: gconstpointer);
}
extern "C" {
    pub fn gum_thumb_writer_put_b_label_wide(self_: *mut GumThumbWriter, label_id: gconstpointer);
}
extern "C" {
    pub fn gum_thumb_writer_put_bx_reg(self_: *mut GumThumbWriter, reg: arm_reg);
}
extern "C" {
    pub fn gum_thumb_writer_put_bl_imm(self_: *mut GumThumbWriter, target: GumAddress);
}
extern "C" {
    pub fn gum_thumb_writer_put_bl_label(self_: *mut GumThumbWriter, label_id: gconstpointer);
}
extern "C" {
    pub fn gum_thumb_writer_put_blx_imm(self_: *mut GumThumbWriter, target: GumAddress);
}
extern "C" {
    pub fn gum_thumb_writer_put_blx_reg(self_: *mut GumThumbWriter, reg: arm_reg);
}
extern "C" {
    pub fn gum_thumb_writer_put_cmp_reg_imm(
        self_: *mut GumThumbWriter,
        reg: arm_reg,
        imm_value: guint8,
    );
}
extern "C" {
    pub fn gum_thumb_writer_put_beq_label(self_: *mut GumThumbWriter, label_id: gconstpointer);
}
extern "C" {
    pub fn gum_thumb_writer_put_bne_label(self_: *mut GumThumbWriter, label_id: gconstpointer);
}
extern "C" {
    pub fn gum_thumb_writer_put_b_cond_label(
        self_: *mut GumThumbWriter,
        cc: arm_cc,
        label_id: gconstpointer,
    );
}
extern "C" {
    pub fn gum_thumb_writer_put_b_cond_label_wide(
        self_: *mut GumThumbWriter,
        cc: arm_cc,
        label_id: gconstpointer,
    );
}
extern "C" {
    pub fn gum_thumb_writer_put_cbz_reg_label(
        self_: *mut GumThumbWriter,
        reg: arm_reg,
        label_id: gconstpointer,
    );
}
extern "C" {
    pub fn gum_thumb_writer_put_cbnz_reg_label(
        self_: *mut GumThumbWriter,
        reg: arm_reg,
        label_id: gconstpointer,
    );
}
extern "C" {
    pub fn gum_thumb_writer_put_push_regs(
        self_: *mut GumThumbWriter,
        n_regs: guint,
        first_reg: arm_reg,
        ...
    ) -> gboolean;
}
extern "C" {
    pub fn gum_thumb_writer_put_push_regs_array(
        self_: *mut GumThumbWriter,
        n_regs: guint,
        regs: *const arm_reg,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_thumb_writer_put_pop_regs(
        self_: *mut GumThumbWriter,
        n_regs: guint,
        first_reg: arm_reg,
        ...
    ) -> gboolean;
}
extern "C" {
    pub fn gum_thumb_writer_put_pop_regs_array(
        self_: *mut GumThumbWriter,
        n_regs: guint,
        regs: *const arm_reg,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_thumb_writer_put_vpush_range(
        self_: *mut GumThumbWriter,
        first_reg: arm_reg,
        last_reg: arm_reg,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_thumb_writer_put_vpop_range(
        self_: *mut GumThumbWriter,
        first_reg: arm_reg,
        last_reg: arm_reg,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_thumb_writer_put_ldr_reg_address(
        self_: *mut GumThumbWriter,
        reg: arm_reg,
        address: GumAddress,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_thumb_writer_put_ldr_reg_u32(
        self_: *mut GumThumbWriter,
        reg: arm_reg,
        val: guint32,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_thumb_writer_put_ldr_reg_reg(
        self_: *mut GumThumbWriter,
        dst_reg: arm_reg,
        src_reg: arm_reg,
    );
}
extern "C" {
    pub fn gum_thumb_writer_put_ldr_reg_reg_offset(
        self_: *mut GumThumbWriter,
        dst_reg: arm_reg,
        src_reg: arm_reg,
        src_offset: gsize,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_thumb_writer_put_ldrb_reg_reg(
        self_: *mut GumThumbWriter,
        dst_reg: arm_reg,
        src_reg: arm_reg,
    );
}
extern "C" {
    pub fn gum_thumb_writer_put_ldrh_reg_reg(
        self_: *mut GumThumbWriter,
        dst_reg: arm_reg,
        src_reg: arm_reg,
    );
}
extern "C" {
    pub fn gum_thumb_writer_put_vldr_reg_reg_offset(
        self_: *mut GumThumbWriter,
        dst_reg: arm_reg,
        src_reg: arm_reg,
        src_offset: gssize,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_thumb_writer_put_ldmia_reg_mask(
        self_: *mut GumThumbWriter,
        reg: arm_reg,
        mask: guint16,
    );
}
extern "C" {
    pub fn gum_thumb_writer_put_str_reg_reg(
        self_: *mut GumThumbWriter,
        src_reg: arm_reg,
        dst_reg: arm_reg,
    );
}
extern "C" {
    pub fn gum_thumb_writer_put_str_reg_reg_offset(
        self_: *mut GumThumbWriter,
        src_reg: arm_reg,
        dst_reg: arm_reg,
        dst_offset: gsize,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_thumb_writer_put_mov_reg_reg(
        self_: *mut GumThumbWriter,
        dst_reg: arm_reg,
        src_reg: arm_reg,
    );
}
extern "C" {
    pub fn gum_thumb_writer_put_mov_reg_u8(
        self_: *mut GumThumbWriter,
        dst_reg: arm_reg,
        imm_value: guint8,
    );
}
extern "C" {
    pub fn gum_thumb_writer_put_mov_reg_cpsr(self_: *mut GumThumbWriter, reg: arm_reg);
}
extern "C" {
    pub fn gum_thumb_writer_put_mov_cpsr_reg(self_: *mut GumThumbWriter, reg: arm_reg);
}
extern "C" {
    pub fn gum_thumb_writer_put_add_reg_imm(
        self_: *mut GumThumbWriter,
        dst_reg: arm_reg,
        imm_value: gssize,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_thumb_writer_put_add_reg_reg(
        self_: *mut GumThumbWriter,
        dst_reg: arm_reg,
        src_reg: arm_reg,
    );
}
extern "C" {
    pub fn gum_thumb_writer_put_add_reg_reg_reg(
        self_: *mut GumThumbWriter,
        dst_reg: arm_reg,
        left_reg: arm_reg,
        right_reg: arm_reg,
    );
}
extern "C" {
    pub fn gum_thumb_writer_put_add_reg_reg_imm(
        self_: *mut GumThumbWriter,
        dst_reg: arm_reg,
        left_reg: arm_reg,
        right_value: gssize,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_thumb_writer_put_sub_reg_imm(
        self_: *mut GumThumbWriter,
        dst_reg: arm_reg,
        imm_value: gssize,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_thumb_writer_put_sub_reg_reg(
        self_: *mut GumThumbWriter,
        dst_reg: arm_reg,
        src_reg: arm_reg,
    );
}
extern "C" {
    pub fn gum_thumb_writer_put_sub_reg_reg_reg(
        self_: *mut GumThumbWriter,
        dst_reg: arm_reg,
        left_reg: arm_reg,
        right_reg: arm_reg,
    );
}
extern "C" {
    pub fn gum_thumb_writer_put_sub_reg_reg_imm(
        self_: *mut GumThumbWriter,
        dst_reg: arm_reg,
        left_reg: arm_reg,
        right_value: gssize,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_thumb_writer_put_and_reg_reg_imm(
        self_: *mut GumThumbWriter,
        dst_reg: arm_reg,
        left_reg: arm_reg,
        right_value: gssize,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_thumb_writer_put_or_reg_reg_imm(
        self_: *mut GumThumbWriter,
        dst_reg: arm_reg,
        left_reg: arm_reg,
        right_value: gssize,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_thumb_writer_put_lsl_reg_reg_imm(
        self_: *mut GumThumbWriter,
        dst_reg: arm_reg,
        left_reg: arm_reg,
        right_value: guint8,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_thumb_writer_put_lsls_reg_reg_imm(
        self_: *mut GumThumbWriter,
        dst_reg: arm_reg,
        left_reg: arm_reg,
        right_value: guint8,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_thumb_writer_put_lsrs_reg_reg_imm(
        self_: *mut GumThumbWriter,
        dst_reg: arm_reg,
        left_reg: arm_reg,
        right_value: guint8,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_thumb_writer_put_mrs_reg_reg(
        self_: *mut GumThumbWriter,
        dst_reg: arm_reg,
        src_reg: arm_sysreg,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_thumb_writer_put_msr_reg_reg(
        self_: *mut GumThumbWriter,
        dst_reg: arm_sysreg,
        src_reg: arm_reg,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_thumb_writer_put_nop(self_: *mut GumThumbWriter);
}
extern "C" {
    pub fn gum_thumb_writer_put_bkpt_imm(self_: *mut GumThumbWriter, imm: guint8);
}
extern "C" {
    pub fn gum_thumb_writer_put_breakpoint(self_: *mut GumThumbWriter);
}
extern "C" {
    pub fn gum_thumb_writer_put_instruction(self_: *mut GumThumbWriter, insn: guint16);
}
extern "C" {
    pub fn gum_thumb_writer_put_instruction_wide(
        self_: *mut GumThumbWriter,
        upper: guint16,
        lower: guint16,
    );
}
extern "C" {
    pub fn gum_thumb_writer_put_bytes(
        self_: *mut GumThumbWriter,
        data: *const guint8,
        n: guint,
    ) -> gboolean;
}
pub type GumArm64Writer = _GumArm64Writer;
pub type GumArm64IndexMode = guint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumArm64Writer {
    pub ref_count: gint,
    pub flush_on_destroy: gboolean,
    pub target_os: GumOS,
    pub ptrauth_support: GumPtrauthSupport,
    pub sign: ::core::option::Option<unsafe extern "C" fn(value: GumAddress) -> GumAddress>,
    pub base: *mut guint32,
    pub code: *mut guint32,
    pub pc: GumAddress,
    pub label_defs: *mut GumMetalHashTable,
    pub label_refs: GumMetalArray,
    pub literal_refs: GumMetalArray,
    pub earliest_literal_insn: *const guint32,
}
pub const _GumArm64IndexMode_GUM_INDEX_POST_ADJUST: _GumArm64IndexMode = 1;
pub const _GumArm64IndexMode_GUM_INDEX_SIGNED_OFFSET: _GumArm64IndexMode = 2;
pub const _GumArm64IndexMode_GUM_INDEX_PRE_ADJUST: _GumArm64IndexMode = 3;
pub type _GumArm64IndexMode = ::core::ffi::c_uint;
extern "C" {
    pub fn gum_arm64_writer_new(code_address: gpointer) -> *mut GumArm64Writer;
}
extern "C" {
    pub fn gum_arm64_writer_ref(writer: *mut GumArm64Writer) -> *mut GumArm64Writer;
}
extern "C" {
    pub fn gum_arm64_writer_unref(writer: *mut GumArm64Writer);
}
extern "C" {
    pub fn gum_arm64_writer_init(writer: *mut GumArm64Writer, code_address: gpointer);
}
extern "C" {
    pub fn gum_arm64_writer_clear(writer: *mut GumArm64Writer);
}
extern "C" {
    pub fn gum_arm64_writer_reset(writer: *mut GumArm64Writer, code_address: gpointer);
}
extern "C" {
    pub fn gum_arm64_writer_cur(self_: *mut GumArm64Writer) -> gpointer;
}
extern "C" {
    pub fn gum_arm64_writer_offset(self_: *mut GumArm64Writer) -> guint;
}
extern "C" {
    pub fn gum_arm64_writer_skip(self_: *mut GumArm64Writer, n_bytes: guint);
}
extern "C" {
    pub fn gum_arm64_writer_flush(self_: *mut GumArm64Writer) -> gboolean;
}
extern "C" {
    pub fn gum_arm64_writer_put_label(self_: *mut GumArm64Writer, id: gconstpointer) -> gboolean;
}
extern "C" {
    pub fn gum_arm64_writer_put_call_address_with_arguments(
        self_: *mut GumArm64Writer,
        func: GumAddress,
        n_args: guint,
        ...
    );
}
extern "C" {
    pub fn gum_arm64_writer_put_call_address_with_arguments_array(
        self_: *mut GumArm64Writer,
        func: GumAddress,
        n_args: guint,
        args: *const GumArgument,
    );
}
extern "C" {
    pub fn gum_arm64_writer_put_call_reg_with_arguments(
        self_: *mut GumArm64Writer,
        reg: arm64_reg,
        n_args: guint,
        ...
    );
}
extern "C" {
    pub fn gum_arm64_writer_put_call_reg_with_arguments_array(
        self_: *mut GumArm64Writer,
        reg: arm64_reg,
        n_args: guint,
        args: *const GumArgument,
    );
}
extern "C" {
    pub fn gum_arm64_writer_put_branch_address(self_: *mut GumArm64Writer, address: GumAddress);
}
extern "C" {
    pub fn gum_arm64_writer_can_branch_directly_between(
        self_: *mut GumArm64Writer,
        from: GumAddress,
        to: GumAddress,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_arm64_writer_put_b_imm(self_: *mut GumArm64Writer, address: GumAddress) -> gboolean;
}
extern "C" {
    pub fn gum_arm64_writer_put_b_label(self_: *mut GumArm64Writer, label_id: gconstpointer);
}
extern "C" {
    pub fn gum_arm64_writer_put_b_cond_label(
        self_: *mut GumArm64Writer,
        cc: arm64_cc,
        label_id: gconstpointer,
    );
}
extern "C" {
    pub fn gum_arm64_writer_put_bl_imm(self_: *mut GumArm64Writer, address: GumAddress)
        -> gboolean;
}
extern "C" {
    pub fn gum_arm64_writer_put_bl_label(self_: *mut GumArm64Writer, label_id: gconstpointer);
}
extern "C" {
    pub fn gum_arm64_writer_put_br_reg(self_: *mut GumArm64Writer, reg: arm64_reg) -> gboolean;
}
extern "C" {
    pub fn gum_arm64_writer_put_br_reg_no_auth(
        self_: *mut GumArm64Writer,
        reg: arm64_reg,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_arm64_writer_put_blr_reg(self_: *mut GumArm64Writer, reg: arm64_reg) -> gboolean;
}
extern "C" {
    pub fn gum_arm64_writer_put_blr_reg_no_auth(
        self_: *mut GumArm64Writer,
        reg: arm64_reg,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_arm64_writer_put_ret(self_: *mut GumArm64Writer);
}
extern "C" {
    pub fn gum_arm64_writer_put_ret_reg(self_: *mut GumArm64Writer, reg: arm64_reg) -> gboolean;
}
extern "C" {
    pub fn gum_arm64_writer_put_cbz_reg_imm(
        self_: *mut GumArm64Writer,
        reg: arm64_reg,
        target: GumAddress,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_arm64_writer_put_cbnz_reg_imm(
        self_: *mut GumArm64Writer,
        reg: arm64_reg,
        target: GumAddress,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_arm64_writer_put_cbz_reg_label(
        self_: *mut GumArm64Writer,
        reg: arm64_reg,
        label_id: gconstpointer,
    );
}
extern "C" {
    pub fn gum_arm64_writer_put_cbnz_reg_label(
        self_: *mut GumArm64Writer,
        reg: arm64_reg,
        label_id: gconstpointer,
    );
}
extern "C" {
    pub fn gum_arm64_writer_put_tbz_reg_imm_imm(
        self_: *mut GumArm64Writer,
        reg: arm64_reg,
        bit: guint,
        target: GumAddress,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_arm64_writer_put_tbnz_reg_imm_imm(
        self_: *mut GumArm64Writer,
        reg: arm64_reg,
        bit: guint,
        target: GumAddress,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_arm64_writer_put_tbz_reg_imm_label(
        self_: *mut GumArm64Writer,
        reg: arm64_reg,
        bit: guint,
        label_id: gconstpointer,
    );
}
extern "C" {
    pub fn gum_arm64_writer_put_tbnz_reg_imm_label(
        self_: *mut GumArm64Writer,
        reg: arm64_reg,
        bit: guint,
        label_id: gconstpointer,
    );
}
extern "C" {
    pub fn gum_arm64_writer_put_push_reg_reg(
        self_: *mut GumArm64Writer,
        reg_a: arm64_reg,
        reg_b: arm64_reg,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_arm64_writer_put_pop_reg_reg(
        self_: *mut GumArm64Writer,
        reg_a: arm64_reg,
        reg_b: arm64_reg,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_arm64_writer_put_push_all_x_registers(self_: *mut GumArm64Writer);
}
extern "C" {
    pub fn gum_arm64_writer_put_pop_all_x_registers(self_: *mut GumArm64Writer);
}
extern "C" {
    pub fn gum_arm64_writer_put_push_all_q_registers(self_: *mut GumArm64Writer);
}
extern "C" {
    pub fn gum_arm64_writer_put_pop_all_q_registers(self_: *mut GumArm64Writer);
}
extern "C" {
    pub fn gum_arm64_writer_put_ldr_reg_address(
        self_: *mut GumArm64Writer,
        reg: arm64_reg,
        address: GumAddress,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_arm64_writer_put_ldr_reg_u32(
        self_: *mut GumArm64Writer,
        reg: arm64_reg,
        val: guint32,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_arm64_writer_put_ldr_reg_u64(
        self_: *mut GumArm64Writer,
        reg: arm64_reg,
        val: guint64,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_arm64_writer_put_ldr_reg_u32_ptr(
        self_: *mut GumArm64Writer,
        reg: arm64_reg,
        src_address: GumAddress,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_arm64_writer_put_ldr_reg_u64_ptr(
        self_: *mut GumArm64Writer,
        reg: arm64_reg,
        src_address: GumAddress,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_arm64_writer_put_ldr_reg_ref(self_: *mut GumArm64Writer, reg: arm64_reg) -> guint;
}
extern "C" {
    pub fn gum_arm64_writer_put_ldr_reg_value(
        self_: *mut GumArm64Writer,
        ref_: guint,
        value: GumAddress,
    );
}
extern "C" {
    pub fn gum_arm64_writer_put_ldr_reg_reg(
        self_: *mut GumArm64Writer,
        dst_reg: arm64_reg,
        src_reg: arm64_reg,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_arm64_writer_put_ldr_reg_reg_offset(
        self_: *mut GumArm64Writer,
        dst_reg: arm64_reg,
        src_reg: arm64_reg,
        src_offset: gsize,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_arm64_writer_put_ldr_reg_reg_offset_mode(
        self_: *mut GumArm64Writer,
        dst_reg: arm64_reg,
        src_reg: arm64_reg,
        src_offset: gssize,
        mode: GumArm64IndexMode,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_arm64_writer_put_ldrsw_reg_reg_offset(
        self_: *mut GumArm64Writer,
        dst_reg: arm64_reg,
        src_reg: arm64_reg,
        src_offset: gsize,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_arm64_writer_put_adrp_reg_address(
        self_: *mut GumArm64Writer,
        reg: arm64_reg,
        address: GumAddress,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_arm64_writer_put_str_reg_reg(
        self_: *mut GumArm64Writer,
        src_reg: arm64_reg,
        dst_reg: arm64_reg,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_arm64_writer_put_str_reg_reg_offset(
        self_: *mut GumArm64Writer,
        src_reg: arm64_reg,
        dst_reg: arm64_reg,
        dst_offset: gsize,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_arm64_writer_put_str_reg_reg_offset_mode(
        self_: *mut GumArm64Writer,
        src_reg: arm64_reg,
        dst_reg: arm64_reg,
        dst_offset: gssize,
        mode: GumArm64IndexMode,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_arm64_writer_put_ldp_reg_reg_reg_offset(
        self_: *mut GumArm64Writer,
        reg_a: arm64_reg,
        reg_b: arm64_reg,
        reg_src: arm64_reg,
        src_offset: gssize,
        mode: GumArm64IndexMode,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_arm64_writer_put_stp_reg_reg_reg_offset(
        self_: *mut GumArm64Writer,
        reg_a: arm64_reg,
        reg_b: arm64_reg,
        reg_dst: arm64_reg,
        dst_offset: gssize,
        mode: GumArm64IndexMode,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_arm64_writer_put_mov_reg_reg(
        self_: *mut GumArm64Writer,
        dst_reg: arm64_reg,
        src_reg: arm64_reg,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_arm64_writer_put_mov_reg_nzcv(self_: *mut GumArm64Writer, reg: arm64_reg);
}
extern "C" {
    pub fn gum_arm64_writer_put_mov_nzcv_reg(self_: *mut GumArm64Writer, reg: arm64_reg);
}
extern "C" {
    pub fn gum_arm64_writer_put_uxtw_reg_reg(
        self_: *mut GumArm64Writer,
        dst_reg: arm64_reg,
        src_reg: arm64_reg,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_arm64_writer_put_add_reg_reg_imm(
        self_: *mut GumArm64Writer,
        dst_reg: arm64_reg,
        left_reg: arm64_reg,
        right_value: gsize,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_arm64_writer_put_add_reg_reg_reg(
        self_: *mut GumArm64Writer,
        dst_reg: arm64_reg,
        left_reg: arm64_reg,
        right_reg: arm64_reg,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_arm64_writer_put_sub_reg_reg_imm(
        self_: *mut GumArm64Writer,
        dst_reg: arm64_reg,
        left_reg: arm64_reg,
        right_value: gsize,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_arm64_writer_put_sub_reg_reg_reg(
        self_: *mut GumArm64Writer,
        dst_reg: arm64_reg,
        left_reg: arm64_reg,
        right_reg: arm64_reg,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_arm64_writer_put_and_reg_reg_imm(
        self_: *mut GumArm64Writer,
        dst_reg: arm64_reg,
        left_reg: arm64_reg,
        right_value: guint64,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_arm64_writer_put_eor_reg_reg_reg(
        self_: *mut GumArm64Writer,
        dst_reg: arm64_reg,
        left_reg: arm64_reg,
        right_reg: arm64_reg,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_arm64_writer_put_ubfm(
        self_: *mut GumArm64Writer,
        dst_reg: arm64_reg,
        src_reg: arm64_reg,
        imms: guint8,
        immr: guint8,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_arm64_writer_put_lsl_reg_imm(
        self_: *mut GumArm64Writer,
        dst_reg: arm64_reg,
        src_reg: arm64_reg,
        shift: guint8,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_arm64_writer_put_lsr_reg_imm(
        self_: *mut GumArm64Writer,
        dst_reg: arm64_reg,
        src_reg: arm64_reg,
        shift: guint8,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_arm64_writer_put_tst_reg_imm(
        self_: *mut GumArm64Writer,
        reg: arm64_reg,
        imm_value: guint64,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_arm64_writer_put_cmp_reg_reg(
        self_: *mut GumArm64Writer,
        reg_a: arm64_reg,
        reg_b: arm64_reg,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_arm64_writer_put_xpaci_reg(self_: *mut GumArm64Writer, reg: arm64_reg) -> gboolean;
}
extern "C" {
    pub fn gum_arm64_writer_put_nop(self_: *mut GumArm64Writer);
}
extern "C" {
    pub fn gum_arm64_writer_put_brk_imm(self_: *mut GumArm64Writer, imm: guint16);
}
extern "C" {
    pub fn gum_arm64_writer_put_mrs(
        self_: *mut GumArm64Writer,
        dst_reg: arm64_reg,
        system_reg: guint16,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_arm64_writer_put_instruction(self_: *mut GumArm64Writer, insn: guint32);
}
extern "C" {
    pub fn gum_arm64_writer_put_bytes(
        self_: *mut GumArm64Writer,
        data: *const guint8,
        n: guint,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_arm64_writer_sign(self_: *mut GumArm64Writer, value: GumAddress) -> GumAddress;
}
pub type GumMipsWriter = _GumMipsWriter;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumMipsWriter {
    pub ref_count: gint,
    pub flush_on_destroy: gboolean,
    pub base: *mut guint32,
    pub code: *mut guint32,
    pub pc: GumAddress,
    pub label_defs: *mut GumMetalHashTable,
    pub label_refs: GumMetalArray,
}
extern "C" {
    pub fn gum_mips_writer_new(code_address: gpointer) -> *mut GumMipsWriter;
}
extern "C" {
    pub fn gum_mips_writer_ref(writer: *mut GumMipsWriter) -> *mut GumMipsWriter;
}
extern "C" {
    pub fn gum_mips_writer_unref(writer: *mut GumMipsWriter);
}
extern "C" {
    pub fn gum_mips_writer_init(writer: *mut GumMipsWriter, code_address: gpointer);
}
extern "C" {
    pub fn gum_mips_writer_clear(writer: *mut GumMipsWriter);
}
extern "C" {
    pub fn gum_mips_writer_reset(writer: *mut GumMipsWriter, code_address: gpointer);
}
extern "C" {
    pub fn gum_mips_writer_cur(self_: *mut GumMipsWriter) -> gpointer;
}
extern "C" {
    pub fn gum_mips_writer_offset(self_: *mut GumMipsWriter) -> guint;
}
extern "C" {
    pub fn gum_mips_writer_skip(self_: *mut GumMipsWriter, n_bytes: guint);
}
extern "C" {
    pub fn gum_mips_writer_flush(self_: *mut GumMipsWriter) -> gboolean;
}
extern "C" {
    pub fn gum_mips_writer_put_label(self_: *mut GumMipsWriter, id: gconstpointer) -> gboolean;
}
extern "C" {
    pub fn gum_mips_writer_put_call_address_with_arguments(
        self_: *mut GumMipsWriter,
        func: GumAddress,
        n_args: guint,
        ...
    );
}
extern "C" {
    pub fn gum_mips_writer_put_call_address_with_arguments_array(
        self_: *mut GumMipsWriter,
        func: GumAddress,
        n_args: guint,
        args: *const GumArgument,
    );
}
extern "C" {
    pub fn gum_mips_writer_put_call_reg_with_arguments(
        self_: *mut GumMipsWriter,
        reg: mips_reg,
        n_args: guint,
        ...
    );
}
extern "C" {
    pub fn gum_mips_writer_put_call_reg_with_arguments_array(
        self_: *mut GumMipsWriter,
        reg: mips_reg,
        n_args: guint,
        args: *const GumArgument,
    );
}
extern "C" {
    pub fn gum_mips_writer_can_branch_directly_between(
        from: GumAddress,
        to: GumAddress,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_mips_writer_put_j_address(
        self_: *mut GumMipsWriter,
        address: GumAddress,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_mips_writer_put_j_address_without_nop(
        self_: *mut GumMipsWriter,
        address: GumAddress,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_mips_writer_put_j_label(self_: *mut GumMipsWriter, label_id: gconstpointer);
}
extern "C" {
    pub fn gum_mips_writer_put_jr_reg(self_: *mut GumMipsWriter, reg: mips_reg);
}
extern "C" {
    pub fn gum_mips_writer_put_jal_address(self_: *mut GumMipsWriter, address: guint32);
}
extern "C" {
    pub fn gum_mips_writer_put_jalr_reg(self_: *mut GumMipsWriter, reg: mips_reg);
}
extern "C" {
    pub fn gum_mips_writer_put_b_offset(self_: *mut GumMipsWriter, offset: gint32);
}
extern "C" {
    pub fn gum_mips_writer_put_beq_reg_reg_label(
        self_: *mut GumMipsWriter,
        right_reg: mips_reg,
        left_reg: mips_reg,
        label_id: gconstpointer,
    );
}
extern "C" {
    pub fn gum_mips_writer_put_ret(self_: *mut GumMipsWriter);
}
extern "C" {
    pub fn gum_mips_writer_put_la_reg_address(
        self_: *mut GumMipsWriter,
        reg: mips_reg,
        address: GumAddress,
    );
}
extern "C" {
    pub fn gum_mips_writer_put_lui_reg_imm(self_: *mut GumMipsWriter, reg: mips_reg, imm: guint);
}
extern "C" {
    pub fn gum_mips_writer_put_dsll_reg_reg(
        self_: *mut GumMipsWriter,
        dst_reg: mips_reg,
        src_reg: mips_reg,
        amount: guint,
    );
}
extern "C" {
    pub fn gum_mips_writer_put_ori_reg_reg_imm(
        self_: *mut GumMipsWriter,
        rt: mips_reg,
        rs: mips_reg,
        imm: guint,
    );
}
extern "C" {
    pub fn gum_mips_writer_put_ld_reg_reg_offset(
        self_: *mut GumMipsWriter,
        dst_reg: mips_reg,
        src_reg: mips_reg,
        src_offset: gsize,
    );
}
extern "C" {
    pub fn gum_mips_writer_put_lw_reg_reg_offset(
        self_: *mut GumMipsWriter,
        dst_reg: mips_reg,
        src_reg: mips_reg,
        src_offset: gsize,
    );
}
extern "C" {
    pub fn gum_mips_writer_put_sw_reg_reg_offset(
        self_: *mut GumMipsWriter,
        src_reg: mips_reg,
        dst_reg: mips_reg,
        dst_offset: gsize,
    );
}
extern "C" {
    pub fn gum_mips_writer_put_move_reg_reg(
        self_: *mut GumMipsWriter,
        dst_reg: mips_reg,
        src_reg: mips_reg,
    );
}
extern "C" {
    pub fn gum_mips_writer_put_addu_reg_reg_reg(
        self_: *mut GumMipsWriter,
        dst_reg: mips_reg,
        left_reg: mips_reg,
        right_reg: mips_reg,
    );
}
extern "C" {
    pub fn gum_mips_writer_put_addi_reg_reg_imm(
        self_: *mut GumMipsWriter,
        dst_reg: mips_reg,
        left_reg: mips_reg,
        imm: gint32,
    );
}
extern "C" {
    pub fn gum_mips_writer_put_addi_reg_imm(
        self_: *mut GumMipsWriter,
        dst_reg: mips_reg,
        imm: gint32,
    );
}
extern "C" {
    pub fn gum_mips_writer_put_sub_reg_reg_imm(
        self_: *mut GumMipsWriter,
        dst_reg: mips_reg,
        left_reg: mips_reg,
        imm: gint32,
    );
}
extern "C" {
    pub fn gum_mips_writer_put_push_reg(self_: *mut GumMipsWriter, reg: mips_reg);
}
extern "C" {
    pub fn gum_mips_writer_put_pop_reg(self_: *mut GumMipsWriter, reg: mips_reg);
}
extern "C" {
    pub fn gum_mips_writer_put_mfhi_reg(self_: *mut GumMipsWriter, reg: mips_reg);
}
extern "C" {
    pub fn gum_mips_writer_put_mflo_reg(self_: *mut GumMipsWriter, reg: mips_reg);
}
extern "C" {
    pub fn gum_mips_writer_put_mthi_reg(self_: *mut GumMipsWriter, reg: mips_reg);
}
extern "C" {
    pub fn gum_mips_writer_put_mtlo_reg(self_: *mut GumMipsWriter, reg: mips_reg);
}
extern "C" {
    pub fn gum_mips_writer_put_nop(self_: *mut GumMipsWriter);
}
extern "C" {
    pub fn gum_mips_writer_put_break(self_: *mut GumMipsWriter);
}
extern "C" {
    pub fn gum_mips_writer_put_prologue_trampoline(
        self_: *mut GumMipsWriter,
        reg: mips_reg,
        address: GumAddress,
    );
}
extern "C" {
    pub fn gum_mips_writer_put_instruction(self_: *mut GumMipsWriter, insn: guint32);
}
extern "C" {
    pub fn gum_mips_writer_put_bytes(
        self_: *mut GumMipsWriter,
        data: *const guint8,
        n: guint,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_stalker_get_type() -> GType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumStalker {
    _unused: [u8; 0],
}
pub type GumStalker = _GumStalker;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GumStalkerClass {
    pub parent_class: GObjectClass,
}
pub type GumStalker_autoptr = *mut GumStalker;
pub type GumStalker_listautoptr = *mut GList;
pub type GumStalker_slistautoptr = *mut GSList;
pub type GumStalker_queueautoptr = *mut GQueue;
pub type GumStalkerClass_autoptr = *mut GumStalkerClass;
pub type GumStalkerClass_listautoptr = *mut GList;
pub type GumStalkerClass_slistautoptr = *mut GSList;
pub type GumStalkerClass_queueautoptr = *mut GQueue;
extern "C" {
    pub fn gum_stalker_transformer_get_type() -> GType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumStalkerTransformer {
    _unused: [u8; 0],
}
pub type GumStalkerTransformer = _GumStalkerTransformer;
pub type GumStalkerTransformerInterface = _GumStalkerTransformerInterface;
pub type GumStalkerTransformer_autoptr = *mut GumStalkerTransformer;
pub type GumStalkerTransformer_listautoptr = *mut GList;
pub type GumStalkerTransformer_slistautoptr = *mut GSList;
pub type GumStalkerTransformer_queueautoptr = *mut GQueue;
extern "C" {
    pub fn gum_default_stalker_transformer_get_type() -> GType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumDefaultStalkerTransformer {
    _unused: [u8; 0],
}
pub type GumDefaultStalkerTransformer = _GumDefaultStalkerTransformer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GumDefaultStalkerTransformerClass {
    pub parent_class: GObjectClass,
}
pub type GumDefaultStalkerTransformer_autoptr = *mut GumDefaultStalkerTransformer;
pub type GumDefaultStalkerTransformer_listautoptr = *mut GList;
pub type GumDefaultStalkerTransformer_slistautoptr = *mut GSList;
pub type GumDefaultStalkerTransformer_queueautoptr = *mut GQueue;
pub type GumDefaultStalkerTransformerClass_autoptr = *mut GumDefaultStalkerTransformerClass;
pub type GumDefaultStalkerTransformerClass_listautoptr = *mut GList;
pub type GumDefaultStalkerTransformerClass_slistautoptr = *mut GSList;
pub type GumDefaultStalkerTransformerClass_queueautoptr = *mut GQueue;
extern "C" {
    pub fn gum_callback_stalker_transformer_get_type() -> GType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumCallbackStalkerTransformer {
    _unused: [u8; 0],
}
pub type GumCallbackStalkerTransformer = _GumCallbackStalkerTransformer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GumCallbackStalkerTransformerClass {
    pub parent_class: GObjectClass,
}
pub type GumCallbackStalkerTransformer_autoptr = *mut GumCallbackStalkerTransformer;
pub type GumCallbackStalkerTransformer_listautoptr = *mut GList;
pub type GumCallbackStalkerTransformer_slistautoptr = *mut GSList;
pub type GumCallbackStalkerTransformer_queueautoptr = *mut GQueue;
pub type GumCallbackStalkerTransformerClass_autoptr = *mut GumCallbackStalkerTransformerClass;
pub type GumCallbackStalkerTransformerClass_listautoptr = *mut GList;
pub type GumCallbackStalkerTransformerClass_slistautoptr = *mut GSList;
pub type GumCallbackStalkerTransformerClass_queueautoptr = *mut GQueue;
extern "C" {
    pub fn gum_stalker_observer_get_type() -> GType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumStalkerObserver {
    _unused: [u8; 0],
}
pub type GumStalkerObserver = _GumStalkerObserver;
pub type GumStalkerObserverInterface = _GumStalkerObserverInterface;
pub type GumStalkerObserver_autoptr = *mut GumStalkerObserver;
pub type GumStalkerObserver_listautoptr = *mut GList;
pub type GumStalkerObserver_slistautoptr = *mut GSList;
pub type GumStalkerObserver_queueautoptr = *mut GQueue;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumStalkerIterator {
    _unused: [u8; 0],
}
pub type GumStalkerIterator = _GumStalkerIterator;
pub type GumStalkerOutput = _GumStalkerOutput;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumBackpatch {
    _unused: [u8; 0],
}
pub type GumBackpatch = _GumBackpatch;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumBackpatchInstruction {
    _unused: [u8; 0],
}
pub type GumBackpatchInstruction = _GumBackpatchInstruction;
pub type GumStalkerIncrementFunc =
    ::core::option::Option<unsafe extern "C" fn(self_: *mut GumStalkerObserver)>;
pub type GumStalkerNotifyBackpatchFunc = ::core::option::Option<
    unsafe extern "C" fn(
        self_: *mut GumStalkerObserver,
        backpatch: *const GumBackpatch,
        size: gsize,
    ),
>;
pub type GumStalkerSwitchCallbackFunc = ::core::option::Option<
    unsafe extern "C" fn(
        self_: *mut GumStalkerObserver,
        from_address: gpointer,
        start_address: gpointer,
        from_insn: gpointer,
        target: *mut gpointer,
    ),
>;
pub type GumStalkerWriter = _GumStalkerWriter;
pub type GumStalkerTransformerCallback = ::core::option::Option<
    unsafe extern "C" fn(
        iterator: *mut GumStalkerIterator,
        output: *mut GumStalkerOutput,
        user_data: gpointer,
    ),
>;
pub type GumStalkerCallout = ::core::option::Option<
    unsafe extern "C" fn(cpu_context: *mut GumCpuContext, user_data: gpointer),
>;
pub type GumProbeId = guint;
pub type GumCallDetails = _GumCallDetails;
pub type GumCallProbeCallback =
    ::core::option::Option<unsafe extern "C" fn(details: *mut GumCallDetails, user_data: gpointer)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumStalkerTransformerInterface {
    pub parent: GTypeInterface,
    pub transform_block: ::core::option::Option<
        unsafe extern "C" fn(
            self_: *mut GumStalkerTransformer,
            iterator: *mut GumStalkerIterator,
            output: *mut GumStalkerOutput,
        ),
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumStalkerObserverInterface {
    pub parent: GTypeInterface,
    pub increment_total: GumStalkerIncrementFunc,
    pub increment_call_imm: GumStalkerIncrementFunc,
    pub increment_call_reg: GumStalkerIncrementFunc,
    pub increment_call_mem: GumStalkerIncrementFunc,
    pub increment_excluded_call_reg: GumStalkerIncrementFunc,
    pub increment_ret_slow_path: GumStalkerIncrementFunc,
    pub increment_ret: GumStalkerIncrementFunc,
    pub increment_post_call_invoke: GumStalkerIncrementFunc,
    pub increment_excluded_call_imm: GumStalkerIncrementFunc,
    pub increment_jmp_imm: GumStalkerIncrementFunc,
    pub increment_jmp_reg: GumStalkerIncrementFunc,
    pub increment_jmp_mem: GumStalkerIncrementFunc,
    pub increment_jmp_cond_imm: GumStalkerIncrementFunc,
    pub increment_jmp_cond_mem: GumStalkerIncrementFunc,
    pub increment_jmp_cond_reg: GumStalkerIncrementFunc,
    pub increment_jmp_cond_jcxz: GumStalkerIncrementFunc,
    pub increment_jmp_cond_cc: GumStalkerIncrementFunc,
    pub increment_jmp_cond_cbz: GumStalkerIncrementFunc,
    pub increment_jmp_cond_cbnz: GumStalkerIncrementFunc,
    pub increment_jmp_cond_tbz: GumStalkerIncrementFunc,
    pub increment_jmp_cond_tbnz: GumStalkerIncrementFunc,
    pub increment_jmp_continuation: GumStalkerIncrementFunc,
    pub increment_sysenter_slow_path: GumStalkerIncrementFunc,
    pub notify_backpatch: GumStalkerNotifyBackpatchFunc,
    pub switch_callback: GumStalkerSwitchCallbackFunc,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _GumStalkerWriter {
    pub instance: gpointer,
    pub x86: *mut GumX86Writer,
    pub arm: *mut GumArmWriter,
    pub thumb: *mut GumThumbWriter,
    pub arm64: *mut GumArm64Writer,
    pub mips: *mut GumMipsWriter,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _GumStalkerOutput {
    pub writer: GumStalkerWriter,
    pub encoding: GumInstructionEncoding,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumCallDetails {
    pub target_address: gpointer,
    pub return_address: gpointer,
    pub stack_data: gpointer,
    pub cpu_context: *mut GumCpuContext,
}
extern "C" {
    pub fn gum_stalker_is_supported() -> gboolean;
}
extern "C" {
    pub fn gum_stalker_activate_experimental_unwind_support();
}
extern "C" {
    pub fn gum_stalker_new() -> *mut GumStalker;
}
extern "C" {
    pub fn gum_stalker_exclude(self_: *mut GumStalker, range: *const GumMemoryRange);
}
extern "C" {
    pub fn gum_stalker_get_trust_threshold(self_: *mut GumStalker) -> gint;
}
extern "C" {
    pub fn gum_stalker_set_trust_threshold(self_: *mut GumStalker, trust_threshold: gint);
}
extern "C" {
    pub fn gum_stalker_flush(self_: *mut GumStalker);
}
extern "C" {
    pub fn gum_stalker_stop(self_: *mut GumStalker);
}
extern "C" {
    pub fn gum_stalker_garbage_collect(self_: *mut GumStalker) -> gboolean;
}
extern "C" {
    pub fn gum_stalker_follow_me(
        self_: *mut GumStalker,
        transformer: *mut GumStalkerTransformer,
        sink: *mut GumEventSink,
    );
}
extern "C" {
    pub fn gum_stalker_unfollow_me(self_: *mut GumStalker);
}
extern "C" {
    pub fn gum_stalker_is_following_me(self_: *mut GumStalker) -> gboolean;
}
extern "C" {
    pub fn gum_stalker_follow(
        self_: *mut GumStalker,
        thread_id: GumThreadId,
        transformer: *mut GumStalkerTransformer,
        sink: *mut GumEventSink,
    );
}
extern "C" {
    pub fn gum_stalker_unfollow(self_: *mut GumStalker, thread_id: GumThreadId);
}
extern "C" {
    pub fn gum_stalker_activate(self_: *mut GumStalker, target: gconstpointer);
}
extern "C" {
    pub fn gum_stalker_deactivate(self_: *mut GumStalker);
}
extern "C" {
    pub fn gum_stalker_set_observer(self_: *mut GumStalker, observer: *mut GumStalkerObserver);
}
extern "C" {
    pub fn gum_stalker_prefetch(
        self_: *mut GumStalker,
        address: gconstpointer,
        recycle_count: gint,
    );
}
extern "C" {
    pub fn gum_stalker_prefetch_backpatch(
        self_: *mut GumStalker,
        notification: *const GumBackpatch,
    );
}
extern "C" {
    pub fn gum_stalker_recompile(self_: *mut GumStalker, address: gconstpointer);
}
extern "C" {
    pub fn gum_stalker_backpatch_get_from(backpatch: *const GumBackpatch) -> gpointer;
}
extern "C" {
    pub fn gum_stalker_backpatch_get_to(backpatch: *const GumBackpatch) -> gpointer;
}
extern "C" {
    pub fn gum_stalker_invalidate(self_: *mut GumStalker, address: gconstpointer);
}
extern "C" {
    pub fn gum_stalker_invalidate_for_thread(
        self_: *mut GumStalker,
        thread_id: GumThreadId,
        address: gconstpointer,
    );
}
extern "C" {
    pub fn gum_stalker_add_call_probe(
        self_: *mut GumStalker,
        target_address: gpointer,
        callback: GumCallProbeCallback,
        data: gpointer,
        notify: GDestroyNotify,
    ) -> GumProbeId;
}
extern "C" {
    pub fn gum_stalker_remove_call_probe(self_: *mut GumStalker, id: GumProbeId);
}
extern "C" {
    pub fn gum_stalker_transformer_make_default() -> *mut GumStalkerTransformer;
}
extern "C" {
    pub fn gum_stalker_transformer_make_from_callback(
        callback: GumStalkerTransformerCallback,
        data: gpointer,
        data_destroy: GDestroyNotify,
    ) -> *mut GumStalkerTransformer;
}
extern "C" {
    pub fn gum_stalker_transformer_transform_block(
        self_: *mut GumStalkerTransformer,
        iterator: *mut GumStalkerIterator,
        output: *mut GumStalkerOutput,
    );
}
extern "C" {
    pub fn gum_stalker_iterator_next(
        self_: *mut GumStalkerIterator,
        insn: *mut *const cs_insn,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_stalker_iterator_keep(self_: *mut GumStalkerIterator);
}
extern "C" {
    pub fn gum_stalker_iterator_get_memory_access(
        self_: *mut GumStalkerIterator,
    ) -> GumMemoryAccess;
}
extern "C" {
    pub fn gum_stalker_iterator_put_callout(
        self_: *mut GumStalkerIterator,
        callout: GumStalkerCallout,
        data: gpointer,
        data_destroy: GDestroyNotify,
    );
}
extern "C" {
    pub fn gum_stalker_iterator_get_capstone(self_: *mut GumStalkerIterator) -> csh;
}
extern "C" {
    pub fn gum_stalker_observer_increment_total(observer: *mut GumStalkerObserver);
}
extern "C" {
    pub fn gum_stalker_observer_increment_call_imm(observer: *mut GumStalkerObserver);
}
extern "C" {
    pub fn gum_stalker_observer_increment_call_reg(observer: *mut GumStalkerObserver);
}
extern "C" {
    pub fn gum_stalker_observer_increment_call_mem(observer: *mut GumStalkerObserver);
}
extern "C" {
    pub fn gum_stalker_observer_increment_excluded_call_reg(observer: *mut GumStalkerObserver);
}
extern "C" {
    pub fn gum_stalker_observer_increment_ret_slow_path(observer: *mut GumStalkerObserver);
}
extern "C" {
    pub fn gum_stalker_observer_increment_ret(observer: *mut GumStalkerObserver);
}
extern "C" {
    pub fn gum_stalker_observer_increment_post_call_invoke(observer: *mut GumStalkerObserver);
}
extern "C" {
    pub fn gum_stalker_observer_increment_excluded_call_imm(observer: *mut GumStalkerObserver);
}
extern "C" {
    pub fn gum_stalker_observer_increment_jmp_imm(observer: *mut GumStalkerObserver);
}
extern "C" {
    pub fn gum_stalker_observer_increment_jmp_reg(observer: *mut GumStalkerObserver);
}
extern "C" {
    pub fn gum_stalker_observer_increment_jmp_mem(observer: *mut GumStalkerObserver);
}
extern "C" {
    pub fn gum_stalker_observer_increment_jmp_cond_imm(observer: *mut GumStalkerObserver);
}
extern "C" {
    pub fn gum_stalker_observer_increment_jmp_cond_mem(observer: *mut GumStalkerObserver);
}
extern "C" {
    pub fn gum_stalker_observer_increment_jmp_cond_reg(observer: *mut GumStalkerObserver);
}
extern "C" {
    pub fn gum_stalker_observer_increment_jmp_cond_jcxz(observer: *mut GumStalkerObserver);
}
extern "C" {
    pub fn gum_stalker_observer_increment_jmp_cond_cc(observer: *mut GumStalkerObserver);
}
extern "C" {
    pub fn gum_stalker_observer_increment_jmp_cond_cbz(observer: *mut GumStalkerObserver);
}
extern "C" {
    pub fn gum_stalker_observer_increment_jmp_cond_cbnz(observer: *mut GumStalkerObserver);
}
extern "C" {
    pub fn gum_stalker_observer_increment_jmp_cond_tbz(observer: *mut GumStalkerObserver);
}
extern "C" {
    pub fn gum_stalker_observer_increment_jmp_cond_tbnz(observer: *mut GumStalkerObserver);
}
extern "C" {
    pub fn gum_stalker_observer_increment_jmp_continuation(observer: *mut GumStalkerObserver);
}
extern "C" {
    pub fn gum_stalker_observer_increment_sysenter_slow_path(observer: *mut GumStalkerObserver);
}
extern "C" {
    pub fn gum_stalker_observer_notify_backpatch(
        observer: *mut GumStalkerObserver,
        backpatch: *const GumBackpatch,
        size: gsize,
    );
}
extern "C" {
    pub fn gum_stalker_observer_switch_callback(
        observer: *mut GumStalkerObserver,
        from_address: gpointer,
        start_address: gpointer,
        from_insn: gpointer,
        target: *mut gpointer,
    );
}
pub type GumDebugSymbolDetails = _GumDebugSymbolDetails;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumDebugSymbolDetails {
    pub address: GumAddress,
    pub module_name: [gchar; 261usize],
    pub symbol_name: [gchar; 2049usize],
    pub file_name: [gchar; 261usize],
    pub line_number: guint,
    pub column: guint,
}
extern "C" {
    pub fn gum_symbol_details_from_address(
        address: gpointer,
        details: *mut GumDebugSymbolDetails,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_symbol_name_from_address(address: gpointer) -> *mut gchar;
}
extern "C" {
    pub fn gum_find_function(name: *const gchar) -> gpointer;
}
extern "C" {
    pub fn gum_find_functions_named(name: *const gchar) -> *mut GArray;
}
extern "C" {
    pub fn gum_find_functions_matching(str_: *const gchar) -> *mut GArray;
}
extern "C" {
    pub fn gum_load_symbols(path: *const gchar) -> gboolean;
}
pub type GumTlsKey = gsize;
extern "C" {
    pub fn gum_tls_key_new() -> GumTlsKey;
}
extern "C" {
    pub fn gum_tls_key_free(key: GumTlsKey);
}
extern "C" {
    pub fn gum_tls_key_get_value(key: GumTlsKey) -> gpointer;
}
extern "C" {
    pub fn gum_tls_key_set_value(key: GumTlsKey, value: gpointer);
}
extern "C" {
    pub fn gum_init();
}
extern "C" {
    pub fn gum_shutdown();
}
extern "C" {
    pub fn gum_deinit();
}
extern "C" {
    pub fn gum_init_embedded();
}
extern "C" {
    pub fn gum_deinit_embedded();
}
extern "C" {
    pub fn gum_prepare_to_fork();
}
extern "C" {
    pub fn gum_recover_from_fork_in_parent();
}
extern "C" {
    pub fn gum_recover_from_fork_in_child();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _JsonNode {
    _unused: [u8; 0],
}
pub type JsonNode = _JsonNode;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _JsonObject {
    _unused: [u8; 0],
}
pub type JsonObject = _JsonObject;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _JsonArray {
    _unused: [u8; 0],
}
pub type JsonArray = _JsonArray;
pub const JsonNodeType_JSON_NODE_OBJECT: JsonNodeType = 0;
pub const JsonNodeType_JSON_NODE_ARRAY: JsonNodeType = 1;
pub const JsonNodeType_JSON_NODE_VALUE: JsonNodeType = 2;
pub const JsonNodeType_JSON_NODE_NULL: JsonNodeType = 3;
pub type JsonNodeType = ::core::ffi::c_uint;
pub type JsonObjectForeach = ::core::option::Option<
    unsafe extern "C" fn(
        object: *mut JsonObject,
        member_name: *const gchar,
        member_node: *mut JsonNode,
        user_data: gpointer,
    ),
>;
pub type JsonArrayForeach = ::core::option::Option<
    unsafe extern "C" fn(
        array: *mut JsonArray,
        index_: guint,
        element_node: *mut JsonNode,
        user_data: gpointer,
    ),
>;
extern "C" {
    pub fn _frida_json_node_get_type() -> GType;
}
extern "C" {
    pub fn _frida_json_node_new(type_: JsonNodeType) -> *mut JsonNode;
}
extern "C" {
    pub fn _frida_json_node_alloc() -> *mut JsonNode;
}
extern "C" {
    pub fn _frida_json_node_init(node: *mut JsonNode, type_: JsonNodeType) -> *mut JsonNode;
}
extern "C" {
    pub fn _frida_json_node_init_object(
        node: *mut JsonNode,
        object: *mut JsonObject,
    ) -> *mut JsonNode;
}
extern "C" {
    pub fn _frida_json_node_init_array(node: *mut JsonNode, array: *mut JsonArray)
        -> *mut JsonNode;
}
extern "C" {
    pub fn _frida_json_node_init_int(node: *mut JsonNode, value: gint64) -> *mut JsonNode;
}
extern "C" {
    pub fn _frida_json_node_init_double(node: *mut JsonNode, value: gdouble) -> *mut JsonNode;
}
extern "C" {
    pub fn _frida_json_node_init_boolean(node: *mut JsonNode, value: gboolean) -> *mut JsonNode;
}
extern "C" {
    pub fn _frida_json_node_init_string(
        node: *mut JsonNode,
        value: *const ::core::ffi::c_char,
    ) -> *mut JsonNode;
}
extern "C" {
    pub fn _frida_json_node_init_null(node: *mut JsonNode) -> *mut JsonNode;
}
extern "C" {
    pub fn _frida_json_node_copy(node: *mut JsonNode) -> *mut JsonNode;
}
extern "C" {
    pub fn _frida_json_node_free(node: *mut JsonNode);
}
extern "C" {
    pub fn _frida_json_node_ref(node: *mut JsonNode) -> *mut JsonNode;
}
extern "C" {
    pub fn _frida_json_node_unref(node: *mut JsonNode);
}
extern "C" {
    pub fn _frida_json_node_get_node_type(node: *mut JsonNode) -> JsonNodeType;
}
extern "C" {
    pub fn _frida_json_node_get_value_type(node: *mut JsonNode) -> GType;
}
extern "C" {
    pub fn _frida_json_node_set_parent(node: *mut JsonNode, parent: *mut JsonNode);
}
extern "C" {
    pub fn _frida_json_node_get_parent(node: *mut JsonNode) -> *mut JsonNode;
}
extern "C" {
    pub fn _frida_json_node_type_name(node: *mut JsonNode) -> *const gchar;
}
extern "C" {
    pub fn _frida_json_node_set_object(node: *mut JsonNode, object: *mut JsonObject);
}
extern "C" {
    pub fn _frida_json_node_take_object(node: *mut JsonNode, object: *mut JsonObject);
}
extern "C" {
    pub fn _frida_json_node_get_object(node: *mut JsonNode) -> *mut JsonObject;
}
extern "C" {
    pub fn _frida_json_node_dup_object(node: *mut JsonNode) -> *mut JsonObject;
}
extern "C" {
    pub fn _frida_json_node_set_array(node: *mut JsonNode, array: *mut JsonArray);
}
extern "C" {
    pub fn _frida_json_node_take_array(node: *mut JsonNode, array: *mut JsonArray);
}
extern "C" {
    pub fn _frida_json_node_get_array(node: *mut JsonNode) -> *mut JsonArray;
}
extern "C" {
    pub fn _frida_json_node_dup_array(node: *mut JsonNode) -> *mut JsonArray;
}
extern "C" {
    pub fn _frida_json_node_set_value(node: *mut JsonNode, value: *const GValue);
}
extern "C" {
    pub fn _frida_json_node_get_value(node: *mut JsonNode, value: *mut GValue);
}
extern "C" {
    pub fn _frida_json_node_set_string(node: *mut JsonNode, value: *const gchar);
}
extern "C" {
    pub fn _frida_json_node_get_string(node: *mut JsonNode) -> *const gchar;
}
extern "C" {
    pub fn _frida_json_node_dup_string(node: *mut JsonNode) -> *mut gchar;
}
extern "C" {
    pub fn _frida_json_node_set_int(node: *mut JsonNode, value: gint64);
}
extern "C" {
    pub fn _frida_json_node_get_int(node: *mut JsonNode) -> gint64;
}
extern "C" {
    pub fn _frida_json_node_set_double(node: *mut JsonNode, value: gdouble);
}
extern "C" {
    pub fn _frida_json_node_get_double(node: *mut JsonNode) -> gdouble;
}
extern "C" {
    pub fn _frida_json_node_set_boolean(node: *mut JsonNode, value: gboolean);
}
extern "C" {
    pub fn _frida_json_node_get_boolean(node: *mut JsonNode) -> gboolean;
}
extern "C" {
    pub fn _frida_json_node_is_null(node: *mut JsonNode) -> gboolean;
}
extern "C" {
    pub fn _frida_json_node_seal(node: *mut JsonNode);
}
extern "C" {
    pub fn _frida_json_node_is_immutable(node: *mut JsonNode) -> gboolean;
}
extern "C" {
    pub fn _frida_json_string_hash(key: gconstpointer) -> guint;
}
extern "C" {
    pub fn _frida_json_string_equal(a: gconstpointer, b: gconstpointer) -> gboolean;
}
extern "C" {
    pub fn _frida_json_string_compare(a: gconstpointer, b: gconstpointer) -> gint;
}
extern "C" {
    pub fn _frida_json_node_hash(key: gconstpointer) -> guint;
}
extern "C" {
    pub fn _frida_json_node_equal(a: gconstpointer, b: gconstpointer) -> gboolean;
}
extern "C" {
    pub fn _frida_json_object_get_type() -> GType;
}
extern "C" {
    pub fn _frida_json_object_new() -> *mut JsonObject;
}
extern "C" {
    pub fn _frida_json_object_ref(object: *mut JsonObject) -> *mut JsonObject;
}
extern "C" {
    pub fn _frida_json_object_unref(object: *mut JsonObject);
}
extern "C" {
    pub fn _frida_json_object_add_member(
        object: *mut JsonObject,
        member_name: *const gchar,
        node: *mut JsonNode,
    );
}
extern "C" {
    pub fn _frida_json_object_set_member(
        object: *mut JsonObject,
        member_name: *const gchar,
        node: *mut JsonNode,
    );
}
extern "C" {
    pub fn _frida_json_object_set_int_member(
        object: *mut JsonObject,
        member_name: *const gchar,
        value: gint64,
    );
}
extern "C" {
    pub fn _frida_json_object_set_double_member(
        object: *mut JsonObject,
        member_name: *const gchar,
        value: gdouble,
    );
}
extern "C" {
    pub fn _frida_json_object_set_boolean_member(
        object: *mut JsonObject,
        member_name: *const gchar,
        value: gboolean,
    );
}
extern "C" {
    pub fn _frida_json_object_set_string_member(
        object: *mut JsonObject,
        member_name: *const gchar,
        value: *const gchar,
    );
}
extern "C" {
    pub fn _frida_json_object_set_null_member(object: *mut JsonObject, member_name: *const gchar);
}
extern "C" {
    pub fn _frida_json_object_set_array_member(
        object: *mut JsonObject,
        member_name: *const gchar,
        value: *mut JsonArray,
    );
}
extern "C" {
    pub fn _frida_json_object_set_object_member(
        object: *mut JsonObject,
        member_name: *const gchar,
        value: *mut JsonObject,
    );
}
extern "C" {
    pub fn _frida_json_object_get_members(object: *mut JsonObject) -> *mut GList;
}
extern "C" {
    pub fn _frida_json_object_get_member(
        object: *mut JsonObject,
        member_name: *const gchar,
    ) -> *mut JsonNode;
}
extern "C" {
    pub fn _frida_json_object_dup_member(
        object: *mut JsonObject,
        member_name: *const gchar,
    ) -> *mut JsonNode;
}
extern "C" {
    pub fn _frida_json_object_get_int_member(
        object: *mut JsonObject,
        member_name: *const gchar,
    ) -> gint64;
}
extern "C" {
    pub fn _frida_json_object_get_int_member_with_default(
        object: *mut JsonObject,
        member_name: *const ::core::ffi::c_char,
        default_value: gint64,
    ) -> gint64;
}
extern "C" {
    pub fn _frida_json_object_get_double_member(
        object: *mut JsonObject,
        member_name: *const gchar,
    ) -> gdouble;
}
extern "C" {
    pub fn _frida_json_object_get_double_member_with_default(
        object: *mut JsonObject,
        member_name: *const ::core::ffi::c_char,
        default_value: f64,
    ) -> f64;
}
extern "C" {
    pub fn _frida_json_object_get_boolean_member(
        object: *mut JsonObject,
        member_name: *const gchar,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_json_object_get_boolean_member_with_default(
        object: *mut JsonObject,
        member_name: *const ::core::ffi::c_char,
        default_value: gboolean,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_json_object_get_string_member(
        object: *mut JsonObject,
        member_name: *const gchar,
    ) -> *const gchar;
}
extern "C" {
    pub fn _frida_json_object_get_string_member_with_default(
        object: *mut JsonObject,
        member_name: *const ::core::ffi::c_char,
        default_value: *const ::core::ffi::c_char,
    ) -> *const ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_json_object_get_null_member(
        object: *mut JsonObject,
        member_name: *const gchar,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_json_object_get_array_member(
        object: *mut JsonObject,
        member_name: *const gchar,
    ) -> *mut JsonArray;
}
extern "C" {
    pub fn _frida_json_object_get_object_member(
        object: *mut JsonObject,
        member_name: *const gchar,
    ) -> *mut JsonObject;
}
extern "C" {
    pub fn _frida_json_object_has_member(
        object: *mut JsonObject,
        member_name: *const gchar,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_json_object_remove_member(object: *mut JsonObject, member_name: *const gchar);
}
extern "C" {
    pub fn _frida_json_object_get_values(object: *mut JsonObject) -> *mut GList;
}
extern "C" {
    pub fn _frida_json_object_get_size(object: *mut JsonObject) -> guint;
}
extern "C" {
    pub fn _frida_json_object_foreach_member(
        object: *mut JsonObject,
        func: JsonObjectForeach,
        data: gpointer,
    );
}
extern "C" {
    pub fn _frida_json_object_seal(object: *mut JsonObject);
}
extern "C" {
    pub fn _frida_json_object_is_immutable(object: *mut JsonObject) -> gboolean;
}
extern "C" {
    pub fn _frida_json_object_hash(key: gconstpointer) -> guint;
}
extern "C" {
    pub fn _frida_json_object_equal(a: gconstpointer, b: gconstpointer) -> gboolean;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct JsonObjectIter {
    pub priv_pointer: [gpointer; 6usize],
    pub priv_int: [::core::ffi::c_int; 2usize],
    pub priv_boolean: [gboolean; 1usize],
}
extern "C" {
    pub fn _frida_json_object_iter_init(iter: *mut JsonObjectIter, object: *mut JsonObject);
}
extern "C" {
    pub fn _frida_json_object_iter_next(
        iter: *mut JsonObjectIter,
        member_name: *mut *const gchar,
        member_node: *mut *mut JsonNode,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_json_object_iter_init_ordered(iter: *mut JsonObjectIter, object: *mut JsonObject);
}
extern "C" {
    pub fn _frida_json_object_iter_next_ordered(
        iter: *mut JsonObjectIter,
        member_name: *mut *const ::core::ffi::c_char,
        member_node: *mut *mut JsonNode,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_json_array_get_type() -> GType;
}
extern "C" {
    pub fn _frida_json_array_new() -> *mut JsonArray;
}
extern "C" {
    pub fn _frida_json_array_sized_new(n_elements: guint) -> *mut JsonArray;
}
extern "C" {
    pub fn _frida_json_array_ref(array: *mut JsonArray) -> *mut JsonArray;
}
extern "C" {
    pub fn _frida_json_array_unref(array: *mut JsonArray);
}
extern "C" {
    pub fn _frida_json_array_add_element(array: *mut JsonArray, node: *mut JsonNode);
}
extern "C" {
    pub fn _frida_json_array_add_int_element(array: *mut JsonArray, value: gint64);
}
extern "C" {
    pub fn _frida_json_array_add_double_element(array: *mut JsonArray, value: gdouble);
}
extern "C" {
    pub fn _frida_json_array_add_boolean_element(array: *mut JsonArray, value: gboolean);
}
extern "C" {
    pub fn _frida_json_array_add_string_element(array: *mut JsonArray, value: *const gchar);
}
extern "C" {
    pub fn _frida_json_array_add_null_element(array: *mut JsonArray);
}
extern "C" {
    pub fn _frida_json_array_add_array_element(array: *mut JsonArray, value: *mut JsonArray);
}
extern "C" {
    pub fn _frida_json_array_add_object_element(array: *mut JsonArray, value: *mut JsonObject);
}
extern "C" {
    pub fn _frida_json_array_get_elements(array: *mut JsonArray) -> *mut GList;
}
extern "C" {
    pub fn _frida_json_array_get_element(array: *mut JsonArray, index_: guint) -> *mut JsonNode;
}
extern "C" {
    pub fn _frida_json_array_get_int_element(array: *mut JsonArray, index_: guint) -> gint64;
}
extern "C" {
    pub fn _frida_json_array_get_double_element(array: *mut JsonArray, index_: guint) -> gdouble;
}
extern "C" {
    pub fn _frida_json_array_get_boolean_element(array: *mut JsonArray, index_: guint) -> gboolean;
}
extern "C" {
    pub fn _frida_json_array_get_string_element(
        array: *mut JsonArray,
        index_: guint,
    ) -> *const gchar;
}
extern "C" {
    pub fn _frida_json_array_get_null_element(array: *mut JsonArray, index_: guint) -> gboolean;
}
extern "C" {
    pub fn _frida_json_array_get_array_element(
        array: *mut JsonArray,
        index_: guint,
    ) -> *mut JsonArray;
}
extern "C" {
    pub fn _frida_json_array_get_object_element(
        array: *mut JsonArray,
        index_: guint,
    ) -> *mut JsonObject;
}
extern "C" {
    pub fn _frida_json_array_dup_element(array: *mut JsonArray, index_: guint) -> *mut JsonNode;
}
extern "C" {
    pub fn _frida_json_array_remove_element(array: *mut JsonArray, index_: guint);
}
extern "C" {
    pub fn _frida_json_array_get_length(array: *mut JsonArray) -> guint;
}
extern "C" {
    pub fn _frida_json_array_foreach_element(
        array: *mut JsonArray,
        func: JsonArrayForeach,
        data: gpointer,
    );
}
extern "C" {
    pub fn _frida_json_array_seal(array: *mut JsonArray);
}
extern "C" {
    pub fn _frida_json_array_is_immutable(array: *mut JsonArray) -> gboolean;
}
extern "C" {
    pub fn _frida_json_array_hash(key: gconstpointer) -> guint;
}
extern "C" {
    pub fn _frida_json_array_equal(a: gconstpointer, b: gconstpointer) -> gboolean;
}
pub type JsonArray_autoptr = *mut JsonArray;
pub type JsonArray_listautoptr = *mut GList;
pub type JsonArray_slistautoptr = *mut GSList;
pub type JsonArray_queueautoptr = *mut GQueue;
pub type JsonObject_autoptr = *mut JsonObject;
pub type JsonObject_listautoptr = *mut GList;
pub type JsonObject_slistautoptr = *mut GSList;
pub type JsonObject_queueautoptr = *mut GQueue;
pub type JsonNode_autoptr = *mut JsonNode;
pub type JsonNode_listautoptr = *mut GList;
pub type JsonNode_slistautoptr = *mut GSList;
pub type JsonNode_queueautoptr = *mut GQueue;
pub type JsonBuilder = _JsonBuilder;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _JsonBuilderPrivate {
    _unused: [u8; 0],
}
pub type JsonBuilderPrivate = _JsonBuilderPrivate;
pub type JsonBuilderClass = _JsonBuilderClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _JsonBuilder {
    pub parent_instance: GObject,
    pub priv_: *mut JsonBuilderPrivate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _JsonBuilderClass {
    pub parent_class: GObjectClass,
    pub _json_reserved1: ::core::option::Option<unsafe extern "C" fn()>,
    pub _json_reserved2: ::core::option::Option<unsafe extern "C" fn()>,
}
extern "C" {
    pub fn _frida_json_builder_get_type() -> GType;
}
extern "C" {
    pub fn _frida_json_builder_new() -> *mut JsonBuilder;
}
extern "C" {
    pub fn _frida_json_builder_new_immutable() -> *mut JsonBuilder;
}
extern "C" {
    pub fn _frida_json_builder_get_root(builder: *mut JsonBuilder) -> *mut JsonNode;
}
extern "C" {
    pub fn _frida_json_builder_reset(builder: *mut JsonBuilder);
}
extern "C" {
    pub fn _frida_json_builder_begin_array(builder: *mut JsonBuilder) -> *mut JsonBuilder;
}
extern "C" {
    pub fn _frida_json_builder_end_array(builder: *mut JsonBuilder) -> *mut JsonBuilder;
}
extern "C" {
    pub fn _frida_json_builder_begin_object(builder: *mut JsonBuilder) -> *mut JsonBuilder;
}
extern "C" {
    pub fn _frida_json_builder_end_object(builder: *mut JsonBuilder) -> *mut JsonBuilder;
}
extern "C" {
    pub fn _frida_json_builder_set_member_name(
        builder: *mut JsonBuilder,
        member_name: *const gchar,
    ) -> *mut JsonBuilder;
}
extern "C" {
    pub fn _frida_json_builder_add_value(
        builder: *mut JsonBuilder,
        node: *mut JsonNode,
    ) -> *mut JsonBuilder;
}
extern "C" {
    pub fn _frida_json_builder_add_int_value(
        builder: *mut JsonBuilder,
        value: gint64,
    ) -> *mut JsonBuilder;
}
extern "C" {
    pub fn _frida_json_builder_add_double_value(
        builder: *mut JsonBuilder,
        value: gdouble,
    ) -> *mut JsonBuilder;
}
extern "C" {
    pub fn _frida_json_builder_add_boolean_value(
        builder: *mut JsonBuilder,
        value: gboolean,
    ) -> *mut JsonBuilder;
}
extern "C" {
    pub fn _frida_json_builder_add_string_value(
        builder: *mut JsonBuilder,
        value: *const gchar,
    ) -> *mut JsonBuilder;
}
extern "C" {
    pub fn _frida_json_builder_add_null_value(builder: *mut JsonBuilder) -> *mut JsonBuilder;
}
pub type JsonBuilder_autoptr = *mut JsonBuilder;
pub type JsonBuilder_listautoptr = *mut GList;
pub type JsonBuilder_slistautoptr = *mut GSList;
pub type JsonBuilder_queueautoptr = *mut GQueue;
pub type JsonGenerator = _JsonGenerator;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _JsonGeneratorPrivate {
    _unused: [u8; 0],
}
pub type JsonGeneratorPrivate = _JsonGeneratorPrivate;
pub type JsonGeneratorClass = _JsonGeneratorClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _JsonGenerator {
    pub parent_instance: GObject,
    pub priv_: *mut JsonGeneratorPrivate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _JsonGeneratorClass {
    pub parent_class: GObjectClass,
    pub _json_reserved1: ::core::option::Option<unsafe extern "C" fn()>,
    pub _json_reserved2: ::core::option::Option<unsafe extern "C" fn()>,
    pub _json_reserved3: ::core::option::Option<unsafe extern "C" fn()>,
    pub _json_reserved4: ::core::option::Option<unsafe extern "C" fn()>,
}
extern "C" {
    pub fn _frida_json_generator_get_type() -> GType;
}
extern "C" {
    pub fn _frida_json_generator_new() -> *mut JsonGenerator;
}
extern "C" {
    pub fn _frida_json_generator_set_pretty(generator: *mut JsonGenerator, is_pretty: gboolean);
}
extern "C" {
    pub fn _frida_json_generator_get_pretty(generator: *mut JsonGenerator) -> gboolean;
}
extern "C" {
    pub fn _frida_json_generator_set_indent(generator: *mut JsonGenerator, indent_level: guint);
}
extern "C" {
    pub fn _frida_json_generator_get_indent(generator: *mut JsonGenerator) -> guint;
}
extern "C" {
    pub fn _frida_json_generator_set_indent_char(
        generator: *mut JsonGenerator,
        indent_char: gunichar,
    );
}
extern "C" {
    pub fn _frida_json_generator_get_indent_char(generator: *mut JsonGenerator) -> gunichar;
}
extern "C" {
    pub fn _frida_json_generator_set_root(generator: *mut JsonGenerator, node: *mut JsonNode);
}
extern "C" {
    pub fn _frida_json_generator_get_root(generator: *mut JsonGenerator) -> *mut JsonNode;
}
extern "C" {
    pub fn _frida_json_generator_to_gstring(
        generator: *mut JsonGenerator,
        string: *mut GString,
    ) -> *mut GString;
}
extern "C" {
    pub fn _frida_json_generator_to_data(
        generator: *mut JsonGenerator,
        length: *mut gsize,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_json_generator_to_file(
        generator: *mut JsonGenerator,
        filename: *const gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_json_generator_to_stream(
        generator: *mut JsonGenerator,
        stream: *mut GOutputStream,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
pub type JsonGenerator_autoptr = *mut JsonGenerator;
pub type JsonGenerator_listautoptr = *mut GList;
pub type JsonGenerator_slistautoptr = *mut GSList;
pub type JsonGenerator_queueautoptr = *mut GQueue;
pub type JsonParser = _JsonParser;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _JsonParserPrivate {
    _unused: [u8; 0],
}
pub type JsonParserPrivate = _JsonParserPrivate;
pub type JsonParserClass = _JsonParserClass;
pub const JsonParserError_JSON_PARSER_ERROR_PARSE: JsonParserError = 0;
pub const JsonParserError_JSON_PARSER_ERROR_TRAILING_COMMA: JsonParserError = 1;
pub const JsonParserError_JSON_PARSER_ERROR_MISSING_COMMA: JsonParserError = 2;
pub const JsonParserError_JSON_PARSER_ERROR_MISSING_COLON: JsonParserError = 3;
pub const JsonParserError_JSON_PARSER_ERROR_INVALID_BAREWORD: JsonParserError = 4;
pub const JsonParserError_JSON_PARSER_ERROR_EMPTY_MEMBER_NAME: JsonParserError = 5;
pub const JsonParserError_JSON_PARSER_ERROR_INVALID_DATA: JsonParserError = 6;
pub const JsonParserError_JSON_PARSER_ERROR_UNKNOWN: JsonParserError = 7;
pub type JsonParserError = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _JsonParser {
    pub parent_instance: GObject,
    pub priv_: *mut JsonParserPrivate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _JsonParserClass {
    pub parent_class: GObjectClass,
    pub parse_start: ::core::option::Option<unsafe extern "C" fn(parser: *mut JsonParser)>,
    pub object_start: ::core::option::Option<unsafe extern "C" fn(parser: *mut JsonParser)>,
    pub object_member: ::core::option::Option<
        unsafe extern "C" fn(
            parser: *mut JsonParser,
            object: *mut JsonObject,
            member_name: *const gchar,
        ),
    >,
    pub object_end: ::core::option::Option<
        unsafe extern "C" fn(parser: *mut JsonParser, object: *mut JsonObject),
    >,
    pub array_start: ::core::option::Option<unsafe extern "C" fn(parser: *mut JsonParser)>,
    pub array_element: ::core::option::Option<
        unsafe extern "C" fn(parser: *mut JsonParser, array: *mut JsonArray, index_: gint),
    >,
    pub array_end: ::core::option::Option<
        unsafe extern "C" fn(parser: *mut JsonParser, array: *mut JsonArray),
    >,
    pub parse_end: ::core::option::Option<unsafe extern "C" fn(parser: *mut JsonParser)>,
    pub error:
        ::core::option::Option<unsafe extern "C" fn(parser: *mut JsonParser, error: *const GError)>,
    pub _json_reserved1: ::core::option::Option<unsafe extern "C" fn()>,
    pub _json_reserved2: ::core::option::Option<unsafe extern "C" fn()>,
    pub _json_reserved3: ::core::option::Option<unsafe extern "C" fn()>,
    pub _json_reserved4: ::core::option::Option<unsafe extern "C" fn()>,
    pub _json_reserved5: ::core::option::Option<unsafe extern "C" fn()>,
    pub _json_reserved6: ::core::option::Option<unsafe extern "C" fn()>,
    pub _json_reserved7: ::core::option::Option<unsafe extern "C" fn()>,
    pub _json_reserved8: ::core::option::Option<unsafe extern "C" fn()>,
}
extern "C" {
    pub fn _frida_json_parser_error_quark() -> GQuark;
}
extern "C" {
    pub fn _frida_json_parser_get_type() -> GType;
}
extern "C" {
    pub fn _frida_json_parser_new() -> *mut JsonParser;
}
extern "C" {
    pub fn _frida_json_parser_new_immutable() -> *mut JsonParser;
}
extern "C" {
    pub fn _frida_json_parser_load_from_file(
        parser: *mut JsonParser,
        filename: *const gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_json_parser_load_from_mapped_file(
        parser: *mut JsonParser,
        filename: *const gchar,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_json_parser_load_from_data(
        parser: *mut JsonParser,
        data: *const gchar,
        length: gssize,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_json_parser_load_from_stream(
        parser: *mut JsonParser,
        stream: *mut GInputStream,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_json_parser_load_from_stream_async(
        parser: *mut JsonParser,
        stream: *mut GInputStream,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn _frida_json_parser_load_from_stream_finish(
        parser: *mut JsonParser,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_json_parser_get_root(parser: *mut JsonParser) -> *mut JsonNode;
}
extern "C" {
    pub fn _frida_json_parser_steal_root(parser: *mut JsonParser) -> *mut JsonNode;
}
extern "C" {
    pub fn _frida_json_parser_get_current_line(parser: *mut JsonParser) -> guint;
}
extern "C" {
    pub fn _frida_json_parser_get_current_pos(parser: *mut JsonParser) -> guint;
}
extern "C" {
    pub fn _frida_json_parser_has_assignment(
        parser: *mut JsonParser,
        variable_name: *mut *mut gchar,
    ) -> gboolean;
}
pub type JsonParser_autoptr = *mut JsonParser;
pub type JsonParser_listautoptr = *mut GList;
pub type JsonParser_slistautoptr = *mut GSList;
pub type JsonParser_queueautoptr = *mut GQueue;
pub const JsonPathError_JSON_PATH_ERROR_INVALID_QUERY: JsonPathError = 0;
pub type JsonPathError = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _JsonPath {
    _unused: [u8; 0],
}
pub type JsonPath = _JsonPath;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _JsonPathClass {
    _unused: [u8; 0],
}
pub type JsonPathClass = _JsonPathClass;
extern "C" {
    pub fn _frida_json_path_get_type() -> GType;
}
extern "C" {
    pub fn _frida_json_path_error_quark() -> GQuark;
}
extern "C" {
    pub fn _frida_json_path_new() -> *mut JsonPath;
}
extern "C" {
    pub fn _frida_json_path_compile(
        path: *mut JsonPath,
        expression: *const ::core::ffi::c_char,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_json_path_match(path: *mut JsonPath, root: *mut JsonNode) -> *mut JsonNode;
}
extern "C" {
    pub fn _frida_json_path_query(
        expression: *const ::core::ffi::c_char,
        root: *mut JsonNode,
        error: *mut *mut GError,
    ) -> *mut JsonNode;
}
pub type JsonPath_autoptr = *mut JsonPath;
pub type JsonPath_listautoptr = *mut GList;
pub type JsonPath_slistautoptr = *mut GSList;
pub type JsonPath_queueautoptr = *mut GQueue;
pub type JsonReader = _JsonReader;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _JsonReaderPrivate {
    _unused: [u8; 0],
}
pub type JsonReaderPrivate = _JsonReaderPrivate;
pub type JsonReaderClass = _JsonReaderClass;
pub const JsonReaderError_JSON_READER_ERROR_NO_ARRAY: JsonReaderError = 0;
pub const JsonReaderError_JSON_READER_ERROR_INVALID_INDEX: JsonReaderError = 1;
pub const JsonReaderError_JSON_READER_ERROR_NO_OBJECT: JsonReaderError = 2;
pub const JsonReaderError_JSON_READER_ERROR_INVALID_MEMBER: JsonReaderError = 3;
pub const JsonReaderError_JSON_READER_ERROR_INVALID_NODE: JsonReaderError = 4;
pub const JsonReaderError_JSON_READER_ERROR_NO_VALUE: JsonReaderError = 5;
pub const JsonReaderError_JSON_READER_ERROR_INVALID_TYPE: JsonReaderError = 6;
pub type JsonReaderError = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _JsonReader {
    pub parent_instance: GObject,
    pub priv_: *mut JsonReaderPrivate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _JsonReaderClass {
    pub parent_class: GObjectClass,
    pub _json_padding0: ::core::option::Option<unsafe extern "C" fn()>,
    pub _json_padding1: ::core::option::Option<unsafe extern "C" fn()>,
    pub _json_padding2: ::core::option::Option<unsafe extern "C" fn()>,
    pub _json_padding3: ::core::option::Option<unsafe extern "C" fn()>,
    pub _json_padding4: ::core::option::Option<unsafe extern "C" fn()>,
}
extern "C" {
    pub fn _frida_json_reader_error_quark() -> GQuark;
}
extern "C" {
    pub fn _frida_json_reader_get_type() -> GType;
}
extern "C" {
    pub fn _frida_json_reader_new(node: *mut JsonNode) -> *mut JsonReader;
}
extern "C" {
    pub fn _frida_json_reader_set_root(reader: *mut JsonReader, root: *mut JsonNode);
}
extern "C" {
    pub fn _frida_json_reader_get_error(reader: *mut JsonReader) -> *const GError;
}
extern "C" {
    pub fn _frida_json_reader_is_array(reader: *mut JsonReader) -> gboolean;
}
extern "C" {
    pub fn _frida_json_reader_read_element(reader: *mut JsonReader, index_: guint) -> gboolean;
}
extern "C" {
    pub fn _frida_json_reader_end_element(reader: *mut JsonReader);
}
extern "C" {
    pub fn _frida_json_reader_count_elements(reader: *mut JsonReader) -> gint;
}
extern "C" {
    pub fn _frida_json_reader_is_object(reader: *mut JsonReader) -> gboolean;
}
extern "C" {
    pub fn _frida_json_reader_read_member(
        reader: *mut JsonReader,
        member_name: *const gchar,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_json_reader_end_member(reader: *mut JsonReader);
}
extern "C" {
    pub fn _frida_json_reader_count_members(reader: *mut JsonReader) -> gint;
}
extern "C" {
    pub fn _frida_json_reader_list_members(reader: *mut JsonReader) -> *mut *mut gchar;
}
extern "C" {
    pub fn _frida_json_reader_get_member_name(reader: *mut JsonReader) -> *const gchar;
}
extern "C" {
    pub fn _frida_json_reader_is_value(reader: *mut JsonReader) -> gboolean;
}
extern "C" {
    pub fn _frida_json_reader_get_value(reader: *mut JsonReader) -> *mut JsonNode;
}
extern "C" {
    pub fn _frida_json_reader_get_int_value(reader: *mut JsonReader) -> gint64;
}
extern "C" {
    pub fn _frida_json_reader_get_double_value(reader: *mut JsonReader) -> gdouble;
}
extern "C" {
    pub fn _frida_json_reader_get_string_value(reader: *mut JsonReader) -> *const gchar;
}
extern "C" {
    pub fn _frida_json_reader_get_boolean_value(reader: *mut JsonReader) -> gboolean;
}
extern "C" {
    pub fn _frida_json_reader_get_null_value(reader: *mut JsonReader) -> gboolean;
}
extern "C" {
    pub fn _frida_json_reader_get_current_node(reader: *mut JsonReader) -> *mut JsonNode;
}
pub type JsonReader_autoptr = *mut JsonReader;
pub type JsonReader_listautoptr = *mut GList;
pub type JsonReader_slistautoptr = *mut GSList;
pub type JsonReader_queueautoptr = *mut GQueue;
extern "C" {
    pub fn _frida_json_from_string(
        str_: *const ::core::ffi::c_char,
        error: *mut *mut GError,
    ) -> *mut JsonNode;
}
extern "C" {
    pub fn _frida_json_to_string(node: *mut JsonNode, pretty: gboolean)
        -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _frida_json_parser_error_get_type() -> GType;
}
extern "C" {
    pub fn _frida_json_path_error_get_type() -> GType;
}
extern "C" {
    pub fn _frida_json_reader_error_get_type() -> GType;
}
extern "C" {
    pub fn _frida_json_node_type_get_type() -> GType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _JsonSerializable {
    _unused: [u8; 0],
}
pub type JsonSerializable = _JsonSerializable;
pub type JsonSerializableIface = _JsonSerializableIface;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _JsonSerializableIface {
    pub g_iface: GTypeInterface,
    pub serialize_property: ::core::option::Option<
        unsafe extern "C" fn(
            serializable: *mut JsonSerializable,
            property_name: *const gchar,
            value: *const GValue,
            pspec: *mut GParamSpec,
        ) -> *mut JsonNode,
    >,
    pub deserialize_property: ::core::option::Option<
        unsafe extern "C" fn(
            serializable: *mut JsonSerializable,
            property_name: *const gchar,
            value: *mut GValue,
            pspec: *mut GParamSpec,
            property_node: *mut JsonNode,
        ) -> gboolean,
    >,
    pub find_property: ::core::option::Option<
        unsafe extern "C" fn(
            serializable: *mut JsonSerializable,
            name: *const ::core::ffi::c_char,
        ) -> *mut GParamSpec,
    >,
    pub list_properties: ::core::option::Option<
        unsafe extern "C" fn(
            serializable: *mut JsonSerializable,
            n_pspecs: *mut guint,
        ) -> *mut *mut GParamSpec,
    >,
    pub set_property: ::core::option::Option<
        unsafe extern "C" fn(
            serializable: *mut JsonSerializable,
            pspec: *mut GParamSpec,
            value: *const GValue,
        ),
    >,
    pub get_property: ::core::option::Option<
        unsafe extern "C" fn(
            serializable: *mut JsonSerializable,
            pspec: *mut GParamSpec,
            value: *mut GValue,
        ),
    >,
}
extern "C" {
    pub fn _frida_json_serializable_get_type() -> GType;
}
extern "C" {
    pub fn _frida_json_serializable_serialize_property(
        serializable: *mut JsonSerializable,
        property_name: *const gchar,
        value: *const GValue,
        pspec: *mut GParamSpec,
    ) -> *mut JsonNode;
}
extern "C" {
    pub fn _frida_json_serializable_deserialize_property(
        serializable: *mut JsonSerializable,
        property_name: *const gchar,
        value: *mut GValue,
        pspec: *mut GParamSpec,
        property_node: *mut JsonNode,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_json_serializable_find_property(
        serializable: *mut JsonSerializable,
        name: *const ::core::ffi::c_char,
    ) -> *mut GParamSpec;
}
extern "C" {
    pub fn _frida_json_serializable_list_properties(
        serializable: *mut JsonSerializable,
        n_pspecs: *mut guint,
    ) -> *mut *mut GParamSpec;
}
extern "C" {
    pub fn _frida_json_serializable_set_property(
        serializable: *mut JsonSerializable,
        pspec: *mut GParamSpec,
        value: *const GValue,
    );
}
extern "C" {
    pub fn _frida_json_serializable_get_property(
        serializable: *mut JsonSerializable,
        pspec: *mut GParamSpec,
        value: *mut GValue,
    );
}
extern "C" {
    pub fn _frida_json_serializable_default_serialize_property(
        serializable: *mut JsonSerializable,
        property_name: *const gchar,
        value: *const GValue,
        pspec: *mut GParamSpec,
    ) -> *mut JsonNode;
}
extern "C" {
    pub fn _frida_json_serializable_default_deserialize_property(
        serializable: *mut JsonSerializable,
        property_name: *const gchar,
        value: *mut GValue,
        pspec: *mut GParamSpec,
        property_node: *mut JsonNode,
    ) -> gboolean;
}
pub type JsonBoxedSerializeFunc =
    ::core::option::Option<unsafe extern "C" fn(boxed: gconstpointer) -> *mut JsonNode>;
pub type JsonBoxedDeserializeFunc =
    ::core::option::Option<unsafe extern "C" fn(node: *mut JsonNode) -> gpointer>;
extern "C" {
    pub fn _frida_json_boxed_register_serialize_func(
        gboxed_type: GType,
        node_type: JsonNodeType,
        serialize_func: JsonBoxedSerializeFunc,
    );
}
extern "C" {
    pub fn _frida_json_boxed_register_deserialize_func(
        gboxed_type: GType,
        node_type: JsonNodeType,
        deserialize_func: JsonBoxedDeserializeFunc,
    );
}
extern "C" {
    pub fn _frida_json_boxed_can_serialize(
        gboxed_type: GType,
        node_type: *mut JsonNodeType,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_json_boxed_can_deserialize(
        gboxed_type: GType,
        node_type: JsonNodeType,
    ) -> gboolean;
}
extern "C" {
    pub fn _frida_json_boxed_serialize(gboxed_type: GType, boxed: gconstpointer) -> *mut JsonNode;
}
extern "C" {
    pub fn _frida_json_boxed_deserialize(gboxed_type: GType, node: *mut JsonNode) -> gpointer;
}
extern "C" {
    pub fn _frida_json_gobject_serialize(gobject: *mut GObject) -> *mut JsonNode;
}
extern "C" {
    pub fn _frida_json_gobject_deserialize(gtype: GType, node: *mut JsonNode) -> *mut GObject;
}
extern "C" {
    pub fn _frida_json_gobject_from_data(
        gtype: GType,
        data: *const gchar,
        length: gssize,
        error: *mut *mut GError,
    ) -> *mut GObject;
}
extern "C" {
    pub fn _frida_json_gobject_to_data(gobject: *mut GObject, length: *mut gsize) -> *mut gchar;
}
extern "C" {
    pub fn _frida_json_construct_gobject(
        gtype: GType,
        data: *const gchar,
        length: gsize,
        error: *mut *mut GError,
    ) -> *mut GObject;
}
extern "C" {
    pub fn _frida_json_serialize_gobject(gobject: *mut GObject, length: *mut gsize) -> *mut gchar;
}
pub type JsonSerializable_autoptr = *mut JsonSerializable;
pub type JsonSerializable_listautoptr = *mut GList;
pub type JsonSerializable_slistautoptr = *mut GSList;
pub type JsonSerializable_queueautoptr = *mut GQueue;
extern "C" {
    pub fn _frida_json_gvariant_serialize(variant: *mut GVariant) -> *mut JsonNode;
}
extern "C" {
    pub fn _frida_json_gvariant_serialize_data(
        variant: *mut GVariant,
        length: *mut gsize,
    ) -> *mut gchar;
}
extern "C" {
    pub fn _frida_json_gvariant_deserialize(
        json_node: *mut JsonNode,
        signature: *const gchar,
        error: *mut *mut GError,
    ) -> *mut GVariant;
}
extern "C" {
    pub fn _frida_json_gvariant_deserialize_data(
        json: *const gchar,
        length: gssize,
        signature: *const gchar,
        error: *mut *mut GError,
    ) -> *mut GVariant;
}
extern "C" {
    pub fn gum_script_get_type() -> GType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumScript {
    _unused: [u8; 0],
}
pub type GumScript = _GumScript;
pub type GumScriptInterface = _GumScriptInterface;
pub type GumScript_autoptr = *mut GumScript;
pub type GumScript_listautoptr = *mut GList;
pub type GumScript_slistautoptr = *mut GSList;
pub type GumScript_queueautoptr = *mut GQueue;
pub type GumScriptMessageHandler = ::core::option::Option<
    unsafe extern "C" fn(message: *const gchar, data: *mut GBytes, user_data: gpointer),
>;
pub type GumScriptDebugMessageHandler =
    ::core::option::Option<unsafe extern "C" fn(message: *const gchar, user_data: gpointer)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumScriptInterface {
    pub parent: GTypeInterface,
    pub load: ::core::option::Option<
        unsafe extern "C" fn(
            self_: *mut GumScript,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub load_finish: ::core::option::Option<
        unsafe extern "C" fn(self_: *mut GumScript, result: *mut GAsyncResult),
    >,
    pub load_sync: ::core::option::Option<
        unsafe extern "C" fn(self_: *mut GumScript, cancellable: *mut GCancellable),
    >,
    pub unload: ::core::option::Option<
        unsafe extern "C" fn(
            self_: *mut GumScript,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub unload_finish: ::core::option::Option<
        unsafe extern "C" fn(self_: *mut GumScript, result: *mut GAsyncResult),
    >,
    pub unload_sync: ::core::option::Option<
        unsafe extern "C" fn(self_: *mut GumScript, cancellable: *mut GCancellable),
    >,
    pub set_message_handler: ::core::option::Option<
        unsafe extern "C" fn(
            self_: *mut GumScript,
            handler: GumScriptMessageHandler,
            data: gpointer,
            data_destroy: GDestroyNotify,
        ),
    >,
    pub post: ::core::option::Option<
        unsafe extern "C" fn(self_: *mut GumScript, message: *const gchar, data: *mut GBytes),
    >,
    pub set_debug_message_handler: ::core::option::Option<
        unsafe extern "C" fn(
            self_: *mut GumScript,
            handler: GumScriptDebugMessageHandler,
            data: gpointer,
            data_destroy: GDestroyNotify,
        ),
    >,
    pub post_debug_message:
        ::core::option::Option<unsafe extern "C" fn(self_: *mut GumScript, message: *const gchar)>,
    pub get_stalker:
        ::core::option::Option<unsafe extern "C" fn(self_: *mut GumScript) -> *mut GumStalker>,
}
extern "C" {
    pub fn gum_script_load(
        self_: *mut GumScript,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn gum_script_load_finish(self_: *mut GumScript, result: *mut GAsyncResult);
}
extern "C" {
    pub fn gum_script_load_sync(self_: *mut GumScript, cancellable: *mut GCancellable);
}
extern "C" {
    pub fn gum_script_unload(
        self_: *mut GumScript,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn gum_script_unload_finish(self_: *mut GumScript, result: *mut GAsyncResult);
}
extern "C" {
    pub fn gum_script_unload_sync(self_: *mut GumScript, cancellable: *mut GCancellable);
}
extern "C" {
    pub fn gum_script_set_message_handler(
        self_: *mut GumScript,
        handler: GumScriptMessageHandler,
        data: gpointer,
        data_destroy: GDestroyNotify,
    );
}
extern "C" {
    pub fn gum_script_post(self_: *mut GumScript, message: *const gchar, data: *mut GBytes);
}
extern "C" {
    pub fn gum_script_set_debug_message_handler(
        self_: *mut GumScript,
        handler: GumScriptDebugMessageHandler,
        data: gpointer,
        data_destroy: GDestroyNotify,
    );
}
extern "C" {
    pub fn gum_script_post_debug_message(self_: *mut GumScript, message: *const gchar);
}
extern "C" {
    pub fn gum_script_get_stalker(self_: *mut GumScript) -> *mut GumStalker;
}
extern "C" {
    pub fn gum_script_scheduler_get_type() -> GType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumScriptScheduler {
    _unused: [u8; 0],
}
pub type GumScriptScheduler = _GumScriptScheduler;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GumScriptSchedulerClass {
    pub parent_class: GObjectClass,
}
pub type GumScriptScheduler_autoptr = *mut GumScriptScheduler;
pub type GumScriptScheduler_listautoptr = *mut GList;
pub type GumScriptScheduler_slistautoptr = *mut GSList;
pub type GumScriptScheduler_queueautoptr = *mut GQueue;
pub type GumScriptSchedulerClass_autoptr = *mut GumScriptSchedulerClass;
pub type GumScriptSchedulerClass_listautoptr = *mut GList;
pub type GumScriptSchedulerClass_slistautoptr = *mut GSList;
pub type GumScriptSchedulerClass_queueautoptr = *mut GQueue;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumScriptJob {
    _unused: [u8; 0],
}
pub type GumScriptJob = _GumScriptJob;
pub type GumScriptJobFunc = ::core::option::Option<unsafe extern "C" fn(data: gpointer)>;
extern "C" {
    pub fn gum_script_scheduler_new() -> *mut GumScriptScheduler;
}
extern "C" {
    pub fn gum_script_scheduler_enable_background_thread(self_: *mut GumScriptScheduler);
}
extern "C" {
    pub fn gum_script_scheduler_disable_background_thread(self_: *mut GumScriptScheduler);
}
extern "C" {
    pub fn gum_script_scheduler_start(self_: *mut GumScriptScheduler);
}
extern "C" {
    pub fn gum_script_scheduler_stop(self_: *mut GumScriptScheduler);
}
extern "C" {
    pub fn gum_script_scheduler_get_js_context(self_: *mut GumScriptScheduler)
        -> *mut GMainContext;
}
extern "C" {
    pub fn gum_script_scheduler_push_job_on_js_thread(
        self_: *mut GumScriptScheduler,
        priority: gint,
        func: GumScriptJobFunc,
        data: gpointer,
        data_destroy: GDestroyNotify,
    );
}
extern "C" {
    pub fn gum_script_scheduler_push_job_on_thread_pool(
        self_: *mut GumScriptScheduler,
        func: GumScriptJobFunc,
        data: gpointer,
        data_destroy: GDestroyNotify,
    );
}
extern "C" {
    pub fn gum_script_job_new(
        scheduler: *mut GumScriptScheduler,
        func: GumScriptJobFunc,
        data: gpointer,
        data_destroy: GDestroyNotify,
    ) -> *mut GumScriptJob;
}
extern "C" {
    pub fn gum_script_job_free(job: *mut GumScriptJob);
}
extern "C" {
    pub fn gum_script_job_start_on_js_thread(job: *mut GumScriptJob);
}
extern "C" {
    pub fn gum_script_backend_get_type() -> GType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumScriptBackend {
    _unused: [u8; 0],
}
pub type GumScriptBackend = _GumScriptBackend;
pub type GumScriptBackendInterface = _GumScriptBackendInterface;
pub type GumScriptBackend_autoptr = *mut GumScriptBackend;
pub type GumScriptBackend_listautoptr = *mut GList;
pub type GumScriptBackend_slistautoptr = *mut GSList;
pub type GumScriptBackend_queueautoptr = *mut GQueue;
pub type GumScriptBackendLockedFunc =
    ::core::option::Option<unsafe extern "C" fn(user_data: gpointer)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumScriptBackendInterface {
    pub parent: GTypeInterface,
    pub create: ::core::option::Option<
        unsafe extern "C" fn(
            self_: *mut GumScriptBackend,
            name: *const gchar,
            source: *const gchar,
            snapshot: *mut GBytes,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub create_finish: ::core::option::Option<
        unsafe extern "C" fn(
            self_: *mut GumScriptBackend,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> *mut GumScript,
    >,
    pub create_sync: ::core::option::Option<
        unsafe extern "C" fn(
            self_: *mut GumScriptBackend,
            name: *const gchar,
            source: *const gchar,
            snapshot: *mut GBytes,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> *mut GumScript,
    >,
    pub create_from_bytes: ::core::option::Option<
        unsafe extern "C" fn(
            self_: *mut GumScriptBackend,
            bytes: *mut GBytes,
            snapshot: *mut GBytes,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub create_from_bytes_finish: ::core::option::Option<
        unsafe extern "C" fn(
            self_: *mut GumScriptBackend,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> *mut GumScript,
    >,
    pub create_from_bytes_sync: ::core::option::Option<
        unsafe extern "C" fn(
            self_: *mut GumScriptBackend,
            bytes: *mut GBytes,
            snapshot: *mut GBytes,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> *mut GumScript,
    >,
    pub compile: ::core::option::Option<
        unsafe extern "C" fn(
            self_: *mut GumScriptBackend,
            name: *const gchar,
            source: *const gchar,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub compile_finish: ::core::option::Option<
        unsafe extern "C" fn(
            self_: *mut GumScriptBackend,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> *mut GBytes,
    >,
    pub compile_sync: ::core::option::Option<
        unsafe extern "C" fn(
            self_: *mut GumScriptBackend,
            name: *const gchar,
            source: *const gchar,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> *mut GBytes,
    >,
    pub snapshot: ::core::option::Option<
        unsafe extern "C" fn(
            self_: *mut GumScriptBackend,
            embed_script: *const gchar,
            warmup_script: *const gchar,
            cancellable: *mut GCancellable,
            callback: GAsyncReadyCallback,
            user_data: gpointer,
        ),
    >,
    pub snapshot_finish: ::core::option::Option<
        unsafe extern "C" fn(
            self_: *mut GumScriptBackend,
            result: *mut GAsyncResult,
            error: *mut *mut GError,
        ) -> *mut GBytes,
    >,
    pub snapshot_sync: ::core::option::Option<
        unsafe extern "C" fn(
            self_: *mut GumScriptBackend,
            embed_script: *const gchar,
            warmup_script: *const gchar,
            cancellable: *mut GCancellable,
            error: *mut *mut GError,
        ) -> *mut GBytes,
    >,
    pub with_lock_held: ::core::option::Option<
        unsafe extern "C" fn(
            self_: *mut GumScriptBackend,
            func: GumScriptBackendLockedFunc,
            user_data: gpointer,
        ),
    >,
    pub is_locked:
        ::core::option::Option<unsafe extern "C" fn(self_: *mut GumScriptBackend) -> gboolean>,
}
extern "C" {
    pub fn gum_script_backend_obtain() -> *mut GumScriptBackend;
}
extern "C" {
    pub fn gum_script_backend_obtain_qjs() -> *mut GumScriptBackend;
}
extern "C" {
    pub fn gum_script_backend_obtain_v8() -> *mut GumScriptBackend;
}
extern "C" {
    pub fn gum_script_backend_create(
        self_: *mut GumScriptBackend,
        name: *const gchar,
        source: *const gchar,
        snapshot: *mut GBytes,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn gum_script_backend_create_finish(
        self_: *mut GumScriptBackend,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GumScript;
}
extern "C" {
    pub fn gum_script_backend_create_sync(
        self_: *mut GumScriptBackend,
        name: *const gchar,
        source: *const gchar,
        snapshot: *mut GBytes,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GumScript;
}
extern "C" {
    pub fn gum_script_backend_create_from_bytes(
        self_: *mut GumScriptBackend,
        bytes: *mut GBytes,
        snapshot: *mut GBytes,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn gum_script_backend_create_from_bytes_finish(
        self_: *mut GumScriptBackend,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GumScript;
}
extern "C" {
    pub fn gum_script_backend_create_from_bytes_sync(
        self_: *mut GumScriptBackend,
        bytes: *mut GBytes,
        snapshot: *mut GBytes,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GumScript;
}
extern "C" {
    pub fn gum_script_backend_compile(
        self_: *mut GumScriptBackend,
        name: *const gchar,
        source: *const gchar,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn gum_script_backend_compile_finish(
        self_: *mut GumScriptBackend,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GBytes;
}
extern "C" {
    pub fn gum_script_backend_compile_sync(
        self_: *mut GumScriptBackend,
        name: *const gchar,
        source: *const gchar,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GBytes;
}
extern "C" {
    pub fn gum_script_backend_snapshot(
        self_: *mut GumScriptBackend,
        embed_script: *const gchar,
        warmup_script: *const gchar,
        cancellable: *mut GCancellable,
        callback: GAsyncReadyCallback,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn gum_script_backend_snapshot_finish(
        self_: *mut GumScriptBackend,
        result: *mut GAsyncResult,
        error: *mut *mut GError,
    ) -> *mut GBytes;
}
extern "C" {
    pub fn gum_script_backend_snapshot_sync(
        self_: *mut GumScriptBackend,
        embed_script: *const gchar,
        warmup_script: *const gchar,
        cancellable: *mut GCancellable,
        error: *mut *mut GError,
    ) -> *mut GBytes;
}
extern "C" {
    pub fn gum_script_backend_with_lock_held(
        self_: *mut GumScriptBackend,
        func: GumScriptBackendLockedFunc,
        user_data: gpointer,
    );
}
extern "C" {
    pub fn gum_script_backend_is_locked(self_: *mut GumScriptBackend) -> gboolean;
}
extern "C" {
    pub fn gum_script_backend_get_scheduler() -> *mut GumScriptScheduler;
}
extern "C" {
    pub fn gum_script_backend_extract_inline_source_map(source: *const gchar) -> *mut gchar;
}
extern "C" {
    pub fn gum_inspector_server_get_type() -> GType;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GumInspectorServer {
    _unused: [u8; 0],
}
pub type GumInspectorServer = _GumInspectorServer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GumInspectorServerClass {
    pub parent_class: GObjectClass,
}
pub type GumInspectorServer_autoptr = *mut GumInspectorServer;
pub type GumInspectorServer_listautoptr = *mut GList;
pub type GumInspectorServer_slistautoptr = *mut GSList;
pub type GumInspectorServer_queueautoptr = *mut GQueue;
pub type GumInspectorServerClass_autoptr = *mut GumInspectorServerClass;
pub type GumInspectorServerClass_listautoptr = *mut GList;
pub type GumInspectorServerClass_slistautoptr = *mut GSList;
pub type GumInspectorServerClass_queueautoptr = *mut GQueue;
extern "C" {
    pub fn gum_inspector_server_new() -> *mut GumInspectorServer;
}
extern "C" {
    pub fn gum_inspector_server_new_with_port(port: guint) -> *mut GumInspectorServer;
}
extern "C" {
    pub fn gum_inspector_server_start(
        self_: *mut GumInspectorServer,
        error: *mut *mut GError,
    ) -> gboolean;
}
extern "C" {
    pub fn gum_inspector_server_stop(self_: *mut GumInspectorServer);
}
extern "C" {
    pub fn gum_inspector_server_post_message(self_: *mut GumInspectorServer, message: *const gchar);
}
pub type __uint128_t = u128;
